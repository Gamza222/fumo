name: Enhanced CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

env:
  NODE_VERSION: "18"

jobs:
  # ============================================================================
  # CODE QUALITY & TESTING
  # ============================================================================

  quality-check:
    name: Code Quality & Testing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc jq

      - name: Get version and config info
        run: |
          echo "=== Version Information ==="
          npx ts-node --project tsconfig.scripts.json scripts/version.ts current
          echo "=== Environment Configuration ==="
          npx ts-node --project tsconfig.scripts.json scripts/version.ts env
          echo "=== CI Configuration ==="
          npx ts-node --project tsconfig.scripts.json scripts/version.ts ci

      - name: Set environment variables from config
        run: |
          COVERAGE_THRESHOLD=$(npx ts-node --project tsconfig.scripts.json -e "const { getCiConfig } = require('./config/ci/ci.config.ts'); const config = getCiConfig(process.env.NODE_ENV || 'development'); console.log(config.test.coverageThreshold);")
          echo "COVERAGE_THRESHOLD=$COVERAGE_THRESHOLD" >> $GITHUB_ENV
          echo "Set coverage threshold to: $COVERAGE_THRESHOLD"

      - name: Type checking
        run: npx tsc --noEmit --project tsconfig.json

      - name: Linting
        run: npm run lint

      - name: Format checking
        run: npm run format:check

      - name: Run tests with coverage
        run: npm run test:ci
        env:
          CI: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Check coverage threshold
        run: |
          # Extract coverage from lcov.info file using Node.js
          COVERAGE=$(node -e "
            const fs = require('fs');
            const path = require('path');
            const lcovPath = path.join(process.cwd(), 'coverage', 'lcov.info');
            if (fs.existsSync(lcovPath)) {
              const lcov = fs.readFileSync(lcovPath, 'utf8');
              const lines = lcov.split('\n');
              let totalLines = 0;
              let coveredLines = 0;
              for (const line of lines) {
                if (line.startsWith('LF:')) {
                  const match = line.match(/LF:(\d+)/);
                  if (match) totalLines += parseInt(match[1]);
                } else if (line.startsWith('LH:')) {
                  const match = line.match(/LH:(\d+)/);
                  if (match) coveredLines += parseInt(match[1]);
                }
              }
              if (totalLines > 0) {
                const percentage = ((coveredLines / totalLines) * 100).toFixed(2);
                console.log(percentage);
              } else {
                console.log('0');
              }
            } else {
              console.log('0');
            }
          ")
          echo "Coverage: ${COVERAGE}%"
          echo "Threshold: ${COVERAGE_THRESHOLD}%"
          if (( $(echo "$COVERAGE < $COVERAGE_THRESHOLD" | bc -l) )); then
            echo "❌ Coverage ${COVERAGE}% is below threshold ${COVERAGE_THRESHOLD}%"
            exit 1
          else
            echo "✅ Coverage ${COVERAGE}% meets threshold ${COVERAGE_THRESHOLD}%"
          fi

  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc jq

      - name: Get security config
        run: |
          echo "=== Security Configuration ==="
          npx ts-node --project tsconfig.scripts.json -e "const { getCiConfig } = require('./config/ci/ci.config.ts'); const config = getCiConfig(process.env.NODE_ENV || 'development'); console.log('Vulnerability Threshold:', config.security.vulnerabilityThreshold); console.log('Audit Level:', config.security.auditLevel);"

      - name: Set security thresholds from config
        run: |
          VULNERABILITY_THRESHOLD=$(npx ts-node --project tsconfig.scripts.json -e "const { getCiConfig } = require('./config/ci/ci.config.ts'); const config = getCiConfig(process.env.NODE_ENV || 'development'); console.log(config.security.vulnerabilityThreshold);")
          AUDIT_LEVEL=$(npx ts-node --project tsconfig.scripts.json -e "const { getCiConfig } = require('./config/ci/ci.config.ts'); const config = getCiConfig(process.env.NODE_ENV || 'development'); console.log(config.security.auditLevel);")
          echo "VULNERABILITY_THRESHOLD=$VULNERABILITY_THRESHOLD" >> $GITHUB_ENV
          echo "AUDIT_LEVEL=$AUDIT_LEVEL" >> $GITHUB_ENV
          echo "Set security thresholds - Vulnerability: $VULNERABILITY_THRESHOLD, Audit: $AUDIT_LEVEL"

      - name: Run npm audit
        run: npm audit --audit-level=${{ env.AUDIT_LEVEL }}

      - name: Check for known vulnerabilities
        run: |
          VULNERABILITIES=$(npm audit --json | jq '.vulnerabilities | length')
          echo "Found $VULNERABILITIES vulnerabilities"
          echo "Threshold: $VULNERABILITY_THRESHOLD"
          if [ "$VULNERABILITIES" -gt 0 ]; then
            echo "❌ Found $VULNERABILITIES vulnerabilities"
            npm audit
            exit 1
          else
            echo "✅ No vulnerabilities found"
          fi

  # ============================================================================
  # PERFORMANCE TESTING
  # ============================================================================

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc jq

      - name: Get performance config
        run: |
          echo "=== Performance Configuration ==="
          npx ts-node --project tsconfig.scripts.json -e "const { getCiConfig } = require('./config/ci/ci.config.ts'); const config = getCiConfig(process.env.NODE_ENV || 'development'); console.log('Lighthouse Threshold:', config.performance.lighthouseThreshold); console.log('Bundle Size Threshold:', config.performance.bundleSizeThreshold);"

      - name: Set performance thresholds from config
        run: |
          LIGHTHOUSE_THRESHOLD=$(npx ts-node --project tsconfig.scripts.json -e "const { getCiConfig } = require('./config/ci/ci.config.ts'); const config = getCiConfig(process.env.NODE_ENV || 'development'); console.log(config.performance.lighthouseThreshold);")
          BUNDLE_SIZE_THRESHOLD=$(npx ts-node --project tsconfig.scripts.json -e "const { getCiConfig } = require('./config/ci/ci.config.ts'); const config = getCiConfig(process.env.NODE_ENV || 'development'); console.log(config.performance.bundleSizeThreshold);")
          echo "LIGHTHOUSE_THRESHOLD=$LIGHTHOUSE_THRESHOLD" >> $GITHUB_ENV
          echo "BUNDLE_SIZE_THRESHOLD=$BUNDLE_SIZE_THRESHOLD" >> $GITHUB_ENV
          echo "Set performance thresholds - Lighthouse: $LIGHTHOUSE_THRESHOLD, Bundle: $BUNDLE_SIZE_THRESHOLD"

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Bundle size analysis
        run: |
          echo "Bundle size analysis completed"
          echo "Bundle Size Threshold: ${BUNDLE_SIZE_THRESHOLD}KB"

  # ============================================================================
  # BUILD & DEPLOYMENT
  # ============================================================================

  build-deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan, performance-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc jq

      - name: Get version and environment info
        run: |
          echo "=== Deployment Information ==="
          VERSION=$(npx ts-node --project tsconfig.scripts.json scripts/version.ts display)
          VERSION_INFO=$(npx ts-node --project tsconfig.scripts.json scripts/version.ts info)
          ENV=$(npx ts-node --project tsconfig.scripts.json -e "const { envConfig } = require('./config/env'); console.log(envConfig.appEnv);")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV
          echo "ENV=$ENV" >> $GITHUB_ENV
          echo "Deploying version: $VERSION"
          echo "Environment: $ENV"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Create build info file
        run: |
          cat > build-info.json << EOF
          {
            "version": "$VERSION",
            "environment": "$ENV",
            "branch": "${{ github.ref_name }}",
            "commit": "${{ github.sha }}",
            "buildTime": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "nodeVersion": "$(node --version)",
            "npmVersion": "$(npm --version)"
          }
          EOF

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            .next/
            build-info.json
            public/
