{"file":"/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/security/auth.mock.ts","mappings":";AAAA;;;;;GAKG;;;;;;;;;;;;;;AAQH,yBAAyB;AACzB,IAAM,eAAe,GAAsB;IACzC,EAAE,EAAE,GAAG;IACP,KAAK,EAAE,kBAAkB;IACzB,QAAQ,EAAE,UAAU;IACpB,IAAI,EAAE,MAAM;IACZ,QAAQ,EAAE,IAAI;IACd,WAAW,EAAE,EAAE;IACf,SAAS,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC;IACjC,SAAS,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC;CAClC,CAAC;AAEF,2BAA2B;AAC3B,IAAM,sBAAsB,GAAkC;IAC5D,KAAK,EAAE,kBAAkB;IACzB,QAAQ,EAAE,aAAa;CACxB,CAAC;AAEF;;;;;GAKG;AACI,IAAM,eAAe,GAAG,UAC7B,UAAkD;IAAlD,2BAAA,EAAA,eAAkD;IAElD,IAAM,WAAW,cACf,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;YACpC,IAAI,EAAE,eAAe;YACrB,KAAK,EAAE,gBAAgB;SACxB,CAAC,EACF,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;YACjC,IAAI,EAAE,eAAe;YACrB,KAAK,EAAE,gBAAgB;SACxB,CAAC,EACF,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,eAAe,CAAC,EACzD,iBAAiB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,EAAE,CAAC,IAC7C,UAAU,CACd,CAAC;IAEF,OAAO,WAAW,CAAC;AACrB,CAAC,CAAC;AAlBW,QAAA,eAAe,mBAkB1B;AAEF;;;;;GAKG;AACI,IAAM,QAAQ,GAAG,UAAC,UAA2C;IAA3C,2BAAA,EAAA,eAA2C;IAClE,6BACK,eAAe,GACf,UAAU,EACb;AACJ,CAAC,CAAC;AALW,QAAA,QAAQ,YAKnB;AAEF;;;;;GAKG;AACI,IAAM,oBAAoB,GAAG,UAClC,UAAuD;IAAvD,2BAAA,EAAA,eAAuD;IAEvD,6BACK,sBAAsB,GACtB,UAAU,EACb;AACJ,CAAC,CAAC;AAPW,QAAA,oBAAoB,wBAO/B;AAEF,yBAAyB;AACZ,QAAA,sBAAsB,GAAG,IAAA,uBAAe,GAAE,CAAC;AAC3C,QAAA,eAAe,GAAG,IAAA,gBAAQ,GAAE,CAAC;AAC7B,QAAA,sBAAsB,GAAG,IAAA,4BAAoB,GAAE,CAAC","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/security/auth.mock.ts"],"sourcesContent":["/**\n * Auth Service Mock for Testing\n *\n * Provides mock implementations for authentication service testing.\n * Simulates user registration, login, and token verification.\n */\n\nimport {\n  mockAuthServiceInterface,\n  mockLoginCredentialsInterface,\n  mockUserInterface,\n} from '../../types/types';\n\n// Default mock user data\nconst defaultMockUser: mockUserInterface = {\n  id: '1',\n  email: 'test@example.com',\n  username: 'testuser',\n  role: 'USER',\n  isActive: true,\n  permissions: [],\n  createdAt: new Date('2023-01-01'),\n  updatedAt: new Date('2023-01-01'),\n};\n\n// Default mock credentials\nconst defaultMockCredentials: mockLoginCredentialsInterface = {\n  email: 'test@example.com',\n  password: 'password123',\n};\n\n/**\n * Creates a mock auth service for testing\n *\n * @param customData - Optional custom mock data to override defaults\n * @returns A mock auth service object\n */\nexport const mockAuthService = (\n  customData: Partial<mockAuthServiceInterface> = {}\n): mockAuthServiceInterface => {\n  const mockService: mockAuthServiceInterface = {\n    register: jest.fn().mockResolvedValue({\n      user: defaultMockUser,\n      token: 'mock-jwt-token',\n    }),\n    login: jest.fn().mockResolvedValue({\n      user: defaultMockUser,\n      token: 'mock-jwt-token',\n    }),\n    verifyToken: jest.fn().mockResolvedValue(defaultMockUser),\n    getSecurityEvents: jest.fn().mockReturnValue([]),\n    ...customData,\n  };\n\n  return mockService;\n};\n\n/**\n * Creates a mock user for testing\n *\n * @param customData - Optional custom user data to override defaults\n * @returns A mock user object\n */\nexport const mockUser = (customData: Partial<mockUserInterface> = {}): mockUserInterface => {\n  return {\n    ...defaultMockUser,\n    ...customData,\n  };\n};\n\n/**\n * Creates mock login credentials for testing\n *\n * @param customData - Optional custom credentials to override defaults\n * @returns Mock login credentials\n */\nexport const mockLoginCredentials = (\n  customData: Partial<mockLoginCredentialsInterface> = {}\n): mockLoginCredentialsInterface => {\n  return {\n    ...defaultMockCredentials,\n    ...customData,\n  };\n};\n\n// Default mock instances\nexport const defaultAuthServiceMock = mockAuthService();\nexport const defaultUserMock = mockUser();\nexport const defaultCredentialsMock = mockLoginCredentials();\n"],"version":3}