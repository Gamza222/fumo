0a85648b89c5766dd789fdcb986df470
"use strict";
/**
 * Security Headers Middleware
 *
 * Middleware for setting security headers in Next.js applications.
 * Universal security headers middleware for enterprise applications.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.applySecurityHeaders = applySecurityHeaders;
exports.generateNonce = generateNonce;
exports.updateCSPWithNonce = updateCSPWithNonce;
exports.reportCSPViolation = reportCSPViolation;
exports.isSuspiciousRequest = isSuspiciousRequest;
exports.securityMiddleware = securityMiddleware;
exports.corsMiddleware = corsMiddleware;
var server_1 = require("next/server");
var security_config_1 = require("../security-config");
// ============================================================================
// SECURITY HEADERS MIDDLEWARE
// ============================================================================
/**
 * Apply security headers to response
 */
function applySecurityHeaders(response) {
    var headers = security_config_1.securityConfig.headers;
    // Apply all security headers
    Object.entries(headers).forEach(function (_a) {
        var key = _a[0], value = _a[1];
        if (value) {
            response.headers.set(key, value);
        }
    });
    return response;
}
/**
 * Generate CSP nonce for inline scripts/styles
 */
function generateNonce() {
    var array = new Uint8Array(16);
    crypto.getRandomValues(array);
    return Array.from(array, function (byte) { return byte.toString(16).padStart(2, '0'); }).join('');
}
/**
 * Update CSP with nonce
 */
function updateCSPWithNonce(nonce) {
    var baseCSP = security_config_1.securityConfig.headers['Content-Security-Policy'];
    if (!baseCSP) {
        return '';
    }
    // Add nonce to script-src and style-src
    return baseCSP
        .replace("script-src 'self'", "script-src 'self' 'nonce-".concat(nonce, "'"))
        .replace("style-src 'self'", "style-src 'self' 'nonce-".concat(nonce, "'"));
}
/**
 * Report CSP violations
 */
function reportCSPViolation(violation) {
    // 1. Log the violation
    console.error('CSP Violation:', violation);
    // 2. Log it to your security monitoring system
    // eslint-disable-next-line no-console
    console.log('CSP Violation Report:', {
        timestamp: new Date().toISOString(),
        blockedURI: violation === null || violation === void 0 ? void 0 : violation.blockedURI,
        documentURI: violation === null || violation === void 0 ? void 0 : violation.documentURI,
        violatedDirective: violation === null || violation === void 0 ? void 0 : violation.violatedDirective,
        effectiveDirective: violation === null || violation === void 0 ? void 0 : violation.effectiveDirective,
        originalPolicy: violation === null || violation === void 0 ? void 0 : violation.originalPolicy,
        referrer: violation === null || violation === void 0 ? void 0 : violation.referrer,
        sourceFile: violation === null || violation === void 0 ? void 0 : violation.sourceFile,
        lineNumber: violation === null || violation === void 0 ? void 0 : violation.lineNumber,
        columnNumber: violation === null || violation === void 0 ? void 0 : violation.columnNumber,
    });
    // 3. Send alerts for critical violations (in production)
}
/**
 * Check if request is suspicious
 */
function isSuspiciousRequest(request) {
    var userAgent = request.headers.get('user-agent') || '';
    var origin = request.headers.get('origin') || '';
    var referer = request.headers.get('referer') || '';
    // Block requests with suspicious user agents
    var suspiciousUserAgents = ['sqlmap', 'nikto', 'nmap', 'masscan', 'zap', 'burp'];
    var isSuspiciousUA = suspiciousUserAgents.some(function (ua) {
        return userAgent.toLowerCase().includes(ua.toLowerCase());
    });
    if (isSuspiciousUA) {
        return true;
    }
    // Block requests from suspicious origins
    var suspiciousOrigins = ['localhost:8080', '127.0.0.1:8080', '0.0.0.0:8080'];
    var isSuspiciousOrigin = suspiciousOrigins.some(function (susOrigin) { return origin.includes(susOrigin) || referer.includes(susOrigin); });
    return isSuspiciousOrigin;
}
/**
 * Main security middleware
 */
function securityMiddleware(request) {
    // Check for suspicious requests
    if (isSuspiciousRequest(request)) {
        return new server_1.NextResponse('Forbidden', { status: 403 });
    }
    // Create response
    var response = server_1.NextResponse.next();
    // Apply security headers
    return applySecurityHeaders(response);
}
/**
 * CORS middleware
 */
function corsMiddleware(request) {
    var origin = request.headers.get('origin');
    var method = request.headers.get('access-control-request-method');
    var headers = request.headers.get('access-control-request-headers');
    // Handle preflight requests
    if (request.method === 'OPTIONS') {
        var response_1 = new server_1.NextResponse(null, { status: 200 });
        if (origin && security_config_1.securityConfig.cors.origin.includes(origin)) {
            response_1.headers.set('Access-Control-Allow-Origin', origin);
        }
        if (method) {
            response_1.headers.set('Access-Control-Allow-Methods', method);
        }
        if (headers) {
            response_1.headers.set('Access-Control-Allow-Headers', headers);
        }
        response_1.headers.set('Access-Control-Max-Age', '86400');
        return response_1;
    }
    // Handle actual requests
    var response = server_1.NextResponse.next();
    if (origin && security_config_1.securityConfig.cors.origin.includes(origin)) {
        response.headers.set('Access-Control-Allow-Origin', origin);
    }
    response.headers.set('Access-Control-Allow-Credentials', 'true');
    response.headers.set('Access-Control-Allow-Methods', security_config_1.securityConfig.cors.methods.join(', '));
    response.headers.set('Access-Control-Allow-Headers', security_config_1.securityConfig.cors.allowedHeaders.join(', '));
    response.headers.set('Access-Control-Expose-Headers', security_config_1.securityConfig.cors.exposedHeaders.join(', '));
    response.headers.set('Access-Control-Max-Age', security_config_1.securityConfig.cors.maxAge.toString());
    return response;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,