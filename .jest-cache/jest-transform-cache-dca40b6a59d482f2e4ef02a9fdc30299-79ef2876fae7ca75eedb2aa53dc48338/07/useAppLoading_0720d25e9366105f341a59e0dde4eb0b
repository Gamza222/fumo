fc3867e7fa29095d82a36d9e1bbbc028
"use strict";
/**
 * useAppLoading Hook
 *
 * Manages initial app loading state and progress.
 * Checks multiple conditions in priority order.
 * Provides smooth loading experience with progress tracking.
 */
"use client";
/**
 * useAppLoading Hook
 *
 * Manages initial app loading state and progress.
 * Checks multiple conditions in priority order.
 * Provides smooth loading experience with progress tracking.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAppLoading = useAppLoading;
var react_1 = require("react");
var enums_1 = require("../../model/enums/enums");
var constants_1 = require("../../model/constants/constants");
// ============================================================================
// CONDITION CHECKS (Single Responsibility - Each checks one thing)
// ============================================================================
// Check if DOM is fully loaded
var checkDOMReady = function () { return document.readyState === constants_1.DOCUMENT_COMPLETE; };
// Check if critical CSS files are loaded (with fallback for no critical CSS)
var checkCriticalCSS = function () {
    var criticalSheets = document.querySelectorAll(constants_1.SELECTORS.CRITICAL_CSS);
    return (criticalSheets.length === 0 ||
        Array.from(criticalSheets).every(function (sheet) { return sheet.sheet !== null; }));
};
// Check if theme is applied to document
var checkThemeInitialized = function () {
    return (document.documentElement.hasAttribute(constants_1.SELECTORS.THEME_ATTRIBUTE) ||
        document.body.classList.contains(constants_1.SELECTORS.THEME_CLASS) ||
        document.documentElement.classList.contains(constants_1.SELECTORS.THEME_APPLIED_CLASS));
};
// Check if core JavaScript is ready
var checkCoreJavaScript = function () {
    return (typeof window !== "undefined" && document.readyState === constants_1.DOCUMENT_COMPLETE);
};
// Wait for minimum display time (ensures smooth UX even on fast loads)
var checkMinimumDisplayTime = function () {
    return new Promise(function (resolve) {
        var startTime = performance.now();
        var checkTime = function () {
            if (performance.now() - startTime >= constants_1.MINIMUM_DISPLAY_TIME) {
                resolve(true);
            }
            else {
                setTimeout(checkTime, constants_1.CHECK_INTERVAL);
            }
        };
        checkTime();
    });
};
// ============================================================================
// CONDITIONS CONFIGURATION (Open/Closed - Easy to extend)
// ============================================================================
// Creates array of loading conditions with proper configuration
var createLoadingConditions = function () { return [
    {
        id: enums_1.AppLoadingConditionId.DOM_READY,
        name: enums_1.AppLoadingConditionName.PREPARING_APPLICATION,
        priority: constants_1.PRIORITIES[enums_1.AppLoadingConditionId.DOM_READY],
        check: checkDOMReady,
        timeout: constants_1.TIMEOUTS[enums_1.AppLoadingConditionId.DOM_READY],
    },
    {
        id: enums_1.AppLoadingConditionId.CRITICAL_CSS,
        name: enums_1.AppLoadingConditionName.LOADING_STYLES,
        priority: constants_1.PRIORITIES[enums_1.AppLoadingConditionId.CRITICAL_CSS],
        check: checkCriticalCSS,
        timeout: constants_1.TIMEOUTS[enums_1.AppLoadingConditionId.CRITICAL_CSS],
    },
    {
        id: enums_1.AppLoadingConditionId.THEME_INITIALIZED,
        name: enums_1.AppLoadingConditionName.APPLYING_THEME,
        priority: constants_1.PRIORITIES[enums_1.AppLoadingConditionId.THEME_INITIALIZED],
        check: checkThemeInitialized,
        timeout: constants_1.TIMEOUTS[enums_1.AppLoadingConditionId.THEME_INITIALIZED],
    },
    {
        id: enums_1.AppLoadingConditionId.CORE_JAVASCRIPT,
        name: enums_1.AppLoadingConditionName.LOADING_CORE_FEATURES,
        priority: constants_1.PRIORITIES[enums_1.AppLoadingConditionId.CORE_JAVASCRIPT],
        check: checkCoreJavaScript,
        timeout: constants_1.TIMEOUTS[enums_1.AppLoadingConditionId.CORE_JAVASCRIPT],
    },
    {
        id: enums_1.AppLoadingConditionId.MINIMUM_DISPLAY_TIME,
        name: enums_1.AppLoadingConditionName.FINALIZING_SETUP,
        priority: constants_1.PRIORITIES[enums_1.AppLoadingConditionId.MINIMUM_DISPLAY_TIME],
        check: checkMinimumDisplayTime,
        timeout: constants_1.TIMEOUTS[enums_1.AppLoadingConditionId.MINIMUM_DISPLAY_TIME],
    },
]; };
// ============================================================================
// MAIN HOOK (Orchestrates everything)
// ============================================================================
function useAppLoading() {
    var _this = this;
    // Loading state: tracks progress, current step, and completion status
    var _a = (0, react_1.useState)({
        isInitialLoading: true,
        progress: 0,
        currentStep: "",
        steps: [],
        isSuspenseLoading: false,
    }), state = _a[0], setState = _a[1];
    // Memoize conditions to prevent recreation on every render (performance)
    var loadingConditions = (0, react_1.useMemo)(function () { return createLoadingConditions(); }, []);
    // Main loading logic: checks all conditions in sequence
    var checkLoadingSteps = (0, react_1.useCallback)(function () { return __awaiter(_this, void 0, void 0, function () {
        var stepsWithStatus, checkPromises, results, allCompleted;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    stepsWithStatus = loadingConditions.map(function (condition) { return ({
                        id: condition.id,
                        name: condition.name,
                        completed: false,
                        priority: condition.priority || enums_1.AppLoadingPriority.LOWEST,
                    }); });
                    setState(function (prev) { return (__assign(__assign({}, prev), { steps: stepsWithStatus })); });
                    checkPromises = loadingConditions.map(function (condition, index) { return __awaiter(_this, void 0, void 0, function () {
                        var result_1, error_1;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    // Update progress and current step
                                    setState(function (prev) { return (__assign(__assign({}, prev), { currentStep: condition.name, progress: (index / loadingConditions.length) * 100 })); });
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 3, , 4]);
                                    return [4 /*yield*/, Promise.race([
                                            Promise.resolve(condition.check()),
                                            new Promise(function (_, reject) {
                                                return setTimeout(function () { return reject(new Error("Timeout")); }, condition.timeout || constants_1.DEFAULT_TIMEOUT);
                                            }),
                                        ])];
                                case 2:
                                    result_1 = _a.sent();
                                    // Update step completion and progress
                                    setState(function (prev) { return (__assign(__assign({}, prev), { steps: prev.steps.map(function (step) {
                                            return step.id === condition.id ? __assign(__assign({}, step), { completed: result_1 }) : step;
                                        }), progress: ((index + 1) / loadingConditions.length) * 100 })); });
                                    return [2 /*return*/, result_1];
                                case 3:
                                    error_1 = _a.sent();
                                    // Graceful degradation: mark as completed on error
                                    console.warn("Loading condition \"".concat(condition.name, "\" failed:"), error_1);
                                    setState(function (prev) { return (__assign(__assign({}, prev), { steps: prev.steps.map(function (step) {
                                            return step.id === condition.id ? __assign(__assign({}, step), { completed: true }) : step;
                                        }), progress: ((index + 1) / loadingConditions.length) * 100 })); });
                                    return [2 /*return*/, true];
                                case 4: return [2 /*return*/];
                            }
                        });
                    }); });
                    return [4 /*yield*/, Promise.all(checkPromises)];
                case 1:
                    results = _a.sent();
                    allCompleted = results.every(function (result) { return result; });
                    if (!allCompleted) return [3 /*break*/, 3];
                    return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, constants_1.FADE_OUT_DELAY); })];
                case 2:
                    _a.sent();
                    setState(function (prev) { return (__assign(__assign({}, prev), { isInitialLoading: false, progress: 100, currentStep: "Ready" })); });
                    _a.label = 3;
                case 3: return [2 /*return*/];
            }
        });
    }); }, [loadingConditions]);
    // Start loading sequence on mount
    (0, react_1.useEffect)(function () {
        checkLoadingSteps();
    }, [checkLoadingSteps]);
    // Force complete loading (emergency override)
    var forceComplete = (0, react_1.useCallback)(function () {
        setState(function (prev) { return (__assign(__assign({}, prev), { isInitialLoading: false, progress: 100, currentStep: "Ready" })); });
    }, []);
    // Restart loading sequence
    var restart = (0, react_1.useCallback)(function () {
        setState({
            isInitialLoading: true,
            progress: 0,
            currentStep: "",
            steps: [],
            isSuspenseLoading: false,
        });
        checkLoadingSteps();
    }, [checkLoadingSteps]);
    // Set Suspense loading state
    var setSuspenseLoading = (0, react_1.useCallback)(function (loading) {
        setState(function (prev) { return (__assign(__assign({}, prev), { isSuspenseLoading: loading })); });
    }, []);
    // Computed property: overall loading state
    var isOverallLoading = state.isInitialLoading || state.isSuspenseLoading;
    return __assign(__assign({}, state), { isOverallLoading: isOverallLoading, forceComplete: forceComplete, restart: restart, setSuspenseLoading: setSuspenseLoading });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,