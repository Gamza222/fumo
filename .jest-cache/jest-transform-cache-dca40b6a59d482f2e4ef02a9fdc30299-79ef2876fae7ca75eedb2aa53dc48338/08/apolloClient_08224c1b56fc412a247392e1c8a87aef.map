{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/data/apollo/apolloClient.ts","mappings":";AAAA;;;;;GAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,yCAA6E;AAE7E,+EAA+E;AAC/E,4BAA4B;AAC5B,+EAA+E;AAE/E,+CAA+C;AAC/C,8CAAmD;AAEnD,IAAM,gBAAgB,GAAG,eAAS,CAAC,UAAU,CAAC;AAE9C,+EAA+E;AAC/E,sBAAsB;AACtB,+EAA+E;AAE/E;;GAEG;AACH,IAAM,KAAK,GAAG,IAAI,sBAAa,CAAC;IAC9B,YAAY,EAAE;QACZ,KAAK,EAAE;YACL,MAAM,EAAE;gBACN,qDAAqD;gBACrD,UAAU,EAAE;oBACV,IAAI,YAAC,QAA4B;wBAC/B,OAAO,QAAQ,IAAI,OAAO,CAAC;oBAC7B,CAAC;iBACF;aACF;SACF;KACF;CACF,CAAC,CAAC;AAEH,+EAA+E;AAC/E,YAAY;AACZ,+EAA+E;AAE/E;;GAEG;AACH,IAAM,QAAQ,GAAG,IAAA,uBAAc,EAAC;IAC9B,GAAG,EAAE,gBAAgB;IACrB,WAAW,EAAE,aAAa;CAC3B,CAAC,CAAC;AAEH,+EAA+E;AAC/E,8BAA8B;AAC9B,+EAA+E;AAE/E;;GAEG;AACU,QAAA,YAAY,GAAG,IAAI,qBAAY,CAAC;IAC3C,IAAI,EAAE,QAAQ;IACd,KAAK,OAAA;IACL,cAAc,EAAE;QACd,UAAU,EAAE;YACV,WAAW,EAAE,KAAK;YAClB,WAAW,EAAE,aAAa;SAC3B;QACD,KAAK,EAAE;YACL,WAAW,EAAE,KAAK;YAClB,WAAW,EAAE,aAAa;SAC3B;QACD,MAAM,EAAE;YACN,WAAW,EAAE,KAAK;SACnB;KACF;CACF,CAAC,CAAC;AAkCsB,kBAlDZ,oBAAY,CAkDO;AAhChC,+EAA+E;AAC/E,oBAAoB;AACpB,+EAA+E;AAE/E;;GAEG;AACI,IAAM,gBAAgB,GAAG,+CAAU,OAAO;;;oBAC/C,qBAAM,oBAAY,CAAC,UAAU,EAAE,EAAA;;gBAA/B,SAA+B,CAAC;;;;KACjC,CAAC;AAFW,QAAA,gBAAgB,oBAE3B;AAEF;;GAEG;AACI,IAAM,oBAAoB,GAAG,+CAAU,OAAO;;;oBACnD,qBAAM,oBAAY,CAAC,cAAc,CAAC;oBAChC,OAAO,EAAE,QAAQ;iBAClB,CAAC,EAAA;;gBAFF,SAEE,CAAC;;;;KACJ,CAAC;AAJW,QAAA,oBAAoB,wBAI/B;AAEF;;GAEG;AACI,IAAM,gBAAgB,GAAG,+CAAU,OAAO;;;oBAC/C,qBAAM,oBAAY,CAAC,UAAU,EAAE,EAAA;;gBAA/B,SAA+B,CAAC;;;;KACjC,CAAC;AAFW,QAAA,gBAAgB,oBAE3B","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/data/apollo/apolloClient.ts"],"sourcesContent":["/**\n * Apollo GraphQL Client Configuration\n *\n * Universal GraphQL client foundation that can be used by any enterprise application.\n * Simplified version for initial foundation - can be enhanced later.\n */\n\nimport { ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client';\n\n// ============================================================================\n// ENVIRONMENT CONFIGURATION\n// ============================================================================\n\n// Import centralized environment configuration\nimport { envConfig } from '../../../../config/env';\n\nconst GRAPHQL_ENDPOINT = envConfig.graphqlUrl;\n\n// ============================================================================\n// CACHE CONFIGURATION\n// ============================================================================\n\n/**\n * Universal cache configuration suitable for any GraphQL application\n */\nconst cache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        // Generic pagination support for any paginated field\n        __typename: {\n          read(existing: string | undefined): string {\n            return existing || 'Query';\n          },\n        },\n      },\n    },\n  },\n});\n\n// ============================================================================\n// HTTP LINK\n// ============================================================================\n\n/**\n * Universal HTTP link configuration\n */\nconst httpLink = createHttpLink({\n  uri: GRAPHQL_ENDPOINT,\n  credentials: 'same-origin',\n});\n\n// ============================================================================\n// APOLLO CLIENT CONFIGURATION\n// ============================================================================\n\n/**\n * Universal Apollo Client configuration suitable for any enterprise application\n */\nexport const apolloClient = new ApolloClient({\n  link: httpLink,\n  cache,\n  defaultOptions: {\n    watchQuery: {\n      errorPolicy: 'all',\n      fetchPolicy: 'cache-first',\n    },\n    query: {\n      errorPolicy: 'all',\n      fetchPolicy: 'cache-first',\n    },\n    mutate: {\n      errorPolicy: 'all',\n    },\n  },\n});\n\n// ============================================================================\n// UTILITY FUNCTIONS\n// ============================================================================\n\n/**\n * Clear Apollo cache - useful for logout or data refresh scenarios\n */\nexport const clearApolloCache = async (): Promise<void> => {\n  await apolloClient.clearStore();\n};\n\n/**\n * Refetch all active queries - useful for data refresh scenarios\n */\nexport const refetchActiveQueries = async (): Promise<void> => {\n  await apolloClient.refetchQueries({\n    include: 'active',\n  });\n};\n\n/**\n * Reset Apollo store completely - useful for user switching scenarios\n */\nexport const resetApolloStore = async (): Promise<void> => {\n  await apolloClient.resetStore();\n};\n\n// ============================================================================\n// TYPE EXPORTS\n// ============================================================================\n\nexport type { ApolloClient } from '@apollo/client';\nexport { apolloClient as default };\n"],"version":3}