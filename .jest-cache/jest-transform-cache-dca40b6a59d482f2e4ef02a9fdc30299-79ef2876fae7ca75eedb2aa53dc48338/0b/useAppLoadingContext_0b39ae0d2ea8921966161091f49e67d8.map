{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/providers/app-loading/hooks/useAppLoadingContext/useAppLoadingContext.ts","mappings":";AAAA;;;;GAIG;AAEH,YAAY,CAAC;AANb;;;;GAIG;;AAwBH,oDAYC;AAhCD,+BAAmC;AACnC,kEAAgE;AAGhE,+EAA+E;AAC/E,6BAA6B;AAC7B,+EAA+E;AAE/E;;;;;;;;;;;GAWG;AACH,SAAgB,oBAAoB;IAClC,4BAA4B;IAC5B,IAAM,OAAO,GAAG,IAAA,kBAAU,EAAC,sCAAiB,CAAC,CAAC;IAE9C,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,KAAK,CACb,kEAAkE;YAChE,gEAAgE,CACnE,CAAC;IACJ,CAAC;IAED,OAAO,OAAO,CAAC;AACjB,CAAC","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/providers/app-loading/hooks/useAppLoadingContext/useAppLoadingContext.ts"],"sourcesContent":["/**\n * useAppLoadingContext Hook\n *\n * Hook for consuming AppLoading context safely.\n */\n\n'use client';\n\nimport { useContext } from 'react';\nimport { AppLoadingContext } from '../../ui/AppLoadingProvider';\nimport { UseAppLoadingReturn } from '../../model/types/types';\n\n// ============================================================================\n// CONTEXT HOOK (Logic Layer)\n// ============================================================================\n\n/**\n * useAppLoadingContext - Hook to access loading state from context\n *\n * This hook handles context consumption logic with proper error handling.\n * Memoized for performance optimization.\n *\n * Usage:\n * const { isInitialLoading, progress, forceComplete } = useAppLoadingContext();\n *\n * @throws Error if used outside of AppLoadingProvider\n * @returns AppLoadingContextType - Loading state and methods\n */\nexport function useAppLoadingContext(): UseAppLoadingReturn {\n  // Get context from provider\n  const context = useContext(AppLoadingContext);\n\n  if (!context) {\n    throw new Error(\n      'useAppLoadingContext must be used within an AppLoadingProvider. ' +\n        'Make sure your component is wrapped with <AppLoadingProvider>.'\n    );\n  }\n\n  return context;\n}\n"],"version":3}