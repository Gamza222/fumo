2029e067fe3bee5e1fb1adbb90a67c1f
"use strict";
/**
 * API Mock Utilities
 *
 * Common API-related mocks for testing HTTP responses,
 * middleware, and API interactions.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMockFetch = exports.createMockApiError = exports.createMockRequest = exports.createMockNextResponse = exports.createMockResponse = void 0;
/**
 * Creates a mock HTTP response object
 */
var createMockResponse = function (overrides) {
    var _a;
    if (overrides === void 0) { overrides = {}; }
    return (__assign({ headers: (_a = {
                set: jest.fn(),
                get: jest.fn(),
                has: jest.fn(),
                delete: jest.fn(),
                clear: jest.fn(),
                forEach: jest.fn(),
                entries: jest.fn(),
                keys: jest.fn(),
                values: jest.fn()
            },
            _a[Symbol.iterator] = jest.fn(),
            _a), status: 200, statusText: 'OK', ok: true, url: 'http://localhost:3000/api/test', redirected: false, type: 'basic', body: null, bodyUsed: false, arrayBuffer: jest.fn(), blob: jest.fn(), formData: jest.fn(), json: jest.fn(), text: jest.fn(), clone: jest.fn() }, overrides));
};
exports.createMockResponse = createMockResponse;
/**
 * Creates a mock Next.js response object
 */
var createMockNextResponse = function (overrides) {
    var _a;
    if (overrides === void 0) { overrides = {}; }
    return (__assign({ headers: (_a = {
                set: jest.fn(),
                get: jest.fn(),
                has: jest.fn(),
                delete: jest.fn(),
                clear: jest.fn(),
                forEach: jest.fn(),
                entries: jest.fn(),
                keys: jest.fn(),
                values: jest.fn()
            },
            _a[Symbol.iterator] = jest.fn(),
            _a), status: 200, statusText: 'OK', ok: true, url: 'http://localhost:3000/api/test', redirected: false, type: 'basic', body: null, bodyUsed: false, arrayBuffer: jest.fn(), blob: jest.fn(), formData: jest.fn(), json: jest.fn(), text: jest.fn(), clone: jest.fn() }, overrides));
};
exports.createMockNextResponse = createMockNextResponse;
/**
 * Creates a mock HTTP request object
 */
var createMockRequest = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    return (__assign({ method: 'GET', url: 'http://localhost:3000/api/test', headers: new Headers(), body: null, bodyUsed: false, cache: 'default', credentials: 'same-origin', destination: '', integrity: '', keepalive: false, mode: 'cors', redirect: 'follow', referrer: '', referrerPolicy: 'no-referrer', signal: new AbortSignal(), arrayBuffer: jest.fn(), blob: jest.fn(), formData: jest.fn(), json: jest.fn(), text: jest.fn(), clone: jest.fn() }, overrides));
};
exports.createMockRequest = createMockRequest;
/**
 * Creates a mock API error response
 */
var createMockApiError = function (status, message) {
    var _a;
    if (status === void 0) { status = 500; }
    if (message === void 0) { message = 'Internal Server Error'; }
    return ({
        status: status,
        statusText: message,
        ok: false,
        headers: (_a = {
                set: jest.fn(),
                get: jest.fn(),
                has: jest.fn(),
                delete: jest.fn(),
                clear: jest.fn(),
                forEach: jest.fn(),
                entries: jest.fn(),
                keys: jest.fn(),
                values: jest.fn()
            },
            _a[Symbol.iterator] = jest.fn(),
            _a),
        url: 'http://localhost:3000/api/error',
        redirected: false,
        type: 'error',
        body: null,
        bodyUsed: false,
        arrayBuffer: jest.fn(),
        blob: jest.fn(),
        formData: jest.fn(),
        json: jest.fn().mockResolvedValue({ error: message }),
        text: jest.fn().mockResolvedValue(message),
        clone: jest.fn(),
    });
};
exports.createMockApiError = createMockApiError;
/**
 * Creates a mock fetch function
 */
var createMockFetch = function (responses) {
    if (responses === void 0) { responses = []; }
    var callCount = 0;
    var mockFetch = jest.fn();
    responses.forEach(function (response) {
        mockFetch.mockResolvedValueOnce(response);
    });
    // Default response for any additional calls
    mockFetch.mockResolvedValue((0, exports.createMockResponse)());
    return {
        fetch: mockFetch,
        getCallCount: function () { return callCount++; },
        getCalls: function () { return mockFetch.mock.calls; },
        getLastCall: function () { return mockFetch.mock.calls[mockFetch.mock.calls.length - 1]; },
    };
};
exports.createMockFetch = createMockFetch;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,