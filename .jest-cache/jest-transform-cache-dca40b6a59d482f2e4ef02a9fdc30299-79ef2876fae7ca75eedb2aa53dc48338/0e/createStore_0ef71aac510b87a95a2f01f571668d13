1305a31b7d18a94a833e80ac433d0cf1
"use strict";
/**
 * Universal Store Factory
 *
 * Simple, enterprise-grade store factory for any application.
 * Foundation-level only - no overengineering.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSimpleStore = exports.createStore = void 0;
var zustand_1 = require("zustand");
var middleware_1 = require("zustand/middleware");
var stateEnums_1 = require("../types/stateEnums");
// ============================================================================
// STORE FACTORY
// ============================================================================
/**
 * Create a universal store that works for any application
 */
var createStore = function (config) {
    // Enhanced initial state with base properties
    var enhancedInitialState = __assign(__assign({}, config.initialState), { _hydrated: false });
    // Create state creator function
    var stateCreator = function (set) { return (__assign(__assign({}, enhancedInitialState), { 
        // Built-in reset action
        reset: function () { return set(enhancedInitialState); } })); };
    // Apply middleware
    var enhancedCreator = stateCreator;
    // 1. Persistence middleware (if configured)
    if (config.persist) {
        enhancedCreator = (0, middleware_1.persist)(enhancedCreator, {
            name: config.persist.key,
            storage: (0, middleware_1.createJSONStorage)(function () { var _a; return ((_a = config.persist) === null || _a === void 0 ? void 0 : _a.storage) === stateEnums_1.StorageType.SESSION_STORAGE ? sessionStorage : localStorage; }),
            onRehydrateStorage: function () { return function (state) {
                if (state) {
                    var stateWithHydrated = state;
                    stateWithHydrated._hydrated = true;
                }
            }; },
        });
    }
    // 2. Selector subscription (for optimized selectors)
    enhancedCreator = (0, middleware_1.subscribeWithSelector)(enhancedCreator);
    // 3. DevTools (development only)
    if (config.devtools && process.env.NODE_ENV === stateEnums_1.Environment.DEVELOPMENT) {
        enhancedCreator = (0, middleware_1.devtools)(enhancedCreator, { name: config.name });
    }
    // Create the Zustand store
    var store = (0, zustand_1.create)(enhancedCreator);
    // Enhanced store with utility methods
    var enhancedStore = {
        getState: store.getState,
        setState: store.setState,
        subscribe: store.subscribe,
        // Reset to initial state
        reset: function () {
            store.setState(enhancedInitialState);
        },
        // Clear persisted storage
        clearStorage: function () {
            var _a;
            if ((_a = config.persist) === null || _a === void 0 ? void 0 : _a.key) {
                var storage = config.persist.storage === stateEnums_1.StorageType.SESSION_STORAGE ? sessionStorage : localStorage;
                storage.removeItem(config.persist.key);
            }
        },
    };
    return enhancedStore;
};
exports.createStore = createStore;
/**
 * Create a simple store with minimal configuration
 */
var createSimpleStore = function (name, initialState, enablePersist) {
    if (enablePersist === void 0) { enablePersist = false; }
    return (0, exports.createStore)(__assign(__assign({ name: name, initialState: initialState }, (enablePersist && {
        persist: {
            key: name,
            storage: stateEnums_1.StorageType.LOCAL_STORAGE,
        },
    })), { devtools: process.env.NODE_ENV === stateEnums_1.Environment.DEVELOPMENT }));
};
exports.createSimpleStore = createSimpleStore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,