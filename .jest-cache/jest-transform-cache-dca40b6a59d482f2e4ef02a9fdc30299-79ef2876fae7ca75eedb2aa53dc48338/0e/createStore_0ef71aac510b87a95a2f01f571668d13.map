{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/state/createStore/createStore.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/state/createStore/createStore.ts"],"sourcesContent":["/**\n * Universal Store Factory\n *\n * Simple, enterprise-grade store factory for any application.\n * Foundation-level only - no overengineering.\n */\n\nimport { create, type StateCreator } from 'zustand';\nimport { createJSONStorage, devtools, persist, subscribeWithSelector } from 'zustand/middleware';\nimport { Environment, StorageType } from '../types/stateEnums';\nimport type { BaseState, EnhancedStore, StoreConfig } from '../types/types';\n\n// ============================================================================\n// STORE FACTORY\n// ============================================================================\n\n/**\n * Create a universal store that works for any application\n */\nexport const createStore = <T extends Record<string, unknown>>(\n  config: StoreConfig<T>\n): EnhancedStore<T & BaseState> => {\n  // Enhanced initial state with base properties\n  const enhancedInitialState = {\n    ...config.initialState,\n    _hydrated: false,\n  } as T & BaseState;\n\n  // Create state creator function\n  const stateCreator: StateCreator<T & BaseState, [], [], T & BaseState> = (set) => ({\n    ...enhancedInitialState,\n\n    // Built-in reset action\n    reset: () => set(enhancedInitialState),\n  });\n\n  // Apply middleware\n  let enhancedCreator: StateCreator<unknown, [], [], unknown> = stateCreator as StateCreator<\n    unknown,\n    [],\n    [],\n    unknown\n  >;\n\n  // 1. Persistence middleware (if configured)\n  if (config.persist) {\n    enhancedCreator = persist(\n      enhancedCreator as StateCreator<unknown, [['zustand/persist', unknown]], [], unknown>,\n      {\n        name: config.persist.key,\n        storage: createJSONStorage(() =>\n          config.persist?.storage === StorageType.SESSION_STORAGE ? sessionStorage : localStorage\n        ),\n        onRehydrateStorage: () => (state) => {\n          if (state) {\n            const stateWithHydrated = state as Record<string, unknown> & { _hydrated?: boolean };\n            stateWithHydrated._hydrated = true;\n          }\n        },\n      }\n    ) as StateCreator<unknown, [], [], unknown>;\n  }\n\n  // 2. Selector subscription (for optimized selectors)\n  enhancedCreator = subscribeWithSelector(\n    enhancedCreator as StateCreator<\n      unknown,\n      [['zustand/subscribeWithSelector', never]],\n      [],\n      unknown\n    >\n  ) as StateCreator<unknown, [], [], unknown>;\n\n  // 3. DevTools (development only)\n  if (config.devtools && process.env.NODE_ENV === Environment.DEVELOPMENT) {\n    enhancedCreator = devtools(\n      enhancedCreator as StateCreator<unknown, [['zustand/devtools', never]], [], unknown>,\n      { name: config.name }\n    ) as StateCreator<unknown, [], [], unknown>;\n  }\n\n  // Create the Zustand store\n  const store = create(enhancedCreator);\n\n  // Enhanced store with utility methods\n  const enhancedStore: EnhancedStore<T & BaseState> = {\n    getState: store.getState as () => T & BaseState,\n    setState: store.setState as (\n      partial:\n        | (T & BaseState)\n        | Partial<T & BaseState>\n        | ((state: T & BaseState) => (T & BaseState) | Partial<T & BaseState>)\n    ) => void,\n    subscribe: store.subscribe as (\n      listener: (state: T & BaseState, prevState: T & BaseState) => void\n    ) => () => void,\n\n    // Reset to initial state\n    reset: () => {\n      store.setState(enhancedInitialState);\n    },\n\n    // Clear persisted storage\n    clearStorage: () => {\n      if (config.persist?.key) {\n        const storage =\n          config.persist.storage === StorageType.SESSION_STORAGE ? sessionStorage : localStorage;\n        storage.removeItem(config.persist.key);\n      }\n    },\n  };\n\n  return enhancedStore;\n};\n\n/**\n * Create a simple store with minimal configuration\n */\nexport const createSimpleStore = <T extends Record<string, unknown>>(\n  name: string,\n  initialState: T,\n  enablePersist = false\n): EnhancedStore<T & BaseState> => {\n  return createStore({\n    name,\n    initialState,\n    ...(enablePersist && {\n      persist: {\n        key: name,\n        storage: StorageType.LOCAL_STORAGE,\n      },\n    }),\n    devtools: process.env.NODE_ENV === Environment.DEVELOPMENT,\n  });\n};\n"],"version":3}