{"file":"/Users/gamzaramazanov/Desktop/fumo/src/shared/lib/dev-tools/generators/component-generator/component-generator.test.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/lib/dev-tools/generators/component-generator/component-generator.test.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport { componentGenerator } from './component-generator';\n\n// Mock fs module\njest.mock('fs');\nconst mockedFs = fs as jest.Mocked<typeof fs>;\n\ndescribe('componentGenerator', () => {\n  const testDir = 'src/shared/ui/TestComponent';\n\n  beforeEach(() => {\n    // Reset all mocks\n    jest.clearAllMocks();\n\n    // Mock fs.existsSync to return false (directory doesn't exist)\n    mockedFs.existsSync.mockReturnValue(false);\n\n    // Mock fs.mkdirSync\n    mockedFs.mkdirSync.mockImplementation(() => 'mocked');\n\n    // Mock fs.writeFileSync\n    mockedFs.writeFileSync.mockImplementation(() => undefined);\n  });\n\n  afterEach(() => {\n    // Clean up any created files\n    if (fs.existsSync(testDir)) {\n      fs.rmSync(testDir, { recursive: true, force: true });\n    }\n  });\n\n  it('generates component files successfully', () => {\n    const config = {\n      name: 'TestComponent',\n      layer: 'shared' as const,\n      type: 'ui' as const,\n      description: 'Test component for validation',\n    };\n\n    expect(() => componentGenerator(config)).not.toThrow();\n\n    // Verify directory creation\n    expect(mockedFs.mkdirSync).toHaveBeenCalledWith(testDir, { recursive: true });\n\n    // Verify file creation\n    expect(mockedFs.writeFileSync).toHaveBeenCalledTimes(4);\n\n    // Check that all expected files are created\n    const writeFileCalls = mockedFs.writeFileSync.mock.calls;\n    const filePaths = writeFileCalls.map((call) => call[0]);\n\n    expect(filePaths).toContain(path.join(testDir, 'TestComponent.tsx'));\n    expect(filePaths).toContain(path.join(testDir, 'TestComponent.test.tsx'));\n    expect(filePaths).toContain(path.join(testDir, 'TestComponent.stories.tsx'));\n    expect(filePaths).toContain(path.join(testDir, 'index.ts'));\n  });\n\n  it('validates layer and type combinations for shared layer', () => {\n    const validConfigs = [\n      { name: 'Test', layer: 'shared' as const, type: 'ui' as const },\n      { name: 'Test', layer: 'shared' as const, type: 'lib' as const },\n      { name: 'Test', layer: 'shared' as const, type: 'model' as const },\n    ];\n\n    validConfigs.forEach((config) => {\n      expect(() => componentGenerator(config)).not.toThrow();\n    });\n\n    const invalidConfigs = [{ name: 'Test', layer: 'shared' as const, type: 'api' as const }];\n\n    invalidConfigs.forEach((config) => {\n      expect(() => componentGenerator(config)).toThrow(\n        'Shared layer only supports ui, lib, or model types'\n      );\n    });\n  });\n\n  it('validates layer and type combinations for widgets layer', () => {\n    const validConfigs = [{ name: 'Test', layer: 'widgets' as const, type: 'ui' as const }];\n\n    validConfigs.forEach((config) => {\n      expect(() => componentGenerator(config)).not.toThrow();\n    });\n\n    const invalidConfigs = [\n      { name: 'Test', layer: 'widgets' as const, type: 'lib' as const },\n      { name: 'Test', layer: 'widgets' as const, type: 'model' as const },\n      { name: 'Test', layer: 'widgets' as const, type: 'api' as const },\n    ];\n\n    invalidConfigs.forEach((config) => {\n      expect(() => componentGenerator(config)).toThrow('Widgets layer only supports ui type');\n    });\n  });\n\n  it('validates layer and type combinations for infrastructure layer', () => {\n    const validConfigs = [\n      { name: 'Test', layer: 'infrastructure' as const, type: 'lib' as const },\n      { name: 'Test', layer: 'infrastructure' as const, type: 'api' as const },\n    ];\n\n    validConfigs.forEach((config) => {\n      expect(() => componentGenerator(config)).not.toThrow();\n    });\n\n    const invalidConfigs = [\n      { name: 'Test', layer: 'infrastructure' as const, type: 'ui' as const },\n      { name: 'Test', layer: 'infrastructure' as const, type: 'model' as const },\n    ];\n\n    invalidConfigs.forEach((config) => {\n      expect(() => componentGenerator(config)).toThrow(\n        'Infrastructure layer only supports lib or api types'\n      );\n    });\n  });\n\n  it('generates correct component content', () => {\n    const config = {\n      name: 'TestComponent',\n      layer: 'shared' as const,\n      type: 'ui' as const,\n      description: 'Test component description',\n    };\n\n    componentGenerator(config);\n\n    // Get the component file content\n    const componentCall = mockedFs.writeFileSync.mock.calls.find((call) =>\n      String(call[0]).endsWith('TestComponent.tsx')\n    );\n\n    expect(componentCall).toBeDefined();\n    const componentContent = componentCall![1] as string;\n\n    // Check for key elements in the generated component\n    expect(componentContent).toContain(\"import React from 'react';\");\n    expect(componentContent).toContain(\n      \"import { classNames } from '@/shared/lib/utils/classNames';\"\n    );\n    expect(componentContent).toContain('export interface TestComponentProps');\n    expect(componentContent).toContain('export function TestComponent');\n    expect(componentContent).toContain('Test component description');\n    expect(componentContent).toContain(\"className={classNames('testcomponent', {}, [className])}\");\n  });\n\n  it('generates correct test content', () => {\n    const config = {\n      name: 'TestComponent',\n      layer: 'shared' as const,\n      type: 'ui' as const,\n      description: 'Test component description',\n    };\n\n    componentGenerator(config);\n\n    // Get the test file content\n    const testCall = mockedFs.writeFileSync.mock.calls.find((call) =>\n      String(call[0]).endsWith('TestComponent.test.tsx')\n    );\n\n    expect(testCall).toBeDefined();\n    const testContent = testCall![1] as string;\n\n    // Check for key elements in the generated test\n    expect(testContent).toContain(\"import { render, screen } from '@testing-library/react';\");\n    expect(testContent).toContain(\"import { TestComponent } from './TestComponent';\");\n    expect(testContent).toContain(\"describe('TestComponent', () => {\");\n    expect(testContent).toContain(\"it('renders without crashing', () => {\");\n    expect(testContent).toContain(\"it('applies custom className', () => {\");\n    expect(testContent).toContain(\"it('renders children correctly', () => {\");\n  });\n\n  it('generates correct stories content', () => {\n    const config = {\n      name: 'TestComponent',\n      layer: 'shared' as const,\n      type: 'ui' as const,\n      description: 'Test component description',\n    };\n\n    componentGenerator(config);\n\n    // Get the stories file content\n    const storiesCall = mockedFs.writeFileSync.mock.calls.find((call) =>\n      String(call[0]).endsWith('TestComponent.stories.tsx')\n    );\n\n    expect(storiesCall).toBeDefined();\n    const storiesContent = storiesCall![1] as string;\n\n    // Check for key elements in the generated stories\n    expect(storiesContent).toContain(\"import type { Meta, StoryObj } from '@storybook/react';\");\n    expect(storiesContent).toContain(\"import { TestComponent } from './TestComponent';\");\n    expect(storiesContent).toContain('const meta: Meta<typeof TestComponent>');\n    expect(storiesContent).toContain('export const Default: Story');\n    expect(storiesContent).toContain('export const WithCustomContent: Story');\n    expect(storiesContent).toContain('export const WithCustomClassName: Story');\n  });\n\n  it('generates correct index content', () => {\n    const config = {\n      name: 'TestComponent',\n      layer: 'shared' as const,\n      type: 'ui' as const,\n      description: 'Test component description',\n    };\n\n    componentGenerator(config);\n\n    // Get the index file content\n    const indexCall = mockedFs.writeFileSync.mock.calls.find((call) =>\n      String(call[0]).endsWith('index.ts')\n    );\n\n    expect(indexCall).toBeDefined();\n    const indexContent = indexCall![1] as string;\n\n    // Check for key elements in the generated index\n    expect(indexContent).toContain(\"export { TestComponent } from './TestComponent';\");\n    expect(indexContent).toContain(\"export type { TestComponentProps } from './TestComponent';\");\n  });\n\n  it('handles missing description', () => {\n    const config = {\n      name: 'TestComponent',\n      layer: 'shared' as const,\n      type: 'ui' as const,\n    };\n\n    expect(() => componentGenerator(config)).not.toThrow();\n\n    // Check that default description is used\n    const componentCall = mockedFs.writeFileSync.mock.calls.find((call) =>\n      String(call[0]).endsWith('TestComponent.tsx')\n    );\n\n    const componentContent = componentCall![1] as string;\n    expect(componentContent).toContain('TestComponent component');\n  });\n});\n"],"version":3}