9fe4b8389278228490d98b475dbc3121
"use strict";
/**
 * Axios REST Client Tests
 *
 * Real-life enterprise scenarios testing with minimal mocking.
 * Uses existing mock factory patterns and real HTTP behavior where possible.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var axiosClient_1 = require("./axiosClient");
// Use existing mock factory patterns
var browser_1 = require("@/shared/testing/mocks/browser");
describe('Axios REST Client', function () {
    var mockLocalStorage;
    beforeEach(function () {
        // Use existing mock factory patterns
        browser_1.mockConsole.clear();
        // Create fresh localStorage mock for each test
        mockLocalStorage = (0, browser_1.mockStorage)();
        Object.defineProperty(window, 'localStorage', {
            value: mockLocalStorage,
            writable: true,
        });
    });
    afterEach(function () {
        // Cleanup
        browser_1.mockConsole.restore();
        // Clear any pending timers from retry logic
        jest.clearAllTimers();
        // Clear mock storage
        mockLocalStorage.clear();
    });
    // ============================================================================
    // REAL-LIFE ENTERPRISE SCENARIOS
    // ============================================================================
    describe('Enterprise REST Operations', function () {
        it('should have proper HTTP methods configured', function () {
            // Real scenario: all REST operations should be available
            expect(typeof axiosClient_1.get).toBe('function');
            expect(typeof axiosClient_1.post).toBe('function');
            expect(typeof axiosClient_1.put).toBe('function');
            expect(typeof axiosClient_1.patch).toBe('function');
            expect(typeof axiosClient_1.del).toBe('function');
        });
        it('should configure proper request defaults for enterprise use', function () {
            // Real scenario: enterprise-appropriate configuration
            expect(axiosClient_1.axiosClient.defaults.timeout).toBeGreaterThan(0);
            expect(axiosClient_1.axiosClient.defaults.baseURL).toBeDefined();
            expect(axiosClient_1.axiosClient.defaults.headers['Accept']).toBe('application/json');
            expect(axiosClient_1.axiosClient.defaults.headers['Content-Type']).toBe('application/json');
        });
        it('should handle request data serialization properly', function () {
            // Real scenario: complex objects should be serialized correctly
            var userData = {
                name: 'John Doe',
                email: 'john@company.com',
                metadata: { department: 'Engineering', level: 'Senior' },
                permissions: ['read', 'write'],
            };
            // Should not throw when preparing request data
            expect(function () {
                JSON.stringify(userData);
            }).not.toThrow();
        });
        it('should support proper HTTP status validation', function () {
            // Real scenario: only 2xx should be success
            var validateStatus = axiosClient_1.axiosClient.defaults.validateStatus;
            expect(validateStatus).toBeDefined();
            if (validateStatus) {
                expect(validateStatus(200)).toBe(true);
                expect(validateStatus(201)).toBe(true);
                expect(validateStatus(204)).toBe(true);
                expect(validateStatus(400)).toBe(false);
                expect(validateStatus(401)).toBe(false);
                expect(validateStatus(500)).toBe(false);
            }
        });
    });
    // ============================================================================
    // AUTHENTICATION - REAL ENTERPRISE SCENARIOS
    // ============================================================================
    describe('Authentication Integration', function () {
        it('should add auth headers when token is available', function () {
            // Real scenario: authenticated user making requests
            mockLocalStorage.setItem('auth_token', 'enterprise_auth_token_123');
            // Test that request includes auth header
            var originalRequest = axiosClient_1.axiosClient.interceptors.request;
            expect(originalRequest).toBeDefined();
            expect(mockLocalStorage.getItem('auth_token')).toBe('enterprise_auth_token_123');
        });
        it('should work without auth token for public endpoints', function () {
            // Real scenario: public API endpoints should not require auth
            expect(mockLocalStorage.getItem('auth_token')).toBeNull();
            // Should have interceptors configured properly
            expect(axiosClient_1.axiosClient.interceptors.request).toBeDefined();
            expect(axiosClient_1.axiosClient.interceptors.response).toBeDefined();
        });
        it('should handle multiple token storage strategies', function () {
            // Real scenario: different enterprise apps store tokens differently
            var tokenStrategies = [
                { key: 'auth_token', value: 'bearer_token_123' },
                { key: 'access_token', value: 'jwt_token_456' },
                { key: 'session_token', value: 'session_789' },
            ];
            tokenStrategies.forEach(function (_a) {
                var key = _a.key, value = _a.value;
                mockLocalStorage.clear();
                mockLocalStorage.setItem(key, value);
                // Should handle each strategy without errors
                expect(mockLocalStorage.getItem(key)).toBe(value);
                expect(function () { return axiosClient_1.axiosClient.defaults; }).not.toThrow();
            });
        });
        it('should have error interceptor configured for auth handling', function () {
            // Real scenario: 401 responses should clear auth tokens
            expect(axiosClient_1.axiosClient.interceptors.response).toBeDefined();
            // Should have response interceptor for error handling
            var responseInterceptors = axiosClient_1.axiosClient.interceptors.response.handlers;
            expect(responseInterceptors.length).toBeGreaterThan(0);
        });
    });
    // ============================================================================
    // ERROR HANDLING - REAL ENTERPRISE SCENARIOS
    // ============================================================================
    describe('Error Handling', function () {
        it('should have error interceptor configured for standardized errors', function () {
            // Real scenario: all errors should follow same format
            expect(axiosClient_1.axiosClient.interceptors.response).toBeDefined();
            // Should have response interceptor for error handling
            var responseInterceptors = axiosClient_1.axiosClient.interceptors.response.handlers;
            expect(responseInterceptors.length).toBeGreaterThan(0);
        });
        it('should handle different HTTP error status codes appropriately', function () {
            // Real scenario: different error types need different handling
            var errorScenarios = [
                { status: 400, description: 'Bad Request - validation errors' },
                { status: 401, description: 'Unauthorized - auth required' },
                { status: 403, description: 'Forbidden - insufficient permissions' },
                { status: 404, description: 'Not Found - resource missing' },
                { status: 429, description: 'Rate Limited - too many requests' },
                { status: 500, description: 'Server Error - internal issues' },
            ];
            // Each error type should be recognized by status validation
            errorScenarios.forEach(function (_a) {
                var status = _a.status;
                var validateStatus = axiosClient_1.axiosClient.defaults.validateStatus;
                if (validateStatus) {
                    expect(validateStatus(status)).toBe(false);
                }
            });
        });
        it('should have proper error logging configured', function () {
            // Real scenario: developers need error visibility
            expect(axiosClient_1.axiosClient.interceptors.response).toBeDefined();
            // Console should be available for error logging
            expect(global.console.error).toBeDefined();
        });
        it('should generate unique request IDs for error tracking', function () {
            // Real scenario: errors need unique identifiers for tracing
            expect(axiosClient_1.axiosClient.interceptors.request).toBeDefined();
            // Request interceptor should add unique identifiers
            var requestInterceptors = axiosClient_1.axiosClient.interceptors.request.handlers;
            expect(requestInterceptors.length).toBeGreaterThan(0);
        });
    });
    // ============================================================================
    // RETRY LOGIC - REAL ENTERPRISE SCENARIOS
    // ============================================================================
    describe('Retry Logic', function () {
        it('should have retry configuration available', function () {
            // Real scenario: client should support retry configuration
            expect(axiosClient_1.axiosClient.interceptors.response).toBeDefined();
            // Should have error handling that supports retries
            var responseInterceptors = axiosClient_1.axiosClient.interceptors.response.handlers;
            expect(responseInterceptors.length).toBeGreaterThan(0);
        });
        it('should handle retry configuration options', function () {
            // Real scenario: different requests need different retry strategies
            var retryConfigs = [
                { skipRetry: true, retryAttempts: 0 },
                { skipRetry: false, retryAttempts: 3 },
                { retryAttempts: 5 },
            ];
            retryConfigs.forEach(function (config) {
                // Should accept retry configuration without error
                expect(function () {
                    var requestConfig = __assign(__assign({}, config), { url: '/test' });
                    expect(requestConfig).toBeDefined();
                }).not.toThrow();
            });
        });
        it('should have exponential backoff constants defined', function () {
            // Real scenario: retry delays should increase exponentially
            // Check that retry logic exists in the client
            expect(axiosClient_1.axiosClient.interceptors.response).toBeDefined();
        });
        it('should differentiate between retryable and non-retryable errors', function () {
            // Real scenario: 4xx errors should not retry, 5xx should retry
            var nonRetryableStatuses = [400, 401, 403, 404, 422];
            var retryableStatuses = [500, 502, 503, 504];
            nonRetryableStatuses.forEach(function (status) {
                // Client errors should not be retried
                expect(status).toBeGreaterThanOrEqual(400);
                expect(status).toBeLessThan(500);
            });
            retryableStatuses.forEach(function (status) {
                // Server errors can be retried
                expect(status).toBeGreaterThanOrEqual(500);
            });
        });
    });
    // ============================================================================
    // PERFORMANCE MONITORING - REAL ENTERPRISE SCENARIOS
    // ============================================================================
    describe('Performance Monitoring', function () {
        it('should have request timing infrastructure', function () {
            // Real scenario: performance tracking should be built-in
            expect(axiosClient_1.axiosClient.interceptors.request).toBeDefined();
            expect(axiosClient_1.axiosClient.interceptors.response).toBeDefined();
            // Should have timing capability
            expect(Date.now).toBeDefined();
        });
        it('should generate request IDs for tracing', function () {
            // Real scenario: each request needs unique identifier
            expect(axiosClient_1.axiosClient.interceptors.request).toBeDefined();
            // Should have request interceptor for adding IDs
            var requestInterceptors = axiosClient_1.axiosClient.interceptors.request.handlers;
            expect(requestInterceptors.length).toBeGreaterThan(0);
        });
        it('should support performance monitoring hooks', function () {
            // Real scenario: enterprises integrate with their monitoring
            var mockPerformanceTracker = jest.fn();
            window.__REST_PERFORMANCE_TRACKER__ = mockPerformanceTracker;
            // Should be able to attach custom monitoring
            expect(window.__REST_PERFORMANCE_TRACKER__).toBeDefined();
            delete window.__REST_PERFORMANCE_TRACKER__;
        });
        it('should have proper headers for monitoring', function () {
            // Real scenario: monitoring requires client identification
            expect(axiosClient_1.axiosClient.defaults.headers).toBeDefined();
            // Should identify the client for monitoring
            var headers = axiosClient_1.axiosClient.defaults.headers;
            expect(headers).toHaveProperty('Accept');
            expect(headers).toHaveProperty('Content-Type');
        });
    });
    // ============================================================================
    // DATA TRANSFORMATION - REAL ENTERPRISE SCENARIOS
    // ============================================================================
    describe('Data Transformation', function () {
        it('should handle complex data serialization', function () {
            // Real scenario: objects should be properly serialized
            var complexData = {
                user: { id: 123, name: 'Test User' },
                metadata: { timestamp: Date.now(), version: '1.0' },
                permissions: ['read', 'write'],
                nestedArray: [{ id: 1, data: 'test' }],
            };
            // Should serialize complex objects without error
            expect(function () {
                JSON.stringify(complexData);
            }).not.toThrow();
            var serialized = JSON.stringify(complexData);
            expect(typeof serialized).toBe('string');
            expect(serialized.length).toBeGreaterThan(0);
        });
        it('should handle response transformation setup', function () {
            // Real scenario: responses should be automatically parsed
            expect(axiosClient_1.axiosClient.interceptors.response).toBeDefined();
            // Should have response transformation capability
            var responseInterceptors = axiosClient_1.axiosClient.interceptors.response.handlers;
            expect(responseInterceptors.length).toBeGreaterThan(0);
        });
        it('should set appropriate content-type headers', function () {
            // Real scenario: servers need proper content-type
            var defaults = axiosClient_1.axiosClient.defaults;
            expect(defaults.headers['Content-Type']).toBe('application/json');
            expect(defaults.headers['Accept']).toBe('application/json');
        });
        it('should handle different data types appropriately', function () {
            // Real scenario: various data types should be supported
            var dataTypes = [
                { type: 'object', data: { key: 'value' } },
                { type: 'array', data: [1, 2, 3] },
                { type: 'string', data: 'simple string' },
                { type: 'number', data: 42 },
                { type: 'boolean', data: true },
            ];
            dataTypes.forEach(function (_a) {
                var data = _a.data;
                expect(function () {
                    JSON.stringify(data);
                }).not.toThrow();
            });
        });
    });
    // ============================================================================
    // CONFIGURATION - REAL ENTERPRISE SCENARIOS
    // ============================================================================
    describe('Configuration', function () {
        it('should use enterprise-appropriate timeouts', function () {
            // Real scenario: enterprise networks need reasonable timeouts
            expect(axiosClient_1.axiosClient.defaults.timeout).toBeGreaterThan(0);
            expect(axiosClient_1.axiosClient.defaults.timeout).toBeLessThanOrEqual(30000);
        });
        it('should support base URL configuration', function () {
            // Real scenario: different environments have different base URLs
            expect(axiosClient_1.axiosClient.defaults.baseURL).toBeDefined();
        });
        it('should handle redirects appropriately', function () {
            // Real scenario: enterprise proxies may redirect
            expect(axiosClient_1.axiosClient.defaults.maxRedirects).toBeGreaterThan(0);
        });
        it('should validate status codes correctly', function () {
            // Real scenario: only 2xx should be considered success
            var validateStatus = axiosClient_1.axiosClient.defaults.validateStatus;
            expect(validateStatus).toBeDefined();
            if (validateStatus) {
                expect(validateStatus(200)).toBe(true);
                expect(validateStatus(201)).toBe(true);
                expect(validateStatus(400)).toBe(false);
                expect(validateStatus(500)).toBe(false);
            }
        });
    });
});
describe('Axios Client Integration', function () {
    it('should be ready for real enterprise REST APIs', function () {
        // Real scenario: production readiness check
        expect(axiosClient_1.axiosClient.defaults).toBeDefined();
        expect(axiosClient_1.axiosClient.interceptors).toBeDefined();
        expect(typeof axiosClient_1.get).toBe('function');
        expect(typeof axiosClient_1.post).toBe('function');
        expect(typeof axiosClient_1.put).toBe('function');
        expect(typeof axiosClient_1.patch).toBe('function');
        expect(typeof axiosClient_1.del).toBe('function');
    });
    it('should work with standard REST API conventions', function () {
        // Real scenario: follows REST best practices
        var restOperations = [
            { method: axiosClient_1.get, url: '/users', description: 'List resources' },
            {
                method: function (url) { return (0, axiosClient_1.get)("".concat(url, "/123")); },
                url: '/users',
                description: 'Get specific resource',
            },
            { method: function (url) { return (0, axiosClient_1.post)(url, {}); }, url: '/users', description: 'Create resource' },
            {
                method: function (url) { return (0, axiosClient_1.put)("".concat(url, "/123"), {}); },
                url: '/users',
                description: 'Update resource',
            },
            {
                method: function (url) { return (0, axiosClient_1.patch)("".concat(url, "/123"), {}); },
                url: '/users',
                description: 'Partial update',
            },
            { method: function (url) { return (0, axiosClient_1.del)("".concat(url, "/123")); }, url: '/users', description: 'Delete resource' },
        ];
        restOperations.forEach(function (_a) {
            var method = _a.method, url = _a.url;
            expect(function () {
                method(url).catch(function () {
                    // Expected network error in test environment
                });
            }).not.toThrow();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,