{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/data/axios/axiosClient.test.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/data/axios/axiosClient.test.ts"],"sourcesContent":["/**\n * Axios REST Client Tests\n *\n * Real-life enterprise scenarios testing with minimal mocking.\n * Uses existing mock factory patterns and real HTTP behavior where possible.\n */\n\nimport { axiosClient, del, get, patch, post, put } from './axiosClient';\n\n// Use existing mock factory patterns\nimport { mockConsole, mockStorage } from '@/shared/testing/mocks/browser';\n\ndescribe('Axios REST Client', () => {\n  let mockLocalStorage: ReturnType<typeof mockStorage>;\n\n  beforeEach(() => {\n    // Use existing mock factory patterns\n    mockConsole.clear();\n\n    // Create fresh localStorage mock for each test\n    mockLocalStorage = mockStorage();\n    Object.defineProperty(window, 'localStorage', {\n      value: mockLocalStorage,\n      writable: true,\n    });\n  });\n\n  afterEach(() => {\n    // Cleanup\n    mockConsole.restore();\n    // Clear any pending timers from retry logic\n    jest.clearAllTimers();\n    // Clear mock storage\n    mockLocalStorage.clear();\n  });\n\n  // ============================================================================\n  // REAL-LIFE ENTERPRISE SCENARIOS\n  // ============================================================================\n\n  describe('Enterprise REST Operations', () => {\n    it('should have proper HTTP methods configured', () => {\n      // Real scenario: all REST operations should be available\n      expect(typeof get).toBe('function');\n      expect(typeof post).toBe('function');\n      expect(typeof put).toBe('function');\n      expect(typeof patch).toBe('function');\n      expect(typeof del).toBe('function');\n    });\n\n    it('should configure proper request defaults for enterprise use', () => {\n      // Real scenario: enterprise-appropriate configuration\n      expect(axiosClient.defaults.timeout).toBeGreaterThan(0);\n      expect(axiosClient.defaults.baseURL).toBeDefined();\n      expect(axiosClient.defaults.headers['Accept']).toBe('application/json');\n      expect(axiosClient.defaults.headers['Content-Type']).toBe('application/json');\n    });\n\n    it('should handle request data serialization properly', () => {\n      // Real scenario: complex objects should be serialized correctly\n      const userData = {\n        name: 'John Doe',\n        email: 'john@company.com',\n        metadata: { department: 'Engineering', level: 'Senior' },\n        permissions: ['read', 'write'],\n      };\n\n      // Should not throw when preparing request data\n      expect(() => {\n        JSON.stringify(userData);\n      }).not.toThrow();\n    });\n\n    it('should support proper HTTP status validation', () => {\n      // Real scenario: only 2xx should be success\n      const validateStatus = axiosClient.defaults.validateStatus;\n      expect(validateStatus).toBeDefined();\n\n      if (validateStatus) {\n        expect(validateStatus(200)).toBe(true);\n        expect(validateStatus(201)).toBe(true);\n        expect(validateStatus(204)).toBe(true);\n        expect(validateStatus(400)).toBe(false);\n        expect(validateStatus(401)).toBe(false);\n        expect(validateStatus(500)).toBe(false);\n      }\n    });\n  });\n\n  // ============================================================================\n  // AUTHENTICATION - REAL ENTERPRISE SCENARIOS\n  // ============================================================================\n\n  describe('Authentication Integration', () => {\n    it('should add auth headers when token is available', () => {\n      // Real scenario: authenticated user making requests\n      mockLocalStorage.setItem('auth_token', 'enterprise_auth_token_123');\n\n      // Test that request includes auth header\n      const originalRequest = axiosClient.interceptors.request;\n      expect(originalRequest).toBeDefined();\n      expect(mockLocalStorage.getItem('auth_token')).toBe('enterprise_auth_token_123');\n    });\n\n    it('should work without auth token for public endpoints', () => {\n      // Real scenario: public API endpoints should not require auth\n      expect(mockLocalStorage.getItem('auth_token')).toBeNull();\n\n      // Should have interceptors configured properly\n      expect(axiosClient.interceptors.request).toBeDefined();\n      expect(axiosClient.interceptors.response).toBeDefined();\n    });\n\n    it('should handle multiple token storage strategies', () => {\n      // Real scenario: different enterprise apps store tokens differently\n      const tokenStrategies = [\n        { key: 'auth_token', value: 'bearer_token_123' },\n        { key: 'access_token', value: 'jwt_token_456' },\n        { key: 'session_token', value: 'session_789' },\n      ];\n\n      tokenStrategies.forEach(({ key, value }) => {\n        mockLocalStorage.clear();\n        mockLocalStorage.setItem(key, value);\n\n        // Should handle each strategy without errors\n        expect(mockLocalStorage.getItem(key)).toBe(value);\n        expect(() => axiosClient.defaults).not.toThrow();\n      });\n    });\n\n    it('should have error interceptor configured for auth handling', () => {\n      // Real scenario: 401 responses should clear auth tokens\n      expect(axiosClient.interceptors.response).toBeDefined();\n\n      // Should have response interceptor for error handling\n      const responseInterceptors = (axiosClient.interceptors.response as any).handlers;\n      expect(responseInterceptors.length).toBeGreaterThan(0);\n    });\n  });\n\n  // ============================================================================\n  // ERROR HANDLING - REAL ENTERPRISE SCENARIOS\n  // ============================================================================\n\n  describe('Error Handling', () => {\n    it('should have error interceptor configured for standardized errors', () => {\n      // Real scenario: all errors should follow same format\n      expect(axiosClient.interceptors.response).toBeDefined();\n\n      // Should have response interceptor for error handling\n      const responseInterceptors = (axiosClient.interceptors.response as any).handlers;\n      expect(responseInterceptors.length).toBeGreaterThan(0);\n    });\n\n    it('should handle different HTTP error status codes appropriately', () => {\n      // Real scenario: different error types need different handling\n      const errorScenarios = [\n        { status: 400, description: 'Bad Request - validation errors' },\n        { status: 401, description: 'Unauthorized - auth required' },\n        { status: 403, description: 'Forbidden - insufficient permissions' },\n        { status: 404, description: 'Not Found - resource missing' },\n        { status: 429, description: 'Rate Limited - too many requests' },\n        { status: 500, description: 'Server Error - internal issues' },\n      ];\n\n      // Each error type should be recognized by status validation\n      errorScenarios.forEach(({ status }) => {\n        const validateStatus = axiosClient.defaults.validateStatus;\n        if (validateStatus) {\n          expect(validateStatus(status)).toBe(false);\n        }\n      });\n    });\n\n    it('should have proper error logging configured', () => {\n      // Real scenario: developers need error visibility\n      expect(axiosClient.interceptors.response).toBeDefined();\n\n      // Console should be available for error logging\n      expect(global.console.error).toBeDefined();\n    });\n\n    it('should generate unique request IDs for error tracking', () => {\n      // Real scenario: errors need unique identifiers for tracing\n      expect(axiosClient.interceptors.request).toBeDefined();\n\n      // Request interceptor should add unique identifiers\n      const requestInterceptors = (axiosClient.interceptors.request as any).handlers;\n      expect(requestInterceptors.length).toBeGreaterThan(0);\n    });\n  });\n\n  // ============================================================================\n  // RETRY LOGIC - REAL ENTERPRISE SCENARIOS\n  // ============================================================================\n\n  describe('Retry Logic', () => {\n    it('should have retry configuration available', () => {\n      // Real scenario: client should support retry configuration\n      expect(axiosClient.interceptors.response).toBeDefined();\n\n      // Should have error handling that supports retries\n      const responseInterceptors = (axiosClient.interceptors.response as any).handlers;\n      expect(responseInterceptors.length).toBeGreaterThan(0);\n    });\n\n    it('should handle retry configuration options', () => {\n      // Real scenario: different requests need different retry strategies\n      const retryConfigs = [\n        { skipRetry: true, retryAttempts: 0 },\n        { skipRetry: false, retryAttempts: 3 },\n        { retryAttempts: 5 },\n      ];\n\n      retryConfigs.forEach((config) => {\n        // Should accept retry configuration without error\n        expect(() => {\n          const requestConfig = { ...config, url: '/test' };\n          expect(requestConfig).toBeDefined();\n        }).not.toThrow();\n      });\n    });\n\n    it('should have exponential backoff constants defined', () => {\n      // Real scenario: retry delays should increase exponentially\n      // Check that retry logic exists in the client\n      expect(axiosClient.interceptors.response).toBeDefined();\n    });\n\n    it('should differentiate between retryable and non-retryable errors', () => {\n      // Real scenario: 4xx errors should not retry, 5xx should retry\n      const nonRetryableStatuses = [400, 401, 403, 404, 422];\n      const retryableStatuses = [500, 502, 503, 504];\n\n      nonRetryableStatuses.forEach((status) => {\n        // Client errors should not be retried\n        expect(status).toBeGreaterThanOrEqual(400);\n        expect(status).toBeLessThan(500);\n      });\n\n      retryableStatuses.forEach((status) => {\n        // Server errors can be retried\n        expect(status).toBeGreaterThanOrEqual(500);\n      });\n    });\n  });\n\n  // ============================================================================\n  // PERFORMANCE MONITORING - REAL ENTERPRISE SCENARIOS\n  // ============================================================================\n\n  describe('Performance Monitoring', () => {\n    it('should have request timing infrastructure', () => {\n      // Real scenario: performance tracking should be built-in\n      expect(axiosClient.interceptors.request).toBeDefined();\n      expect(axiosClient.interceptors.response).toBeDefined();\n\n      // Should have timing capability\n      expect(Date.now).toBeDefined();\n    });\n\n    it('should generate request IDs for tracing', () => {\n      // Real scenario: each request needs unique identifier\n      expect(axiosClient.interceptors.request).toBeDefined();\n\n      // Should have request interceptor for adding IDs\n      const requestInterceptors = (axiosClient.interceptors.request as any).handlers;\n      expect(requestInterceptors.length).toBeGreaterThan(0);\n    });\n\n    it('should support performance monitoring hooks', () => {\n      // Real scenario: enterprises integrate with their monitoring\n      const mockPerformanceTracker = jest.fn();\n      (window as any).__REST_PERFORMANCE_TRACKER__ = mockPerformanceTracker;\n\n      // Should be able to attach custom monitoring\n      expect((window as any).__REST_PERFORMANCE_TRACKER__).toBeDefined();\n\n      delete (window as any).__REST_PERFORMANCE_TRACKER__;\n    });\n\n    it('should have proper headers for monitoring', () => {\n      // Real scenario: monitoring requires client identification\n      expect(axiosClient.defaults.headers).toBeDefined();\n\n      // Should identify the client for monitoring\n      const headers = axiosClient.defaults.headers;\n      expect(headers).toHaveProperty('Accept');\n      expect(headers).toHaveProperty('Content-Type');\n    });\n  });\n\n  // ============================================================================\n  // DATA TRANSFORMATION - REAL ENTERPRISE SCENARIOS\n  // ============================================================================\n\n  describe('Data Transformation', () => {\n    it('should handle complex data serialization', () => {\n      // Real scenario: objects should be properly serialized\n      const complexData = {\n        user: { id: 123, name: 'Test User' },\n        metadata: { timestamp: Date.now(), version: '1.0' },\n        permissions: ['read', 'write'],\n        nestedArray: [{ id: 1, data: 'test' }],\n      };\n\n      // Should serialize complex objects without error\n      expect(() => {\n        JSON.stringify(complexData);\n      }).not.toThrow();\n\n      const serialized = JSON.stringify(complexData);\n      expect(typeof serialized).toBe('string');\n      expect(serialized.length).toBeGreaterThan(0);\n    });\n\n    it('should handle response transformation setup', () => {\n      // Real scenario: responses should be automatically parsed\n      expect(axiosClient.interceptors.response).toBeDefined();\n\n      // Should have response transformation capability\n      const responseInterceptors = (axiosClient.interceptors.response as any).handlers;\n      expect(responseInterceptors.length).toBeGreaterThan(0);\n    });\n\n    it('should set appropriate content-type headers', () => {\n      // Real scenario: servers need proper content-type\n      const defaults = axiosClient.defaults;\n      expect(defaults.headers['Content-Type']).toBe('application/json');\n      expect(defaults.headers['Accept']).toBe('application/json');\n    });\n\n    it('should handle different data types appropriately', () => {\n      // Real scenario: various data types should be supported\n      const dataTypes = [\n        { type: 'object', data: { key: 'value' } },\n        { type: 'array', data: [1, 2, 3] },\n        { type: 'string', data: 'simple string' },\n        { type: 'number', data: 42 },\n        { type: 'boolean', data: true },\n      ];\n\n      dataTypes.forEach(({ data }) => {\n        expect(() => {\n          JSON.stringify(data);\n        }).not.toThrow();\n      });\n    });\n  });\n\n  // ============================================================================\n  // CONFIGURATION - REAL ENTERPRISE SCENARIOS\n  // ============================================================================\n\n  describe('Configuration', () => {\n    it('should use enterprise-appropriate timeouts', () => {\n      // Real scenario: enterprise networks need reasonable timeouts\n      expect(axiosClient.defaults.timeout).toBeGreaterThan(0);\n      expect(axiosClient.defaults.timeout).toBeLessThanOrEqual(30000);\n    });\n\n    it('should support base URL configuration', () => {\n      // Real scenario: different environments have different base URLs\n      expect(axiosClient.defaults.baseURL).toBeDefined();\n    });\n\n    it('should handle redirects appropriately', () => {\n      // Real scenario: enterprise proxies may redirect\n      expect(axiosClient.defaults.maxRedirects).toBeGreaterThan(0);\n    });\n\n    it('should validate status codes correctly', () => {\n      // Real scenario: only 2xx should be considered success\n      const validateStatus = axiosClient.defaults.validateStatus;\n      expect(validateStatus).toBeDefined();\n      if (validateStatus) {\n        expect(validateStatus(200)).toBe(true);\n        expect(validateStatus(201)).toBe(true);\n        expect(validateStatus(400)).toBe(false);\n        expect(validateStatus(500)).toBe(false);\n      }\n    });\n  });\n});\n\ndescribe('Axios Client Integration', () => {\n  it('should be ready for real enterprise REST APIs', () => {\n    // Real scenario: production readiness check\n    expect(axiosClient.defaults).toBeDefined();\n    expect(axiosClient.interceptors).toBeDefined();\n    expect(typeof get).toBe('function');\n    expect(typeof post).toBe('function');\n    expect(typeof put).toBe('function');\n    expect(typeof patch).toBe('function');\n    expect(typeof del).toBe('function');\n  });\n\n  it('should work with standard REST API conventions', () => {\n    // Real scenario: follows REST best practices\n    const restOperations = [\n      { method: get, url: '/users', description: 'List resources' },\n      {\n        method: (url: string) => get(`${url}/123`),\n        url: '/users',\n        description: 'Get specific resource',\n      },\n      { method: (url: string) => post(url, {}), url: '/users', description: 'Create resource' },\n      {\n        method: (url: string) => put(`${url}/123`, {}),\n        url: '/users',\n        description: 'Update resource',\n      },\n      {\n        method: (url: string) => patch(`${url}/123`, {}),\n        url: '/users',\n        description: 'Partial update',\n      },\n      { method: (url: string) => del(`${url}/123`), url: '/users', description: 'Delete resource' },\n    ];\n\n    restOperations.forEach(({ method, url }) => {\n      expect(() => {\n        method(url).catch(() => {\n          // Expected network error in test environment\n        });\n      }).not.toThrow();\n    });\n  });\n});\n"],"version":3}