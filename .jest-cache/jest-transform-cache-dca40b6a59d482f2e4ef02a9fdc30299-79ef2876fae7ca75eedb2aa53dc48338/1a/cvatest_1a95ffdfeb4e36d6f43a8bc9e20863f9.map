{"file":"/Users/gamzaramazanov/Desktop/fumo/src/shared/lib/utils/cva/cva.test.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/lib/utils/cva/cva.test.ts"],"sourcesContent":["import { cva } from './cva';\n\n// Define a sample configuration for a test component (e.g., a badge)\nconst badgeVariants = cva({\n  base: 'inline-flex items-center border rounded-full',\n  variants: {\n    variant: {\n      primary: 'bg-blue-500 border-blue-600 text-white',\n      secondary: 'bg-gray-200 border-gray-300 text-gray-800',\n      destructive: 'bg-red-500 border-red-600 text-white',\n    },\n    size: {\n      sm: 'px-2.5 py-0.5 text-xs',\n      md: 'px-3 py-0.5 text-sm',\n    },\n    hasCloseButton: {\n      true: 'pr-1',\n    },\n  },\n  compoundVariants: [\n    {\n      variant: 'primary',\n      hasCloseButton: 'true',\n      className: 'bg-blue-600', // Make primary with close button slightly darker\n    },\n  ],\n  defaultVariants: {\n    variant: 'secondary',\n    size: 'md',\n  },\n});\n\ndescribe('CVA (Class Variance Authority)', () => {\n  it('should return only base classes when no props are provided', () => {\n    const result = badgeVariants();\n    expect(result).toContain('inline-flex');\n    expect(result).toContain('rounded-full');\n  });\n\n  it('should apply default variant and size classes', () => {\n    const result = badgeVariants();\n    // Default variant is secondary\n    expect(result).toContain('bg-gray-200');\n    // Default size is md\n    expect(result).toContain('text-sm');\n  });\n\n  it('should apply specified variant classes and override defaults', () => {\n    const result = badgeVariants({ variant: 'primary' });\n    // Should NOT have default class\n    expect(result).not.toContain('bg-gray-200');\n    // SHOULD have specified variant class\n    expect(result).toContain('bg-blue-500');\n  });\n\n  it('should apply specified size classes', () => {\n    const result = badgeVariants({ size: 'sm' });\n    // Should NOT have default class\n    expect(result).not.toContain('text-sm');\n    // SHOULD have specified size class\n    expect(result).toContain('text-xs');\n  });\n\n  it('should handle boolean variants correctly', () => {\n    const result = badgeVariants({ hasCloseButton: true });\n    expect(result).toContain('pr-1');\n  });\n\n  it('should apply compound variant classes when conditions are met', () => {\n    const result = badgeVariants({ variant: 'primary', hasCloseButton: true });\n    // It should have the standard primary class\n    expect(result).toContain('bg-blue-500');\n    // But it should ALSO have the compound variant class, which can be used to override\n    expect(result).toContain('bg-blue-600');\n  });\n\n  it('should NOT apply compound variant classes when only one condition is met', () => {\n    const result = badgeVariants({ variant: 'primary', hasCloseButton: false });\n    // It should NOT have the compound class\n    expect(result).not.toContain('bg-blue-600');\n  });\n\n  it('should handle all props together', () => {\n    const result = badgeVariants({\n      variant: 'destructive',\n      size: 'sm',\n      hasCloseButton: true,\n    });\n\n    expect(result).toContain('bg-red-500'); // variant\n    expect(result).toContain('text-xs'); // size\n    expect(result).toContain('pr-1'); // boolean variant\n    expect(result).not.toContain('bg-blue-600'); // compound should not match\n  });\n\n  it('should return a clean array with no undefined or null values', () => {\n    const result = badgeVariants({ variant: 'primary' });\n    result.forEach((className) => {\n      expect(className).not.toBeUndefined();\n      expect(className).not.toBeNull();\n      expect(typeof className).toBe('string');\n    });\n  });\n});\n"],"version":3}