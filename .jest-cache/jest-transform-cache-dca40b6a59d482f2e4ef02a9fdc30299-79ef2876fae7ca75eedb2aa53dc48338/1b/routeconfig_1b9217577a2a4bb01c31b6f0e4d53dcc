22971c82292c1d84c85830168371e72f
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRouteConfigSelector = exports.getCurrentRouteConfig = exports.getRouteConfig = exports.routeConfigs = exports.defaultRouteConfig = void 0;
var route_enums_1 = require("./route.enums");
var route_constants_1 = require("./route.constants");
/**
 * Default configuration that applies to all routes
 */
exports.defaultRouteConfig = {
    loader: {
        type: route_enums_1.LoaderType.CUSTOM,
        enabled: true,
        minDisplayTime: route_constants_1.MIN_DISPLAY_TIMES.NORMAL,
        showProgress: true,
        showStepDetails: false,
    },
    cache: {
        strategy: route_enums_1.CacheStrategy.CACHE,
        enabled: true,
        ttl: route_constants_1.CACHE_TIMES[route_enums_1.CacheStrategy.CACHE],
    },
};
/**
 * Route-specific configurations
 * Override defaults for specific routes
 */
exports.routeConfigs = (_a = {},
    _a[route_enums_1.AppRoute.HOME] = {
        route: route_enums_1.AppRoute.HOME,
        type: route_enums_1.RouteType.PUBLIC,
        loader: {
            type: route_enums_1.LoaderType.FULL,
            enabled: true,
            minDisplayTime: route_constants_1.MIN_DISPLAY_TIMES.SLOW,
            showProgress: true,
            showStepDetails: true,
            customMessage: 'Loading...',
        },
        cache: {
            strategy: route_enums_1.CacheStrategy.CACHE,
            enabled: true,
            key: "".concat(route_constants_1.CACHE_KEY_PREFIXES.ROUTE, "-home"),
        },
        metadata: {
            title: 'Home - Fumo',
            description: 'Fumo main page',
            requiresAuth: false,
        },
    },
    _a[route_enums_1.AppRoute.ABOUT] = __assign(__assign({ route: route_enums_1.AppRoute.ABOUT, type: route_enums_1.RouteType.PUBLIC }, exports.defaultRouteConfig), { metadata: {
            title: 'About - Fumo',
            description: 'Learn more about Fumo',
            requiresAuth: false,
        } }),
    _a);
/**
 * Get route configuration for a specific route
 * Merges route-specific config with defaults
 */
var getRouteConfig = function (route) {
    var _a, _b;
    var specificConfig = exports.routeConfigs[route];
    return {
        route: route,
        type: specificConfig.type || route_enums_1.RouteType.PUBLIC,
        loader: __assign(__assign({}, exports.defaultRouteConfig.loader), specificConfig.loader),
        cache: __assign(__assign(__assign({}, exports.defaultRouteConfig.cache), specificConfig.cache), { ttl: ((_a = specificConfig.cache) === null || _a === void 0 ? void 0 : _a.ttl) ||
                route_constants_1.CACHE_TIMES[((_b = specificConfig.cache) === null || _b === void 0 ? void 0 : _b.strategy) || route_enums_1.CacheStrategy.CACHE] }),
        metadata: specificConfig.metadata || {},
    };
};
exports.getRouteConfig = getRouteConfig;
/**
 * Get current route configuration based on pathname
 * Handles dynamic routes and fallbacks
 */
var getCurrentRouteConfig = function (pathname) {
    // Handle null/undefined pathname
    var safePathname = pathname || '/';
    // Try exact match first
    var exactRoute = Object.values(route_enums_1.AppRoute).find(function (route) { return route === safePathname; });
    if (exactRoute) {
        return {
            route: exactRoute,
            pathname: safePathname,
            config: (0, exports.getRouteConfig)(exactRoute),
            isMatched: true,
        };
    }
    // Handle dynamic routes and patterns
    for (var _i = 0, _a = Object.values(route_enums_1.AppRoute); _i < _a.length; _i++) {
        var route = _a[_i];
        if (safePathname.startsWith(route) && route !== route_enums_1.AppRoute.HOME) {
            return {
                route: route,
                pathname: safePathname,
                config: (0, exports.getRouteConfig)(route),
                isMatched: true,
            };
        }
    }
    // Fallback to home route
    return {
        route: route_enums_1.AppRoute.HOME,
        pathname: safePathname,
        config: (0, exports.getRouteConfig)(route_enums_1.AppRoute.HOME),
        isMatched: false,
    };
};
exports.getCurrentRouteConfig = getCurrentRouteConfig;
/**
 * Create a route configuration selector
 * Useful for components that need to react to route changes
 */
var createRouteConfigSelector = function () {
    return function (pathname) {
        var currentRoute = (0, exports.getCurrentRouteConfig)(pathname);
        return currentRoute.isMatched ? currentRoute.config : null;
    };
};
exports.createRouteConfigSelector = createRouteConfigSelector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,