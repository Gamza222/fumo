fa5b56a79edaf9e62a9cf7eb5b839d0a
"use strict";
/**
 * Global Test Setup
 *
 * This file is executed before all tests run.
 * It sets up global test environment configurations and polyfills.
 */
Object.defineProperty(exports, "__esModule", { value: true });
require("@testing-library/jest-dom");
// Mock IntersectionObserver
require("@/shared/testing/mocks/browser/lib/media/intersectionObserver.mock");
// Mock matchMedia
require("@/shared/testing/mocks/browser/lib/media/matchMedia.mock");
// Mock localStorage and sessionStorage
require("@/shared/testing/mocks/browser/lib/storage/storage.mock");
// Configure global test environment
var globalTestConfig = {
    // Test timeout
    testTimeout: 10000,
    // Mock fetch if not available
    fetch: global.fetch || (function () { return Promise.resolve(new Response()); }),
};
// Apply global configuration
Object.assign(global, globalTestConfig);
// Add custom matchers or global test utilities here
var originalConsoleError = console.error;
// Filter out specific React warnings that are expected in tests
console.error = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var message = args[0];
    // Skip React warnings about act() in tests
    if (typeof message === 'string' &&
        (message.includes('Warning: ReactDOM.render is no longer supported') ||
            message.includes('Warning: An invalid form control') ||
            message.includes('The above error occurred in the') ||
            message.includes('React will try to recreate this component tree') ||
            message.includes('Error: Uncaught [Error:') ||
            message.includes('Error: Uncaught [TypeError:') ||
            message.includes('Error: Uncaught [ReferenceError:') ||
            message.includes('Error: Render error') ||
            message.includes('Error: Test error') ||
            message.includes('Error: Network request failed') ||
            message.includes('Error: Failed to fetch') ||
            message.includes('Error: Loading chunk') ||
            message.includes('Error: Regular component error') ||
            message.includes('Error: Synchronous error') ||
            message.includes('Error: Complex error') ||
            message.includes('Warning: A suspended resource finished loading inside a test'))) {
        return;
    }
    // Call original console.error for other messages
    originalConsoleError.apply(void 0, args);
};
// Global test cleanup to prevent memory leaks
afterEach(function () {
    // Clear all timers
    jest.clearAllTimers();
    // Clear all mocks
    jest.clearAllMocks();
    // Clear any pending promises
    if (global.gc) {
        global.gc();
    }
});
// Handle unhandled promise rejections
process.on('unhandledRejection', function (reason, promise) {
    // Don't fail the test for unhandled rejections in test environment
    if (process.env.NODE_ENV === 'test' || process.env.JEST_WORKER_ID) {
        return;
    }
    console.error('Unhandled Promise Rejection at:', promise, 'reason:', reason);
    throw reason;
});
// Handle uncaught exceptions
process.on('uncaughtException', function (error) {
    // Don't fail the test for uncaught exceptions in test environment
    if (process.env.NODE_ENV === 'test' || process.env.JEST_WORKER_ID) {
        return;
    }
    console.error('Uncaught Exception:', error);
    throw error;
});
// Global test teardown
afterAll(function () {
    // Clear all timers
    jest.clearAllTimers();
    // Force garbage collection if available
    if (global.gc) {
        global.gc();
    }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2dhbXphcmFtYXphbm92L0Rlc2t0b3AvZnVtby9zcmMvc2hhcmVkL3Rlc3Rpbmcvc2V0dXAvZ2xvYmFsL3NldHVwLnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7R0FLRzs7QUFFSCxxQ0FBbUM7QUFFbkMsNEJBQTRCO0FBQzVCLDhFQUE0RTtBQUU1RSxrQkFBa0I7QUFDbEIsb0VBQWtFO0FBRWxFLHVDQUF1QztBQUN2QyxtRUFBaUU7QUFTakUsb0NBQW9DO0FBQ3BDLElBQU0sZ0JBQWdCLEdBQUc7SUFDdkIsZUFBZTtJQUNmLFdBQVcsRUFBRSxLQUFLO0lBRWxCLDhCQUE4QjtJQUM5QixLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUssSUFBSSxDQUFDLGNBQU0sT0FBQSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksUUFBUSxFQUFFLENBQUMsRUFBL0IsQ0FBK0IsQ0FBQztDQUMvRCxDQUFDO0FBRUYsNkJBQTZCO0FBQzdCLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLGdCQUFnQixDQUFDLENBQUM7QUFFeEMsb0RBQW9EO0FBQ3BELElBQU0sb0JBQW9CLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztBQUUzQyxnRUFBZ0U7QUFDaEUsT0FBTyxDQUFDLEtBQUssR0FBRztJQUFDLGNBQWtCO1NBQWxCLFVBQWtCLEVBQWxCLHFCQUFrQixFQUFsQixJQUFrQjtRQUFsQix5QkFBa0I7O0lBQ2pDLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV4QiwyQ0FBMkM7SUFDM0MsSUFDRSxPQUFPLE9BQU8sS0FBSyxRQUFRO1FBQzNCLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxpREFBaUQsQ0FBQztZQUNsRSxPQUFPLENBQUMsUUFBUSxDQUFDLGtDQUFrQyxDQUFDO1lBQ3BELE9BQU8sQ0FBQyxRQUFRLENBQUMsaUNBQWlDLENBQUM7WUFDbkQsT0FBTyxDQUFDLFFBQVEsQ0FBQyxnREFBZ0QsQ0FBQztZQUNsRSxPQUFPLENBQUMsUUFBUSxDQUFDLHlCQUF5QixDQUFDO1lBQzNDLE9BQU8sQ0FBQyxRQUFRLENBQUMsNkJBQTZCLENBQUM7WUFDL0MsT0FBTyxDQUFDLFFBQVEsQ0FBQyxrQ0FBa0MsQ0FBQztZQUNwRCxPQUFPLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDO1lBQ3ZDLE9BQU8sQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUM7WUFDckMsT0FBTyxDQUFDLFFBQVEsQ0FBQywrQkFBK0IsQ0FBQztZQUNqRCxPQUFPLENBQUMsUUFBUSxDQUFDLHdCQUF3QixDQUFDO1lBQzFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsc0JBQXNCLENBQUM7WUFDeEMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxnQ0FBZ0MsQ0FBQztZQUNsRCxPQUFPLENBQUMsUUFBUSxDQUFDLDBCQUEwQixDQUFDO1lBQzVDLE9BQU8sQ0FBQyxRQUFRLENBQUMsc0JBQXNCLENBQUM7WUFDeEMsT0FBTyxDQUFDLFFBQVEsQ0FBQyw4REFBOEQsQ0FBQyxDQUFDLEVBQ25GLENBQUM7UUFDRCxPQUFPO0lBQ1QsQ0FBQztJQUVELGlEQUFpRDtJQUNqRCxvQkFBb0IsZUFBSSxJQUFJLEVBQUU7QUFDaEMsQ0FBQyxDQUFDO0FBRUYsOENBQThDO0FBQzlDLFNBQVMsQ0FBQztJQUNSLG1CQUFtQjtJQUNuQixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDdEIsa0JBQWtCO0lBQ2xCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUNyQiw2QkFBNkI7SUFDN0IsSUFBSSxNQUFNLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDZCxNQUFNLENBQUMsRUFBRSxFQUFFLENBQUM7SUFDZCxDQUFDO0FBQ0gsQ0FBQyxDQUFDLENBQUM7QUFFSCxzQ0FBc0M7QUFDdEMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxVQUFDLE1BQU0sRUFBRSxPQUFPO0lBQy9DLG1FQUFtRTtJQUNuRSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLE1BQU0sSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ2xFLE9BQU87SUFDVCxDQUFDO0lBQ0QsT0FBTyxDQUFDLEtBQUssQ0FBQyxpQ0FBaUMsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzdFLE1BQU0sTUFBTSxDQUFDO0FBQ2YsQ0FBQyxDQUFDLENBQUM7QUFFSCw2QkFBNkI7QUFDN0IsT0FBTyxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxVQUFDLEtBQUs7SUFDcEMsa0VBQWtFO0lBQ2xFLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssTUFBTSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDbEUsT0FBTztJQUNULENBQUM7SUFDRCxPQUFPLENBQUMsS0FBSyxDQUFDLHFCQUFxQixFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzVDLE1BQU0sS0FBSyxDQUFDO0FBQ2QsQ0FBQyxDQUFDLENBQUM7QUFFSCx1QkFBdUI7QUFDdkIsUUFBUSxDQUFDO0lBQ1AsbUJBQW1CO0lBQ25CLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN0Qix3Q0FBd0M7SUFDeEMsSUFBSSxNQUFNLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDZCxNQUFNLENBQUMsRUFBRSxFQUFFLENBQUM7SUFDZCxDQUFDO0FBQ0gsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2dhbXphcmFtYXphbm92L0Rlc2t0b3AvZnVtby9zcmMvc2hhcmVkL3Rlc3Rpbmcvc2V0dXAvZ2xvYmFsL3NldHVwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogR2xvYmFsIFRlc3QgU2V0dXBcbiAqXG4gKiBUaGlzIGZpbGUgaXMgZXhlY3V0ZWQgYmVmb3JlIGFsbCB0ZXN0cyBydW4uXG4gKiBJdCBzZXRzIHVwIGdsb2JhbCB0ZXN0IGVudmlyb25tZW50IGNvbmZpZ3VyYXRpb25zIGFuZCBwb2x5ZmlsbHMuXG4gKi9cblxuaW1wb3J0ICdAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tJztcblxuLy8gTW9jayBJbnRlcnNlY3Rpb25PYnNlcnZlclxuaW1wb3J0ICdAL3NoYXJlZC90ZXN0aW5nL21vY2tzL2Jyb3dzZXIvbGliL21lZGlhL2ludGVyc2VjdGlvbk9ic2VydmVyLm1vY2snO1xuXG4vLyBNb2NrIG1hdGNoTWVkaWFcbmltcG9ydCAnQC9zaGFyZWQvdGVzdGluZy9tb2Nrcy9icm93c2VyL2xpYi9tZWRpYS9tYXRjaE1lZGlhLm1vY2snO1xuXG4vLyBNb2NrIGxvY2FsU3RvcmFnZSBhbmQgc2Vzc2lvblN0b3JhZ2VcbmltcG9ydCAnQC9zaGFyZWQvdGVzdGluZy9tb2Nrcy9icm93c2VyL2xpYi9zdG9yYWdlL3N0b3JhZ2UubW9jayc7XG5cbi8vIFR5cGUgZGVmaW5pdGlvbnMgZm9yIGdsb2JhbCB0ZXN0IGVudmlyb25tZW50XG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBXaW5kb3cge1xuICAgIEhUTUxFbGVtZW50OiB0eXBlb2YgSFRNTEVsZW1lbnQ7XG4gIH1cbn1cblxuLy8gQ29uZmlndXJlIGdsb2JhbCB0ZXN0IGVudmlyb25tZW50XG5jb25zdCBnbG9iYWxUZXN0Q29uZmlnID0ge1xuICAvLyBUZXN0IHRpbWVvdXRcbiAgdGVzdFRpbWVvdXQ6IDEwMDAwLFxuXG4gIC8vIE1vY2sgZmV0Y2ggaWYgbm90IGF2YWlsYWJsZVxuICBmZXRjaDogZ2xvYmFsLmZldGNoIHx8ICgoKSA9PiBQcm9taXNlLnJlc29sdmUobmV3IFJlc3BvbnNlKCkpKSxcbn07XG5cbi8vIEFwcGx5IGdsb2JhbCBjb25maWd1cmF0aW9uXG5PYmplY3QuYXNzaWduKGdsb2JhbCwgZ2xvYmFsVGVzdENvbmZpZyk7XG5cbi8vIEFkZCBjdXN0b20gbWF0Y2hlcnMgb3IgZ2xvYmFsIHRlc3QgdXRpbGl0aWVzIGhlcmVcbmNvbnN0IG9yaWdpbmFsQ29uc29sZUVycm9yID0gY29uc29sZS5lcnJvcjtcblxuLy8gRmlsdGVyIG91dCBzcGVjaWZpYyBSZWFjdCB3YXJuaW5ncyB0aGF0IGFyZSBleHBlY3RlZCBpbiB0ZXN0c1xuY29uc29sZS5lcnJvciA9ICguLi5hcmdzOiB1bmtub3duW10pID0+IHtcbiAgY29uc3QgbWVzc2FnZSA9IGFyZ3NbMF07XG5cbiAgLy8gU2tpcCBSZWFjdCB3YXJuaW5ncyBhYm91dCBhY3QoKSBpbiB0ZXN0c1xuICBpZiAoXG4gICAgdHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnICYmXG4gICAgKG1lc3NhZ2UuaW5jbHVkZXMoJ1dhcm5pbmc6IFJlYWN0RE9NLnJlbmRlciBpcyBubyBsb25nZXIgc3VwcG9ydGVkJykgfHxcbiAgICAgIG1lc3NhZ2UuaW5jbHVkZXMoJ1dhcm5pbmc6IEFuIGludmFsaWQgZm9ybSBjb250cm9sJykgfHxcbiAgICAgIG1lc3NhZ2UuaW5jbHVkZXMoJ1RoZSBhYm92ZSBlcnJvciBvY2N1cnJlZCBpbiB0aGUnKSB8fFxuICAgICAgbWVzc2FnZS5pbmNsdWRlcygnUmVhY3Qgd2lsbCB0cnkgdG8gcmVjcmVhdGUgdGhpcyBjb21wb25lbnQgdHJlZScpIHx8XG4gICAgICBtZXNzYWdlLmluY2x1ZGVzKCdFcnJvcjogVW5jYXVnaHQgW0Vycm9yOicpIHx8XG4gICAgICBtZXNzYWdlLmluY2x1ZGVzKCdFcnJvcjogVW5jYXVnaHQgW1R5cGVFcnJvcjonKSB8fFxuICAgICAgbWVzc2FnZS5pbmNsdWRlcygnRXJyb3I6IFVuY2F1Z2h0IFtSZWZlcmVuY2VFcnJvcjonKSB8fFxuICAgICAgbWVzc2FnZS5pbmNsdWRlcygnRXJyb3I6IFJlbmRlciBlcnJvcicpIHx8XG4gICAgICBtZXNzYWdlLmluY2x1ZGVzKCdFcnJvcjogVGVzdCBlcnJvcicpIHx8XG4gICAgICBtZXNzYWdlLmluY2x1ZGVzKCdFcnJvcjogTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpIHx8XG4gICAgICBtZXNzYWdlLmluY2x1ZGVzKCdFcnJvcjogRmFpbGVkIHRvIGZldGNoJykgfHxcbiAgICAgIG1lc3NhZ2UuaW5jbHVkZXMoJ0Vycm9yOiBMb2FkaW5nIGNodW5rJykgfHxcbiAgICAgIG1lc3NhZ2UuaW5jbHVkZXMoJ0Vycm9yOiBSZWd1bGFyIGNvbXBvbmVudCBlcnJvcicpIHx8XG4gICAgICBtZXNzYWdlLmluY2x1ZGVzKCdFcnJvcjogU3luY2hyb25vdXMgZXJyb3InKSB8fFxuICAgICAgbWVzc2FnZS5pbmNsdWRlcygnRXJyb3I6IENvbXBsZXggZXJyb3InKSB8fFxuICAgICAgbWVzc2FnZS5pbmNsdWRlcygnV2FybmluZzogQSBzdXNwZW5kZWQgcmVzb3VyY2UgZmluaXNoZWQgbG9hZGluZyBpbnNpZGUgYSB0ZXN0JykpXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIENhbGwgb3JpZ2luYWwgY29uc29sZS5lcnJvciBmb3Igb3RoZXIgbWVzc2FnZXNcbiAgb3JpZ2luYWxDb25zb2xlRXJyb3IoLi4uYXJncyk7XG59O1xuXG4vLyBHbG9iYWwgdGVzdCBjbGVhbnVwIHRvIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5hZnRlckVhY2goKCkgPT4ge1xuICAvLyBDbGVhciBhbGwgdGltZXJzXG4gIGplc3QuY2xlYXJBbGxUaW1lcnMoKTtcbiAgLy8gQ2xlYXIgYWxsIG1vY2tzXG4gIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICAvLyBDbGVhciBhbnkgcGVuZGluZyBwcm9taXNlc1xuICBpZiAoZ2xvYmFsLmdjKSB7XG4gICAgZ2xvYmFsLmdjKCk7XG4gIH1cbn0pO1xuXG4vLyBIYW5kbGUgdW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uc1xucHJvY2Vzcy5vbigndW5oYW5kbGVkUmVqZWN0aW9uJywgKHJlYXNvbiwgcHJvbWlzZSkgPT4ge1xuICAvLyBEb24ndCBmYWlsIHRoZSB0ZXN0IGZvciB1bmhhbmRsZWQgcmVqZWN0aW9ucyBpbiB0ZXN0IGVudmlyb25tZW50XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnIHx8IHByb2Nlc3MuZW52LkpFU1RfV09SS0VSX0lEKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBQcm9taXNlIFJlamVjdGlvbiBhdDonLCBwcm9taXNlLCAncmVhc29uOicsIHJlYXNvbik7XG4gIHRocm93IHJlYXNvbjtcbn0pO1xuXG4vLyBIYW5kbGUgdW5jYXVnaHQgZXhjZXB0aW9uc1xucHJvY2Vzcy5vbigndW5jYXVnaHRFeGNlcHRpb24nLCAoZXJyb3IpID0+IHtcbiAgLy8gRG9uJ3QgZmFpbCB0aGUgdGVzdCBmb3IgdW5jYXVnaHQgZXhjZXB0aW9ucyBpbiB0ZXN0IGVudmlyb25tZW50XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnIHx8IHByb2Nlc3MuZW52LkpFU1RfV09SS0VSX0lEKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnNvbGUuZXJyb3IoJ1VuY2F1Z2h0IEV4Y2VwdGlvbjonLCBlcnJvcik7XG4gIHRocm93IGVycm9yO1xufSk7XG5cbi8vIEdsb2JhbCB0ZXN0IHRlYXJkb3duXG5hZnRlckFsbCgoKSA9PiB7XG4gIC8vIENsZWFyIGFsbCB0aW1lcnNcbiAgamVzdC5jbGVhckFsbFRpbWVycygpO1xuICAvLyBGb3JjZSBnYXJiYWdlIGNvbGxlY3Rpb24gaWYgYXZhaWxhYmxlXG4gIGlmIChnbG9iYWwuZ2MpIHtcbiAgICBnbG9iYWwuZ2MoKTtcbiAgfVxufSk7XG4iXSwidmVyc2lvbiI6M30=