{"file":"/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/setup/global/setup.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/setup/global/setup.ts"],"sourcesContent":["/**\n * Global Test Setup\n *\n * This file is executed before all tests run.\n * It sets up global test environment configurations and polyfills.\n */\n\nimport '@testing-library/jest-dom';\n\n// Mock IntersectionObserver\nimport '@/shared/testing/mocks/browser/lib/media/intersectionObserver.mock';\n\n// Mock matchMedia\nimport '@/shared/testing/mocks/browser/lib/media/matchMedia.mock';\n\n// Mock localStorage and sessionStorage\nimport '@/shared/testing/mocks/browser/lib/storage/storage.mock';\n\n// Type definitions for global test environment\ndeclare global {\n  interface Window {\n    HTMLElement: typeof HTMLElement;\n  }\n}\n\n// Configure global test environment\nconst globalTestConfig = {\n  // Test timeout\n  testTimeout: 10000,\n\n  // Mock fetch if not available\n  fetch: global.fetch || (() => Promise.resolve(new Response())),\n};\n\n// Apply global configuration\nObject.assign(global, globalTestConfig);\n\n// Add custom matchers or global test utilities here\nconst originalConsoleError = console.error;\n\n// Filter out specific React warnings that are expected in tests\nconsole.error = (...args: unknown[]) => {\n  const message = args[0];\n\n  // Skip React warnings about act() in tests\n  if (\n    typeof message === 'string' &&\n    (message.includes('Warning: ReactDOM.render is no longer supported') ||\n      message.includes('Warning: An invalid form control') ||\n      message.includes('The above error occurred in the') ||\n      message.includes('React will try to recreate this component tree') ||\n      message.includes('Error: Uncaught [Error:') ||\n      message.includes('Error: Uncaught [TypeError:') ||\n      message.includes('Error: Uncaught [ReferenceError:') ||\n      message.includes('Error: Render error') ||\n      message.includes('Error: Test error') ||\n      message.includes('Error: Network request failed') ||\n      message.includes('Error: Failed to fetch') ||\n      message.includes('Error: Loading chunk') ||\n      message.includes('Error: Regular component error') ||\n      message.includes('Error: Synchronous error') ||\n      message.includes('Error: Complex error') ||\n      message.includes('Warning: A suspended resource finished loading inside a test'))\n  ) {\n    return;\n  }\n\n  // Call original console.error for other messages\n  originalConsoleError(...args);\n};\n\n// Global test cleanup to prevent memory leaks\nafterEach(() => {\n  // Clear all timers\n  jest.clearAllTimers();\n  // Clear all mocks\n  jest.clearAllMocks();\n  // Clear any pending promises\n  if (global.gc) {\n    global.gc();\n  }\n});\n\n// Handle unhandled promise rejections\nprocess.on('unhandledRejection', (reason, promise) => {\n  // Don't fail the test for unhandled rejections in test environment\n  if (process.env.NODE_ENV === 'test' || process.env.JEST_WORKER_ID) {\n    return;\n  }\n  console.error('Unhandled Promise Rejection at:', promise, 'reason:', reason);\n  throw reason;\n});\n\n// Handle uncaught exceptions\nprocess.on('uncaughtException', (error) => {\n  // Don't fail the test for uncaught exceptions in test environment\n  if (process.env.NODE_ENV === 'test' || process.env.JEST_WORKER_ID) {\n    return;\n  }\n  console.error('Uncaught Exception:', error);\n  throw error;\n});\n\n// Global test teardown\nafterAll(() => {\n  // Clear all timers\n  jest.clearAllTimers();\n  // Force garbage collection if available\n  if (global.gc) {\n    global.gc();\n  }\n});\n"],"version":3}