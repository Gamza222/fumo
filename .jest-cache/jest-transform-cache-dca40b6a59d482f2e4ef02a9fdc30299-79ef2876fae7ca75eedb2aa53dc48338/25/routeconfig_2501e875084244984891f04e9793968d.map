{"file":"/Users/gamzaramazanov/Desktop/fumo/src/shared/config/route/route.config.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/config/route/route.config.ts"],"sourcesContent":["import { AppRoute, RouteType, LoaderType, CacheStrategy } from \"./route.enums\";\nimport {\n  RouteConfig,\n  DefaultRouteConfig,\n  RouteConfigSelector,\n  CurrentRouteInfo,\n} from \"./route.types\";\nimport {\n  CACHE_TIMES,\n  MIN_DISPLAY_TIMES,\n  CACHE_KEY_PREFIXES,\n} from \"./route.constants\";\n\n/**\n * Default configuration that applies to all routes\n */\nexport const defaultRouteConfig: DefaultRouteConfig = {\n  loader: {\n    type: LoaderType.CUSTOM,\n    enabled: true,\n    minDisplayTime: MIN_DISPLAY_TIMES.NORMAL,\n    showProgress: true,\n    showStepDetails: false,\n  },\n  cache: {\n    strategy: CacheStrategy.CACHE,\n    enabled: true,\n    ttl: CACHE_TIMES[CacheStrategy.CACHE],\n  },\n};\n\n/**\n * Route-specific configurations\n * Override defaults for specific routes\n */\nexport const routeConfigs: Record<AppRoute, Partial<RouteConfig>> = {\n  [AppRoute.HOME]: {\n    route: AppRoute.HOME,\n    type: RouteType.PUBLIC,\n    loader: {\n      type: LoaderType.FULL,\n      enabled: true,\n      minDisplayTime: MIN_DISPLAY_TIMES.SLOW,\n      showProgress: true,\n      showStepDetails: true,\n      customMessage: \"Loading...\",\n    },\n    cache: {\n      strategy: CacheStrategy.CACHE,\n      enabled: true,\n      key: `${CACHE_KEY_PREFIXES.ROUTE}-home`,\n    },\n    metadata: {\n      title: \"Home - Fumo\",\n      description: \"Fumo main page\",\n      requiresAuth: false,\n    },\n  },\n\n  [AppRoute.ABOUT]: {\n    route: AppRoute.ABOUT,\n    type: RouteType.PUBLIC,\n    ...defaultRouteConfig,\n    metadata: {\n      title: \"About - Fumo\",\n      description: \"Learn more about Fumo\",\n      requiresAuth: false,\n    },\n  },\n};\n\n/**\n * Get route configuration for a specific route\n * Merges route-specific config with defaults\n */\nexport const getRouteConfig = (route: AppRoute): RouteConfig => {\n  const specificConfig = routeConfigs[route];\n\n  return {\n    route,\n    type: specificConfig.type || RouteType.PUBLIC,\n    loader: {\n      ...defaultRouteConfig.loader,\n      ...specificConfig.loader,\n    },\n    cache: {\n      ...defaultRouteConfig.cache,\n      ...specificConfig.cache,\n      ttl:\n        specificConfig.cache?.ttl ||\n        CACHE_TIMES[specificConfig.cache?.strategy || CacheStrategy.CACHE],\n    },\n    metadata: specificConfig.metadata || {},\n  };\n};\n\n/**\n * Get current route configuration based on pathname\n * Handles dynamic routes and fallbacks\n */\nexport const getCurrentRouteConfig = (pathname: string): CurrentRouteInfo => {\n  // Try exact match first\n  const exactRoute = Object.values(AppRoute).find(\n    (route) => route === pathname\n  );\n\n  if (exactRoute) {\n    return {\n      route: exactRoute,\n      pathname,\n      config: getRouteConfig(exactRoute),\n      isMatched: true,\n    };\n  }\n\n  // Handle dynamic routes and patterns\n  for (const route of Object.values(AppRoute)) {\n    if (pathname.startsWith(route) && route !== \"/\") {\n      return {\n        route: route as AppRoute,\n        pathname,\n        config: getRouteConfig(route as AppRoute),\n        isMatched: true,\n      };\n    }\n  }\n\n  // Fallback to home route\n  return {\n    route: AppRoute.HOME,\n    pathname,\n    config: getRouteConfig(AppRoute.HOME),\n    isMatched: false,\n  };\n};\n\n/**\n * Create a route configuration selector\n * Useful for components that need to react to route changes\n */\nexport const createRouteConfigSelector = (): RouteConfigSelector => {\n  return (pathname: string) => {\n    const currentRoute = getCurrentRouteConfig(pathname);\n    return currentRoute.isMatched ? currentRoute.config : null;\n  };\n};\n"],"version":3}