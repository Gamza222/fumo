{"file":"/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/security/authorization.mock.ts","mappings":";AAAA;;;;;GAKG;;;;;;;;;;;;;;;;;;;;;;;AAQH,2BAA2B;AAC3B,IAAM,sBAAsB,GAA8B;IACxD,cAAc;IACd,eAAe;IACf,YAAY;IACZ,aAAa;IACb,cAAc;CACf,CAAC;AAEF,qCAAqC;AACrC,IAAM,eAAe,GAAsB;IACzC,EAAE,EAAE,GAAG;IACP,KAAK,EAAE,kBAAkB;IACzB,QAAQ,EAAE,UAAU;IACpB,IAAI,EAAE,MAAM;IACZ,QAAQ,EAAE,IAAI;IACd,WAAW,EAAE,CAAC,cAAc,EAAE,eAAe,CAAC;IAC9C,SAAS,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC;IACjC,SAAS,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC;CAClC,CAAC;AAEF;;;;;GAKG;AACI,IAAM,wBAAwB,GAAG,UACtC,UAA2D;IAA3D,2BAAA,EAAA,eAA2D;IAE3D,IAAM,WAAW,cACf,aAAa,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,EAC9C,gBAAgB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,EACjD,iBAAiB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,EAClD,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,EACxC,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,EAC3C,iBAAiB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,EAClD,uBAAuB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,CAAC,cAAc,EAAE,eAAe,CAAC,CAAC,EACrF,gBAAgB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,EACjD,kBAAkB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,CAAC,cAAc,EAAE,eAAe,CAAC,CAAC,IAC7E,UAAU,CACd,CAAC;IAEF,OAAO,WAAW,CAAC;AACrB,CAAC,CAAC;AAjBW,QAAA,wBAAwB,4BAiBnC;AAEF;;;;;GAKG;AACI,IAAM,uBAAuB,GAAG,UACrC,UAA2C;IAA3C,2BAAA,EAAA,eAA2C;IAE3C,6BACK,eAAe,GACf,UAAU,EACb;AACJ,CAAC,CAAC;AAPW,QAAA,uBAAuB,2BAOlC;AAEF;;;;;GAKG;AACI,IAAM,eAAe,GAAG,UAC7B,WAA+D;IAA/D,4BAAA,EAAA,oCAA+D;IAE/D,yBAAW,WAAW,QAAE;AAC1B,CAAC,CAAC;AAJW,QAAA,eAAe,mBAI1B;AAEF,yBAAyB;AACZ,QAAA,+BAA+B,GAAG,IAAA,gCAAwB,GAAE,CAAC;AAC7D,QAAA,8BAA8B,GAAG,IAAA,+BAAuB,GAAE,CAAC;AAC3D,QAAA,sBAAsB,GAAG,IAAA,uBAAe,GAAE,CAAC","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/security/authorization.mock.ts"],"sourcesContent":["/**\n * Authorization Service Mock for Testing\n *\n * Provides mock implementations for authorization service testing.\n * Simulates permission checks, role validation, and access control.\n */\n\nimport {\n  mockAuthorizationServiceInterface,\n  mockPermissionInterface,\n  mockUserInterface,\n} from '../../types/types';\n\n// Default mock permissions\nconst defaultMockPermissions: mockPermissionInterface[] = [\n  'READ_CONTENT',\n  'WRITE_CONTENT',\n  'READ_USERS',\n  'WRITE_USERS',\n  'ADMIN_ACCESS',\n];\n\n// Default mock user with permissions\nconst defaultMockUser: mockUserInterface = {\n  id: '1',\n  email: 'test@example.com',\n  username: 'testuser',\n  role: 'USER',\n  isActive: true,\n  permissions: ['READ_CONTENT', 'WRITE_CONTENT'],\n  createdAt: new Date('2023-01-01'),\n  updatedAt: new Date('2023-01-01'),\n};\n\n/**\n * Creates a mock authorization service for testing\n *\n * @param customData - Optional custom mock data to override defaults\n * @returns A mock authorization service object\n */\nexport const mockAuthorizationService = (\n  customData: Partial<mockAuthorizationServiceInterface> = {}\n): mockAuthorizationServiceInterface => {\n  const mockService: mockAuthorizationServiceInterface = {\n    hasPermission: jest.fn().mockReturnValue(true),\n    hasAnyPermission: jest.fn().mockReturnValue(true),\n    hasAllPermissions: jest.fn().mockReturnValue(true),\n    hasRole: jest.fn().mockReturnValue(true),\n    hasAnyRole: jest.fn().mockReturnValue(true),\n    canAccessResource: jest.fn().mockReturnValue(true),\n    getEffectivePermissions: jest.fn().mockReturnValue(['READ_CONTENT', 'WRITE_CONTENT']),\n    canPerformAction: jest.fn().mockReturnValue(true),\n    getRolePermissions: jest.fn().mockReturnValue(['READ_CONTENT', 'WRITE_CONTENT']),\n    ...customData,\n  };\n\n  return mockService;\n};\n\n/**\n * Creates a mock user with specific permissions for testing\n *\n * @param customData - Optional custom user data to override defaults\n * @returns A mock user object\n */\nexport const mockUserWithPermissions = (\n  customData: Partial<mockUserInterface> = {}\n): mockUserInterface => {\n  return {\n    ...defaultMockUser,\n    ...customData,\n  };\n};\n\n/**\n * Creates mock permissions array for testing\n *\n * @param permissions - Array of permissions to include\n * @returns Array of mock permissions\n */\nexport const mockPermissions = (\n  permissions: mockPermissionInterface[] = defaultMockPermissions\n): mockPermissionInterface[] => {\n  return [...permissions];\n};\n\n// Default mock instances\nexport const defaultAuthorizationServiceMock = mockAuthorizationService();\nexport const defaultUserWithPermissionsMock = mockUserWithPermissions();\nexport const defaultPermissionsMock = mockPermissions();\n"],"version":3}