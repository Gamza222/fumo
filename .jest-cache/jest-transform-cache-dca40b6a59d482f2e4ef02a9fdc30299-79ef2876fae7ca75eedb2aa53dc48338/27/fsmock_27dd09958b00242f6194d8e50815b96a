e75a095111420e93e5e4f291a6bf4ddb
"use strict";
/**
 * File System Mock for Testing
 *
 * Provides a mock implementation of the Node.js fs module for testing environments.
 * Simulates file system operations without actually touching the file system.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultFsMock = exports.resetFsMock = exports.setupFsMock = exports.mockFs = void 0;
// Mock file system data
var mockFileSystem = {};
// Mock directory structure
var mockDirectories = new Set();
/**
 * Creates a mock fs module for testing
 *
 * @param customData - Optional custom file system data
 * @returns A mock fs module
 */
var mockFs = function (customData) {
    if (customData === void 0) { customData = {}; }
    // Reset mock data
    Object.keys(mockFileSystem).forEach(function (key) { return delete mockFileSystem[key]; });
    mockDirectories.clear();
    // Set up custom data
    Object.entries(customData).forEach(function (_a) {
        var path = _a[0], content = _a[1];
        if (typeof content === 'boolean') {
            if (content) {
                mockDirectories.add(path);
            }
        }
        else {
            mockFileSystem[path] = content;
        }
    });
    var mockedFs = {
        existsSync: jest.fn(function (path) {
            return (Object.prototype.hasOwnProperty.call(mockFileSystem, path) || mockDirectories.has(path));
        }),
        readFileSync: jest.fn(function (path) {
            if (Object.prototype.hasOwnProperty.call(mockFileSystem, path)) {
                return mockFileSystem[path];
            }
            throw new Error("ENOENT: no such file or directory, open '".concat(path, "'"));
        }),
        writeFileSync: jest.fn(function (path, content) {
            mockFileSystem[path] = content;
        }),
        mkdirSync: jest.fn(function (path, options) {
            if (options === null || options === void 0 ? void 0 : options.recursive) {
                // Create parent directories
                var parts = path.split('/');
                for (var i = 1; i <= parts.length; i++) {
                    var parentPath = parts.slice(0, i).join('/');
                    if (parentPath) {
                        mockDirectories.add(parentPath);
                    }
                }
            }
            else {
                mockDirectories.add(path);
            }
            return 'mocked';
        }),
        readdirSync: jest.fn(function (path) {
            var entries = [];
            // Find files and directories that start with this path
            Object.keys(mockFileSystem).forEach(function (filePath) {
                if (filePath.startsWith(path + '/') && !filePath.substring(path.length + 1).includes('/')) {
                    entries.push(filePath.split('/').pop());
                }
            });
            mockDirectories.forEach(function (dirPath) {
                if (dirPath.startsWith(path + '/') && !dirPath.substring(path.length + 1).includes('/')) {
                    entries.push(dirPath.split('/').pop());
                }
            });
            return entries;
        }),
        statSync: jest.fn(function (path) {
            if (mockDirectories.has(path)) {
                return { isDirectory: function () { return true; } };
            }
            if (Object.prototype.hasOwnProperty.call(mockFileSystem, path)) {
                return { isDirectory: function () { return false; } };
            }
            throw new Error("ENOENT: no such file or directory, stat '".concat(path, "'"));
        }),
    };
    return mockedFs;
};
exports.mockFs = mockFs;
/**
 * Sets up global fs mock
 *
 * @param customData - Optional custom file system data
 */
var setupFsMock = function (customData) {
    if (customData === void 0) { customData = {}; }
    var fsMock = (0, exports.mockFs)(customData);
    jest.doMock('fs', function () { return fsMock; });
};
exports.setupFsMock = setupFsMock;
/**
 * Resets the file system mock
 */
var resetFsMock = function () {
    Object.keys(mockFileSystem).forEach(function (key) { return delete mockFileSystem[key]; });
    mockDirectories.clear();
};
exports.resetFsMock = resetFsMock;
// Default fs mock instance
exports.defaultFsMock = (0, exports.mockFs)();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,