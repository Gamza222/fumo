{"file":"/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/node/lib/fs/fs.mock.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/node/lib/fs/fs.mock.ts"],"sourcesContent":["/**\n * File System Mock for Testing\n *\n * Provides a mock implementation of the Node.js fs module for testing environments.\n * Simulates file system operations without actually touching the file system.\n */\n\nimport * as fs from 'fs';\n\n// Mock file system data\nconst mockFileSystem: Record<string, string | boolean> = {};\n\n// Mock directory structure\nconst mockDirectories: Set<string> = new Set();\n\n/**\n * Creates a mock fs module for testing\n *\n * @param customData - Optional custom file system data\n * @returns A mock fs module\n */\nexport const mockFs = (customData: Record<string, string | boolean> = {}) => {\n  // Reset mock data\n  Object.keys(mockFileSystem).forEach((key) => delete mockFileSystem[key]);\n  mockDirectories.clear();\n\n  // Set up custom data\n  Object.entries(customData).forEach(([path, content]) => {\n    if (typeof content === 'boolean') {\n      if (content) {\n        mockDirectories.add(path);\n      }\n    } else {\n      mockFileSystem[path] = content;\n    }\n  });\n\n  const mockedFs = {\n    existsSync: jest.fn((path: string) => {\n      return (\n        Object.prototype.hasOwnProperty.call(mockFileSystem, path) || mockDirectories.has(path)\n      );\n    }),\n\n    readFileSync: jest.fn((path: string) => {\n      if (Object.prototype.hasOwnProperty.call(mockFileSystem, path)) {\n        return mockFileSystem[path];\n      }\n      throw new Error(`ENOENT: no such file or directory, open '${path}'`);\n    }),\n\n    writeFileSync: jest.fn((path: string, content: string) => {\n      mockFileSystem[path] = content;\n    }),\n\n    mkdirSync: jest.fn((path: string, options?: { recursive?: boolean }) => {\n      if (options?.recursive) {\n        // Create parent directories\n        const parts = path.split('/');\n        for (let i = 1; i <= parts.length; i++) {\n          const parentPath = parts.slice(0, i).join('/');\n          if (parentPath) {\n            mockDirectories.add(parentPath);\n          }\n        }\n      } else {\n        mockDirectories.add(path);\n      }\n      return 'mocked';\n    }),\n\n    readdirSync: jest.fn((path: string) => {\n      const entries: string[] = [];\n\n      // Find files and directories that start with this path\n      Object.keys(mockFileSystem).forEach((filePath) => {\n        if (filePath.startsWith(path + '/') && !filePath.substring(path.length + 1).includes('/')) {\n          entries.push(filePath.split('/').pop()!);\n        }\n      });\n\n      mockDirectories.forEach((dirPath) => {\n        if (dirPath.startsWith(path + '/') && !dirPath.substring(path.length + 1).includes('/')) {\n          entries.push(dirPath.split('/').pop()!);\n        }\n      });\n\n      return entries;\n    }),\n\n    statSync: jest.fn((path: string) => {\n      if (mockDirectories.has(path)) {\n        return { isDirectory: () => true };\n      }\n      if (Object.prototype.hasOwnProperty.call(mockFileSystem, path)) {\n        return { isDirectory: () => false };\n      }\n      throw new Error(`ENOENT: no such file or directory, stat '${path}'`);\n    }),\n  };\n\n  return mockedFs as unknown as jest.Mocked<typeof fs>;\n};\n\n/**\n * Sets up global fs mock\n *\n * @param customData - Optional custom file system data\n */\nexport const setupFsMock = (customData: Record<string, string | boolean> = {}): void => {\n  const fsMock = mockFs(customData);\n\n  jest.doMock('fs', () => fsMock);\n};\n\n/**\n * Resets the file system mock\n */\nexport const resetFsMock = (): void => {\n  Object.keys(mockFileSystem).forEach((key) => delete mockFileSystem[key]);\n  mockDirectories.clear();\n};\n\n// Default fs mock instance\nexport const defaultFsMock = mockFs();\n"],"version":3}