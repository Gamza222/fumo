{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/performance/lib/performance-monitor/performance-monitor.test.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/performance/lib/performance-monitor/performance-monitor.test.ts"],"sourcesContent":["import {\n  getNavigationTiming,\n  getPerformanceTiming,\n  measureAsyncPerformance,\n  measurePerformance,\n  performanceMonitor,\n  PerformanceMonitor,\n} from './performance-monitor';\nimport { PerformanceRating } from '../../types/performance.enums';\n\n// Import performance mocks from factory\nimport { mockNavigationEntries, setupPerformanceMock } from '@/shared/testing/mocks/browser';\n\n// Setup performance mock\nsetupPerformanceMock();\n\ndescribe('PerformanceMonitor', () => {\n  let monitor: PerformanceMonitor;\n\n  beforeEach(() => {\n    monitor = new PerformanceMonitor();\n    jest.clearAllMocks();\n  });\n\n  describe('addMetric', () => {\n    it('should add a metric', () => {\n      const metric = {\n        name: 'test',\n        value: 100,\n        timestamp: Date.now(),\n        rating: PerformanceRating.GOOD,\n      };\n\n      monitor.addMetric(metric);\n      const metrics = monitor.getMetrics();\n\n      expect(metrics).toHaveLength(1);\n      expect(metrics[0]).toEqual(metric);\n    });\n  });\n\n  describe('getMetricsByName', () => {\n    it('should return metrics by name', () => {\n      const metric1 = { name: 'test1', value: 100, timestamp: Date.now() };\n      const metric2 = { name: 'test2', value: 200, timestamp: Date.now() };\n      const metric3 = { name: 'test1', value: 300, timestamp: Date.now() };\n\n      monitor.addMetric(metric1);\n      monitor.addMetric(metric2);\n      monitor.addMetric(metric3);\n\n      const test1Metrics = monitor.getMetricsByName('test1');\n      expect(test1Metrics).toHaveLength(2);\n      expect(test1Metrics[0]).toEqual(metric1);\n      expect(test1Metrics[1]).toEqual(metric3);\n    });\n  });\n\n  describe('subscribe', () => {\n    it('should notify subscribers when metrics are added', () => {\n      const callback = jest.fn();\n      const unsubscribe = monitor.subscribe(callback);\n\n      monitor.addMetric({ name: 'test', value: 100, timestamp: Date.now() });\n\n      expect(callback).toHaveBeenCalledWith(\n        expect.objectContaining({\n          metrics: expect.arrayContaining([expect.objectContaining({ name: 'test', value: 100 })]),\n        })\n      );\n\n      unsubscribe();\n    });\n  });\n\n  describe('clear', () => {\n    it('should clear all metrics', () => {\n      monitor.addMetric({ name: 'test', value: 100, timestamp: Date.now() });\n      expect(monitor.getMetrics()).toHaveLength(1);\n\n      monitor.clear();\n      expect(monitor.getMetrics()).toHaveLength(0);\n    });\n  });\n});\n\ndescribe('measurePerformance', () => {\n  it('should measure function execution time', () => {\n    const fn = jest.fn(() => 'result');\n    const result = measurePerformance('test', fn);\n\n    expect(result).toBe('result');\n    expect(fn).toHaveBeenCalled();\n    expect(performanceMonitor.getMetrics()).toHaveLength(1);\n  });\n});\n\ndescribe('measureAsyncPerformance', () => {\n  it('should measure async function execution time', async () => {\n    // Clear any existing metrics first\n    performanceMonitor.clear();\n\n    const fn = jest.fn(() => Promise.resolve('result'));\n    const result = await measureAsyncPerformance('test', fn);\n\n    expect(result).toBe('result');\n    expect(fn).toHaveBeenCalled();\n    expect(performanceMonitor.getMetrics()).toHaveLength(1);\n  });\n});\n\ndescribe('getPerformanceTiming', () => {\n  it('should return performance timing', () => {\n    const timing = getPerformanceTiming();\n    expect(timing).toEqual({\n      navigationStart: 0,\n      loadEventEnd: 1000,\n    });\n  });\n});\n\ndescribe('getNavigationTiming', () => {\n  it('should return navigation timing', () => {\n    // Use mock navigation entries from factory\n    const mockEntries = mockNavigationEntries();\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const originalGetEntriesByType = window.performance.getEntriesByType;\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    window.performance.getEntriesByType = jest.fn((type) => {\n      if (type === 'navigation') {\n        return mockEntries;\n      }\n      return [];\n    }) as any;\n\n    const timing = getNavigationTiming();\n    expect(timing).toBeDefined();\n    expect(timing?.name).toBe('navigation');\n    expect(timing?.startTime).toBe(0);\n    expect(timing?.duration).toBe(1000);\n\n    // Restore original function\n    window.performance.getEntriesByType = originalGetEntriesByType;\n  });\n});\n"],"version":3}