a9709a362de5da63cc4669787cc7636c
"use strict";
/**
 * Environment Configuration
 *
 * Main environment configuration class.
 * Clean, focused configuration with better organization.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateEnvironment = exports.envConfig = exports.EnvironmentConfig = void 0;
var constants_1 = require("./constants");
var validation_1 = require("./validation");
var EnvironmentConfig = /** @class */ (function () {
    function EnvironmentConfig() {
        var currentEnv = (0, validation_1.getCurrentEnvironment)();
        // Environment detection
        this.isDevelopment = (0, validation_1.isDevelopment)();
        this.isProduction = (0, validation_1.isProduction)();
        this.isTest = (0, validation_1.isTest)();
        this.isPreview = (0, validation_1.isPreview)();
        // Core configuration
        this.port = this.getNumber('PORT', Number(constants_1.ENV_DEFAULTS.PORT) || 3000);
        this.appName = this.getString('NEXT_PUBLIC_APP_NAME', constants_1.ENV_DEFAULTS.NEXT_PUBLIC_APP_NAME || 'Abstract Team');
        this.appVersion = this.getString('NEXT_PUBLIC_APP_VERSION', constants_1.ENV_DEFAULTS.NEXT_PUBLIC_APP_VERSION || '2.0.0');
        this.appEnv = currentEnv;
        // API configuration
        this.apiUrl = this.getString('NEXT_PUBLIC_API_URL', constants_1.ENV_DEFAULTS.NEXT_PUBLIC_API_URL || 'http://localhost:3000/api');
        this.wsUrl = this.getString('NEXT_PUBLIC_WS_URL', constants_1.ENV_DEFAULTS.NEXT_PUBLIC_WS_URL || 'ws://localhost:3000/ws');
        this.graphqlUrl = this.getString('NEXT_PUBLIC_GRAPHQL_URL', constants_1.ENV_DEFAULTS.NEXT_PUBLIC_GRAPHQL_URL || 'http://localhost:3000/graphql');
        // Security configuration
        this.jwtSecret = this.getString('JWT_SECRET', constants_1.ENV_DEFAULTS.JWT_SECRET || 'your-super-secret-jwt-key-change-in-production');
        this.jwtExpiresIn = this.getString('JWT_EXPIRES_IN', constants_1.ENV_DEFAULTS.JWT_EXPIRES_IN || '1h');
        this.rateLimitWindowMs = this.getNumber('RATE_LIMIT_WINDOW_MS', parseInt(constants_1.ENV_DEFAULTS.RATE_LIMIT_WINDOW_MS || '900000'));
        this.rateLimitMaxRequests = this.getNumber('RATE_LIMIT_MAX_REQUESTS', parseInt(constants_1.ENV_DEFAULTS.RATE_LIMIT_MAX_REQUESTS || '100'));
        // Monitoring configuration
        this.sentryDsn = this.getString('SENTRY_DSN', constants_1.ENV_DEFAULTS.SENTRY_DSN || '');
        this.analyticsId = this.getString('NEXT_PUBLIC_ANALYTICS_ID', constants_1.ENV_DEFAULTS.NEXT_PUBLIC_ANALYTICS_ID || '');
        // Debug configuration
        this.debugEnabled = this.getBoolean('NEXT_PUBLIC_DEBUG', constants_1.ENV_DEFAULTS.NEXT_PUBLIC_DEBUG === 'true');
    }
    EnvironmentConfig.prototype.getString = function (key, defaultValue) {
        var value = process.env[key];
        return value !== undefined ? value : defaultValue;
    };
    EnvironmentConfig.prototype.getNumber = function (key, defaultValue) {
        var value = process.env[key];
        if (value === undefined)
            return defaultValue;
        var parsed = Number(value);
        return isNaN(parsed) ? defaultValue : parsed;
    };
    EnvironmentConfig.prototype.getBoolean = function (key, defaultValue) {
        var value = process.env[key];
        if (value === undefined)
            return defaultValue;
        return value === 'true' || value === '1';
    };
    EnvironmentConfig.prototype.validate = function () {
        // Validate JWT secret in production
        if (this.isProduction) {
            if (!this.jwtSecret ||
                this.jwtSecret ===
                    (constants_1.ENV_DEFAULTS.JWT_SECRET || 'your-super-secret-jwt-key-change-in-production')) {
                throw new Error('JWT_SECRET must be changed from default value in production');
            }
        }
    };
    return EnvironmentConfig;
}());
exports.EnvironmentConfig = EnvironmentConfig;
exports.envConfig = new EnvironmentConfig();
var validateEnvironment = function () { return exports.envConfig.validate(); };
exports.validateEnvironment = validateEnvironment;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2dhbXphcmFtYXphbm92L0Rlc2t0b3AvZnVtby9jb25maWcvZW52L2NvbmZpZy50cyIsIm1hcHBpbmdzIjoiO0FBQUE7Ozs7O0dBS0c7OztBQUdILHlDQUEyQztBQUMzQywyQ0FNc0I7QUFFdEI7SUErQkU7UUFDRSxJQUFNLFVBQVUsR0FBRyxJQUFBLGtDQUFxQixHQUFFLENBQUM7UUFFM0Msd0JBQXdCO1FBQ3hCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBQSwwQkFBYSxHQUFFLENBQUM7UUFDckMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFBLHlCQUFZLEdBQUUsQ0FBQztRQUNuQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUEsbUJBQU0sR0FBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBQSxzQkFBUyxHQUFFLENBQUM7UUFFN0IscUJBQXFCO1FBQ3JCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLHdCQUFZLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUM7UUFDdEUsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUMzQixzQkFBc0IsRUFDdEIsd0JBQVksQ0FBQyxvQkFBb0IsSUFBSSxlQUFlLENBQ3JELENBQUM7UUFDRixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQzlCLHlCQUF5QixFQUN6Qix3QkFBWSxDQUFDLHVCQUF1QixJQUFJLE9BQU8sQ0FDaEQsQ0FBQztRQUNGLElBQUksQ0FBQyxNQUFNLEdBQUcsVUFBVSxDQUFDO1FBRXpCLG9CQUFvQjtRQUNwQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQzFCLHFCQUFxQixFQUNyQix3QkFBWSxDQUFDLG1CQUFtQixJQUFJLDJCQUEyQixDQUNoRSxDQUFDO1FBQ0YsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUN6QixvQkFBb0IsRUFDcEIs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LHdCQUFDO0FBQUQsQ0FBQyxBQTdIRCxJQTZIQztBQTdIWSw4Q0FBaUI7QUErSGpCLFFBQUEsU0FBUyxHQUFHLElBQUksaUJBQWlCLEVBQUUsQ0FBQztBQUMxQyxJQUFNLG1CQUFtQixHQUFHLGNBQU0sT0FBQSxpQkFBUyxDQUFDLFFBQVEsRUFBRSxFQUFwQixDQUFvQixDQUFDO0FBQWpELFFBQUEsbUJBQW1CLHVCQUE4QiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZ2FtemFyYW1hemFub3YvRGVza3RvcC9mdW1vL2NvbmZpZy9lbnYvY29uZmlnLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRW52aXJvbm1lbnQgQ29uZmlndXJhdGlvblxuICpcbiAqIE1haW4gZW52aXJvbm1lbnQgY29uZmlndXJhdGlvbiBjbGFzcy5cbiAqIENsZWFuLCBmb2N1c2VkIGNvbmZpZ3VyYXRpb24gd2l0aCBiZXR0ZXIgb3JnYW5pemF0aW9uLlxuICovXG5cbmltcG9ydCB7IEVudkNvbmZpZywgRW52aXJvbm1lbnQgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IEVOVl9ERUZBVUxUUyB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7XG4gIGdldEN1cnJlbnRFbnZpcm9ubWVudCxcbiAgaXNEZXZlbG9wbWVudCxcbiAgaXNQcmV2aWV3LFxuICBpc1Byb2R1Y3Rpb24sXG4gIGlzVGVzdCxcbn0gZnJvbSAnLi92YWxpZGF0aW9uJztcblxuZXhwb3J0IGNsYXNzIEVudmlyb25tZW50Q29uZmlnIGltcGxlbWVudHMgRW52Q29uZmlnIHtcbiAgLy8gRW52aXJvbm1lbnQgZGV0ZWN0aW9uXG4gIHB1YmxpYyByZWFkb25seSBpc0RldmVsb3BtZW50OiBib29sZWFuO1xuICBwdWJsaWMgcmVhZG9ubHkgaXNQcm9kdWN0aW9uOiBib29sZWFuO1xuICBwdWJsaWMgcmVhZG9ubHkgaXNUZXN0OiBib29sZWFuO1xuICBwdWJsaWMgcmVhZG9ubHkgaXNQcmV2aWV3OiBib29sZWFuO1xuXG4gIC8vIENvcmUgY29uZmlndXJhdGlvblxuICBwdWJsaWMgcmVhZG9ubHkgcG9ydDogbnVtYmVyO1xuICBwdWJsaWMgcmVhZG9ubHkgYXBwTmFtZTogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgYXBwVmVyc2lvbjogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgYXBwRW52OiBFbnZpcm9ubWVudDtcblxuICAvLyBBUEkgY29uZmlndXJhdGlvblxuICBwdWJsaWMgcmVhZG9ubHkgYXBpVXJsOiBzdHJpbmc7XG4gIHB1YmxpYyByZWFkb25seSB3c1VybDogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgZ3JhcGhxbFVybDogc3RyaW5nO1xuXG4gIC8vIFNlY3VyaXR5IGNvbmZpZ3VyYXRpb25cbiAgcHVibGljIHJlYWRvbmx5IGp3dFNlY3JldDogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgand0RXhwaXJlc0luOiBzdHJpbmc7XG4gIHB1YmxpYyByZWFkb25seSByYXRlTGltaXRXaW5kb3dNczogbnVtYmVyO1xuICBwdWJsaWMgcmVhZG9ubHkgcmF0ZUxpbWl0TWF4UmVxdWVzdHM6IG51bWJlcjtcblxuICAvLyBNb25pdG9yaW5nIGNvbmZpZ3VyYXRpb25cbiAgcHVibGljIHJlYWRvbmx5IHNlbnRyeURzbjogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgYW5hbHl0aWNzSWQ6IHN0cmluZztcblxuICAvLyBEZWJ1ZyBjb25maWd1cmF0aW9uXG4gIHB1YmxpYyByZWFkb25seSBkZWJ1Z0VuYWJsZWQ6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3QgY3VycmVudEVudiA9IGdldEN1cnJlbnRFbnZpcm9ubWVudCgpO1xuXG4gICAgLy8gRW52aXJvbm1lbnQgZGV0ZWN0aW9uXG4gICAgdGhpcy5pc0RldmVsb3BtZW50ID0gaXNEZXZlbG9wbWVudCgpO1xuICAgIHRoaXMuaXNQcm9kdWN0aW9uID0gaXNQcm9kdWN0aW9uKCk7XG4gICAgdGhpcy5pc1Rlc3QgPSBpc1Rlc3QoKTtcbiAgICB0aGlzLmlzUHJldmlldyA9IGlzUHJldmlldygpO1xuXG4gICAgLy8gQ29yZSBjb25maWd1cmF0aW9uXG4gICAgdGhpcy5wb3J0ID0gdGhpcy5nZXROdW1iZXIoJ1BPUlQnLCBOdW1iZXIoRU5WX0RFRkFVTFRTLlBPUlQpIHx8IDMwMDApO1xuICAgIHRoaXMuYXBwTmFtZSA9IHRoaXMuZ2V0U3RyaW5nKFxuICAgICAgJ05FWFRfUFVCTElDX0FQUF9OQU1FJyxcbiAgICAgIEVOVl9ERUZBVUxUUy5ORVhUX1BVQkxJQ19BUFBfTkFNRSB8fCAnQWJzdHJhY3QgVGVhbSdcbiAgICApO1xuICAgIHRoaXMuYXBwVmVyc2lvbiA9IHRoaXMuZ2V0U3RyaW5nKFxuICAgICAgJ05FWFRfUFVCTElDX0FQUF9WRVJTSU9OJyxcbiAgICAgIEVOVl9ERUZBVUxUUy5ORVhUX1BVQkxJQ19BUFBfVkVSU0lPTiB8fCAnMi4wLjAnXG4gICAgKTtcbiAgICB0aGlzLmFwcEVudiA9IGN1cnJlbnRFbnY7XG5cbiAgICAvLyBBUEkgY29uZmlndXJhdGlvblxuICAgIHRoaXMuYXBpVXJsID0gdGhpcy5nZXRTdHJpbmcoXG4gICAgICAnTkVYVF9QVUJMSUNfQVBJX1VSTCcsXG4gICAgICBFTlZfREVGQVVMVFMuTkVYVF9QVUJMSUNfQVBJX1VSTCB8fCAnaHR0cDovL2xvY2FsaG9zdDozMDAwL2FwaSdcbiAgICApO1xuICAgIHRoaXMud3NVcmwgPSB0aGlzLmdldFN0cmluZyhcbiAgICAgICdORVhUX1BVQkxJQ19XU19VUkwnLFxuICAgICAgRU5WX0RFRkFVTFRTLk5FWFRfUFVCTElDX1dTX1VSTCB8fCAnd3M6Ly9sb2NhbGhvc3Q6MzAwMC93cydcbiAgICApO1xuICAgIHRoaXMuZ3JhcGhxbFVybCA9IHRoaXMuZ2V0U3RyaW5nKFxuICAgICAgJ05FWFRfUFVCTElDX0dSQVBIUUxfVVJMJyxcbiAgICAgIEVOVl9ERUZBVUxUUy5ORVhUX1BVQkxJQ19HUkFQSFFMX1VSTCB8fCAnaHR0cDovL2xvY2FsaG9zdDozMDAwL2dyYXBocWwnXG4gICAgKTtcblxuICAgIC8vIFNlY3VyaXR5IGNvbmZpZ3VyYXRpb25cbiAgICB0aGlzLmp3dFNlY3JldCA9IHRoaXMuZ2V0U3RyaW5nKFxuICAgICAgJ0pXVF9TRUNSRVQnLFxuICAgICAgRU5WX0RFRkFVTFRTLkpXVF9TRUNSRVQgfHwgJ3lvdXItc3VwZXItc2VjcmV0LWp3dC1rZXktY2hhbmdlLWluLXByb2R1Y3Rpb24nXG4gICAgKTtcbiAgICB0aGlzLmp3dEV4cGlyZXNJbiA9IHRoaXMuZ2V0U3RyaW5nKCdKV1RfRVhQSVJFU19JTicsIEVOVl9ERUZBVUxUUy5KV1RfRVhQSVJFU19JTiB8fCAnMWgnKTtcbiAgICB0aGlzLnJhdGVMaW1pdFdpbmRvd01zID0gdGhpcy5nZXROdW1iZXIoXG4gICAgICAnUkFURV9MSU1JVF9XSU5ET1dfTVMnLFxuICAgICAgcGFyc2VJbnQoRU5WX0RFRkFVTFRTLlJBVEVfTElNSVRfV0lORE9XX01TIHx8ICc5MDAwMDAnKVxuICAgICk7XG4gICAgdGhpcy5yYXRlTGltaXRNYXhSZXF1ZXN0cyA9IHRoaXMuZ2V0TnVtYmVyKFxuICAgICAgJ1JBVEVfTElNSVRfTUFYX1JFUVVFU1RTJyxcbiAgICAgIHBhcnNlSW50KEVOVl9ERUZBVUxUUy5SQVRFX0xJTUlUX01BWF9SRVFVRVNUUyB8fCAnMTAwJylcbiAgICApO1xuXG4gICAgLy8gTW9uaXRvcmluZyBjb25maWd1cmF0aW9uXG4gICAgdGhpcy5zZW50cnlEc24gPSB0aGlzLmdldFN0cmluZygnU0VOVFJZX0RTTicsIEVOVl9ERUZBVUxUUy5TRU5UUllfRFNOIHx8ICcnKTtcbiAgICB0aGlzLmFuYWx5dGljc0lkID0gdGhpcy5nZXRTdHJpbmcoXG4gICAgICAnTkVYVF9QVUJMSUNfQU5BTFlUSUNTX0lEJyxcbiAgICAgIEVOVl9ERUZBVUxUUy5ORVhUX1BVQkxJQ19BTkFMWVRJQ1NfSUQgfHwgJydcbiAgICApO1xuXG4gICAgLy8gRGVidWcgY29uZmlndXJhdGlvblxuICAgIHRoaXMuZGVidWdFbmFibGVkID0gdGhpcy5nZXRCb29sZWFuKFxuICAgICAgJ05FWFRfUFVCTElDX0RFQlVHJyxcbiAgICAgIEVOVl9ERUZBVUxUUy5ORVhUX1BVQkxJQ19ERUJVRyA9PT0gJ3RydWUnXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0U3RyaW5nKGtleTogc3RyaW5nLCBkZWZhdWx0VmFsdWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgdmFsdWUgPSBwcm9jZXNzLmVudltrZXldO1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBkZWZhdWx0VmFsdWU7XG4gIH1cblxuICBwcml2YXRlIGdldE51bWJlcihrZXk6IHN0cmluZywgZGVmYXVsdFZhbHVlOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGNvbnN0IHZhbHVlID0gcHJvY2Vzcy5lbnZba2V5XTtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICBjb25zdCBwYXJzZWQgPSBOdW1iZXIodmFsdWUpO1xuICAgIHJldHVybiBpc05hTihwYXJzZWQpID8gZGVmYXVsdFZhbHVlIDogcGFyc2VkO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRCb29sZWFuKGtleTogc3RyaW5nLCBkZWZhdWx0VmFsdWU6IGJvb2xlYW4pOiBib29sZWFuIHtcbiAgICBjb25zdCB2YWx1ZSA9IHByb2Nlc3MuZW52W2tleV07XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgcmV0dXJuIHZhbHVlID09PSAndHJ1ZScgfHwgdmFsdWUgPT09ICcxJztcbiAgfVxuXG4gIHB1YmxpYyB2YWxpZGF0ZSgpOiB2b2lkIHtcbiAgICAvLyBWYWxpZGF0ZSBKV1Qgc2VjcmV0IGluIHByb2R1Y3Rpb25cbiAgICBpZiAodGhpcy5pc1Byb2R1Y3Rpb24pIHtcbiAgICAgIGlmIChcbiAgICAgICAgIXRoaXMuand0U2VjcmV0IHx8XG4gICAgICAgIHRoaXMuand0U2VjcmV0ID09PVxuICAgICAgICAgIChFTlZfREVGQVVMVFMuSldUX1NFQ1JFVCB8fCAneW91ci1zdXBlci1zZWNyZXQtand0LWtleS1jaGFuZ2UtaW4tcHJvZHVjdGlvbicpXG4gICAgICApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdKV1RfU0VDUkVUIG11c3QgYmUgY2hhbmdlZCBmcm9tIGRlZmF1bHQgdmFsdWUgaW4gcHJvZHVjdGlvbicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY29uc3QgZW52Q29uZmlnID0gbmV3IEVudmlyb25tZW50Q29uZmlnKCk7XG5leHBvcnQgY29uc3QgdmFsaWRhdGVFbnZpcm9ubWVudCA9ICgpID0+IGVudkNvbmZpZy52YWxpZGF0ZSgpO1xuIl0sInZlcnNpb24iOjN9