d069868839d178921415ffea98e720ad
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
/**
 * ProgressBar Component Tests
 */
var react_1 = __importDefault(require("react"));
var react_2 = require("@testing-library/react");
var ProgressBar_1 = require("./ProgressBar");
// ============================================================================
// TESTS
// ============================================================================
describe("ProgressBar", function () {
    it("should render with default props", function () {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 50 }));
        expect(react_2.screen.getByText("50%")).toBeInTheDocument();
    });
    it("should render with custom className", function () {
        var container = (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 25, className: "custom-class" })).container;
        var progressBar = container.firstChild;
        expect(progressBar).toHaveClass("custom-class");
    });
    it("should render progress bar with correct width", function () {
        var container = (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 75 })).container;
        // Find the div with inline style (the bar)
        var barElement = container.querySelector('div[style*="width: 75%"]');
        expect(barElement).toBeInTheDocument();
    });
    it("should show percentage when showPercentage is true", function () {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 33, showPercentage: true }));
        expect(react_2.screen.getByText("33%")).toBeInTheDocument();
    });
    it("should hide percentage when showPercentage is false", function () {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 67, showPercentage: false }));
        expect(react_2.screen.queryByText("67%")).not.toBeInTheDocument();
    });
    it("should round progress to nearest integer", function () {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 33.7 }));
        expect(react_2.screen.getByText("34%")).toBeInTheDocument();
    });
    it("should handle edge case of 0 progress", function () {
        var container = (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 0 })).container;
        expect(react_2.screen.getByText("0%")).toBeInTheDocument();
        var barElement = container.querySelector('div[style*="width: 0%"]');
        expect(barElement).toBeInTheDocument();
    });
    it("should handle edge case of 100 progress", function () {
        var container = (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 100 })).container;
        expect(react_2.screen.getByText("100%")).toBeInTheDocument();
        var barElement = container.querySelector('div[style*="width: 100%"]');
        expect(barElement).toBeInTheDocument();
    });
    it("should show message when provided", function () {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 50, message: "Loading files..." }));
        expect(react_2.screen.getByText("Loading files...")).toBeInTheDocument();
    });
    it("should not show message when not provided", function () {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 50 }));
        expect(react_2.screen.getByText("50%")).toBeInTheDocument();
        expect(react_2.screen.queryByText("Loading files...")).not.toBeInTheDocument();
    });
    it("should show both percentage and message", function () {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 75, message: "Almost done...", showPercentage: true }));
        expect(react_2.screen.getByText("75%")).toBeInTheDocument();
        expect(react_2.screen.getByText("Almost done...")).toBeInTheDocument();
    });
    it("should show actual progress above 100 (no clamping in display)", function () {
        var container = (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 150 })).container;
        expect(react_2.screen.getByText("150%")).toBeInTheDocument();
        var barElement = container.querySelector('div[style*="width: 100%"]');
        expect(barElement).toBeInTheDocument(); // Width is clamped
    });
    it("should show actual progress below 0 (no clamping in display)", function () {
        var container = (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: -25 })).container;
        expect(react_2.screen.getByText("-25%")).toBeInTheDocument();
        var barElement = container.querySelector('div[style*="width: 0%"]');
        expect(barElement).toBeInTheDocument(); // Width is clamped
    });
    it("should render with correct DOM structure", function () {
        var container = (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 50, message: "Test message" })).container;
        // Check percentage text exists
        expect(react_2.screen.getByText("50%")).toBeInTheDocument();
        // Check message text exists
        expect(react_2.screen.getByText("Test message")).toBeInTheDocument();
        // Check structure has the right elements
        var divs = container.querySelectorAll("div");
        expect(divs.length).toBeGreaterThan(0); // Should have div elements
    });
    it("should work with all props provided", function () {
        var container = (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 85, showPercentage: true, message: "Finalizing...", className: "custom-progress" })).container;
        expect(react_2.screen.getByText("85%")).toBeInTheDocument();
        expect(react_2.screen.getByText("Finalizing...")).toBeInTheDocument();
        var progressBar = container.firstChild;
        expect(progressBar).toHaveClass("custom-progress");
    });
    it("should work with minimal props", function () {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 0 }));
        expect(react_2.screen.getByText("0%")).toBeInTheDocument();
    });
    it("should handle empty message gracefully", function () {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 50, message: "" }));
        expect(react_2.screen.getByText("50%")).toBeInTheDocument();
        // Empty message should not render anything
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,