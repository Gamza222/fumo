{"file":"/Users/gamzaramazanov/Desktop/fumo/src/shared/lib/dev-tools/debug-panel/debug-panel.tsx","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/lib/dev-tools/debug-panel/debug-panel.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styles from './debug-panel.module.scss';\n\nexport interface DebugData {\n  performance: {\n    renderTime: number;\n    memoryUsage: number;\n    lcp: number;\n    fcp: number;\n    cls: number;\n  };\n  errors: {\n    count: number;\n    messages: string[];\n  };\n  state: Record<string, unknown>;\n}\n\nexport interface DebugPanelProps {\n  className?: string;\n}\n\nexport const DebugPanel: React.FC<DebugPanelProps> = ({ className }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [debugData, setDebugData] = useState<DebugData>({\n    performance: {\n      renderTime: 0,\n      memoryUsage: 0,\n      lcp: 0,\n      fcp: 0,\n      cls: 0,\n    },\n    errors: {\n      count: 0,\n      messages: [],\n    },\n    state: {},\n  });\n\n  useEffect(() => {\n    // Simulate debug data collection\n    const interval = setInterval(() => {\n      setDebugData({\n        performance: {\n          renderTime: Math.random() * 50,\n          memoryUsage: Math.random() * 200,\n          lcp: Math.random() * 3000,\n          fcp: Math.random() * 2000,\n          cls: Math.random() * 0.2,\n        },\n        errors: {\n          count: Math.floor(Math.random() * 3),\n          messages: ['Sample error message'],\n        },\n        state: {\n          user: 'john_doe',\n          theme: 'dark',\n        },\n      });\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className={`${styles.panel} ${className || ''}`}>\n      <button onClick={() => setIsOpen(!isOpen)} className={styles.toggleButton}>\n        Debug\n      </button>\n\n      {isOpen && (\n        <div className={styles.panelContent}>\n          <div className={styles.panelHeader}>\n            <h3 className={styles.panelTitle}>Debug Panel</h3>\n            <button onClick={() => setIsOpen(false)} className={styles.closeButton}>\n              Ã—\n            </button>\n          </div>\n\n          <div className={styles.section}>\n            <h4 className={styles.sectionTitle}>Performance</h4>\n            <div className={styles.sectionContent}>\n              <div className={styles.sectionRow}>\n                <span className={styles.sectionLabel}>Render Time:</span>\n                <span className={styles.sectionValue}>\n                  {debugData.performance.renderTime.toFixed(2)}ms\n                </span>\n              </div>\n              <div className={styles.sectionRow}>\n                <span className={styles.sectionLabel}>Memory:</span>\n                <span className={styles.sectionValue}>\n                  {debugData.performance.memoryUsage.toFixed(2)}MB\n                </span>\n              </div>\n            </div>\n          </div>\n\n          <div className={styles.section}>\n            <h4 className={styles.sectionTitle}>Errors</h4>\n            <div className={styles.sectionContent}>\n              <div className={styles.sectionRow}>\n                <span className={styles.sectionLabel}>Count:</span>\n                <span\n                  className={\n                    debugData.errors.count > 0 ? styles.sectionValueError : styles.sectionValueGood\n                  }\n                >\n                  {debugData.errors.count}\n                </span>\n              </div>\n              {debugData.errors.messages.map((message, index) => (\n                <div key={index} className={styles.errorList}>\n                  {message}\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div className={styles.section}>\n            <h4 className={styles.sectionTitle}>State</h4>\n            <div className={styles.stateContainer}>\n              {Object.keys(debugData.state).length > 0 ? (\n                <pre>{JSON.stringify(debugData.state, null, 2)}</pre>\n              ) : (\n                <span className={styles.stateEmpty}>No state data</span>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n"],"version":3}