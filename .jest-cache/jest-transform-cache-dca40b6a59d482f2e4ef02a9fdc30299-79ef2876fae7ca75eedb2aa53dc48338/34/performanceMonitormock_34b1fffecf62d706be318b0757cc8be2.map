{"file":"/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/performance/performanceMonitor.mock.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/performance/performanceMonitor.mock.ts"],"sourcesContent":["/**\n * Performance Monitor Mock for Testing\n *\n * Provides mock implementations of the PerformanceMonitor class and related functions\n * for testing performance monitoring functionality.\n */\n\nimport type { PerformanceMetric } from '@/infrastructure/performance/types/performance.types';\n\n// Mock performance monitor instance\nexport const mockPerformanceMonitor = {\n  addMetric: jest.fn(),\n  getMetricsByName: jest.fn().mockReturnValue([]),\n  getMetrics: jest.fn().mockReturnValue([]),\n  clear: jest.fn(),\n  subscribe: jest.fn(),\n  unsubscribe: jest.fn(),\n};\n\n// Mock performance monitor class\nexport const MockPerformanceMonitor = jest.fn().mockImplementation(() => mockPerformanceMonitor);\n\n// Mock performance measurement functions\nexport const mockMeasurePerformance = jest\n  .fn()\n  .mockImplementation((name: string, fn: () => unknown) => {\n    const startTime = performance.now();\n    const result = fn();\n    const endTime = performance.now();\n\n    mockPerformanceMonitor.addMetric({\n      name,\n      value: endTime - startTime,\n      timestamp: Date.now(),\n      rating: 'good',\n    });\n\n    return result;\n  });\n\nexport const mockMeasureAsyncPerformance = jest\n  .fn()\n  .mockImplementation(async (name: string, fn: () => Promise<unknown>) => {\n    const startTime = performance.now();\n    const result = await fn();\n    const endTime = performance.now();\n\n    mockPerformanceMonitor.addMetric({\n      name,\n      value: endTime - startTime,\n      timestamp: Date.now(),\n      rating: 'good',\n    });\n\n    return result;\n  });\n\n// Mock performance timing functions\nexport const mockGetPerformanceTiming = jest.fn().mockReturnValue({\n  navigationStart: 0,\n  loadEventEnd: 1000,\n  domContentLoadedEventEnd: 500,\n  loadEventStart: 800,\n});\n\nexport const mockGetNavigationTiming = jest.fn().mockReturnValue({\n  name: 'navigation',\n  startTime: 0,\n  duration: 1000,\n  type: 'navigate',\n});\n\n// Create mock performance monitor instance\nexport const createMockPerformanceMonitorInstance = (\n  customMethods: Partial<typeof mockPerformanceMonitor> = {}\n) => {\n  return {\n    ...mockPerformanceMonitor,\n    ...customMethods,\n  };\n};\n\n// Mock performance monitor with metrics\nexport const mockPerformanceMonitorWithMetrics = (metrics: PerformanceMetric[] = []) => {\n  return {\n    ...mockPerformanceMonitor,\n    getMetrics: jest.fn().mockReturnValue(metrics),\n    getMetricsByName: jest\n      .fn()\n      .mockImplementation((name: string) => metrics.filter((metric) => metric.name === name)),\n  };\n};\n\n// Mock performance monitor with error\nexport const mockPerformanceMonitorWithError = (error: Error) => {\n  return {\n    ...mockPerformanceMonitor,\n    addMetric: jest.fn().mockImplementation(() => {\n      throw error;\n    }),\n  };\n};\n"],"version":3}