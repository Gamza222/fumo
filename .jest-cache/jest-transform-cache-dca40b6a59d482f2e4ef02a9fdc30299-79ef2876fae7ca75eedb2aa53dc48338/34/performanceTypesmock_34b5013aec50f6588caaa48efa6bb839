b160b7487779858c958fdc4c52c326f4
"use strict";

/**
 * Performance Types Mock Data for Testing
 *
 * Provides mock data for performance-related types and interfaces
 * for testing performance monitoring functionality.
 */
/* istanbul ignore next */
function cov_at0hso2mf() {
  var path = "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/performance/performanceTypes.mock.ts";
  var hash = "c29e8b98f5718f8ec53ad6fe1a8882b67d7c34db";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/performance/performanceTypes.mock.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 352
        }
      },
      "2": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 89
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "4": {
        start: {
          line: 18,
          column: 0
        },
        end: {
          line: 37,
          column: 2
        }
      },
      "5": {
        start: {
          line: 39,
          column: 0
        },
        end: {
          line: 48,
          column: 2
        }
      },
      "6": {
        start: {
          line: 50,
          column: 0
        },
        end: {
          line: 56,
          column: 2
        }
      },
      "7": {
        start: {
          line: 58,
          column: 0
        },
        end: {
          line: 70,
          column: 2
        }
      },
      "8": {
        start: {
          line: 72,
          column: 0
        },
        end: {
          line: 77,
          column: 2
        }
      },
      "9": {
        start: {
          line: 79,
          column: 0
        },
        end: {
          line: 85,
          column: 2
        }
      },
      "10": {
        start: {
          line: 87,
          column: 0
        },
        end: {
          line: 94,
          column: 2
        }
      },
      "11": {
        start: {
          line: 96,
          column: 37
        },
        end: {
          line: 104,
          column: 1
        }
      },
      "12": {
        start: {
          line: 97,
          column: 4
        },
        end: {
          line: 97,
          column: 40
        }
      },
      "13": {
        start: {
          line: 97,
          column: 28
        },
        end: {
          line: 97,
          column: 38
        }
      },
      "14": {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 103,
          column: 11
        }
      },
      "15": {
        start: {
          line: 98,
          column: 63
        },
        end: {
          line: 103,
          column: 7
        }
      },
      "16": {
        start: {
          line: 105,
          column: 0
        },
        end: {
          line: 105,
          column: 72
        }
      },
      "17": {
        start: {
          line: 106,
          column: 36
        },
        end: {
          line: 122,
          column: 1
        }
      },
      "18": {
        start: {
          line: 107,
          column: 4
        },
        end: {
          line: 107,
          column: 55
        }
      },
      "19": {
        start: {
          line: 107,
          column: 35
        },
        end: {
          line: 107,
          column: 53
        }
      },
      "20": {
        start: {
          line: 108,
          column: 18
        },
        end: {
          line: 108,
          column: 75
        }
      },
      "21": {
        start: {
          line: 109,
          column: 22
        },
        end: {
          line: 109,
          column: 125
        }
      },
      "22": {
        start: {
          line: 109,
          column: 52
        },
        end: {
          line: 109,
          column: 115
        }
      },
      "23": {
        start: {
          line: 110,
          column: 34
        },
        end: {
          line: 110,
          column: 150
        }
      },
      "24": {
        start: {
          line: 110,
          column: 64
        },
        end: {
          line: 110,
          column: 140
        }
      },
      "25": {
        start: {
          line: 111,
          column: 22
        },
        end: {
          line: 111,
          column: 125
        }
      },
      "26": {
        start: {
          line: 111,
          column: 52
        },
        end: {
          line: 111,
          column: 115
        }
      },
      "27": {
        start: {
          line: 112,
          column: 4
        },
        end: {
          line: 121,
          column: 6
        }
      },
      "28": {
        start: {
          line: 123,
          column: 0
        },
        end: {
          line: 123,
          column: 70
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 96,
            column: 37
          },
          end: {
            line: 96,
            column: 38
          }
        },
        loc: {
          start: {
            line: 96,
            column: 54
          },
          end: {
            line: 104,
            column: 1
          }
        },
        line: 96
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 98,
            column: 41
          },
          end: {
            line: 98,
            column: 42
          }
        },
        loc: {
          start: {
            line: 98,
            column: 61
          },
          end: {
            line: 103,
            column: 9
          }
        },
        line: 98
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 106,
            column: 36
          },
          end: {
            line: 106,
            column: 37
          }
        },
        loc: {
          start: {
            line: 106,
            column: 60
          },
          end: {
            line: 122,
            column: 1
          }
        },
        line: 106
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 109,
            column: 37
          },
          end: {
            line: 109,
            column: 38
          }
        },
        loc: {
          start: {
            line: 109,
            column: 50
          },
          end: {
            line: 109,
            column: 117
          }
        },
        line: 109
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 110,
            column: 49
          },
          end: {
            line: 110,
            column: 50
          }
        },
        loc: {
          start: {
            line: 110,
            column: 62
          },
          end: {
            line: 110,
            column: 142
          }
        },
        line: 110
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 111,
            column: 37
          },
          end: {
            line: 111,
            column: 38
          }
        },
        loc: {
          start: {
            line: 111,
            column: 50
          },
          end: {
            line: 111,
            column: 117
          }
        },
        line: 111
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 97,
            column: 4
          },
          end: {
            line: 97,
            column: 40
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 4
          },
          end: {
            line: 97,
            column: 40
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 97
      },
      "1": {
        loc: {
          start: {
            line: 107,
            column: 4
          },
          end: {
            line: 107,
            column: 55
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 4
          },
          end: {
            line: 107,
            column: 55
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/performance/performanceTypes.mock.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/performance/performanceTypes.mock.ts"],
      sourcesContent: ["/**\n * Performance Types Mock Data for Testing\n *\n * Provides mock data for performance-related types and interfaces\n * for testing performance monitoring functionality.\n */\n\nimport type {\n  CriticalCSSConfig,\n  HTTPCacheConfig,\n  ImageOptimizationConfig,\n  PerformanceMetric,\n  PerformanceReport,\n  ProductionConfig,\n  ResourcePreloadConfig,\n} from '@/infrastructure/performance/types/performance.types';\nimport {\n  ImageFormat,\n  NonCriticalStrategy,\n  PerformanceRating,\n} from '@/infrastructure/performance/types/performance.enums';\n\n// Mock performance metrics\nexport const mockPerformanceMetric: PerformanceMetric = {\n  name: 'test-metric',\n  value: 100,\n  timestamp: Date.now(),\n  rating: PerformanceRating.GOOD,\n};\n\nexport const mockPerformanceMetrics: PerformanceMetric[] = [\n  {\n    name: 'image-optimization',\n    value: 50,\n    timestamp: Date.now() - 1000,\n    rating: PerformanceRating.GOOD,\n  },\n  {\n    name: 'resource-preloading',\n    value: 200,\n    timestamp: Date.now() - 2000,\n    rating: PerformanceRating.NEEDS_IMPROVEMENT,\n  },\n  {\n    name: 'critical-css',\n    value: 300,\n    timestamp: Date.now() - 3000,\n    rating: PerformanceRating.POOR,\n  },\n];\n\n// Mock performance report\nexport const mockPerformanceReport: PerformanceReport = {\n  metrics: mockPerformanceMetrics,\n  summary: {\n    totalMetrics: 3,\n    goodMetrics: 1,\n    needsImprovementMetrics: 1,\n    poorMetrics: 1,\n  },\n  timestamp: Date.now(),\n};\n\n// Mock image optimization config\nexport const mockImageOptimizationConfig: ImageOptimizationConfig = {\n  quality: 80,\n  format: ImageFormat.WEBP,\n  responsive: true,\n  lazyThreshold: 100,\n  placeholder: 'blur',\n};\n\n// Mock resource preload config\nexport const mockResourcePreloadConfig: ResourcePreloadConfig = {\n  fonts: true,\n  css: true,\n  js: true,\n  images: true,\n  custom: [\n    {\n      href: '/api/data',\n      as: 'fetch',\n      crossOrigin: 'anonymous',\n    },\n  ],\n};\n\n// Mock critical CSS config\nexport const mockCriticalCSSConfig: CriticalCSSConfig = {\n  extract: true,\n  inline: true,\n  selector: 'style[data-critical]',\n  nonCriticalStrategy: NonCriticalStrategy.ASYNC,\n};\n\n// Mock HTTP cache config\nexport const mockHTTPCacheConfig: HTTPCacheConfig = {\n  maxAge: 3600,\n  sMaxAge: 86400,\n  etag: true,\n  lastModified: true,\n  directives: ['public'],\n};\n\n// Mock production config\nexport const mockProductionConfig: ProductionConfig = {\n  compression: true,\n  minification: true,\n  treeShaking: true,\n  codeSplitting: true,\n  bundleAnalyzer: false,\n  sourceMaps: false,\n};\n\n// Mock performance data generators\nexport const generateMockPerformanceMetrics = (count: number = 5): PerformanceMetric[] => {\n  return Array.from({ length: count }, (_, index) => ({\n    name: `test-metric-${index}`,\n    value: Math.random() * 1000,\n    timestamp: Date.now() - index * 1000,\n    rating: [PerformanceRating.GOOD, PerformanceRating.NEEDS_IMPROVEMENT, PerformanceRating.POOR][\n      Math.floor(Math.random() * 3)\n    ],\n  }));\n};\n\nexport const generateMockPerformanceReport = (metricsCount: number = 10): PerformanceReport => {\n  const metrics = generateMockPerformanceMetrics(metricsCount);\n  const goodMetrics = metrics.filter((m) => m.rating === PerformanceRating.GOOD).length;\n  const needsImprovementMetrics = metrics.filter(\n    (m) => m.rating === PerformanceRating.NEEDS_IMPROVEMENT\n  ).length;\n  const poorMetrics = metrics.filter((m) => m.rating === PerformanceRating.POOR).length;\n\n  return {\n    metrics,\n    summary: {\n      totalMetrics: metrics.length,\n      goodMetrics,\n      needsImprovementMetrics,\n      poorMetrics,\n    },\n    timestamp: Date.now(),\n  };\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c29e8b98f5718f8ec53ad6fe1a8882b67d7c34db"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_at0hso2mf = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_at0hso2mf();
cov_at0hso2mf().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_at0hso2mf().s[1]++;
exports.generateMockPerformanceReport = exports.generateMockPerformanceMetrics = exports.mockProductionConfig = exports.mockHTTPCacheConfig = exports.mockCriticalCSSConfig = exports.mockResourcePreloadConfig = exports.mockImageOptimizationConfig = exports.mockPerformanceReport = exports.mockPerformanceMetrics = exports.mockPerformanceMetric = void 0;
var performance_enums_1 =
/* istanbul ignore next */
(cov_at0hso2mf().s[2]++, require("@/infrastructure/performance/types/performance.enums"));
// Mock performance metrics
/* istanbul ignore next */
cov_at0hso2mf().s[3]++;
exports.mockPerformanceMetric = {
  name: 'test-metric',
  value: 100,
  timestamp: Date.now(),
  rating: performance_enums_1.PerformanceRating.GOOD
};
/* istanbul ignore next */
cov_at0hso2mf().s[4]++;
exports.mockPerformanceMetrics = [{
  name: 'image-optimization',
  value: 50,
  timestamp: Date.now() - 1000,
  rating: performance_enums_1.PerformanceRating.GOOD
}, {
  name: 'resource-preloading',
  value: 200,
  timestamp: Date.now() - 2000,
  rating: performance_enums_1.PerformanceRating.NEEDS_IMPROVEMENT
}, {
  name: 'critical-css',
  value: 300,
  timestamp: Date.now() - 3000,
  rating: performance_enums_1.PerformanceRating.POOR
}];
// Mock performance report
/* istanbul ignore next */
cov_at0hso2mf().s[5]++;
exports.mockPerformanceReport = {
  metrics: exports.mockPerformanceMetrics,
  summary: {
    totalMetrics: 3,
    goodMetrics: 1,
    needsImprovementMetrics: 1,
    poorMetrics: 1
  },
  timestamp: Date.now()
};
// Mock image optimization config
/* istanbul ignore next */
cov_at0hso2mf().s[6]++;
exports.mockImageOptimizationConfig = {
  quality: 80,
  format: performance_enums_1.ImageFormat.WEBP,
  responsive: true,
  lazyThreshold: 100,
  placeholder: 'blur'
};
// Mock resource preload config
/* istanbul ignore next */
cov_at0hso2mf().s[7]++;
exports.mockResourcePreloadConfig = {
  fonts: true,
  css: true,
  js: true,
  images: true,
  custom: [{
    href: '/api/data',
    as: 'fetch',
    crossOrigin: 'anonymous'
  }]
};
// Mock critical CSS config
/* istanbul ignore next */
cov_at0hso2mf().s[8]++;
exports.mockCriticalCSSConfig = {
  extract: true,
  inline: true,
  selector: 'style[data-critical]',
  nonCriticalStrategy: performance_enums_1.NonCriticalStrategy.ASYNC
};
// Mock HTTP cache config
/* istanbul ignore next */
cov_at0hso2mf().s[9]++;
exports.mockHTTPCacheConfig = {
  maxAge: 3600,
  sMaxAge: 86400,
  etag: true,
  lastModified: true,
  directives: ['public']
};
// Mock production config
/* istanbul ignore next */
cov_at0hso2mf().s[10]++;
exports.mockProductionConfig = {
  compression: true,
  minification: true,
  treeShaking: true,
  codeSplitting: true,
  bundleAnalyzer: false,
  sourceMaps: false
};
// Mock performance data generators
/* istanbul ignore next */
cov_at0hso2mf().s[11]++;
var generateMockPerformanceMetrics = function (count) {
  /* istanbul ignore next */
  cov_at0hso2mf().f[0]++;
  cov_at0hso2mf().s[12]++;
  if (count === void 0) {
    /* istanbul ignore next */
    cov_at0hso2mf().b[0][0]++;
    cov_at0hso2mf().s[13]++;
    count = 5;
  } else
  /* istanbul ignore next */
  {
    cov_at0hso2mf().b[0][1]++;
  }
  cov_at0hso2mf().s[14]++;
  return Array.from({
    length: count
  }, function (_, index) {
    /* istanbul ignore next */
    cov_at0hso2mf().f[1]++;
    cov_at0hso2mf().s[15]++;
    return {
      name: "test-metric-".concat(index),
      value: Math.random() * 1000,
      timestamp: Date.now() - index * 1000,
      rating: [performance_enums_1.PerformanceRating.GOOD, performance_enums_1.PerformanceRating.NEEDS_IMPROVEMENT, performance_enums_1.PerformanceRating.POOR][Math.floor(Math.random() * 3)]
    };
  });
};
/* istanbul ignore next */
cov_at0hso2mf().s[16]++;
exports.generateMockPerformanceMetrics = generateMockPerformanceMetrics;
/* istanbul ignore next */
cov_at0hso2mf().s[17]++;
var generateMockPerformanceReport = function (metricsCount) {
  /* istanbul ignore next */
  cov_at0hso2mf().f[2]++;
  cov_at0hso2mf().s[18]++;
  if (metricsCount === void 0) {
    /* istanbul ignore next */
    cov_at0hso2mf().b[1][0]++;
    cov_at0hso2mf().s[19]++;
    metricsCount = 10;
  } else
  /* istanbul ignore next */
  {
    cov_at0hso2mf().b[1][1]++;
  }
  var metrics =
  /* istanbul ignore next */
  (cov_at0hso2mf().s[20]++, (0, exports.generateMockPerformanceMetrics)(metricsCount));
  var goodMetrics =
  /* istanbul ignore next */
  (cov_at0hso2mf().s[21]++, metrics.filter(function (m) {
    /* istanbul ignore next */
    cov_at0hso2mf().f[3]++;
    cov_at0hso2mf().s[22]++;
    return m.rating === performance_enums_1.PerformanceRating.GOOD;
  }).length);
  var needsImprovementMetrics =
  /* istanbul ignore next */
  (cov_at0hso2mf().s[23]++, metrics.filter(function (m) {
    /* istanbul ignore next */
    cov_at0hso2mf().f[4]++;
    cov_at0hso2mf().s[24]++;
    return m.rating === performance_enums_1.PerformanceRating.NEEDS_IMPROVEMENT;
  }).length);
  var poorMetrics =
  /* istanbul ignore next */
  (cov_at0hso2mf().s[25]++, metrics.filter(function (m) {
    /* istanbul ignore next */
    cov_at0hso2mf().f[5]++;
    cov_at0hso2mf().s[26]++;
    return m.rating === performance_enums_1.PerformanceRating.POOR;
  }).length);
  /* istanbul ignore next */
  cov_at0hso2mf().s[27]++;
  return {
    metrics: metrics,
    summary: {
      totalMetrics: metrics.length,
      goodMetrics: goodMetrics,
      needsImprovementMetrics: needsImprovementMetrics,
      poorMetrics: poorMetrics
    },
    timestamp: Date.now()
  };
};
/* istanbul ignore next */
cov_at0hso2mf().s[28]++;
exports.generateMockPerformanceReport = generateMockPerformanceReport;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,