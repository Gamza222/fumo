{"file":"/Users/gamzaramazanov/Desktop/fumo/src/shared/lib/dev-tools/generators/component-generator/component-generator.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/lib/dev-tools/generators/component-generator/component-generator.ts"],"sourcesContent":["import * as fs from 'fs';\nimport path from 'path';\n\nexport interface ComponentConfig {\n  name: string;\n  layer: 'shared' | 'widgets' | 'infrastructure';\n  type: 'ui' | 'lib' | 'model' | 'api';\n  description?: string;\n}\n\nexport function componentGenerator(config: ComponentConfig) {\n  const { name, layer, type, description = '' } = config;\n\n  // Validate layer and type combination\n  if (layer === 'shared' && !['ui', 'lib', 'model'].includes(type)) {\n    throw new Error('Shared layer only supports ui, lib, or model types');\n  }\n\n  if (layer === 'widgets' && type !== 'ui') {\n    throw new Error('Widgets layer only supports ui type');\n  }\n\n  if (layer === 'infrastructure' && !['lib', 'api'].includes(type)) {\n    throw new Error('Infrastructure layer only supports lib or api types');\n  }\n\n  const componentDir = path.join('src', layer, type, name);\n\n  // Create directory if it doesn't exist\n  if (!fs.existsSync(componentDir)) {\n    fs.mkdirSync(componentDir, { recursive: true });\n  }\n\n  // Generate component file\n  const componentContent = generateComponentFile(name, description);\n  fs.writeFileSync(path.join(componentDir, `${name}.tsx`), componentContent);\n\n  // Generate test file\n  const testContent = generateTestFile(name);\n  fs.writeFileSync(path.join(componentDir, `${name}.test.tsx`), testContent);\n\n  // Generate stories file\n  const storiesContent = generateStoriesFile(name, description);\n  fs.writeFileSync(path.join(componentDir, `${name}.stories.tsx`), storiesContent);\n\n  // Generate index file\n  const indexContent = generateIndexFile(name);\n  fs.writeFileSync(path.join(componentDir, 'index.ts'), indexContent);\n\n  // Component ${name} generated successfully in ${componentDir}\n  // Files created:\n  //   - ${name}.tsx\n  //   - ${name}.test.tsx\n  //   - ${name}.stories.tsx\n  //   - index.ts\n}\n\nfunction generateComponentFile(name: string, description: string): string {\n  return `import React from 'react';\nimport { classNames } from '@/shared/lib/utils/classNames';\n\nexport interface ${name}Props {\n  className?: string;\n  children?: React.ReactNode;\n  // Add your props here\n}\n\n/**\n * ${description || `${name} component`}\n * \n * @param props - Component props\n * @returns JSX element\n */\nexport function ${name}({ className, children, ...props }: ${name}Props) {\n  return (\n    <div \n      className={classNames('${name.toLowerCase()}', {}, [className])}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n`;\n}\n\nfunction generateTestFile(name: string): string {\n  return `import { render, screen } from '@testing-library/react';\nimport { ${name} } from './${name}';\n\ndescribe('${name}', () => {\n  it('renders without crashing', () => {\n    render(<${name}>Test content</${name}>);\n    expect(screen.getByText('Test content')).toBeInTheDocument();\n  });\n\n  it('applies custom className', () => {\n    render(<${name} className=\"custom-class\">Test</${name}>);\n    const element = screen.getByText('Test');\n    expect(element).toHaveClass('custom-class');\n    expect(element).toHaveClass('${name.toLowerCase()}');\n  });\n\n  it('renders children correctly', () => {\n    render(\n      <${name}>\n        <span>Child 1</span>\n        <span>Child 2</span>\n      </${name}>\n    );\n    expect(screen.getByText('Child 1')).toBeInTheDocument();\n    expect(screen.getByText('Child 2')).toBeInTheDocument();\n  });\n});\n`;\n}\n\nfunction generateStoriesFile(name: string, description: string): string {\n  return `import type { Meta, StoryObj } from '@storybook/react';\nimport { ${name} } from './${name}';\n\nconst meta: Meta<typeof ${name}> = {\n  title: '${name}',\n  component: ${name},\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component: '${description || `${name} component`}',\n      },\n    },\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    className: {\n      control: 'text',\n      description: 'Custom CSS class',\n    },\n    children: {\n      control: 'text',\n      description: 'Content to render inside the component',\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    children: 'Default ${name}',\n  },\n};\n\nexport const WithCustomContent: Story = {\n  args: {\n    children: (\n      <div>\n        <h3>Custom Content</h3>\n        <p>This is custom content inside ${name}</p>\n      </div>\n    ),\n  },\n};\n\nexport const WithCustomClassName: Story = {\n  args: {\n    className: 'custom-${name.toLowerCase()}-class',\n    children: 'Styled ${name}',\n  },\n};\n`;\n}\n\nfunction generateIndexFile(name: string): string {\n  return `export { ${name} } from './${name}';\nexport type { ${name}Props } from './${name}';\n`;\n}\n"],"version":3}