{"version":3,"names":["exports","fsdValidator","fs","cov_2c94nu74fs","s","__importStar","require","path_1","__importDefault","FSD_RULES","from","to","allowed","reason","f","result","isValid","errors","warnings","files","getAllTsFiles","_i","files_1","length","file","violations","validateFile","_a","push","apply","_b","b","forEach","_error","_warning","error","concat","String","dir","existsSync","items","readdirSync","items_1","item","fullPath","default","join","stat","statSync","isDirectory","endsWith","filePath","content","readFileSync","imports","extractImports","imports_1","importPath","violation","checkImportViolation","severity","message","importRegex","match","exec","startsWith","fromLayer","getLayerFromPath","toLayer","rule","find","r","normalizedPath","replace","includes"],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/lib/dev-tools/generators/fsd-validator/fsd-validator.ts"],"sourcesContent":["import * as fs from 'fs';\nimport path from 'path';\n\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n}\n\ninterface FSDRule {\n  from: string;\n  to: string;\n  allowed: boolean;\n  reason: string;\n}\n\n// FSD Architecture Rules\nconst FSD_RULES: FSDRule[] = [\n  // Shared layer rules\n  { from: 'shared/ui', to: 'shared/lib', allowed: true, reason: 'UI can use shared utilities' },\n  { from: 'shared/ui', to: 'shared/model', allowed: true, reason: 'UI can use shared models' },\n  { from: 'shared/lib', to: 'shared/model', allowed: true, reason: 'Lib can use shared models' },\n  {\n    from: 'shared/model',\n    to: 'shared/ui',\n    allowed: false,\n    reason: 'Models should not depend on UI',\n  },\n  {\n    from: 'shared/model',\n    to: 'shared/lib',\n    allowed: false,\n    reason: 'Models should not depend on lib',\n  },\n\n  // Widgets layer rules\n  { from: 'widgets', to: 'shared', allowed: true, reason: 'Widgets can use shared components' },\n  {\n    from: 'widgets',\n    to: 'infrastructure',\n    allowed: true,\n    reason: 'Widgets can use infrastructure',\n  },\n  {\n    from: 'widgets',\n    to: 'widgets',\n    allowed: false,\n    reason: 'Widgets should not depend on other widgets',\n  },\n\n  // Infrastructure layer rules\n  {\n    from: 'infrastructure',\n    to: 'shared',\n    allowed: true,\n    reason: 'Infrastructure can use shared utilities',\n  },\n  {\n    from: 'infrastructure',\n    to: 'widgets',\n    allowed: false,\n    reason: 'Infrastructure should not depend on widgets',\n  },\n  {\n    from: 'infrastructure',\n    to: 'infrastructure',\n    allowed: true,\n    reason: 'Infrastructure can use other infrastructure',\n  },\n\n  // App layer rules\n  { from: 'app', to: 'shared', allowed: true, reason: 'App can use shared components' },\n  { from: 'app', to: 'widgets', allowed: true, reason: 'App can use widgets' },\n  { from: 'app', to: 'infrastructure', allowed: true, reason: 'App can use infrastructure' },\n];\n\nexport function fsdValidator(): ValidationResult {\n  const result: ValidationResult = {\n    isValid: true,\n    errors: [],\n    warnings: [],\n  };\n\n  try {\n    // Get all TypeScript files\n    const files = getAllTsFiles('src');\n\n    for (const file of files) {\n      const violations = validateFile(file);\n      result.errors.push(...violations.errors);\n      result.warnings.push(...violations.warnings);\n    }\n\n    result.isValid = result.errors.length === 0;\n\n    if (result.errors.length > 0) {\n      // FSD Validation Failed\n      result.errors.forEach((_error) => {\n        // Error: ${_error}\n      });\n    }\n\n    if (result.warnings.length > 0) {\n      // FSD Warnings\n      result.warnings.forEach((_warning) => {\n        // Warning: ${_warning}\n      });\n    }\n\n    if (result.isValid && result.warnings.length === 0) {\n      // FSD Validation Passed - No violations found\n    }\n  } catch (error) {\n    result.isValid = false;\n    result.errors.push(`Validation failed: ${String(error)}`);\n  }\n\n  return result;\n}\n\nfunction getAllTsFiles(dir: string): string[] {\n  const files: string[] = [];\n\n  if (!fs.existsSync(dir)) {\n    return files;\n  }\n\n  const items = fs.readdirSync(dir);\n\n  for (const item of items) {\n    const fullPath = path.join(dir, item);\n    const stat = fs.statSync(fullPath);\n\n    if (stat.isDirectory()) {\n      files.push(...getAllTsFiles(fullPath));\n    } else if (item.endsWith('.ts') || item.endsWith('.tsx')) {\n      files.push(fullPath);\n    }\n  }\n\n  return files;\n}\n\nfunction validateFile(filePath: string): { errors: string[]; warnings: string[] } {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  try {\n    const content = fs.readFileSync(filePath, 'utf-8');\n    const imports = extractImports(content);\n\n    for (const importPath of imports) {\n      const violation = checkImportViolation(filePath, importPath);\n      if (violation) {\n        if (violation.severity === 'error') {\n          errors.push(violation.message);\n        } else {\n          warnings.push(violation.message);\n        }\n      }\n    }\n  } catch (error) {\n    errors.push(`Failed to read file ${filePath}: ${String(error)}`);\n  }\n\n  return { errors, warnings };\n}\n\nfunction extractImports(content: string): string[] {\n  const imports: string[] = [];\n  const importRegex = /import.*from\\s+['\"]([^'\"]+)['\"]/g;\n  let match;\n\n  while ((match = importRegex.exec(content)) !== null) {\n    const importPath = match[1];\n    // Only check internal imports (starting with @/ or ./)\n    if (\n      importPath &&\n      (importPath.startsWith('@/') || importPath.startsWith('./') || importPath.startsWith('../'))\n    ) {\n      imports.push(importPath);\n    }\n  }\n\n  return imports;\n}\n\nfunction checkImportViolation(\n  filePath: string,\n  importPath: string\n): { message: string; severity: 'error' | 'warning' } | null {\n  const fromLayer = getLayerFromPath(filePath);\n  const toLayer = getLayerFromPath(importPath);\n\n  if (!fromLayer || !toLayer) {\n    return null; // Skip external imports or unrecognized paths\n  }\n\n  const rule = FSD_RULES.find((r) => r.from === fromLayer && r.to === toLayer);\n\n  if (!rule) {\n    return null; // No rule defined, assume allowed\n  }\n\n  if (!rule.allowed) {\n    return {\n      message: `‚ùå ${filePath}: Cannot import from ${toLayer} (${rule.reason})`,\n      severity: 'error',\n    };\n  }\n\n  return null; // Import is allowed\n}\n\nfunction getLayerFromPath(filePath: string): string | null {\n  // Convert file path to layer path\n  const normalizedPath = filePath.replace(/\\\\/g, '/');\n\n  if (normalizedPath.includes('/shared/ui/')) return 'shared/ui';\n  if (normalizedPath.includes('/shared/lib/')) return 'shared/lib';\n  if (normalizedPath.includes('/shared/model/')) return 'shared/model';\n  if (normalizedPath.includes('/widgets/')) return 'widgets';\n  if (normalizedPath.includes('/infrastructure/')) return 'infrastructure';\n  if (normalizedPath.includes('/app/')) return 'app';\n\n  return null;\n}\n"],"mappingscAAA,GAAAC,CAAA,QAAAC,YAAA,CAAAC,OAAA;AACA,IAAAC,MAAA;AAAA;AAAA,CAAAJ,cAAA,GAAAC,CAAA,QAAAI,eAAA,CAAAF,OAAA;AAeA;AACA,IAAMG,SAAS;AAAA;AAAA,CAAAN,cAAA,GAAAC,CAAA,QAAc;AAC3B;AACA;EAAEM,IAAI,EAAE,WAAW;EAAEC,EAAE,EAAE,YAAY;EAAEC,OAAO,EAAE,IAAI;EAAEC,MAAM,EAAE;AAA6B,CAAE,EAC7F;EAAEH,IAAI,EAAE,WAAW;EAAEC,EAAE,EAAE,cAAc;EAAEC,OAAO,EAAE,IAAI;EAAEC,MAAM,EAAE;AAA0B,CAAE,EAC5F;EAAEH,IAAI,EAAE,YAAY;EAAEC,EAAE,EAAE,cAAc;EAAEC,OAAO,EAAE,IAAI;EAAEC,MAAM,EAAE;AAA2B,CAAE,EAC9F;EACEH,IAAI,EAAE,cAAc;EACpBC,EAAE,EAAE,WAAW;EACfC,OAAO,EAAE,KAAK;EACdC,MAAM,EAAE;CACT,EACD;EACEH,IAAI,EAAE,cAAc;EACpBC,EAAE,EAAE,YAAY;EAChBC,OAAO,EAAE,KAAK;EACdC,MAAM,EAAE;CACT;AAED;AACA;EAAEH,IAAI,EAAE,SAAS;EAAEC,EAAE,EAAE,QAAQ;EAAEC,OAAO,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAmC,CAAE,EAC7F;EACEH,IAAI,EAAE,SAAS;EACfC,EAAE,EAAE,gBAAgB;EACpBC,OAAO,EAAE,IAAI;EACbC,MAAM,EAAE;CACT,EACD;EACEH,IAAI,EAAE,SAAS;EACfC,EAAE,EAAE,SAAS;EACbC,OAAO,EAAE,KAAK;EACdC,MAAM,EAAE;CACT;AAED;AACA;EACEH,IAAI,EAAE,gBAAgB;EACtBC,EAAE,EAAE,QAAQ;EACZC,OAAO,EAAE,IAAI;EACbC,MAAM,EAAE;CACT,EACD;EACEH,IAAI,EAAE,gBAAgB;EACtBC,EAAE,EAAE,SAAS;EACbC,OAAO,EAAE,KAAK;EACdC,MAAM,EAAE;CACT,EACD;EACEH,IAAI,EAAE,gBAAgB;EACtBC,EAAE,EAAE,gBAAgB;EACpBC,OAAO,EAAE,IAAI;EACbC,MAAM,EAAE;CACT;AAED;AACA;EAAEH,IAAI,EAAE,KAAK;EAAEC,EAAE,EAAE,QAAQ;EAAEC,OAAO,EAAE,IAAI;EAAEC,MAAM,EAAE;AAA+B,CAAE,EACrF;EAAEH,IAAI,EAAE,KAAK;EAAEC,EAAE,EAAE,SAAS;EAAEC,OAAO,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAqB,CAAE,EAC5E;EAAEH,IAAI,EAAE,KAAK;EAAEC,EAAE,EAAE,gBAAgB;EAAEC,OAAO,EAAE,IAAI;EAAEC,MAAM,EAAE;AAA4B,CAAE,CAC3F;AAED,SAAgBZ,YAAYA,CAAA;EAAA;EAAAE,cAAA,GAAAW,CAAA;;EAC1B,IAAMC,MAAM;EAAA;EAAA,CAAAZ,cAAA,GAAAC,CAAA,QAAqB;IAC/BY,OAAO,EAAE,IAAI;IACbC,MAAM,EAAE,EAAE;IACVC,QAAQ,EAAE;GACX;EAAC;EAAAf,cAAA,GAAAC,CAAA;EAEF,IAAI;IACF;IACA,IAAMe,KAAK;IAAA;IAAA,CAAAhB,cAAA,GAAAC,CAAA,QAAGgB,aAAa,CAAC,KAAK,CAAC;IAAC;IAAAjB,cAAA,GAAAC,CAAA;IAEnC,KAAmB,IAAAiB,EAAA;MAAA;MAAA,CAAAlB,cAAA,GAAAC,CAAA,SAAK,GAALkB,OAAA;MAAA;MAAA,CAAAnB,cAAA,GAAAC,CAAA,QAAAe,KAAK,GAALE,EAAA,GAAAC,OAAA,CAAAC,MAAK,EAALF,EAAA,EAAK,EAAE;MAArB,IAAMG,IAAI;MAAA;MAAA,CAAArB,cAAA,GAAAC,CAAA,QAAAkB,OAAA,CAAAD,EAAA;MACb,IAAMI,UAAU;MAAA;MAAA,CAAAtB,cAAA,GAAAC,CAAA,QAAGsB,YAAY,CAACF,IAAI,CAAC;MAAC;MAAArB,cAAA,GAAAC,CAAA;MACtC,CAAAuB,EAAA,GAAAZ,MAAM,CAACE,MAAM,EAACW,IAAI,CAAAC,KAAA,CAAAF,EAAA,EAAIF,UAAU,CAACR,MAAM;MAAE;MAAAd,cAAA,GAAAC,CAAA;MACzC,CAAA0B,EAAA,GAAAf,MAAM,CAACG,QAAQ,EAACU,IAAI,CAAAC,KAAA,CAAAC,EAAA,EAAIL,UAAU,CAACP,QAAQ;IAC7C;IAAC;IAAAf,cAAA,GAAAC,CAAA;IAEDW,MAAM,CAACC,OAAO,GAAGD,MAAM,CAACE,MAAM,CAACM,MAAM,KAAK,CAAC;IAAC;IAAApB,cAAA,GAAAC,CAAA;IAE5C,IAAIW,MAAM,CAACE,MAAM,CAACM,MAAM,GAAG,CAAC,EAAE;MAAA;MAAApB,cAAA,GAAA4B,CAAA;MAAA5B,cAAA,GAAAC,CAAA;MAC5B;MACAW,MAAM,CAACE,MAAM,CAACe,OAAO,CAAC,UAACC,MAAM;QAAA;QAAA9B,cAAA,GAAAW,CAAA;MAE7B,CAAC,CADC;MACD,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAX,cAAA,GAAA4B,CAAA;IAAA;IAAA5B,cAAA,GAAAC,CAAA;IAED,IAAIW,MAAM,CAACG,QAAQ,CAACK,MAAM,GAAG,CAAC,EAAE;MAAA;MAAApB,cAAA,GAAA4B,CAAA;MAAA5B,cAAA,GAAAC,CAAA;MAC9B;MACAW,MAAM,CAACG,QAAQ,CAACc,OAAO,CAAC,UAACE,QAAQ;QAAA;QAAA/B,cAAA,GAAAW,CAAA;MAEjC,CAAC,CADC;MACD,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAX,cAAA,GAAA4B,CAAA;IAAA;IAAA5B,cAAA,GAAAC,CAAA;IAED;IAAI;IAAA,CAAAD,cAAA,GAAA4B,CAAA,WAAAhB,MAAM,CAACC,OAAO;IAAA;IAAA,CAAAb,cAAA,GAAA4B,CAAA,WAAIhB,MAAM,CAACG,QAAQ,CAACK,MAAM,KAAK,CAAC,GAAE;MAAA;MAAApB,cAAA,GAAA4B,CAAA;IAEpD,CAAC,CADC;IAAA;IAAA;IAAA;MAAA5B,cAAA,GAAA4B,CAAA;IAAA;EAEJ,CAAC,CAAC,OAAOI,KAAK,EAAE;IAAA;IAAAhC,cAAA,GAAAC,CAAA;IACdW,MAAM,CAACC,OAAO,GAAG,KAAK;IAAC;IAAAb,cAAA,GAAAC,CAAA;IACvBW,MAAM,CAACE,MAAM,CAACW,IAAI,CAAC,sBAAAQ,MAAA,CAAsBC,MAAM,CAACF,KAAK,CAAC,CAAE,CAAC;EAC3D;EAAC;EAAAhC,cAAA,GAAAC,CAAA;EAED,OAAOW,MAAM;AACf;AAEA,SAASK,aAAaA,CAACkB,GAAW;EAAA;EAAAnC,cAAA,GAAAW,CAAA;EAChC,IAAMK,KAAK;EAAA;EAAA,CAAAhB,cAAA,GAAAC,CAAA,QAAa,EAAE;EAAC;EAAAD,cAAA,GAAAC,CAAA;EAE3B,IAAI,CAACF,EAAE,CAACqC,UAAU,CAACD,GAAG,CAAC,EAAE;IAAA;IAAAnC,cAAA,GAAA4B,CAAA;IAAA5B,cAAA,GAAAC,CAAA;IACvB,OAAOe,KAAK;EACd,CAAC;EAAA;EAAA;IAAAhB,cAAA,GAAA4B,CAAA;EAAA;EAED,IAAMS,KAAK;EAAA;EAAA,CAAArC,cAAA,GAAAC,CAAA,QAAGF,EAAE,CAACuC,WAAW,CAACH,GAAG,CAAC;EAAC;EAAAnC,cAAA,GAAAC,CAAA;EAElC,KAAmB,IAAAiB,EAAA;IAAA;IAAA,CAAAlB,cAAA,GAAAC,CAAA,SAAK,GAALsC,OAAA;IAAA;IAAA,CAAAvC,cAAA,GAAAC,CAAA,QAAAoC,KAAK,GAALnB,EAAA,GAAAqB,OAAA,CAAAnB,MAAK,EAALF,EAAA,EAAK,EAAE;IAArB,IAAMsB,IAAI;IAAA;IAAA,CAAAxC,cAAA,GAAAC,CAAA,QAAAsC,OAAA,CAAArB,EAAA;IACb,IAAMuB,QAAQ;IAAA;IAAA,CAAAzC,cAAA,GAAAC,CAAA,QAAGG,MAAA,CAAAsC,OAAI,CAACC,IAAI,CAACR,GAAG,EAAEK,IAAI,CAAC;IACrC,IAAMI,IAAI;IAAA;IAAA,CAAA5C,cAAA,GAAAC,CAAA,QAAGF,EAAE,CAAC8C,QAAQ,CAACJ,QAAQ,CAAC;IAAC;IAAAzC,cAAA,GAAAC,CAAA;IAEnC,IAAI2C,IAAI,CAACE,WAAW,EAAE,EAAE;MAAA;MAAA9C,cAAA,GAAA4B,CAAA;MAAA5B,cAAA,GAAAC,CAAA;MACtBe,KAAK,CAACS,IAAI,CAAAC,KAAA,CAAVV,KAAK,EAASC,aAAa,CAACwB,QAAQ,CAAC;IACvC,CAAC,MAAM;MAAA;MAAAzC,cAAA,GAAA4B,CAAA;MAAA5B,cAAA,GAAAC,CAAA;MAAA;MAAI;MAAA,CAAAD,cAAA,GAAA4B,CAAA,WAAAY,IAAI,CAACO,QAAQ,CAAC,KAAK,CAAC;MAAA;MAAA,CAAA/C,cAAA,GAAA4B,CAAA,WAAIY,IAAI,CAACO,QAAQ,CAAC,MAAM,CAAC,GAAE;QAAA;QAAA/C,cAAA,GAAA4B,CAAA;QAAA5B,cAAA,GAAAC,CAAA;QACxDe,KAAK,CAACS,IAAI,CAACgB,QAAQ,CAAC;MACtB,CAAC;MAAA;MAAA;QAAAzC,cAAA,GAAA4B,CAAA;MAAA;IAAD;EACF;EAAC;EAAA5B,cAAA,GAAAC,CAAA;EAED,OAAOe,KAAK;AACd;AAEA,SAASO,YAAYA,CAACyB,QAAgB;EAAA;EAAAhD,cAAA,GAAAW,CAAA;EACpC,IAAMG,MAAM;EAAA;EAAA,CAAAd,cAAA,GAAAC,CAAA,QAAa,EAAE;EAC3B,IAAMc,QAAQ;EAAA;EAAA,CAAAf,cAAA,GAAAC,CAAA,QAAa,EAAE;EAAC;EAAAD,cAAA,GAAAC,CAAA;EAE9B,IAAI;IACF,IAAMgD,OAAO;IAAA;IAAA,CAAAjD,cAAA,GAAAC,CAAA,QAAGF,EAAE,CAACmD,YAAY,CAACF,QAAQ,EAAE,OAAO,CAAC;IAClD,IAAMG,OAAO;IAAA;IAAA,CAAAnD,cAAA,GAAAC,CAAA,QAAGmD,cAAc,CAACH,OAAO,CAAC;IAAC;IAAAjD,cAAA,GAAAC,CAAA;IAExC,KAAyB,IAAAiB,EAAA;MAAA;MAAA,CAAAlB,cAAA,GAAAC,CAAA,SAAO,GAAPoD,SAAA;MAAA;MAAA,CAAArD,cAAA,GAAAC,CAAA,QAAAkD,OAAO,GAAPjC,EAAA,GAAAmC,SAAA,CAAAjC,MAAO,EAAPF,EAAA,EAAO,EAAE;MAA7B,IAAMoC,UAAU;MAAA;MAAA,CAAAtD,cAAA,GAAAC,CAAA,QAAAoD,SAAA,CAAAnC,EAAA;MACnB,IAAMqC,SAAS;MAAA;MAAA,CAAAvD,cAAA,GAAAC,CAAA,QAAGuD,oBAAoB,CAACR,QAAQ,EAAEM,UAAU,CAAC;MAAC;MAAAtD,cAAA,GAAAC,CAAA;MAC7D,IAAIsD,SAAS,EAAE;QAAA;QAAAvD,cAAA,GAAA4B,CAAA;QAAA5B,cAAA,GAAAC,CAAA;QACb,IAAIsD,SAAS,CAACE,QAAQ,KAAK,OAAO,EAAE;UAAA;UAAAzD,cAAA,GAAA4B,CAAA;UAAA5B,cAAA,GAAAC,CAAA;UAClCa,MAAM,CAACW,IAAI,CAAC8B,SAAS,CAACG,OAAO,CAAC;QAChC,CAAC,MAAM;UAAA;UAAA1D,cAAA,GAAA4B,CAAA;UAAA5B,cAAA,GAAAC,CAAA;UACLc,QAAQ,CAACU,IAAI,CAAC8B,SAAS,CAACG,OAAO,CAAC;QAClC;MACF,CAAC;MAAA;MAAA;QAAA1D,cAAA,GAAA4B,CAAA;MAAA;IACH;EACF,CAAC,CAAC,OAAOI,KAAK,EAAE;IAAA;IAAAhC,cAAA,GAAAC,CAAA;IACda,MAAM,CAACW,IAAI,CAAC,uBAAAQ,MAAA,CAAuBe,QAAQ,QAAAf,MAAA,CAAKC,MAAM,CAACF,KAAK,CAAC,CAAE,CAAC;EAClE;EAAC;EAAAhC,cAAA,GAAAC,CAAA;EAED,OAAO;IAAEa,MAAM,EAAAA,MAAA;IAAEC,QAAQ,EAAAA;EAAA,CAAE;AAC7B;AAEA,SAASqC,cAAcA,CAACH,OAAe;EAAA;EAAAjD,cAAA,GAAAW,CAAA;EACrC,IAAMwC,OAAO;EAAA;EAAA,CAAAnD,cAAA,GAAAC,CAAA,QAAa,EAAE;EAC5B,IAAM0D,WAAW;EAAA;EAAA,CAAA3D,cAAA,GAAAC,CAAA,QAAG,kCAAkC;EACtD,IAAI2D,KAAK;EAAC;EAAA5D,cAAA,GAAAC,CAAA;EAEV,OAAO,CAAC2D,KAAK,GAAGD,WAAW,CAACE,IAAI,CAACZ,OAAO,CAAC,MAAM,IAAI,EAAE;IACnD,IAAMK,UAAU;IAAA;IAAA,CAAAtD,cAAA,GAAAC,CAAA,QAAG2D,KAAK,CAAC,CAAC,CAAC;IAC3B;IAAA;IAAA5D,cAAA,GAAAC,CAAA;IACA;IACE;IAAA,CAAAD,cAAA,GAAA4B,CAAA,WAAA0B,UAAU;IACT;IAAA,CAAAtD,cAAA,GAAA4B,CAAA,WAAA0B,UAAU,CAACQ,UAAU,CAAC,IAAI,CAAC;IAAA;IAAA,CAAA9D,cAAA,GAAA4B,CAAA,WAAI0B,UAAU,CAACQ,UAAU,CAAC,IAAI,CAAC;IAAA;IAAA,CAAA9D,cAAA,GAAA4B,CAAA,WAAI0B,UAAU,CAACQ,UAAU,CAAC,KAAK,CAAC,EAAC,EAC5F;MAAA;MAAA9D,cAAA,GAAA4B,CAAA;MAAA5B,cAAA,GAAAC,CAAA;MACAkD,OAAO,CAAC1B,IAAI,CAAC6B,UAAU,CAAC;IAC1B,CAAC;IAAA;IAAA;MAAAtD,cAAA,GAAA4B,CAAA;IAAA;EACH;EAAC;EAAA5B,cAAA,GAAAC,CAAA;EAED,OAAOkD,OAAO;AAChB;AAEA,SAASK,oBAAoBA,CAC3BR,QAAgB,EAChBM,UAAkB;EAAA;EAAAtD,cAAA,GAAAW,CAAA;EAElB,IAAMoD,SAAS;EAAA;EAAA,CAAA/D,cAAA,GAAAC,CAAA,QAAG+D,gBAAgB,CAAChB,QAAQ,CAAC;EAC5C,IAAMiB,OAAO;EAAA;EAAA,CAAAjE,cAAA,GAAAC,CAAA,SAAG+D,gBAAgB,CAACV,UAAU,CAAC;EAAC;EAAAtD,cAAA,GAAAC,CAAA;EAE7C;EAAI;EAAA,CAAAD,cAAA,GAAA4B,CAAA,YAACmC,SAAS;EAAA;EAAA,CAAA/D,cAAA,GAAA4B,CAAA,WAAI,CAACqC,OAAO,GAAE;IAAA;IAAAjE,cAAA,GAAA4B,CAAA;IAAA5B,cAAA,GAAAC,CAAA;IAC1B,OAAO,IAAI,CAAC,CAAC;EACf,CAAC;EAAA;EAAA;IAAAD,cAAA,GAAA4B,CAAA;EAAA;EAED,IAAMsC,IAAI;EAAA;EAAA,CAAAlE,cAAA,GAAAC,CAAA,SAAGK,SAAS,CAAC6D,IAAI,CAAC,UAACC,CAAC;IAAA;IAAApE,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAC,CAAA;IAAK,kCAAAD,cAAA,GAAA4B,CAAA,WAAAwC,CAAC,CAAC7D,IAAI,KAAKwD,SAAS;IAAA;IAAA,CAAA/D,cAAA,GAAA4B,CAAA,WAAIwC,CAAC,CAAC5D,EAAE,KAAKyD,OAAO;EAAxC,CAAwC,CAAC;EAAC;EAAAjE,cAAA,GAAAC,CAAA;EAE7E,IAAI,CAACiE,IAAI,EAAE;IAAA;IAAAlE,cAAA,GAAA4B,CAAA;IAAA5B,cAAA,GAAAC,CAAA;IACT,OAAO,IAAI,CAAC,CAAC;EACf,CAAC;EAAA;EAAA;IAAAD,cAAA,GAAA4B,CAAA;EAAA;EAAA5B,cAAA,GAAAC,CAAA;EAED,IAAI,CAACiE,IAAI,CAACzD,OAAO,EAAE;IAAA;IAAAT,cAAA,GAAA4B,CAAA;IAAA5B,cAAA,GAAAC,CAAA;IACjB,OAAO;MACLyD,OAAO,EAAE,UAAAzB,MAAA,CAAKe,QAAQ,2BAAAf,MAAA,CAAwBgC,OAAO,QAAAhC,MAAA,CAAKiC,IAAI,CAACxD,MAAM,MAAG;MACxE+C,QAAQ,EAAE;KACX;EACH,CAAC;EAAA;EAAA;IAAAzD,cAAA,GAAA4B,CAAA;EAAA;EAAA5B,cAAA,GAAAC,CAAA;EAED,OAAO,IAAI,CAAC,CAAC;AACf;AAEA,SAAS+D,gBAAgBA,CAAChB,QAAgB;EAAA;EAAAhD,cAAA,GAAAW,CAAA;EACxC;EACA,IAAM0D,cAAc;EAAA;EAAA,CAAArE,cAAA,GAAAC,CAAA,SAAG+C,QAAQ,CAACsB,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;EAAC;EAAAtE,cAAA,GAAAC,CAAA;EAEpD,IAAIoE,cAAc,CAACE,QAAQ,CAAC,aAAa,CAAC,EAAE;IAAA;IAAAvE,cAAA,GAAA4B,CAAA;IAAA5B,cAAA,GAAAC,CAAA;IAAA,OAAO,WAAW;EAAA,CAAC;EAAA;EAAA;IAAAD,cAAA,GAAA4B,CAAA;EAAA;EAAA5B,cAAA,GAAAC,CAAA;EAC/D,IAAIoE,cAAc,CAACE,QAAQ,CAAC,cAAc,CAAC,EAAE;IAAA;IAAAvE,cAAA,GAAA4B,CAAA;IAAA5B,cAAA,GAAAC,CAAA;IAAA,OAAO,YAAY;EAAA,CAAC;EAAA;EAAA;IAAAD,cAAA,GAAA4B,CAAA;EAAA;EAAA5B,cAAA,GAAAC,CAAA;EACjE,IAAIoE,cAAc,CAACE,QAAQ,CAAC,gBAAgB,CAAC,EAAE;IAAA;IAAAvE,cAAA,GAAA4B,CAAA;IAAA5B,cAAA,GAAAC,CAAA;IAAA,OAAO,cAAc;EAAA,CAAC;EAAA;EAAA;IAAAD,cAAA,GAAA4B,CAAA;EAAA;EAAA5B,cAAA,GAAAC,CAAA;EACrE,IAAIoE,cAAc,CAACE,QAAQ,CAAC,WAAW,CAAC,EAAE;IAAA;IAAAvE,cAAA,GAAA4B,CAAA;IAAA5B,cAAA,GAAAC,CAAA;IAAA,OAAO,SAAS;EAAA,CAAC;EAAA;EAAA;IAAAD,cAAA,GAAA4B,CAAA;EAAA;EAAA5B,cAAA,GAAAC,CAAA;EAC3D,IAAIoE,cAAc,CAACE,QAAQ,CAAC,kBAAkB,CAAC,EAAE;IAAA;IAAAvE,cAAA,GAAA4B,CAAA;IAAA5B,cAAA,GAAAC,CAAA;IAAA,OAAO,gBAAgB;EAAA,CAAC;EAAA;EAAA;IAAAD,cAAA,GAAA4B,CAAA;EAAA;EAAA5B,cAAA,GAAAC,CAAA;EACzE,IAAIoE,cAAc,CAACE,QAAQ,CAAC,OAAO,CAAC,EAAE;IAAA;IAAAvE,cAAA,GAAA4B,CAAA;IAAA5B,cAAA,GAAAC,CAAA;IAAA,OAAO,KAAK;EAAA,CAAC;EAAA;EAAA;IAAAD,cAAA,GAAA4B,CAAA;EAAA;EAAA5B,cAAA,GAAAC,CAAA;EAEnD,OAAO,IAAI;AACb","ignoreList":[]}