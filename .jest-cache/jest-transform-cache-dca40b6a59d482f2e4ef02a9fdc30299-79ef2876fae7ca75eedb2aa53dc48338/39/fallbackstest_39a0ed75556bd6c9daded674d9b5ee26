efba87bbc45beb8a539057c74a1736c0
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
/**
 * Suspense Fallbacks Tests
 *
 * Real-life enterprise scenarios testing with minimal mocking.
 * Uses existing mock factory patterns.
 */
var react_1 = __importDefault(require("react"));
var react_2 = require("@testing-library/react");
var fallbacks_1 = require("./fallbacks");
var types_1 = require("../types/types");
describe("Suspense Fallbacks", function () {
    // ============================================================================
    // COMPONENT LOADING FALLBACK
    // ============================================================================
    describe("ComponentLoadingFallback", function () {
        it("should render with default props", function () {
            // Real scenario: default loading state
            (0, react_2.render)((0, jsx_runtime_1.jsx)(fallbacks_1.ComponentLoadingFallback, {}));
            expect(react_2.screen.getByText("Loading...")).toBeInTheDocument();
        });
        it("should render with custom text", function () {
            // Real scenario: specific loading message
            (0, react_2.render)((0, jsx_runtime_1.jsx)(fallbacks_1.ComponentLoadingFallback, { text: "Loading widget..." }));
            expect(react_2.screen.getByText("Loading widget...")).toBeInTheDocument();
        });
        it("should render with different sizes", function () {
            // Real scenario: different component sizes
            var rerender = (0, react_2.render)((0, jsx_runtime_1.jsx)(fallbacks_1.ComponentLoadingFallback, { size: types_1.LoadingSize.SMALL })).rerender;
            expect(react_2.screen.getByText("Loading...")).toBeInTheDocument();
            rerender((0, jsx_runtime_1.jsx)(fallbacks_1.ComponentLoadingFallback, { size: types_1.LoadingSize.MEDIUM }));
            expect(react_2.screen.getByText("Loading...")).toBeInTheDocument();
            rerender((0, jsx_runtime_1.jsx)(fallbacks_1.ComponentLoadingFallback, { size: types_1.LoadingSize.LARGE }));
            expect(react_2.screen.getByText("Loading...")).toBeInTheDocument();
        });
        it("should apply custom className", function () {
            // Real scenario: styled loading component
            var container = (0, react_2.render)((0, jsx_runtime_1.jsx)(fallbacks_1.ComponentLoadingFallback, { className: "custom-loading" })).container;
            expect(container.firstChild).toHaveClass("custom-loading");
        });
        it("should render loading spinner", function () {
            // Real scenario: visual loading indicator
            var container = (0, react_2.render)((0, jsx_runtime_1.jsx)(fallbacks_1.ComponentLoadingFallback, {})).container;
            // Should have spinner element
            var spinner = container.querySelector('[class*="spinner"]');
            expect(spinner).toBeInTheDocument();
        });
    });
    // ============================================================================
    // PAGE LOADING FALLBACK
    // ============================================================================
    describe("PageLoadingFallback", function () {
        it("should render with default props", function () {
            // Real scenario: full page loading
            (0, react_2.render)((0, jsx_runtime_1.jsx)(fallbacks_1.PageLoadingFallback, {}));
            expect(react_2.screen.getByText("Loading page...")).toBeInTheDocument();
        });
        it("should render with custom text", function () {
            // Real scenario: specific page loading message
            (0, react_2.render)((0, jsx_runtime_1.jsx)(fallbacks_1.PageLoadingFallback, { text: "Loading dashboard..." }));
            expect(react_2.screen.getByText("Loading dashboard...")).toBeInTheDocument();
        });
        it("should use large size by default", function () {
            // Real scenario: prominent page loading
            var container = (0, react_2.render)((0, jsx_runtime_1.jsx)(fallbacks_1.PageLoadingFallback, {})).container;
            // Should have large spinner
            var spinner = container.querySelector('[class*="spinnerLarge"]');
            expect(spinner).toBeInTheDocument();
        });
        it("should apply custom className", function () {
            // Real scenario: branded page loading
            var container = (0, react_2.render)((0, jsx_runtime_1.jsx)(fallbacks_1.PageLoadingFallback, { className: "branded-loading" })).container;
            expect(container.firstChild).toHaveClass("branded-loading");
        });
        it("should take full screen height", function () {
            // Real scenario: full screen loading experience
            var container = (0, react_2.render)((0, jsx_runtime_1.jsx)(fallbacks_1.PageLoadingFallback, {})).container;
            expect(container.firstChild).toHaveClass("pageFallback");
        });
    });
    // ============================================================================
    // DEFAULT SUSPENSE FALLBACK
    // ============================================================================
    describe("DefaultSuspenseFallback", function () {
        it("should render with default props", function () {
            // Real scenario: generic suspense fallback
            (0, react_2.render)((0, jsx_runtime_1.jsx)(fallbacks_1.DefaultSuspenseFallback, {}));
            expect(react_2.screen.getByText("Loading...")).toBeInTheDocument();
        });
        it("should render with custom text", function () {
            // Real scenario: context-specific loading
            (0, react_2.render)((0, jsx_runtime_1.jsx)(fallbacks_1.DefaultSuspenseFallback, { text: "Preparing content..." }));
            expect(react_2.screen.getByText("Preparing content...")).toBeInTheDocument();
        });
        it("should use medium size by default", function () {
            // Real scenario: balanced loading indicator
            var container = (0, react_2.render)((0, jsx_runtime_1.jsx)(fallbacks_1.DefaultSuspenseFallback, {})).container;
            // Should have medium spinner
            var spinner = container.querySelector('[class*="spinnerMedium"]');
            expect(spinner).toBeInTheDocument();
        });
        it("should apply custom className", function () {
            // Real scenario: contextual styling
            var container = (0, react_2.render)((0, jsx_runtime_1.jsx)(fallbacks_1.DefaultSuspenseFallback, { className: "modal-loading" })).container;
            expect(container.firstChild).toHaveClass("modal-loading");
        });
    });
    // ============================================================================
    // INLINE LOADING FALLBACK
    // ============================================================================
    describe("InlineLoadingFallback", function () {
        it("should render with default text", function () {
            // Real scenario: inline loading state
            (0, react_2.render)((0, jsx_runtime_1.jsx)(fallbacks_1.InlineLoadingFallback, {}));
            expect(react_2.screen.getByText("Loading...")).toBeInTheDocument();
        });
        it("should render with custom text", function () {
            // Real scenario: specific inline loading
            (0, react_2.render)((0, jsx_runtime_1.jsx)(fallbacks_1.InlineLoadingFallback, { text: "Saving..." }));
            expect(react_2.screen.getByText("Saving...")).toBeInTheDocument();
        });
        it("should use small spinner", function () {
            // Real scenario: compact inline indicator
            var container = (0, react_2.render)((0, jsx_runtime_1.jsx)(fallbacks_1.InlineLoadingFallback, {})).container;
            // Should have small spinner
            var spinner = container.querySelector('[class*="spinnerSmall"]');
            expect(spinner).toBeInTheDocument();
        });
        it("should be inline element", function () {
            // Real scenario: inline with text content
            var container = (0, react_2.render)((0, jsx_runtime_1.jsxs)("div", { children: ["Processing ", (0, jsx_runtime_1.jsx)(fallbacks_1.InlineLoadingFallback, {}), " please wait"] })).container;
            expect(container.firstChild).toHaveTextContent("Processing Loading... please wait");
        });
    });
    // ============================================================================
    // CARD LOADING FALLBACK
    // ============================================================================
    describe("CardLoadingFallback", function () {
        it("should render skeleton loading", function () {
            // Real scenario: list item loading state
            (0, react_2.render)((0, jsx_runtime_1.jsx)(fallbacks_1.CardLoadingFallback, {}));
            // Should have skeleton elements
            var container = (0, react_2.render)((0, jsx_runtime_1.jsx)(fallbacks_1.CardLoadingFallback, {})).container;
            var skeletonElements = container.querySelectorAll('[class*="cardLine"]');
            expect(skeletonElements.length).toBeGreaterThan(0);
        });
        it("should apply custom className", function () {
            // Real scenario: card-specific styling
            var container = (0, react_2.render)((0, jsx_runtime_1.jsx)(fallbacks_1.CardLoadingFallback, { className: "card-skeleton" })).container;
            expect(container.firstChild).toHaveClass("card-skeleton");
        });
        it("should have pulsing animation", function () {
            // Real scenario: animated skeleton
            var container = (0, react_2.render)((0, jsx_runtime_1.jsx)(fallbacks_1.CardLoadingFallback, {})).container;
            expect(container.firstChild).toHaveClass("cardFallback");
        });
    });
    // ============================================================================
    // INTEGRATION SCENARIOS
    // ============================================================================
    describe("Integration Scenarios", function () {
        it("should work with different loading contexts", function () {
            // Real scenario: multiple loading states in one interface
            (0, react_2.render)((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("header", { children: (0, jsx_runtime_1.jsx)(fallbacks_1.InlineLoadingFallback, { text: "Syncing..." }) }), (0, jsx_runtime_1.jsx)("main", { children: (0, jsx_runtime_1.jsx)(fallbacks_1.ComponentLoadingFallback, { text: "Loading content..." }) }), (0, jsx_runtime_1.jsx)("aside", { children: (0, jsx_runtime_1.jsx)(fallbacks_1.CardLoadingFallback, {}) })] }));
            expect(react_2.screen.getByText("Syncing...")).toBeInTheDocument();
            expect(react_2.screen.getByText("Loading content...")).toBeInTheDocument();
        });
        it("should handle rapid state changes", function () {
            // Real scenario: loading state changing quickly
            var rerender = (0, react_2.render)((0, jsx_runtime_1.jsx)(fallbacks_1.ComponentLoadingFallback, { text: "Loading..." })).rerender;
            expect(react_2.screen.getByText("Loading...")).toBeInTheDocument();
            rerender((0, jsx_runtime_1.jsx)(fallbacks_1.ComponentLoadingFallback, { text: "Almost ready..." }));
            expect(react_2.screen.getByText("Almost ready...")).toBeInTheDocument();
            rerender((0, jsx_runtime_1.jsx)(fallbacks_1.ComponentLoadingFallback, { text: "Finalizing..." }));
            expect(react_2.screen.getByText("Finalizing...")).toBeInTheDocument();
        });
        it("should work with nested loading states", function () {
            // Real scenario: hierarchical loading
            (0, react_2.render)((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(fallbacks_1.PageLoadingFallback, { text: "Loading application..." }), (0, jsx_runtime_1.jsx)(fallbacks_1.ComponentLoadingFallback, { text: "Loading module..." })] }));
            expect(react_2.screen.getByText("Loading application...")).toBeInTheDocument();
        });
        it("should maintain accessibility", function () {
            // Real scenario: screen reader compatibility
            (0, react_2.render)((0, jsx_runtime_1.jsx)(fallbacks_1.ComponentLoadingFallback, { text: "Loading user profile" }));
            var loadingText = react_2.screen.getByText("Loading user profile");
            expect(loadingText).toBeInTheDocument();
            // Should be readable by screen readers
            expect(loadingText).toBeVisible();
        });
    });
    // ============================================================================
    // RESPONSIVE SCENARIOS
    // ============================================================================
    describe("Responsive Scenarios", function () {
        it("should handle long loading text", function () {
            // Real scenario: descriptive loading messages
            var longText = "Loading your personalized dashboard with all your widgets and recent activity...";
            (0, react_2.render)((0, jsx_runtime_1.jsx)(fallbacks_1.ComponentLoadingFallback, { text: longText }));
            expect(react_2.screen.getByText(longText)).toBeInTheDocument();
        });
        it("should work with empty text", function () {
            // Real scenario: loading without text
            (0, react_2.render)((0, jsx_runtime_1.jsx)(fallbacks_1.ComponentLoadingFallback, { text: "" }));
            // Should still show spinner
            var container = (0, react_2.render)((0, jsx_runtime_1.jsx)(fallbacks_1.ComponentLoadingFallback, { text: "" })).container;
            var spinner = container.querySelector('[class*="spinner"]');
            expect(spinner).toBeInTheDocument();
        });
        it("should handle special characters in text", function () {
            // Real scenario: internationalized loading messages
            var specialText = "Chargement en cours... 🔄 Please wait!";
            (0, react_2.render)((0, jsx_runtime_1.jsx)(fallbacks_1.ComponentLoadingFallback, { text: specialText }));
            expect(react_2.screen.getByText(specialText)).toBeInTheDocument();
        });
    });
    // ============================================================================
    // PERFORMANCE SCENARIOS
    // ============================================================================
    describe("Performance Scenarios", function () {
        it("should render quickly without complex calculations", function () {
            // Real scenario: fast loading state transitions
            var startTime = performance.now();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(fallbacks_1.ComponentLoadingFallback, {}));
            var endTime = performance.now();
            var renderTime = endTime - startTime;
            // Should render in reasonable time (< 10ms)
            expect(renderTime).toBeLessThan(10);
        });
        it("should not cause memory leaks with rapid rerenders", function () {
            // Real scenario: rapidly changing loading states
            var _a = (0, react_2.render)((0, jsx_runtime_1.jsx)(fallbacks_1.ComponentLoadingFallback, {})), rerender = _a.rerender, unmount = _a.unmount;
            // Rapidly rerender many times
            for (var i = 0; i < 100; i++) {
                rerender((0, jsx_runtime_1.jsx)(fallbacks_1.ComponentLoadingFallback, { text: "Loading ".concat(i, "...") }));
            }
            // Should unmount cleanly
            expect(function () { return unmount(); }).not.toThrow();
        });
        it("should handle multiple instances efficiently", function () {
            // Real scenario: many loading states simultaneously
            var components = Array.from({ length: 20 }, function (_, i) { return ((0, jsx_runtime_1.jsx)(fallbacks_1.ComponentLoadingFallback, { text: "Loading item ".concat(i, "...") }, i)); });
            (0, react_2.render)((0, jsx_runtime_1.jsx)("div", { children: components }));
            // All should render without issues
            expect(react_2.screen.getByText("Loading item 0...")).toBeInTheDocument();
            expect(react_2.screen.getByText("Loading item 19...")).toBeInTheDocument();
        });
    });
});
describe("Suspense Fallbacks Integration", function () {
    it("should work in complete suspense scenario", function () {
        // Real scenario: full loading experience
        var LoadingPage = function () { return ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(fallbacks_1.PageLoadingFallback, { text: "Loading application..." }), (0, jsx_runtime_1.jsx)("div", { style: { position: "absolute", top: 10, right: 10 }, children: (0, jsx_runtime_1.jsx)(fallbacks_1.InlineLoadingFallback, { text: "Syncing..." }) }), (0, jsx_runtime_1.jsxs)("main", { style: { marginTop: 100 }, children: [(0, jsx_runtime_1.jsxs)("div", { style: {
                                display: "grid",
                                gap: 16,
                                gridTemplateColumns: "repeat(2, 1fr)",
                            }, children: [(0, jsx_runtime_1.jsx)(fallbacks_1.ComponentLoadingFallback, { text: "Loading dashboard..." }), (0, jsx_runtime_1.jsx)(fallbacks_1.ComponentLoadingFallback, { text: "Loading notifications..." })] }), (0, jsx_runtime_1.jsxs)("div", { style: { marginTop: 20 }, children: [(0, jsx_runtime_1.jsx)(fallbacks_1.CardLoadingFallback, {}), (0, jsx_runtime_1.jsx)(fallbacks_1.CardLoadingFallback, {})] })] })] })); };
        (0, react_2.render)((0, jsx_runtime_1.jsx)(LoadingPage, {}));
        expect(react_2.screen.getByText("Loading application...")).toBeInTheDocument();
        expect(react_2.screen.getByText("Syncing...")).toBeInTheDocument();
        expect(react_2.screen.getByText("Loading dashboard...")).toBeInTheDocument();
        expect(react_2.screen.getByText("Loading notifications...")).toBeInTheDocument();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,