{"file":"/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/external/lib/sentry.mock.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/external/lib/sentry.mock.ts"],"sourcesContent":["/**\n * Sentry Mock\n *\n * Centralized mock for @sentry/react to avoid duplication across test files.\n * Used for testing error reporting and analytics functionality.\n */\n\nimport type {\n  MockSentryInterface,\n  MockSentryTransaction,\n  SentryTestUtilsInterface,\n} from '../types/types';\n\n/**\n * Sentry API mock implementation\n * Provides all essential Sentry functions as Jest mocks\n */\nexport const mockSentry: MockSentryInterface = {\n  // Error capturing\n  captureException: jest.fn(),\n  captureMessage: jest.fn(),\n\n  // Context management\n  setUser: jest.fn(),\n  setTag: jest.fn(),\n  setExtra: jest.fn(),\n  addBreadcrumb: jest.fn(),\n  configureScope: jest.fn(),\n\n  // Scope management\n  withScope: jest.fn((callback: (scope: MockSentryInterface) => void) => callback(mockSentry)),\n  getCurrentHub: jest.fn(() => mockSentry),\n\n  // Transaction/performance monitoring\n  startTransaction: jest.fn(\n    (): MockSentryTransaction => ({\n      setTag: jest.fn(),\n      setData: jest.fn(),\n      finish: jest.fn(),\n    })\n  ),\n\n  // Integration helpers\n  flush: jest.fn(() => Promise.resolve(true)),\n  close: jest.fn(() => Promise.resolve(true)),\n};\n\n/**\n * Factory function to create fresh Sentry mock instances\n * Useful when you need isolated mocks for specific tests\n */\nexport const createSentryMock = (): MockSentryInterface => ({\n  captureException: jest.fn(),\n  captureMessage: jest.fn(),\n  setUser: jest.fn(),\n  setTag: jest.fn(),\n  setExtra: jest.fn(),\n  addBreadcrumb: jest.fn(),\n  configureScope: jest.fn(),\n  withScope: jest.fn((callback: (scope: MockSentryInterface) => void) => callback(mockSentry)),\n  getCurrentHub: jest.fn(() => mockSentry),\n  startTransaction: jest.fn(\n    (): MockSentryTransaction => ({\n      setTag: jest.fn(),\n      setData: jest.fn(),\n      finish: jest.fn(),\n    })\n  ),\n  flush: jest.fn(() => Promise.resolve(true)),\n  close: jest.fn(() => Promise.resolve(true)),\n});\n\n/**\n * Test utilities for Sentry mock assertions\n */\nexport const sentryTestUtils: SentryTestUtilsInterface = {\n  /**\n   * Clear all Sentry mock calls\n   */\n  clearMocks: () => {\n    Object.values(mockSentry).forEach((mock) => {\n      if (jest.isMockFunction(mock)) {\n        mock.mockClear();\n      }\n    });\n  },\n\n  /**\n   * Reset all Sentry mocks to their initial state\n   */\n  resetMocks: () => {\n    Object.values(mockSentry).forEach((mock) => {\n      if (jest.isMockFunction(mock)) {\n        mock.mockReset();\n      }\n    });\n  },\n\n  /**\n   * Assert that an exception was captured\n   */\n  expectExceptionCaptured: (error?: Error | string) => {\n    expect(mockSentry.captureException).toHaveBeenCalled();\n    if (error) {\n      expect(mockSentry.captureException).toHaveBeenCalledWith(\n        expect.objectContaining(\n          typeof error === 'string' ? { message: error } : { message: error.message }\n        ),\n        expect.any(Object)\n      );\n    }\n  },\n\n  /**\n   * Assert that a message was captured\n   */\n  expectMessageCaptured: (message: string) => {\n    expect(mockSentry.captureMessage).toHaveBeenCalledWith(message, expect.any(String));\n  },\n\n  /**\n   * Assert that user context was set\n   */\n  expectUserSet: (userId?: string) => {\n    expect(mockSentry.setUser).toHaveBeenCalled();\n    if (userId) {\n      expect(mockSentry.setUser).toHaveBeenCalledWith(expect.objectContaining({ id: userId }));\n    }\n  },\n\n  /**\n   * Assert that tags were set\n   */\n  expectTagSet: (key: string, value?: string) => {\n    expect(mockSentry.setTag).toHaveBeenCalledWith(key, value || expect.any(String));\n  },\n\n  /**\n   * Get all captured exceptions\n   */\n  getCapturedExceptions: (): jest.Mock['mock']['calls'] => {\n    return mockSentry.captureException.mock.calls;\n  },\n\n  /**\n   * Get all captured messages\n   */\n  getCapturedMessages: (): jest.Mock['mock']['calls'] => {\n    return mockSentry.captureMessage.mock.calls;\n  },\n};\n\n// Export the main mock for Jest module mocking\nexport default mockSentry;\n"],"version":3}