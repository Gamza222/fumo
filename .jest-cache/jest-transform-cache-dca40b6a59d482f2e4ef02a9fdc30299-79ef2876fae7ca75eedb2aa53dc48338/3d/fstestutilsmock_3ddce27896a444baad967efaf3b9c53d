8c7da0b4b7a07b070783668807a19f91
"use strict";
/**
 * File System Test Utilities
 *
 * Utility functions for setting up file system mocks in tests.
 * These are specifically designed for testing file operations.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupMockFileSystem = exports.fileSystemScenarios = exports.createMockFileSystem = void 0;
var fs = __importStar(require("fs"));
/**
 * Creates a mock file system setup for testing
 */
var createMockFileSystem = function () {
    var mockedFs = fs;
    return {
        // Basic file operations
        mockFileExists: function (_path, exists) {
            if (exists === void 0) { exists = true; }
            mockedFs.existsSync.mockReturnValue(exists);
        },
        mockDirectoryExists: function (_path, exists) {
            if (exists === void 0) { exists = true; }
            mockedFs.existsSync.mockReturnValue(exists);
        },
        mockReadFile: function (_path, content) {
            mockedFs.readFileSync.mockReturnValue(content);
        },
        mockWriteFile: function () {
            mockedFs.writeFileSync.mockImplementation(function () { return undefined; });
        },
        mockCreateDirectory: function () {
            mockedFs.mkdirSync.mockImplementation(function () { return 'mocked'; });
        },
        // Directory operations
        mockReadDirectory: function (_path, files) {
            mockedFs.readdirSync.mockReturnValue(files);
        },
        mockFileStats: function (_path, isDirectory) {
            if (isDirectory === void 0) { isDirectory = false; }
            mockedFs.statSync.mockReturnValue({
                isDirectory: function () { return isDirectory; },
            });
        },
        // Error scenarios
        mockFileReadError: function (_path, error) {
            if (error === void 0) { error = new Error('File read error'); }
            mockedFs.readFileSync.mockImplementation(function () {
                throw error;
            });
        },
        mockFileSystemError: function (error) {
            if (error === void 0) { error = new Error('File system error'); }
            mockedFs.existsSync.mockImplementation(function () {
                throw error;
            });
        },
        // Reset all mocks
        resetAllMocks: function () {
            mockedFs.existsSync.mockReset();
            mockedFs.readFileSync.mockReset();
            mockedFs.writeFileSync.mockReset();
            mockedFs.mkdirSync.mockReset();
            mockedFs.readdirSync.mockReset();
            mockedFs.statSync.mockReset();
        },
        // Get mock calls for assertions
        getMockCalls: function () { return ({
            existsSync: mockedFs.existsSync.mock.calls,
            readFileSync: mockedFs.readFileSync.mock.calls,
            writeFileSync: mockedFs.writeFileSync.mock.calls,
            mkdirSync: mockedFs.mkdirSync.mock.calls,
            readdirSync: mockedFs.readdirSync.mock.calls,
            statSync: mockedFs.statSync.mock.calls,
        }); },
    };
};
exports.createMockFileSystem = createMockFileSystem;
/**
 * Common file system scenarios for testing
 */
exports.fileSystemScenarios = {
    /**
     * Empty directory scenario
     */
    emptyDirectory: function (mockFs) {
        mockFs.mockDirectoryExists('src', true);
        mockFs.mockReadDirectory('src', []);
    },
    /**
     * Directory with files scenario
     */
    directoryWithFiles: function (mockFs, files) {
        mockFs.mockDirectoryExists('src', true);
        mockFs.mockReadDirectory('src', files);
    },
    /**
     * File not found scenario
     */
    fileNotFound: function (mockFs, path) {
        mockFs.mockFileExists(path, false);
    },
    /**
     * File read error scenario
     */
    fileReadError: function (mockFs, path) {
        mockFs.mockFileExists(path, true);
        mockFs.mockFileReadError(path);
    },
    /**
     * Successful file operations scenario
     */
    successfulOperations: function (mockFs) {
        mockFs.mockWriteFile();
        mockFs.mockCreateDirectory();
    },
};
/**
 * Helper to create a mock file system with common setup
 */
var setupMockFileSystem = function (scenario) {
    if (scenario === void 0) { scenario = 'empty'; }
    var mockFs = (0, exports.createMockFileSystem)();
    switch (scenario) {
        case 'empty':
            exports.fileSystemScenarios.emptyDirectory(mockFs);
            break;
        case 'withFiles':
            exports.fileSystemScenarios.directoryWithFiles(mockFs, ['test.ts', 'test.tsx']);
            break;
        case 'error':
            mockFs.mockFileSystemError();
            break;
    }
    return mockFs;
};
exports.setupMockFileSystem = setupMockFileSystem;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,