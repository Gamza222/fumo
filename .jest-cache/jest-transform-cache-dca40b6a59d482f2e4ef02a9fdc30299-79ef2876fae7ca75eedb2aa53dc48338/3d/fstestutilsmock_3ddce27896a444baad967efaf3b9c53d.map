{"file":"/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/node/lib/fs/fs-test-utils.mock.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/node/lib/fs/fs-test-utils.mock.ts"],"sourcesContent":["/**\n * File System Test Utilities\n *\n * Utility functions for setting up file system mocks in tests.\n * These are specifically designed for testing file operations.\n */\n\nimport * as fs from 'fs';\n\n/**\n * Creates a mock file system setup for testing\n */\nexport const createMockFileSystem = () => {\n  const mockedFs = fs as jest.Mocked<typeof fs>;\n\n  return {\n    // Basic file operations\n    mockFileExists: (_path: string, exists: boolean = true) => {\n      mockedFs.existsSync.mockReturnValue(exists);\n    },\n\n    mockDirectoryExists: (_path: string, exists: boolean = true) => {\n      mockedFs.existsSync.mockReturnValue(exists);\n    },\n\n    mockReadFile: (_path: string, content: string) => {\n      mockedFs.readFileSync.mockReturnValue(content);\n    },\n\n    mockWriteFile: () => {\n      mockedFs.writeFileSync.mockImplementation(() => undefined);\n    },\n\n    mockCreateDirectory: () => {\n      mockedFs.mkdirSync.mockImplementation(() => 'mocked');\n    },\n\n    // Directory operations\n    mockReadDirectory: (_path: string, files: string[]) => {\n      mockedFs.readdirSync.mockReturnValue(files as unknown as import('fs').Dirent<Buffer>[]);\n    },\n\n    mockFileStats: (_path: string, isDirectory: boolean = false) => {\n      mockedFs.statSync.mockReturnValue({\n        isDirectory: () => isDirectory,\n      } as unknown as import('fs').Stats);\n    },\n\n    // Error scenarios\n    mockFileReadError: (_path: string, error: Error = new Error('File read error')) => {\n      mockedFs.readFileSync.mockImplementation(() => {\n        throw error;\n      });\n    },\n\n    mockFileSystemError: (error: Error = new Error('File system error')) => {\n      mockedFs.existsSync.mockImplementation(() => {\n        throw error;\n      });\n    },\n\n    // Reset all mocks\n    resetAllMocks: () => {\n      mockedFs.existsSync.mockReset();\n      mockedFs.readFileSync.mockReset();\n      mockedFs.writeFileSync.mockReset();\n      mockedFs.mkdirSync.mockReset();\n      mockedFs.readdirSync.mockReset();\n      mockedFs.statSync.mockReset();\n    },\n\n    // Get mock calls for assertions\n    getMockCalls: () => ({\n      existsSync: mockedFs.existsSync.mock.calls,\n      readFileSync: mockedFs.readFileSync.mock.calls,\n      writeFileSync: mockedFs.writeFileSync.mock.calls,\n      mkdirSync: mockedFs.mkdirSync.mock.calls,\n      readdirSync: mockedFs.readdirSync.mock.calls,\n      statSync: mockedFs.statSync.mock.calls,\n    }),\n  };\n};\n\n/**\n * Common file system scenarios for testing\n */\nexport const fileSystemScenarios = {\n  /**\n   * Empty directory scenario\n   */\n  emptyDirectory: (mockFs: ReturnType<typeof createMockFileSystem>) => {\n    mockFs.mockDirectoryExists('src', true);\n    mockFs.mockReadDirectory('src', []);\n  },\n\n  /**\n   * Directory with files scenario\n   */\n  directoryWithFiles: (mockFs: ReturnType<typeof createMockFileSystem>, files: string[]) => {\n    mockFs.mockDirectoryExists('src', true);\n    mockFs.mockReadDirectory('src', files);\n  },\n\n  /**\n   * File not found scenario\n   */\n  fileNotFound: (mockFs: ReturnType<typeof createMockFileSystem>, path: string) => {\n    mockFs.mockFileExists(path, false);\n  },\n\n  /**\n   * File read error scenario\n   */\n  fileReadError: (mockFs: ReturnType<typeof createMockFileSystem>, path: string) => {\n    mockFs.mockFileExists(path, true);\n    mockFs.mockFileReadError(path);\n  },\n\n  /**\n   * Successful file operations scenario\n   */\n  successfulOperations: (mockFs: ReturnType<typeof createMockFileSystem>) => {\n    mockFs.mockWriteFile();\n    mockFs.mockCreateDirectory();\n  },\n};\n\n/**\n * Helper to create a mock file system with common setup\n */\nexport const setupMockFileSystem = (scenario: 'empty' | 'withFiles' | 'error' = 'empty') => {\n  const mockFs = createMockFileSystem();\n\n  switch (scenario) {\n    case 'empty':\n      fileSystemScenarios.emptyDirectory(mockFs);\n      break;\n    case 'withFiles':\n      fileSystemScenarios.directoryWithFiles(mockFs, ['test.ts', 'test.tsx']);\n      break;\n    case 'error':\n      mockFs.mockFileSystemError();\n      break;\n  }\n\n  return mockFs;\n};\n"],"version":3}