{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/monitoring/types/monitoring.types.ts","mappings":";AAAA;;;;GAIG;;;AAEH,+EAA+E;AAC/E,qBAAqB;AACrB,+EAA+E;AAE/E;;GAEG;AACH,IAAY,YAKX;AALD,WAAY,YAAY;IACtB,mCAAmB,CAAA;IACnB,qCAAqB,CAAA;IACrB,uCAAuB,CAAA;IACvB,mCAAmB,CAAA;AACrB,CAAC,EALW,YAAY,4BAAZ,YAAY,QAKvB;AA0CD,+EAA+E;AAC/E,kBAAkB;AAClB,+EAA+E;AAE/E;;GAEG;AACH,IAAY,kBAMX;AAND,WAAY,kBAAkB;IAC5B,6CAAuB,CAAA;IACvB,2DAAqC,CAAA;IACrC,+DAAyC,CAAA;IACzC,iDAA2B,CAAA;IAC3B,mDAA6B,CAAA;AAC/B,CAAC,EANW,kBAAkB,kCAAlB,kBAAkB,QAM7B;AAuDD;;GAEG;AACH,IAAY,UAKX;AALD,WAAY,UAAU;IACpB,2BAAa,CAAA;IACb,iCAAmB,CAAA;IACnB,6BAAe,CAAA;IACf,mCAAqB,CAAA;AACvB,CAAC,EALW,UAAU,0BAAV,UAAU,QAKrB","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/monitoring/types/monitoring.types.ts"],"sourcesContent":["/**\n * Monitoring Infrastructure Types\n *\n * Type definitions for monitoring, analytics, and health check systems.\n */\n\n// ============================================================================\n// HEALTH CHECK TYPES\n// ============================================================================\n\n/**\n * Health status levels\n */\nexport enum HealthStatus {\n  HEALTHY = 'healthy',\n  DEGRADED = 'degraded',\n  UNHEALTHY = 'unhealthy',\n  UNKNOWN = 'unknown',\n}\n\n/**\n * Service health information\n */\nexport interface ServiceHealth {\n  name: string;\n  status: HealthStatus;\n  responseTime?: number;\n  lastCheck: Date;\n  error?: string;\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * Overall system health status\n */\nexport interface SystemHealth {\n  status: HealthStatus;\n  timestamp: Date;\n  uptime: number;\n  version: string;\n  versionDisplay: string;\n  versionInfo: {\n    major: number;\n    minor: number;\n    patch: number;\n    prerelease?: string;\n    versionCode: number;\n    commitHash?: string;\n    branch?: string;\n  };\n  environment: string;\n  services: ServiceHealth[];\n  summary: {\n    total: number;\n    healthy: number;\n    degraded: number;\n    unhealthy: number;\n  };\n}\n\n// ============================================================================\n// ANALYTICS TYPES\n// ============================================================================\n\n/**\n * Analytics event types\n */\nexport enum AnalyticsEventType {\n  PAGE_VIEW = 'page_view',\n  USER_INTERACTION = 'user_interaction',\n  PERFORMANCE_METRIC = 'performance_metric',\n  ERROR_EVENT = 'error_event',\n  CUSTOM_EVENT = 'custom_event',\n}\n\n/**\n * Analytics event data\n */\nexport interface AnalyticsEvent {\n  id: string;\n  type: AnalyticsEventType;\n  name: string;\n  timestamp: Date;\n  userId?: string;\n  sessionId?: string;\n  properties?: Record<string, unknown>;\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * Analytics configuration\n */\nexport interface AnalyticsConfig {\n  enabled: boolean;\n  trackingId?: string;\n  respectDoNotTrack: boolean;\n  anonymizeIp: boolean;\n  sampleRate: number;\n  debug: boolean;\n}\n\n/**\n * Analytics session information\n */\nexport interface AnalyticsSession {\n  id: string;\n  startTime: Date;\n  lastActivity: Date;\n  pageViews: number;\n  events: number;\n  userId?: string;\n}\n\n// ============================================================================\n// MONITORING TYPES\n// ============================================================================\n\n/**\n * Monitoring metrics\n */\nexport interface MonitoringMetric {\n  name: string;\n  value: number;\n  unit: string;\n  timestamp: Date;\n  tags?: Record<string, string>;\n}\n\n/**\n * Monitoring alert levels\n */\nexport enum AlertLevel {\n  INFO = 'info',\n  WARNING = 'warning',\n  ERROR = 'error',\n  CRITICAL = 'critical',\n}\n\n/**\n * Monitoring alert\n */\nexport interface MonitoringAlert {\n  id: string;\n  level: AlertLevel;\n  message: string;\n  timestamp: Date;\n  resolved: boolean;\n  resolvedAt?: Date;\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * Monitoring dashboard data\n */\nexport interface MonitoringDashboardData {\n  systemHealth: SystemHealth;\n  recentAlerts: MonitoringAlert[];\n  metrics: MonitoringMetric[];\n  analytics: {\n    totalEvents: number;\n    activeSessions: number;\n    topPages: Array<{ path: string; views: number }>;\n  };\n}\n\n// ============================================================================\n// CONFIGURATION TYPES\n// ============================================================================\n\n/**\n * Monitoring configuration\n */\nexport interface MonitoringConfig {\n  healthCheck: {\n    enabled: boolean;\n    interval: number;\n    timeout: number;\n    services: string[];\n  };\n  analytics: AnalyticsConfig;\n  alerts: {\n    enabled: boolean;\n    webhook?: string;\n    email?: string;\n  };\n  dashboard: {\n    refreshInterval: number;\n    maxAlerts: number;\n    maxMetrics: number;\n  };\n}\n"],"version":3}