9946bbce922f1fe5a642416e8b7e173c
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
// Mock the monitoring service
jest.mock('../lib/monitoring.service');
var react_1 = require("@testing-library/react");
var MonitoringDashboard_1 = require("./MonitoringDashboard");
var monitoring_service_1 = require("../lib/monitoring.service");
var monitoring_types_1 = require("../types/monitoring.types");
var infrastructure_1 = require("@/shared/testing/mocks/infrastructure");
var MockedMonitoringService = monitoring_service_1.MonitoringService;
// Mock the static methods
MockedMonitoringService.getInstance = jest.fn();
describe('MonitoringDashboard', function () {
    var mockInstance;
    beforeEach(function () {
        mockInstance = (0, infrastructure_1.createMockMonitoringServiceInstance)({
            getDashboardData: jest.fn().mockResolvedValue(infrastructure_1.mockDashboardData),
        });
        MockedMonitoringService.getInstance.mockReturnValue(mockInstance);
    });
    afterEach(function () {
        jest.clearAllMocks();
    });
    it('should render loading state initially', function () {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(MonitoringDashboard_1.MonitoringDashboard, {}));
        // In loading state, we should see the loading skeleton
        // The header and refresh button are not visible during loading
        expect(document.querySelector("[class*='loading']")).toBeInTheDocument();
    });
    it('should render dashboard data after loading', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    (0, react_1.render)((0, jsx_runtime_1.jsx)(MonitoringDashboard_1.MonitoringDashboard, {}));
                    return [4 /*yield*/, (0, react_1.waitFor)(function () {
                            expect(react_1.screen.getByText('System Monitoring')).toBeInTheDocument();
                        })];
                case 1:
                    _a.sent();
                    // Check system overview
                    expect(react_1.screen.getByText('60m')).toBeInTheDocument(); // uptime
                    expect(react_1.screen.getByText('1.0.0')).toBeInTheDocument(); // version
                    expect(react_1.screen.getByText('4/4')).toBeInTheDocument(); // healthy services (4 services in mock data)
                    // Check services health
                    expect(react_1.screen.getByText('Services Health')).toBeInTheDocument();
                    expect(react_1.screen.getByText('database')).toBeInTheDocument();
                    expect(react_1.screen.getByText('api')).toBeInTheDocument();
                    expect(react_1.screen.getByText('cache')).toBeInTheDocument();
                    expect(react_1.screen.getByText('storage')).toBeInTheDocument();
                    // Check recent alerts
                    expect(react_1.screen.getByText('Recent Alerts')).toBeInTheDocument();
                    expect(react_1.screen.getByText('System started successfully')).toBeInTheDocument();
                    // Check analytics overview
                    expect(react_1.screen.getByText('Analytics Overview')).toBeInTheDocument();
                    expect(react_1.screen.getByText('100')).toBeInTheDocument(); // total events
                    expect(react_1.screen.getByText('5')).toBeInTheDocument(); // active sessions
                    return [2 /*return*/];
            }
        });
    }); });
    it('should display health status indicator', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    (0, react_1.render)((0, jsx_runtime_1.jsx)(MonitoringDashboard_1.MonitoringDashboard, {}));
                    return [4 /*yield*/, (0, react_1.waitFor)(function () {
                            // There should be at least one "healthy" status indicator
                            expect(react_1.screen.getAllByText('healthy')).toHaveLength(5); // Overall + 4 services
                        })];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should handle refresh button click', function () { return __awaiter(void 0, void 0, void 0, function () {
        var refreshButton;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    (0, react_1.render)((0, jsx_runtime_1.jsx)(MonitoringDashboard_1.MonitoringDashboard, {}));
                    return [4 /*yield*/, (0, react_1.waitFor)(function () {
                            expect(mockInstance.getDashboardData).toHaveBeenCalled();
                        })];
                case 1:
                    _a.sent();
                    refreshButton = react_1.screen.getByText('Refresh');
                    react_1.fireEvent.click(refreshButton);
                    return [4 /*yield*/, (0, react_1.waitFor)(function () {
                            expect(mockInstance.getDashboardData).toHaveBeenCalledTimes(2);
                        })];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should handle error state', function () { return __awaiter(void 0, void 0, void 0, function () {
        var errorMessage, retryButton;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    errorMessage = 'Failed to fetch data';
                    mockInstance.getDashboardData.mockRejectedValue(new Error(errorMessage));
                    (0, react_1.render)((0, jsx_runtime_1.jsx)(MonitoringDashboard_1.MonitoringDashboard, {}));
                    return [4 /*yield*/, (0, react_1.waitFor)(function () {
                            expect(react_1.screen.getByText('Dashboard Error')).toBeInTheDocument();
                            expect(react_1.screen.getByText(errorMessage)).toBeInTheDocument();
                        })];
                case 1:
                    _a.sent();
                    retryButton = react_1.screen.getByText('Retry');
                    expect(retryButton).toBeInTheDocument();
                    // Test retry functionality
                    mockInstance.getDashboardData.mockResolvedValue(infrastructure_1.mockDashboardData);
                    react_1.fireEvent.click(retryButton);
                    return [4 /*yield*/, (0, react_1.waitFor)(function () {
                            expect(react_1.screen.getByText('System Monitoring')).toBeInTheDocument();
                        })];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should display no alerts message when no alerts', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockInstance.getDashboardData.mockResolvedValue(infrastructure_1.mockDashboardDataNoAlerts);
                    (0, react_1.render)((0, jsx_runtime_1.jsx)(MonitoringDashboard_1.MonitoringDashboard, {}));
                    return [4 /*yield*/, (0, react_1.waitFor)(function () {
                            expect(react_1.screen.getByText('No recent alerts')).toBeInTheDocument();
                        })];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should apply custom className', function () { return __awaiter(void 0, void 0, void 0, function () {
        var customClass;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    customClass = 'custom-dashboard';
                    (0, react_1.render)((0, jsx_runtime_1.jsx)(MonitoringDashboard_1.MonitoringDashboard, { className: customClass }));
                    return [4 /*yield*/, (0, react_1.waitFor)(function () {
                            // Find the root container with the custom class
                            var dashboard = document.querySelector(".".concat(customClass));
                            expect(dashboard).toBeInTheDocument();
                            expect(dashboard).toHaveClass(customClass);
                        })];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should handle different health statuses', function () { return __awaiter(void 0, void 0, void 0, function () {
        var degradedHealthData;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    degradedHealthData = __assign(__assign({}, infrastructure_1.mockDashboardData), { systemHealth: __assign(__assign({}, infrastructure_1.mockDashboardData.systemHealth), { status: monitoring_types_1.HealthStatus.DEGRADED, summary: {
                                total: 2,
                                healthy: 1,
                                degraded: 1,
                                unhealthy: 0,
                            } }) });
                    mockInstance.getDashboardData.mockResolvedValue(degradedHealthData);
                    (0, react_1.render)((0, jsx_runtime_1.jsx)(MonitoringDashboard_1.MonitoringDashboard, {}));
                    return [4 /*yield*/, (0, react_1.waitFor)(function () {
                            expect(react_1.screen.getByText('degraded')).toBeInTheDocument();
                            expect(react_1.screen.getByText('1/2')).toBeInTheDocument(); // healthy services
                        })];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should display service response times', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    (0, react_1.render)((0, jsx_runtime_1.jsx)(MonitoringDashboard_1.MonitoringDashboard, {}));
                    return [4 /*yield*/, (0, react_1.waitFor)(function () {
                            expect(react_1.screen.getByText('Response: 5ms')).toBeInTheDocument();
                            expect(react_1.screen.getByText('Response: 10ms')).toBeInTheDocument();
                        })];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should display analytics data correctly', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    (0, react_1.render)((0, jsx_runtime_1.jsx)(MonitoringDashboard_1.MonitoringDashboard, {}));
                    return [4 /*yield*/, (0, react_1.waitFor)(function () {
                            expect(react_1.screen.getByText('Total Events')).toBeInTheDocument();
                            expect(react_1.screen.getByText('Active Sessions')).toBeInTheDocument();
                            expect(react_1.screen.getByText('Top Page')).toBeInTheDocument();
                            expect(react_1.screen.getByText('/ (50 views)')).toBeInTheDocument();
                        })];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should handle auto-refresh', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    jest.useFakeTimers();
                    (0, react_1.render)((0, jsx_runtime_1.jsx)(MonitoringDashboard_1.MonitoringDashboard, { refreshInterval: 1000 }));
                    return [4 /*yield*/, (0, react_1.waitFor)(function () {
                            expect(mockInstance.getDashboardData).toHaveBeenCalledTimes(1);
                        })];
                case 1:
                    _a.sent();
                    // Fast-forward time to trigger auto-refresh
                    jest.advanceTimersByTime(1000);
                    return [4 /*yield*/, (0, react_1.waitFor)(function () {
                            expect(mockInstance.getDashboardData).toHaveBeenCalledTimes(2);
                        })];
                case 2:
                    _a.sent();
                    jest.useRealTimers();
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,