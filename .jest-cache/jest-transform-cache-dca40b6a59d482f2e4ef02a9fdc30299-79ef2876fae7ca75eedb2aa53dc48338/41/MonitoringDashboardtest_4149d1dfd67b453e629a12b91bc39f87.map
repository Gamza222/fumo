{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/monitoring/ui/MonitoringDashboard.test.tsx","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/monitoring/ui/MonitoringDashboard.test.tsx"],"sourcesContent":["/**\n * Monitoring Dashboard Tests\n *\n * Tests for the monitoring dashboard component including rendering,\n * data fetching, and user interactions.\n */\n\n/* eslint-disable @typescript-eslint/unbound-method */\n\nimport _React from 'react';\nimport { fireEvent, render, screen, waitFor } from '@testing-library/react';\nimport { MonitoringDashboard } from './MonitoringDashboard';\nimport { MonitoringService } from '../lib/monitoring.service';\nimport { HealthStatus } from '../types/monitoring.types';\nimport {\n  createMockMonitoringServiceInstance,\n  mockDashboardData,\n  mockDashboardDataNoAlerts,\n} from '@/shared/testing/mocks/infrastructure';\n\n// Mock the monitoring service\njest.mock('../lib/monitoring.service');\nconst MockedMonitoringService = MonitoringService as any;\n\n// Mock the static methods\nMockedMonitoringService.getInstance = jest.fn();\n\ndescribe('MonitoringDashboard', () => {\n  let mockInstance: jest.Mocked<MonitoringService>;\n\n  beforeEach(() => {\n    mockInstance = createMockMonitoringServiceInstance({\n      getDashboardData: jest.fn().mockResolvedValue(mockDashboardData),\n    });\n\n    (MockedMonitoringService.getInstance as jest.Mock).mockReturnValue(mockInstance);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should render loading state initially', () => {\n    render(<MonitoringDashboard />);\n\n    // In loading state, we should see the loading skeleton\n    // The header and refresh button are not visible during loading\n    expect(document.querySelector(\"[class*='loading']\")).toBeInTheDocument();\n  });\n\n  it('should render dashboard data after loading', async () => {\n    render(<MonitoringDashboard />);\n\n    await waitFor(() => {\n      expect(screen.getByText('System Monitoring')).toBeInTheDocument();\n    });\n\n    // Check system overview\n    expect(screen.getByText('60m')).toBeInTheDocument(); // uptime\n    expect(screen.getByText('1.0.0')).toBeInTheDocument(); // version\n    expect(screen.getByText('4/4')).toBeInTheDocument(); // healthy services (4 services in mock data)\n\n    // Check services health\n    expect(screen.getByText('Services Health')).toBeInTheDocument();\n    expect(screen.getByText('database')).toBeInTheDocument();\n    expect(screen.getByText('api')).toBeInTheDocument();\n    expect(screen.getByText('cache')).toBeInTheDocument();\n    expect(screen.getByText('storage')).toBeInTheDocument();\n\n    // Check recent alerts\n    expect(screen.getByText('Recent Alerts')).toBeInTheDocument();\n    expect(screen.getByText('System started successfully')).toBeInTheDocument();\n\n    // Check analytics overview\n    expect(screen.getByText('Analytics Overview')).toBeInTheDocument();\n    expect(screen.getByText('100')).toBeInTheDocument(); // total events\n    expect(screen.getByText('5')).toBeInTheDocument(); // active sessions\n  });\n\n  it('should display health status indicator', async () => {\n    render(<MonitoringDashboard />);\n\n    await waitFor(() => {\n      // There should be at least one \"healthy\" status indicator\n      expect(screen.getAllByText('healthy')).toHaveLength(5); // Overall + 4 services\n    });\n  });\n\n  it('should handle refresh button click', async () => {\n    render(<MonitoringDashboard />);\n\n    await waitFor(() => {\n      expect(mockInstance.getDashboardData).toHaveBeenCalled();\n    });\n\n    const refreshButton = screen.getByText('Refresh');\n    fireEvent.click(refreshButton);\n\n    await waitFor(() => {\n      expect(mockInstance.getDashboardData).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  it('should handle error state', async () => {\n    const errorMessage = 'Failed to fetch data';\n    mockInstance.getDashboardData.mockRejectedValue(new Error(errorMessage));\n\n    render(<MonitoringDashboard />);\n\n    await waitFor(() => {\n      expect(screen.getByText('Dashboard Error')).toBeInTheDocument();\n      expect(screen.getByText(errorMessage)).toBeInTheDocument();\n    });\n\n    // Check retry button\n    const retryButton = screen.getByText('Retry');\n    expect(retryButton).toBeInTheDocument();\n\n    // Test retry functionality\n    mockInstance.getDashboardData.mockResolvedValue(mockDashboardData);\n    fireEvent.click(retryButton);\n\n    await waitFor(() => {\n      expect(screen.getByText('System Monitoring')).toBeInTheDocument();\n    });\n  });\n\n  it('should display no alerts message when no alerts', async () => {\n    mockInstance.getDashboardData.mockResolvedValue(mockDashboardDataNoAlerts);\n\n    render(<MonitoringDashboard />);\n\n    await waitFor(() => {\n      expect(screen.getByText('No recent alerts')).toBeInTheDocument();\n    });\n  });\n\n  it('should apply custom className', async () => {\n    const customClass = 'custom-dashboard';\n    render(<MonitoringDashboard className={customClass} />);\n\n    await waitFor(() => {\n      // Find the root container with the custom class\n      const dashboard = document.querySelector(`.${customClass}`);\n      expect(dashboard).toBeInTheDocument();\n      expect(dashboard).toHaveClass(customClass);\n    });\n  });\n\n  it('should handle different health statuses', async () => {\n    const degradedHealthData = {\n      ...mockDashboardData,\n      systemHealth: {\n        ...mockDashboardData.systemHealth,\n        status: HealthStatus.DEGRADED,\n        summary: {\n          total: 2,\n          healthy: 1,\n          degraded: 1,\n          unhealthy: 0,\n        },\n      },\n    };\n    mockInstance.getDashboardData.mockResolvedValue(degradedHealthData);\n\n    render(<MonitoringDashboard />);\n\n    await waitFor(() => {\n      expect(screen.getByText('degraded')).toBeInTheDocument();\n      expect(screen.getByText('1/2')).toBeInTheDocument(); // healthy services\n    });\n  });\n\n  it('should display service response times', async () => {\n    render(<MonitoringDashboard />);\n\n    await waitFor(() => {\n      expect(screen.getByText('Response: 5ms')).toBeInTheDocument();\n      expect(screen.getByText('Response: 10ms')).toBeInTheDocument();\n    });\n  });\n\n  it('should display analytics data correctly', async () => {\n    render(<MonitoringDashboard />);\n\n    await waitFor(() => {\n      expect(screen.getByText('Total Events')).toBeInTheDocument();\n      expect(screen.getByText('Active Sessions')).toBeInTheDocument();\n      expect(screen.getByText('Top Page')).toBeInTheDocument();\n      expect(screen.getByText('/ (50 views)')).toBeInTheDocument();\n    });\n  });\n\n  it('should handle auto-refresh', async () => {\n    jest.useFakeTimers();\n\n    render(<MonitoringDashboard refreshInterval={1000} />);\n\n    await waitFor(() => {\n      expect(mockInstance.getDashboardData).toHaveBeenCalledTimes(1);\n    });\n\n    // Fast-forward time to trigger auto-refresh\n    jest.advanceTimersByTime(1000);\n\n    await waitFor(() => {\n      expect(mockInstance.getDashboardData).toHaveBeenCalledTimes(2);\n    });\n\n    jest.useRealTimers();\n  });\n});\n"],"version":3}