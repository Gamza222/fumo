c7427f1774e57569367add6a2ed0314c
"use strict";
/**
 * React Query Client Tests
 *
 * Real-life enterprise scenarios testing with minimal mocking.
 * Tests the universal React Query configuration for any application.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var queryClient_1 = require("./queryClient");
var react_query_1 = require("@tanstack/react-query");
describe('React Query Client', function () {
    beforeEach(function () {
        // Clear query cache before each test
        queryClient_1.queryClient.clear();
    });
    afterEach(function () {
        // Clear any pending timers
        jest.clearAllTimers();
        // Clear query cache after each test
        queryClient_1.queryClient.clear();
    });
    // ============================================================================
    // REAL-LIFE ENTERPRISE SCENARIOS
    // ============================================================================
    describe('Enterprise Query Management', function () {
        it('should handle caching for user data queries', function () {
            // Real scenario: user profile data should be cached
            var userQueryKey = ['user', 'profile', '123'];
            var mockUserData = {
                id: '123',
                name: 'John Doe',
                email: 'john@company.com',
                department: 'Engineering',
            };
            // Set cached data
            queryClient_1.queryClient.setQueryData(userQueryKey, mockUserData);
            // Retrieve cached data
            var cachedData = queryClient_1.queryClient.getQueryData(userQueryKey);
            expect(cachedData).toEqual(mockUserData);
        });
        it('should handle invalidation for data refresh scenarios', function () { return __awaiter(void 0, void 0, void 0, function () {
            var userQueries;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userQueries = [
                            ['user', 'profile', '123'],
                            ['user', 'settings', '123'],
                            ['user', 'permissions', '123'],
                        ];
                        // Cache some user data
                        userQueries.forEach(function (queryKey) {
                            queryClient_1.queryClient.setQueryData(queryKey, { userId: '123', data: 'cached' });
                        });
                        // Invalidate all user queries
                        return [4 /*yield*/, queryClient_1.queryClient.invalidateQueries({
                                queryKey: ['user'],
                            })];
                    case 1:
                        // Invalidate all user queries
                        _a.sent();
                        // All user queries should be marked as stale
                        userQueries.forEach(function (queryKey) {
                            var queryState = queryClient_1.queryClient.getQueryState(queryKey);
                            expect(queryState === null || queryState === void 0 ? void 0 : queryState.isInvalidated).toBe(true);
                        });
                        return [2 /*return*/];
                }
            });
        }); });
        it('should handle prefetching for performance optimization', function () { return __awaiter(void 0, void 0, void 0, function () {
            var dashboardQueryKey, prefetchedData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dashboardQueryKey = ['dashboard', 'user', '123'];
                        return [4 /*yield*/, queryClient_1.queryClient.prefetchQuery({
                                queryKey: dashboardQueryKey,
                                queryFn: function () {
                                    // Simulate API call
                                    return {
                                        widgets: ['analytics', 'tasks', 'notifications'],
                                        lastUpdated: new Date().toISOString(),
                                    };
                                },
                                staleTime: 5 * 60 * 1000, // 5 minutes
                            })];
                    case 1:
                        _a.sent();
                        prefetchedData = queryClient_1.queryClient.getQueryData(dashboardQueryKey);
                        expect(prefetchedData).toBeDefined();
                        return [2 /*return*/];
                }
            });
        }); });
        it('should handle query cancellation for navigation scenarios', function () { return __awaiter(void 0, void 0, void 0, function () {
            var expensiveQueryKey, queryPromise, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        expensiveQueryKey = ['reports', 'expensive', '2024'];
                        queryPromise = queryClient_1.queryClient.fetchQuery({
                            queryKey: expensiveQueryKey,
                            queryFn: function () { return __awaiter(void 0, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: 
                                        // Simulate slow API call
                                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 1000); })];
                                        case 1:
                                            // Simulate slow API call
                                            _a.sent();
                                            return [2 /*return*/, { report: 'large data set' }];
                                    }
                                });
                            }); },
                        });
                        // Cancel all queries (simulate navigation)
                        void queryClient_1.queryClient.cancelQueries();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, queryPromise];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _a.sent();
                        // Should handle cancellation gracefully
                        expect(error_1).toBeDefined();
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
    });
    // ============================================================================
    // CACHE MANAGEMENT - REAL ENTERPRISE SCENARIOS
    // ============================================================================
    describe('Cache Management', function () {
        it('should respect cache size limits for memory management', function () {
            // Real scenario: enterprise apps run for hours, need memory limits
            var cache = queryClient_1.queryClient.getQueryCache();
            expect(cache).toBeInstanceOf(react_query_1.QueryCache);
            // Cache should have reasonable limits
            var cacheConfig = cache.config;
            expect(cacheConfig).toBeDefined();
        });
        it('should handle garbage collection for old queries', function () {
            // Real scenario: unused data should be cleaned up
            var tempQueryKey = ['temp', 'data', Date.now()];
            queryClient_1.queryClient.setQueryData(tempQueryKey, { temporary: true });
            // Force garbage collection
            queryClient_1.queryClient.clear();
            // Temporary data should be removed
            var clearedData = queryClient_1.queryClient.getQueryData(tempQueryKey);
            expect(clearedData).toBeUndefined();
        });
        it('should persist important queries across sessions', function () {
            // Real scenario: user preferences should survive page refresh
            var preferencesKey = ['user', 'preferences', '123'];
            var preferences = {
                theme: 'dark',
                language: 'en',
                notifications: true,
            };
            queryClient_1.queryClient.setQueryData(preferencesKey, preferences);
            // Important data should be marked for persistence
            var queryState = queryClient_1.queryClient.getQueryState(preferencesKey);
            expect(queryState === null || queryState === void 0 ? void 0 : queryState.data).toEqual(preferences);
        });
        it('should handle concurrent queries efficiently', function () { return __awaiter(void 0, void 0, void 0, function () {
            var sharedDataKey, promises, results;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sharedDataKey = ['shared', 'config'];
                        promises = Array.from({ length: 5 }, function (_, index) {
                            return queryClient_1.queryClient.fetchQuery({
                                queryKey: __spreadArray(__spreadArray([], sharedDataKey, true), [index], false),
                                queryFn: function () { return __awaiter(void 0, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: 
                                            // Simulate API call
                                            return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 10); })];
                                            case 1:
                                                // Simulate API call
                                                _a.sent();
                                                return [2 /*return*/, { configId: index, loaded: true }];
                                        }
                                    });
                                }); },
                            });
                        });
                        return [4 /*yield*/, Promise.all(promises)];
                    case 1:
                        results = _a.sent();
                        expect(results).toHaveLength(5);
                        results.forEach(function (result, index) {
                            expect(result.configId).toBe(index);
                        });
                        return [2 /*return*/];
                }
            });
        }); });
    });
    // ============================================================================
    // ERROR HANDLING - REAL ENTERPRISE SCENARIOS
    // ============================================================================
    describe('Error Handling', function () {
        it('should handle network errors gracefully', function () { return __awaiter(void 0, void 0, void 0, function () {
            var errorQueryKey, error_2, queryState;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        errorQueryKey = ['network', 'error', 'test'];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, queryClient_1.queryClient.fetchQuery({
                                queryKey: errorQueryKey,
                                queryFn: function () {
                                    throw new Error('Network error: Connection failed');
                                },
                                retry: 1, // Minimal retries for testing
                            })];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_2 = _a.sent();
                        expect(error_2).toBeInstanceOf(Error);
                        expect(error_2.message).toContain('Network error');
                        return [3 /*break*/, 4];
                    case 4:
                        queryState = queryClient_1.queryClient.getQueryState(errorQueryKey);
                        expect(queryState === null || queryState === void 0 ? void 0 : queryState.error).toBeDefined();
                        return [2 /*return*/];
                }
            });
        }); });
        it('should handle authentication errors with proper cleanup', function () { return __awaiter(void 0, void 0, void 0, function () {
            var authQueryKey, error_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        authQueryKey = ['auth', 'protected', 'data'];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, queryClient_1.queryClient.fetchQuery({
                                queryKey: authQueryKey,
                                queryFn: function () {
                                    var authError = new Error('Authentication failed');
                                    authError.status = 401;
                                    throw authError;
                                },
                                retry: false,
                            })];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_3 = _a.sent();
                        expect(error_3).toBeDefined();
                        expect(error_3.status).toBe(401);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        it('should handle timeout scenarios', function () { return __awaiter(void 0, void 0, void 0, function () {
            var timeoutQueryKey, error_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        timeoutQueryKey = ['timeout', 'test'];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, queryClient_1.queryClient.fetchQuery({
                                queryKey: timeoutQueryKey,
                                queryFn: function () {
                                    // Simulate timeout - immediate rejection for testing
                                    throw new Error('Request timeout');
                                },
                                retry: false, // Don't retry for timeout test
                            })];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_4 = _a.sent();
                        expect(error_4.message).toContain('timeout');
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); }, 1000); // Shorter timeout for test
        it('should handle validation errors from API', function () { return __awaiter(void 0, void 0, void 0, function () {
            var validationQueryKey, error_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        validationQueryKey = ['validation', 'error'];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, queryClient_1.queryClient.fetchQuery({
                                queryKey: validationQueryKey,
                                queryFn: function () {
                                    var validationError = new Error('Validation failed');
                                    validationError.status = 400;
                                    validationError.validationErrors = {
                                        email: 'Invalid email format',
                                        password: 'Password too weak',
                                    };
                                    throw validationError;
                                },
                            })];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_5 = _a.sent();
                        expect(error_5.validationErrors).toBeDefined();
                        expect(error_5.validationErrors.email).toBe('Invalid email format');
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
    });
    // ============================================================================
    // MUTATION HANDLING - REAL ENTERPRISE SCENARIOS
    // ============================================================================
    describe('Mutation Management', function () {
        it('should handle user profile updates with optimistic updates', function () {
            // Real scenario: update user profile with immediate UI feedback
            var userProfileKey = ['user', 'profile', '123'];
            var originalProfile = {
                id: '123',
                name: 'John Doe',
                email: 'john@company.com',
            };
            // Set initial data
            queryClient_1.queryClient.setQueryData(userProfileKey, originalProfile);
            // Perform optimistic update
            var updatedProfile = __assign(__assign({}, originalProfile), { name: 'John Updated' });
            queryClient_1.queryClient.setQueryData(userProfileKey, updatedProfile);
            // Verify optimistic update
            var optimisticData = queryClient_1.queryClient.getQueryData(userProfileKey);
            expect(optimisticData.name).toBe('John Updated');
        });
        it('should handle bulk operations efficiently', function () { return __awaiter(void 0, void 0, void 0, function () {
            var bulkQueryKey, bulkResult, error_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        bulkQueryKey = ['users', 'bulk', 'update'];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, queryClient_1.queryClient.fetchQuery({
                                queryKey: bulkQueryKey,
                                queryFn: function () {
                                    // Simulate bulk operation
                                    var userIds = ['1', '2', '3', '4', '5'];
                                    return {
                                        updated: userIds.length,
                                        userIds: userIds,
                                        timestamp: new Date().toISOString(),
                                    };
                                },
                            })];
                    case 2:
                        _a.sent();
                        bulkResult = queryClient_1.queryClient.getQueryData(bulkQueryKey);
                        expect(bulkResult.updated).toBe(5);
                        return [3 /*break*/, 4];
                    case 3:
                        error_6 = _a.sent();
                        // Should handle bulk operation errors
                        expect(error_6).toBeDefined();
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        it('should handle mutation rollback on failure', function () {
            // Real scenario: optimistic update fails, need to rollback
            var rollbackKey = ['rollback', 'test'];
            var originalData = { value: 'original' };
            var optimisticData = { value: 'optimistic' };
            // Set original data
            queryClient_1.queryClient.setQueryData(rollbackKey, originalData);
            // Apply optimistic update
            queryClient_1.queryClient.setQueryData(rollbackKey, optimisticData);
            expect(queryClient_1.queryClient.getQueryData(rollbackKey)).toEqual(optimisticData);
            // Simulate failure and rollback
            queryClient_1.queryClient.setQueryData(rollbackKey, originalData);
            expect(queryClient_1.queryClient.getQueryData(rollbackKey)).toEqual(originalData);
        });
    });
    // ============================================================================
    // CONFIGURATION - REAL ENTERPRISE SCENARIOS
    // ============================================================================
    describe('Configuration', function () {
        it('should have enterprise-appropriate default settings', function () {
            // Real scenario: defaults should work for enterprise applications
            var defaultOptions = queryClient_1.queryClient.getDefaultOptions();
            expect(defaultOptions).toBeDefined();
            expect(defaultOptions.queries).toBeDefined();
            expect(defaultOptions.mutations).toBeDefined();
        });
        it('should support custom retry logic for enterprise networks', function () {
            // Real scenario: enterprise networks may have different retry needs
            var retryQueryKey = ['retry', 'test'];
            expect(function () {
                queryClient_1.queryClient
                    .fetchQuery({
                    queryKey: retryQueryKey,
                    queryFn: function () {
                        throw new Error('Temporary network issue');
                    },
                    retry: function (failureCount, error) {
                        // Custom retry logic for enterprise scenarios
                        return failureCount < 3 && error.status !== 401;
                    },
                })
                    .catch(function () {
                    // Expected to fail
                });
            }).not.toThrow();
        });
        it('should handle stale time configuration for different data types', function () {
            // Real scenario: user data vs system config have different staleness
            var userDataKey = ['user', 'profile'];
            var systemConfigKey = ['system', 'config'];
            // User data - shorter stale time
            queryClient_1.queryClient.setQueryDefaults(userDataKey, {
                staleTime: 5 * 60 * 1000, // 5 minutes
            });
            // System config - longer stale time
            queryClient_1.queryClient.setQueryDefaults(systemConfigKey, {
                staleTime: 60 * 60 * 1000, // 1 hour
            });
            // Should accept different stale time configurations
            expect(function () {
                queryClient_1.queryClient.getQueryDefaults(userDataKey);
                queryClient_1.queryClient.getQueryDefaults(systemConfigKey);
            }).not.toThrow();
        });
    });
    // ============================================================================
    // INTEGRATION TESTING
    // ============================================================================
    describe('Integration Scenarios', function () {
        it('should work with Suspense for loading states', function () { return __awaiter(void 0, void 0, void 0, function () {
            var suspenseQueryKey, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        suspenseQueryKey = ['suspense', 'data'];
                        // Prefetch data for Suspense
                        return [4 /*yield*/, queryClient_1.queryClient.prefetchQuery({
                                queryKey: suspenseQueryKey,
                                queryFn: function () {
                                    return { suspenseReady: true };
                                },
                            })];
                    case 1:
                        // Prefetch data for Suspense
                        _a.sent();
                        data = queryClient_1.queryClient.getQueryData(suspenseQueryKey);
                        expect(data.suspenseReady).toBe(true);
                        return [2 /*return*/];
                }
            });
        }); });
        it('should integrate with error boundaries', function () { return __awaiter(void 0, void 0, void 0, function () {
            var errorBoundaryKey, error_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        errorBoundaryKey = ['error', 'boundary', 'test'];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, queryClient_1.queryClient.fetchQuery({
                                queryKey: errorBoundaryKey,
                                queryFn: function () {
                                    throw new Error('Component error');
                                },
                                retry: false, // Don't retry for error boundary test
                            })];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_7 = _a.sent();
                        // Error should be catchable by Error Boundary
                        expect(error_7).toBeInstanceOf(Error);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); }, 1000); // Shorter timeout for test
        it('should support offline/online scenarios', function () {
            // Real scenario: offline-first enterprise applications
            var offlineKey = ['offline', 'data'];
            // Set data while online
            queryClient_1.queryClient.setQueryData(offlineKey, {
                cached: true,
                timestamp: Date.now(),
            });
            // Data should persist when offline
            var offlineData = queryClient_1.queryClient.getQueryData(offlineKey);
            expect(offlineData.cached).toBe(true);
        });
    });
});
describe('React Query Client Integration', function () {
    it('should be ready for enterprise React applications', function () {
        // Real scenario: production readiness check
        expect(queryClient_1.queryClient).toBeDefined();
        expect(queryClient_1.queryClient.getQueryCache()).toBeInstanceOf(react_query_1.QueryCache);
        expect(queryClient_1.queryClient.getMutationCache()).toBeInstanceOf(react_query_1.MutationCache);
        expect(typeof queryClient_1.queryClient.fetchQuery).toBe('function');
        expect(typeof queryClient_1.queryClient.prefetchQuery).toBe('function');
        expect(typeof queryClient_1.queryClient.invalidateQueries).toBe('function');
    });
    it('should handle complex enterprise data flows', function () { return __awaiter(void 0, void 0, void 0, function () {
        var dependencies, promises;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    dependencies = [
                        ['user', 'permissions'],
                        ['user', 'settings'],
                        ['app', 'config'],
                        ['feature', 'flags'],
                    ];
                    promises = dependencies.map(function (queryKey) {
                        return queryClient_1.queryClient
                            .fetchQuery({
                            queryKey: queryKey,
                            queryFn: function () { return ({
                                key: queryKey.join('-'),
                                loaded: true,
                            }); },
                        })
                            .catch(function () { return null; });
                    } // Expected network errors
                    );
                    return [4 /*yield*/, Promise.allSettled(promises)];
                case 1:
                    _a.sent();
                    // All queries should be manageable
                    dependencies.forEach(function (queryKey) {
                        var state = queryClient_1.queryClient.getQueryState(queryKey);
                        expect(state).toBeDefined();
                    });
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,