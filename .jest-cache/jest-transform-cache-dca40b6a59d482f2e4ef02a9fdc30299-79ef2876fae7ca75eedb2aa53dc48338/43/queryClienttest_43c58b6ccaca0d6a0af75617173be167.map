{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/data/react-query/queryClient.test.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/data/react-query/queryClient.test.ts"],"sourcesContent":["/**\n * React Query Client Tests\n *\n * Real-life enterprise scenarios testing with minimal mocking.\n * Tests the universal React Query configuration for any application.\n */\n\nimport { queryClient } from './queryClient';\nimport { MutationCache, QueryCache } from '@tanstack/react-query';\n\ndescribe('React Query Client', () => {\n  beforeEach(() => {\n    // Clear query cache before each test\n    queryClient.clear();\n  });\n\n  afterEach(() => {\n    // Clear any pending timers\n    jest.clearAllTimers();\n    // Clear query cache after each test\n    queryClient.clear();\n  });\n\n  // ============================================================================\n  // REAL-LIFE ENTERPRISE SCENARIOS\n  // ============================================================================\n\n  describe('Enterprise Query Management', () => {\n    it('should handle caching for user data queries', () => {\n      // Real scenario: user profile data should be cached\n      const userQueryKey = ['user', 'profile', '123'];\n      const mockUserData = {\n        id: '123',\n        name: 'John Doe',\n        email: 'john@company.com',\n        department: 'Engineering',\n      };\n\n      // Set cached data\n      queryClient.setQueryData(userQueryKey, mockUserData);\n\n      // Retrieve cached data\n      const cachedData = queryClient.getQueryData(userQueryKey);\n      expect(cachedData).toEqual(mockUserData);\n    });\n\n    it('should handle invalidation for data refresh scenarios', async () => {\n      // Real scenario: user updates profile, need to refresh all user queries\n      const userQueries = [\n        ['user', 'profile', '123'],\n        ['user', 'settings', '123'],\n        ['user', 'permissions', '123'],\n      ];\n\n      // Cache some user data\n      userQueries.forEach((queryKey) => {\n        queryClient.setQueryData(queryKey, { userId: '123', data: 'cached' });\n      });\n\n      // Invalidate all user queries\n      await queryClient.invalidateQueries({\n        queryKey: ['user'],\n      });\n\n      // All user queries should be marked as stale\n      userQueries.forEach((queryKey) => {\n        const queryState = queryClient.getQueryState(queryKey);\n        expect(queryState?.isInvalidated).toBe(true);\n      });\n    });\n\n    it('should handle prefetching for performance optimization', async () => {\n      // Real scenario: prefetch user dashboard data before navigation\n      const dashboardQueryKey = ['dashboard', 'user', '123'];\n\n      await queryClient.prefetchQuery({\n        queryKey: dashboardQueryKey,\n        queryFn: () => {\n          // Simulate API call\n          return {\n            widgets: ['analytics', 'tasks', 'notifications'],\n            lastUpdated: new Date().toISOString(),\n          };\n        },\n        staleTime: 5 * 60 * 1000, // 5 minutes\n      });\n\n      // Data should be available immediately\n      const prefetchedData = queryClient.getQueryData(dashboardQueryKey);\n      expect(prefetchedData).toBeDefined();\n    });\n\n    it('should handle query cancellation for navigation scenarios', async () => {\n      // Real scenario: user navigates away, cancel pending requests\n      const expensiveQueryKey = ['reports', 'expensive', '2024'];\n\n      const queryPromise = queryClient.fetchQuery({\n        queryKey: expensiveQueryKey,\n        queryFn: async () => {\n          // Simulate slow API call\n          await new Promise((resolve) => setTimeout(resolve, 1000));\n          return { report: 'large data set' };\n        },\n      });\n\n      // Cancel all queries (simulate navigation)\n      void queryClient.cancelQueries();\n\n      try {\n        await queryPromise;\n      } catch (error) {\n        // Should handle cancellation gracefully\n        expect(error).toBeDefined();\n      }\n    });\n  });\n\n  // ============================================================================\n  // CACHE MANAGEMENT - REAL ENTERPRISE SCENARIOS\n  // ============================================================================\n\n  describe('Cache Management', () => {\n    it('should respect cache size limits for memory management', () => {\n      // Real scenario: enterprise apps run for hours, need memory limits\n      const cache = queryClient.getQueryCache();\n      expect(cache).toBeInstanceOf(QueryCache);\n\n      // Cache should have reasonable limits\n      const cacheConfig = (cache as any).config;\n      expect(cacheConfig).toBeDefined();\n    });\n\n    it('should handle garbage collection for old queries', () => {\n      // Real scenario: unused data should be cleaned up\n      const tempQueryKey = ['temp', 'data', Date.now()];\n\n      queryClient.setQueryData(tempQueryKey, { temporary: true });\n\n      // Force garbage collection\n      queryClient.clear();\n\n      // Temporary data should be removed\n      const clearedData = queryClient.getQueryData(tempQueryKey);\n      expect(clearedData).toBeUndefined();\n    });\n\n    it('should persist important queries across sessions', () => {\n      // Real scenario: user preferences should survive page refresh\n      const preferencesKey = ['user', 'preferences', '123'];\n      const preferences = {\n        theme: 'dark',\n        language: 'en',\n        notifications: true,\n      };\n\n      queryClient.setQueryData(preferencesKey, preferences);\n\n      // Important data should be marked for persistence\n      const queryState = queryClient.getQueryState(preferencesKey);\n      expect(queryState?.data).toEqual(preferences);\n    });\n\n    it('should handle concurrent queries efficiently', async () => {\n      // Real scenario: multiple components requesting same data simultaneously\n      const sharedDataKey = ['shared', 'config'];\n\n      const promises = Array.from({ length: 5 }, (_, index) =>\n        queryClient.fetchQuery({\n          queryKey: [...sharedDataKey, index],\n          queryFn: async () => {\n            // Simulate API call\n            await new Promise((resolve) => setTimeout(resolve, 10));\n            return { configId: index, loaded: true };\n          },\n        })\n      );\n\n      const results = await Promise.all(promises);\n      expect(results).toHaveLength(5);\n      results.forEach((result, index) => {\n        expect(result.configId).toBe(index);\n      });\n    });\n  });\n\n  // ============================================================================\n  // ERROR HANDLING - REAL ENTERPRISE SCENARIOS\n  // ============================================================================\n\n  describe('Error Handling', () => {\n    it('should handle network errors gracefully', async () => {\n      // Real scenario: API server is down\n      const errorQueryKey = ['network', 'error', 'test'];\n\n      try {\n        await queryClient.fetchQuery({\n          queryKey: errorQueryKey,\n          queryFn: () => {\n            throw new Error('Network error: Connection failed');\n          },\n          retry: 1, // Minimal retries for testing\n        });\n      } catch (error) {\n        expect(error).toBeInstanceOf(Error);\n        expect((error as Error).message).toContain('Network error');\n      }\n\n      // Error should be stored in query state\n      const queryState = queryClient.getQueryState(errorQueryKey);\n      expect(queryState?.error).toBeDefined();\n    });\n\n    it('should handle authentication errors with proper cleanup', async () => {\n      // Real scenario: auth token expires during API call\n      const authQueryKey = ['auth', 'protected', 'data'];\n\n      try {\n        await queryClient.fetchQuery({\n          queryKey: authQueryKey,\n          queryFn: () => {\n            const authError = new Error('Authentication failed');\n            (authError as any).status = 401;\n            throw authError;\n          },\n          retry: false,\n        });\n      } catch (error) {\n        expect(error).toBeDefined();\n        expect((error as any).status).toBe(401);\n      }\n    });\n\n    it('should handle timeout scenarios', async () => {\n      // Real scenario: slow API responses\n      const timeoutQueryKey = ['timeout', 'test'];\n\n      try {\n        await queryClient.fetchQuery({\n          queryKey: timeoutQueryKey,\n          queryFn: () => {\n            // Simulate timeout - immediate rejection for testing\n            throw new Error('Request timeout');\n          },\n          retry: false, // Don't retry for timeout test\n        });\n      } catch (error) {\n        expect((error as Error).message).toContain('timeout');\n      }\n    }, 1000); // Shorter timeout for test\n\n    it('should handle validation errors from API', async () => {\n      // Real scenario: form submission with validation errors\n      const validationQueryKey = ['validation', 'error'];\n\n      try {\n        await queryClient.fetchQuery({\n          queryKey: validationQueryKey,\n          queryFn: () => {\n            const validationError = new Error('Validation failed');\n            (validationError as any).status = 400;\n            (validationError as any).validationErrors = {\n              email: 'Invalid email format',\n              password: 'Password too weak',\n            };\n            throw validationError;\n          },\n        });\n      } catch (error) {\n        expect((error as any).validationErrors).toBeDefined();\n        expect((error as any).validationErrors.email).toBe('Invalid email format');\n      }\n    });\n  });\n\n  // ============================================================================\n  // MUTATION HANDLING - REAL ENTERPRISE SCENARIOS\n  // ============================================================================\n\n  describe('Mutation Management', () => {\n    it('should handle user profile updates with optimistic updates', () => {\n      // Real scenario: update user profile with immediate UI feedback\n      const userProfileKey = ['user', 'profile', '123'];\n      const originalProfile = {\n        id: '123',\n        name: 'John Doe',\n        email: 'john@company.com',\n      };\n\n      // Set initial data\n      queryClient.setQueryData(userProfileKey, originalProfile);\n\n      // Perform optimistic update\n      const updatedProfile = { ...originalProfile, name: 'John Updated' };\n      queryClient.setQueryData(userProfileKey, updatedProfile);\n\n      // Verify optimistic update\n      const optimisticData = queryClient.getQueryData(userProfileKey);\n      expect((optimisticData as any).name).toBe('John Updated');\n    });\n\n    it('should handle bulk operations efficiently', async () => {\n      // Real scenario: bulk user management operations\n      const bulkQueryKey = ['users', 'bulk', 'update'];\n\n      try {\n        await queryClient.fetchQuery({\n          queryKey: bulkQueryKey,\n          queryFn: () => {\n            // Simulate bulk operation\n            const userIds = ['1', '2', '3', '4', '5'];\n            return {\n              updated: userIds.length,\n              userIds,\n              timestamp: new Date().toISOString(),\n            };\n          },\n        });\n\n        // Should handle bulk data efficiently\n        const bulkResult = queryClient.getQueryData(bulkQueryKey);\n        expect((bulkResult as any).updated).toBe(5);\n      } catch (error) {\n        // Should handle bulk operation errors\n        expect(error).toBeDefined();\n      }\n    });\n\n    it('should handle mutation rollback on failure', () => {\n      // Real scenario: optimistic update fails, need to rollback\n      const rollbackKey = ['rollback', 'test'];\n      const originalData = { value: 'original' };\n      const optimisticData = { value: 'optimistic' };\n\n      // Set original data\n      queryClient.setQueryData(rollbackKey, originalData);\n\n      // Apply optimistic update\n      queryClient.setQueryData(rollbackKey, optimisticData);\n      expect(queryClient.getQueryData(rollbackKey)).toEqual(optimisticData);\n\n      // Simulate failure and rollback\n      queryClient.setQueryData(rollbackKey, originalData);\n      expect(queryClient.getQueryData(rollbackKey)).toEqual(originalData);\n    });\n  });\n\n  // ============================================================================\n  // CONFIGURATION - REAL ENTERPRISE SCENARIOS\n  // ============================================================================\n\n  describe('Configuration', () => {\n    it('should have enterprise-appropriate default settings', () => {\n      // Real scenario: defaults should work for enterprise applications\n      const defaultOptions = queryClient.getDefaultOptions();\n\n      expect(defaultOptions).toBeDefined();\n      expect(defaultOptions.queries).toBeDefined();\n      expect(defaultOptions.mutations).toBeDefined();\n    });\n\n    it('should support custom retry logic for enterprise networks', () => {\n      // Real scenario: enterprise networks may have different retry needs\n      const retryQueryKey = ['retry', 'test'];\n\n      expect(() => {\n        queryClient\n          .fetchQuery({\n            queryKey: retryQueryKey,\n            queryFn: () => {\n              throw new Error('Temporary network issue');\n            },\n            retry: (failureCount, error) => {\n              // Custom retry logic for enterprise scenarios\n              return failureCount < 3 && (error as any).status !== 401;\n            },\n          })\n          .catch(() => {\n            // Expected to fail\n          });\n      }).not.toThrow();\n    });\n\n    it('should handle stale time configuration for different data types', () => {\n      // Real scenario: user data vs system config have different staleness\n      const userDataKey = ['user', 'profile'];\n      const systemConfigKey = ['system', 'config'];\n\n      // User data - shorter stale time\n      queryClient.setQueryDefaults(userDataKey, {\n        staleTime: 5 * 60 * 1000, // 5 minutes\n      });\n\n      // System config - longer stale time\n      queryClient.setQueryDefaults(systemConfigKey, {\n        staleTime: 60 * 60 * 1000, // 1 hour\n      });\n\n      // Should accept different stale time configurations\n      expect(() => {\n        queryClient.getQueryDefaults(userDataKey);\n        queryClient.getQueryDefaults(systemConfigKey);\n      }).not.toThrow();\n    });\n  });\n\n  // ============================================================================\n  // INTEGRATION TESTING\n  // ============================================================================\n\n  describe('Integration Scenarios', () => {\n    it('should work with Suspense for loading states', async () => {\n      // Real scenario: React Suspense integration\n      const suspenseQueryKey = ['suspense', 'data'];\n\n      // Prefetch data for Suspense\n      await queryClient.prefetchQuery({\n        queryKey: suspenseQueryKey,\n        queryFn: () => {\n          return { suspenseReady: true };\n        },\n      });\n\n      const data = queryClient.getQueryData(suspenseQueryKey);\n      expect((data as any).suspenseReady).toBe(true);\n    });\n\n    it('should integrate with error boundaries', async () => {\n      // Real scenario: React Error Boundary integration\n      const errorBoundaryKey = ['error', 'boundary', 'test'];\n\n      try {\n        await queryClient.fetchQuery({\n          queryKey: errorBoundaryKey,\n          queryFn: () => {\n            throw new Error('Component error');\n          },\n          retry: false, // Don't retry for error boundary test\n        });\n      } catch (error) {\n        // Error should be catchable by Error Boundary\n        expect(error).toBeInstanceOf(Error);\n      }\n    }, 1000); // Shorter timeout for test\n\n    it('should support offline/online scenarios', () => {\n      // Real scenario: offline-first enterprise applications\n      const offlineKey = ['offline', 'data'];\n\n      // Set data while online\n      queryClient.setQueryData(offlineKey, {\n        cached: true,\n        timestamp: Date.now(),\n      });\n\n      // Data should persist when offline\n      const offlineData = queryClient.getQueryData(offlineKey);\n      expect((offlineData as any).cached).toBe(true);\n    });\n  });\n});\n\ndescribe('React Query Client Integration', () => {\n  it('should be ready for enterprise React applications', () => {\n    // Real scenario: production readiness check\n    expect(queryClient).toBeDefined();\n    expect(queryClient.getQueryCache()).toBeInstanceOf(QueryCache);\n    expect(queryClient.getMutationCache()).toBeInstanceOf(MutationCache);\n    expect(typeof queryClient.fetchQuery).toBe('function');\n    expect(typeof queryClient.prefetchQuery).toBe('function');\n    expect(typeof queryClient.invalidateQueries).toBe('function');\n  });\n\n  it('should handle complex enterprise data flows', async () => {\n    // Real scenario: complex data dependencies\n    const dependencies = [\n      ['user', 'permissions'],\n      ['user', 'settings'],\n      ['app', 'config'],\n      ['feature', 'flags'],\n    ];\n\n    // Should handle multiple related queries\n    const promises = dependencies.map(\n      (queryKey) =>\n        queryClient\n          .fetchQuery({\n            queryKey,\n            queryFn: () => ({\n              key: queryKey.join('-'),\n              loaded: true,\n            }),\n          })\n          .catch(() => null) // Expected network errors\n    );\n\n    await Promise.allSettled(promises);\n\n    // All queries should be manageable\n    dependencies.forEach((queryKey) => {\n      const state = queryClient.getQueryState(queryKey);\n      expect(state).toBeDefined();\n    });\n  });\n});\n"],"version":3}