{"file":"/Users/gamzaramazanov/Desktop/fumo/src/widgets/InitialLoader/ui/InitialLoader.tsx","mappings":";AAAA;;;;;GAKG;AAEH,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEb,6CAAyD;AACzD,sEAA8E;AAC9E,kCAA+D;AAC/D,0FAAiD;AACjD,qDAAoD;AASvC,QAAA,aAAa,GAAG,IAAA,YAAI,EAC/B,UAAC,EAKA;QAJC,SAAS,eAAA,EACT,uBAAuB,EAAvB,eAAe,mBAAG,KAAK,KAAA,EACvB,cAAc,oBAAA,EACd,oBAAmB,EAAnB,YAAY,mBAAG,IAAI,KAAA;IAEnB,wCAAwC;IAClC,IAAA,KACJ,IAAA,kCAAoB,GAAE,EADhB,gBAAgB,sBAAA,EAAE,QAAQ,cAAA,EAAE,WAAW,iBAAA,EAAE,KAAK,WAC9B,CAAC;IAEzB,6BAA6B;IACvB,IAAA,KAA4B,IAAA,gBAAQ,EAAC,IAAI,CAAC,EAAzC,SAAS,QAAA,EAAE,YAAY,QAAkB,CAAC;IAC3C,IAAA,KAAgC,IAAA,gBAAQ,EAAC,KAAK,CAAC,EAA9C,WAAW,QAAA,EAAE,cAAc,QAAmB,CAAC;IAEtD,mCAAmC;IACnC,IAAA,iBAAS,EAAC;QACR,IAAI,gBAAgB,EAAE,CAAC;YACrB,YAAY,CAAC,IAAI,CAAC,CAAC;YACnB,cAAc,CAAC,KAAK,CAAC,CAAC;YACtB,OAAO;QACT,CAAC;QACD,2BAA2B;QAC3B,cAAc,CAAC,IAAI,CAAC,CAAC;QAErB,iCAAiC;QACjC,IAAM,KAAK,GAAG,UAAU,CAAC;YACvB,YAAY,CAAC,KAAK,CAAC,CAAC;QACtB,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,sCAAsC;QAE/C,OAAO,cAAM,OAAA,YAAY,CAAC,KAAK,CAAC,EAAnB,CAAmB,CAAC;IACnC,CAAC,EAAE,CAAC,gBAAgB,CAAC,CAAC,CAAC;IAEvB,8BAA8B;IAC9B,IAAI,CAAC,SAAS,EAAE,CAAC;QACf,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAM,cAAc,GAAG,cAAc,IAAI,IAAA,oBAAc,EAAC,WAAW,CAAC,CAAC;IAErE,OAAO,CACL,iCACE,SAAS,EAAE,UAAG,mCAAM,CAAC,aAAa,cAAI,WAAW,CAAC,CAAC,CAAC,mCAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,cAAI,SAAS,IAAI,EAAE,CAAE,EAC5F,IAAI,EAAC,aAAa,mBACH,QAAQ,mBACR,CAAC,mBACD,GAAG,gBACP,qBAAqB,aAGhC,gCAAK,SAAS,EAAE,mCAAM,CAAC,OAAO,GAAI,EAGlC,gCAAK,SAAS,EAAE,mCAAM,CAAC,OAAO,YAE5B,gCAAK,SAAS,EAAE,mCAAM,CAAC,eAAe,YACpC,uBAAC,yBAAW,IACV,QAAQ,EAAE,QAAQ,EAClB,OAAO,EAAE,cAAc,EACvB,cAAc,EAAE,YAAY,GAC5B,GACE,GACF,IACF,CACP,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,qBAAa,CAAC,WAAW,GAAG,eAAe,CAAC","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/widgets/InitialLoader/ui/InitialLoader.tsx"],"sourcesContent":["/**\n * InitialLoader Widget Component\n *\n * Main UI component for the initial app loading screen.\n * Displays progress bar, loading status, and handles animations.\n */\n\n\"use client\";\n\nimport React, { memo, useEffect, useState } from \"react\";\nimport { useAppLoadingContext } from \"@/infrastructure/providers/app-loading\";\nimport { getLoadingMessage, formatStepName } from \"../lib/lib\";\nimport styles from \"./InitialLoader.module.scss\";\nimport { ProgressBar } from \"@/widgets/ProgressBar\";\n\nexport interface InitialLoaderProps {\n  className?: string;\n  showStepDetails?: boolean;\n  loadingMessage?: string;\n  showProgress?: boolean;\n}\n\nexport const InitialLoader = memo<InitialLoaderProps>(\n  ({\n    className,\n    showStepDetails = false,\n    loadingMessage,\n    showProgress = true,\n  }) => {\n    // Get loading state from infrastructure\n    const { isInitialLoading, progress, currentStep, steps } =\n      useAppLoadingContext();\n\n    // Local state for animations\n    const [isVisible, setIsVisible] = useState(true);\n    const [isFadingOut, setIsFadingOut] = useState(false);\n\n    // Handle visibility and animations\n    useEffect(() => {\n      if (isInitialLoading) {\n        setIsVisible(true);\n        setIsFadingOut(false);\n        return;\n      }\n      // Start fade out animation\n      setIsFadingOut(true);\n\n      // Hide after animation completes\n      const timer = setTimeout(() => {\n        setIsVisible(false);\n      }, 400); // Match FADE_OUT_DELAY from constants\n\n      return () => clearTimeout(timer);\n    }, [isInitialLoading]);\n\n    // Don't render if not visible\n    if (!isVisible) {\n      return null;\n    }\n\n    const displayMessage = loadingMessage || formatStepName(currentStep);\n\n    return (\n      <div\n        className={`${styles.initialLoader} ${isFadingOut ? styles.fadeOut : \"\"} ${className || \"\"}`}\n        role=\"progressbar\"\n        aria-valuenow={progress}\n        aria-valuemin={0}\n        aria-valuemax={100}\n        aria-label=\"Loading application\"\n      >\n        {/* Background Overlay */}\n        <div className={styles.overlay} />\n\n        {/* Loading Content */}\n        <div className={styles.content}>\n          {/* Progress Section */}\n          <div className={styles.progressSection}>\n            <ProgressBar\n              progress={progress}\n              message={displayMessage}\n              showPercentage={showProgress}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n\nInitialLoader.displayName = \"InitialLoader\";\n"],"version":3}