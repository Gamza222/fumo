{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/data/apollo/apolloClient.test.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/data/apollo/apolloClient.test.ts"],"sourcesContent":["/**\n * Apollo GraphQL Client Tests\n *\n * Real-life enterprise scenarios testing with minimal mocking.\n * Uses existing mock factory patterns where needed.\n */\n\nimport {\n  apolloClient,\n  clearApolloCache,\n  refetchActiveQueries,\n  resetApolloStore,\n} from './apolloClient';\nimport { gql } from '@apollo/client';\nimport { act } from '@testing-library/react';\n\n// Use existing mock factory patterns\nimport { mockStorage } from '@/shared/testing/mocks/browser';\n\ndescribe('Apollo GraphQL Client', () => {\n  let mockLocalStorage: ReturnType<typeof mockStorage>;\n\n  beforeEach(() => {\n    // Reset Apollo cache before each test\n    void clearApolloCache();\n\n    // Create fresh localStorage mock for each test\n    mockLocalStorage = mockStorage();\n    Object.defineProperty(window, 'localStorage', {\n      value: mockLocalStorage,\n      writable: true,\n    });\n  });\n\n  afterEach(() => {\n    // Clean up Apollo cache\n    void clearApolloCache();\n    void resetApolloStore();\n    // Clear any pending timers\n    jest.clearAllTimers();\n    // Clear mock storage\n    mockLocalStorage.clear();\n  });\n\n  // ============================================================================\n  // REAL-LIFE ENTERPRISE SCENARIOS\n  // ============================================================================\n\n  describe('Enterprise GraphQL Operations', () => {\n    const SAMPLE_QUERY = gql`\n      query GetUser($id: ID!) {\n        user(id: $id) {\n          id\n          name\n          email\n          roles\n        }\n      }\n    `;\n\n    const SAMPLE_MUTATION = gql`\n      mutation UpdateUser($id: ID!, $input: UserInput!) {\n        updateUser(id: $id, input: $input) {\n          id\n          name\n          email\n          updatedAt\n        }\n      }\n    `;\n\n    it('should handle real GraphQL query execution', async () => {\n      // Real scenario: executing a user query\n      const variables = { id: 'user_123' };\n\n      await act(async () => {\n        try {\n          const result = await apolloClient.query({\n            query: SAMPLE_QUERY,\n            variables,\n            fetchPolicy: 'network-only', // Bypass cache for testing\n          });\n\n          // In real scenarios, this would return actual data or network error\n          expect(result).toBeDefined();\n          expect(result.data).toBeDefined();\n        } catch (error) {\n          // Expected in test environment without real GraphQL server\n          expect(error).toBeDefined();\n        }\n      });\n    });\n\n    it('should handle real GraphQL mutation execution', async () => {\n      // Real scenario: updating user data\n      const variables = {\n        id: 'user_123',\n        input: {\n          name: 'John Updated',\n          email: 'john.updated@company.com',\n        },\n      };\n\n      await act(async () => {\n        try {\n          const result = await apolloClient.mutate({\n            mutation: SAMPLE_MUTATION,\n            variables,\n          });\n\n          expect(result).toBeDefined();\n        } catch (error) {\n          // Expected in test environment without real GraphQL server\n          expect(error).toBeDefined();\n        }\n      });\n    });\n\n    it('should use cache-first policy by default', () => {\n      // Real scenario: Apollo should prefer cached data\n      const options = apolloClient.defaultOptions;\n\n      expect(options.query?.fetchPolicy).toBe('cache-first');\n      expect(options.watchQuery?.fetchPolicy).toBe('cache-first');\n    });\n  });\n\n  // ============================================================================\n  // CACHE MANAGEMENT - REAL ENTERPRISE SCENARIOS\n  // ============================================================================\n\n  describe('Cache Management', () => {\n    it('should clear cache for user logout scenario', async () => {\n      // Real scenario: user logs out, need to clear sensitive data\n      await act(async () => {\n        await expect(clearApolloCache()).resolves.not.toThrow();\n      });\n    });\n\n    it('should refetch active queries for data refresh scenario', async () => {\n      // Real scenario: user clicks refresh, need to update all visible data\n      await act(async () => {\n        await expect(refetchActiveQueries()).resolves.not.toThrow();\n      });\n    });\n\n    it('should reset store for user switching scenario', async () => {\n      // Real scenario: different user logs in, need complete reset\n      await act(async () => {\n        await expect(resetApolloStore()).resolves.not.toThrow();\n      });\n    });\n\n    it('should handle cache normalization correctly', () => {\n      // Real scenario: Apollo should normalize data by __typename\n      const cache = apolloClient.cache;\n\n      expect(cache).toBeDefined();\n      expect(cache.extract()).toBeDefined();\n    });\n  });\n\n  // ============================================================================\n  // ERROR HANDLING - REAL ENTERPRISE SCENARIOS\n  // ============================================================================\n\n  describe('Error Handling', () => {\n    it('should use \"all\" error policy for comprehensive error info', () => {\n      // Real scenario: enterprise apps need both data and errors\n      const options = apolloClient.defaultOptions;\n\n      expect(options.query?.errorPolicy).toBe('all');\n      expect(options.mutate?.errorPolicy).toBe('all');\n      expect(options.watchQuery?.errorPolicy).toBe('all');\n    });\n\n    it('should handle network errors gracefully', async () => {\n      // Real scenario: network is down, should get meaningful error\n      const INVALID_QUERY = gql`\n        query InvalidEndpoint {\n          nonExistentField\n        }\n      `;\n\n      await act(async () => {\n        try {\n          await apolloClient.query({\n            query: INVALID_QUERY,\n            fetchPolicy: 'network-only',\n          });\n        } catch (error) {\n          // Should receive Apollo error with network info\n          expect(error).toBeDefined();\n        }\n      });\n    });\n  });\n\n  // ============================================================================\n  // AUTHENTICATION INTEGRATION\n  // ============================================================================\n\n  describe('Authentication Integration', () => {\n    it('should work without authentication tokens', () => {\n      // Real scenario: public queries before user login\n      expect(mockLocalStorage.getItem('auth_token')).toBeNull();\n\n      expect(() => apolloClient.link).not.toThrow();\n    });\n\n    it('should work with authentication tokens when available', () => {\n      // Real scenario: authenticated user making requests\n      mockLocalStorage.setItem('auth_token', 'mock_auth_token');\n\n      expect(mockLocalStorage.getItem('auth_token')).toBe('mock_auth_token');\n      expect(() => apolloClient.link).not.toThrow();\n    });\n\n    it('should handle multiple token storage strategies', () => {\n      // Real scenario: different apps store tokens differently\n      const tokenChecks = ['auth_token', 'access_token', 'bearer_token'];\n\n      tokenChecks.forEach((tokenKey) => {\n        mockLocalStorage.clear();\n        mockLocalStorage.setItem(tokenKey, 'mock_token');\n\n        // Should not throw regardless of token storage strategy\n        expect(mockLocalStorage.getItem(tokenKey)).toBe('mock_token');\n        expect(() => apolloClient.link).not.toThrow();\n      });\n    });\n  });\n\n  // ============================================================================\n  // DEVELOPMENT EXPERIENCE\n  // ============================================================================\n\n  describe('Development Experience', () => {\n    it('should have proper client identification', () => {\n      // Real scenario: debugging in network tab shows client info\n      expect(apolloClient.link).toBeDefined();\n    });\n\n    it('should provide type-safe interfaces', () => {\n      // Real scenario: TypeScript autocomplete works\n      expect(typeof apolloClient.query).toBe('function');\n      expect(typeof apolloClient.mutate).toBe('function');\n      expect(typeof apolloClient.cache).toBe('object');\n    });\n\n    it('should export utility functions for common scenarios', () => {\n      // Real scenario: developers need common cache operations\n      expect(typeof clearApolloCache).toBe('function');\n      expect(typeof refetchActiveQueries).toBe('function');\n      expect(typeof resetApolloStore).toBe('function');\n    });\n  });\n\n  // ============================================================================\n  // PERFORMANCE CONSIDERATIONS\n  // ============================================================================\n\n  describe('Performance', () => {\n    it('should use efficient cache configuration', () => {\n      // Real scenario: memory usage should be reasonable\n      const cache = apolloClient.cache;\n\n      expect(cache).toBeDefined();\n      expect(cache.extract()).toBeDefined();\n    });\n\n    it('should handle concurrent requests properly', async () => {\n      // Real scenario: multiple components making requests simultaneously\n      const CONCURRENT_QUERY = gql`\n        query ConcurrentTest {\n          test\n        }\n      `;\n\n      await act(async () => {\n        const promises = Array.from(\n          { length: 3 },\n          () =>\n            apolloClient\n              .query({\n                query: CONCURRENT_QUERY,\n                fetchPolicy: 'cache-first',\n              })\n              .catch(() => null) // Catch expected network errors\n        );\n\n        // Should not throw on concurrent requests\n        await expect(Promise.all(promises)).resolves.toBeDefined();\n      });\n    });\n  });\n});\n\ndescribe('Apollo Client Integration', () => {\n  it('should be ready for real enterprise GraphQL endpoints', () => {\n    // Real scenario: production readiness check\n    expect(apolloClient.link).toBeDefined();\n    expect(apolloClient.cache).toBeDefined();\n    expect(apolloClient.defaultOptions).toBeDefined();\n  });\n\n  it('should work with standard GraphQL conventions', () => {\n    // Real scenario: follows GraphQL best practices\n    const standardQuery = gql`\n      query StandardFormat($input: String!) {\n        standardField(input: $input) {\n          id\n          __typename\n        }\n      }\n    `;\n\n    act(() => {\n      expect(() => {\n        apolloClient\n          .query({\n            query: standardQuery,\n            variables: { input: 'test' },\n          })\n          .catch(() => {\n            // Expected network error in test environment\n          });\n      }).not.toThrow();\n    });\n  });\n});\n"],"version":3}