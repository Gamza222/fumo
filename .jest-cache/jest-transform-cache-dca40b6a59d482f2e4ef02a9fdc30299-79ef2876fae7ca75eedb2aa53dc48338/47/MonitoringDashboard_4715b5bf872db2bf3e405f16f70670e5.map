{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/monitoring/ui/MonitoringDashboard.tsx","mappings":";AAAA,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEb,6CAAgE;AAChE,gEAA8D;AAC9D,8DAMmC;AACnC,sGAAuD;AAOvD,IAAM,qBAAqB,GAAuC,UAAC,EAAU;QAAR,MAAM,YAAA;IACzE,IAAM,cAAc,GAAG,UAAC,YAA0B;QAChD,QAAQ,YAAY,EAAE,CAAC;YACrB,KAAK,+BAAY,CAAC,OAAO;gBACvB,OAAO,yCAAM,CAAC,cAAc,IAAI,EAAE,CAAC;YACrC,KAAK,+BAAY,CAAC,QAAQ;gBACxB,OAAO,yCAAM,CAAC,eAAe,IAAI,EAAE,CAAC;YACtC,KAAK,+BAAY,CAAC,SAAS;gBACzB,OAAO,yCAAM,CAAC,YAAY,IAAI,EAAE,CAAC;YACnC,KAAK,+BAAY,CAAC,OAAO;gBACvB,OAAO,yCAAM,CAAC,aAAa,IAAI,EAAE,CAAC;YACpC;gBACE,OAAO,yCAAM,CAAC,aAAa,IAAI,EAAE,CAAC;QACtC,CAAC;IACH,CAAC,CAAC;IAEF,OAAO,CACL,iCAAK,SAAS,EAAE,yCAAM,CAAC,eAAe,aACpC,gCAAK,SAAS,EAAE,UAAG,yCAAM,CAAC,SAAS,cAAI,cAAc,CAAC,MAAM,CAAC,CAAE,GAAI,EACnE,iCAAM,SAAS,EAAE,yCAAM,CAAC,UAAU,YAAG,MAAM,GAAQ,IAC/C,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,IAAM,iBAAiB,GAOlB,UAAC,EAAW;QAAT,OAAO,aAAA;IAAO,OAAA,CACpB,iCAAK,SAAS,EAAE,yCAAM,CAAC,WAAW,aAChC,iCAAK,SAAS,EAAE,yCAAM,CAAC,aAAa,aAClC,+BAAI,SAAS,EAAE,yCAAM,CAAC,WAAW,YAAG,OAAO,CAAC,IAAI,GAAM,EACtD,uBAAC,qBAAqB,IAAC,MAAM,EAAE,OAAO,CAAC,MAAM,GAAI,IAC7C,EACL,OAAO,CAAC,YAAY,IAAI,CACvB,+BAAG,SAAS,EAAE,yCAAM,CAAC,eAAe,2BAAa,OAAO,CAAC,YAAY,UAAO,CAC7E,EACA,OAAO,CAAC,KAAK,IAAI,8BAAG,SAAS,EAAE,yCAAM,CAAC,YAAY,YAAG,OAAO,CAAC,KAAK,GAAK,IACpE,CACP;AAXqB,CAWrB,CAAC;AAEF,IAAM,mBAAmB,GAAoC,UAAC,EAAS;QAAP,KAAK,WAAA;IACnE,IAAM,aAAa,GAAG,UAAC,UAAsB;QAC3C,QAAQ,UAAU,EAAE,CAAC;YACnB,KAAK,6BAAU,CAAC,IAAI;gBAClB,OAAO,yCAAM,CAAC,cAAc,IAAI,EAAE,CAAC;YACrC,KAAK,6BAAU,CAAC,OAAO;gBACrB,OAAO,yCAAM,CAAC,iBAAiB,IAAI,EAAE,CAAC;YACxC,KAAK,6BAAU,CAAC,KAAK;gBACnB,OAAO,yCAAM,CAAC,eAAe,IAAI,EAAE,CAAC;YACtC,KAAK,6BAAU,CAAC,QAAQ;gBACtB,OAAO,yCAAM,CAAC,kBAAkB,IAAI,EAAE,CAAC;YACzC;gBACE,OAAO,yCAAM,CAAC,cAAc,IAAI,EAAE,CAAC;QACvC,CAAC;IACH,CAAC,CAAC;IAEF,OAAO,iCAAM,SAAS,EAAE,UAAG,yCAAM,CAAC,UAAU,cAAI,aAAa,CAAC,KAAK,CAAC,CAAE,YAAG,KAAK,GAAQ,CAAC;AACzF,CAAC,CAAC;AAEK,IAAM,mBAAmB,GAAuC,UAAC,EAGvE;;QAFC,SAAS,eAAA,EACT,uBAAuB,EAAvB,eAAe,mBAAG,KAAK,KAAA;IAEjB,IAAA,KAAkC,IAAA,gBAAQ,EAAsB,IAAI,CAAC,EAApE,YAAY,QAAA,EAAE,eAAe,QAAuC,CAAC;IACtE,IAAA,KAAkC,IAAA,gBAAQ,EAAoB,EAAE,CAAC,EAAhE,YAAY,QAAA,EAAE,eAAe,QAAmC,CAAC;IAClE,IAAA,KAAyB,IAAA,gBAAQ,EAAqB,EAAE,CAAC,EAAxD,QAAQ,QAAA,EAAE,UAAU,QAAoC,CAAC;IAC1D,IAAA,KAA4B,IAAA,gBAAQ,EAIhC,IAAI,CAAC,EAJR,SAAS,QAAA,EAAE,YAAY,QAIf,CAAC;IACV,IAAA,KAAwB,IAAA,gBAAQ,EAAC,IAAI,CAAC,EAArC,OAAO,QAAA,EAAE,UAAU,QAAkB,CAAC;IACvC,IAAA,KAAoB,IAAA,gBAAQ,EAAgB,IAAI,CAAC,EAAhD,KAAK,QAAA,EAAE,QAAQ,QAAiC,CAAC;IAExD,+EAA+E;IAC/E,IAAM,iBAAiB,GAAG,eAAK,CAAC,OAAO,CAAC;QACtC,IAAI,CAAC;YACH,OAAO,sCAAiB,CAAC,WAAW,EAAE,CAAC;QACzC,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,4DAA4D;YAC5D,IAAM,aAAa,GAAG;gBACpB,WAAW,EAAE;oBACX,OAAO,EAAE,IAAI;oBACb,QAAQ,EAAE,KAAK;oBACf,OAAO,EAAE,IAAI;oBACb,QAAQ,EAAE,CAAC,UAAU,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,CAAC;iBAClD;gBACD,SAAS,EAAE;oBACT,OAAO,EAAE,IAAI;oBACb,KAAK,EAAE,KAAK;oBACZ,iBAAiB,EAAE,IAAI;oBACvB,WAAW,EAAE,IAAI;oBACjB,UAAU,EAAE,GAAG;iBAChB;gBACD,MAAM,EAAE;oBACN,OAAO,EAAE,IAAI;iBACd;gBACD,SAAS,EAAE;oBACT,eAAe,EAAE,KAAK;oBACtB,SAAS,EAAE,EAAE;oBACb,UAAU,EAAE,GAAG;iBAChB;aACF,CAAC;YACF,OAAO,sCAAiB,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;QACtD,CAAC;IACH,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,IAAM,kBAAkB,GAAG,IAAA,mBAAW,EAAC;;;;;;oBAEnC,UAAU,CAAC,IAAI,CAAC,CAAC;oBACjB,QAAQ,CAAC,IAAI,CAAC,CAAC;oBAEO,qBAAM,iBAAiB,CAAC,gBAAgB,EAAE,EAAA;;oBAA1D,aAAa,GAAG,SAA0C;oBAEhE,eAAe,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;oBAC5C,eAAe,CAAC,aAAa,CAAC,YAAY,IAAI,EAAE,CAAC,CAAC;oBAClD,UAAU,CAAC,aAAa,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;oBACxC,YAAY,CAAC,aAAa,CAAC,SAAS,IAAI,EAAE,CAAC,CAAC;;;;oBAE5C,QAAQ,CAAC,KAAG,YAAY,KAAK,CAAC,CAAC,CAAC,KAAG,CAAC,OAAO,CAAC,CAAC,CAAC,gCAAgC,CAAC,CAAC;;;oBAEhF,UAAU,CAAC,KAAK,CAAC,CAAC;;;;;SAErB,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC;IAExB,IAAA,iBAAS,EAAC;QACR,KAAK,kBAAkB,EAAE,CAAC;QAE1B,IAAM,QAAQ,GAAG,WAAW,CAAC,cAAM,OAAA,KAAK,kBAAkB,EAAE,EAAzB,CAAyB,EAAE,eAAe,CAAC,CAAC;QAC/E,OAAO,cAAM,OAAA,aAAa,CAAC,QAAQ,CAAC,EAAvB,CAAuB,CAAC;IACvC,CAAC,EAAE,CAAC,eAAe,EAAE,kBAAkB,CAAC,CAAC,CAAC;IAE1C,IAAI,OAAO,IAAI,CAAC,YAAY,EAAE,CAAC;QAC7B,OAAO,CACL,gCAAK,SAAS,EAAE,UAAG,yCAAM,CAAC,SAAS,cAAI,SAAS,IAAI,EAAE,CAAE,YACtD,iCAAK,SAAS,EAAE,yCAAM,CAAC,OAAO,aAC5B,gCAAK,SAAS,EAAE,yCAAM,CAAC,YAAY,GAAQ,EAC3C,gCAAK,SAAS,EAAE,yCAAM,CAAC,WAAW,YAC/B,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CACvC,gCAAa,SAAS,EAAE,yCAAM,CAAC,WAAW,IAAhC,CAAC,CAAuC,CACnD,EAFwC,CAExC,CAAC,GACE,IACF,GACF,CACP,CAAC;IACJ,CAAC;IAED,IAAI,KAAK,EAAE,CAAC;QACV,OAAO,CACL,gCAAK,SAAS,EAAE,UAAG,yCAAM,CAAC,SAAS,cAAI,SAAS,IAAI,EAAE,CAAE,YACtD,gCAAK,SAAS,EAAE,yCAAM,CAAC,KAAK,YAC1B,iCAAK,SAAS,EAAE,yCAAM,CAAC,SAAS,aAC9B,+BAAI,SAAS,EAAE,yCAAM,CAAC,UAAU,gCAAsB,EACtD,8BAAG,SAAS,EAAE,yCAAM,CAAC,YAAY,YAAG,KAAK,GAAK,EAC9C,mCAAQ,OAAO,EAAE,cAAM,OAAA,KAAK,kBAAkB,EAAE,EAAzB,CAAyB,EAAE,SAAS,EAAE,yCAAM,CAAC,WAAW,sBAEtE,IACL,GACF,GACF,CACP,CAAC;IACJ,CAAC;IAED,OAAO,CACL,iCAAK,SAAS,EAAE,UAAG,yCAAM,CAAC,SAAS,cAAI,SAAS,IAAI,EAAE,CAAE,aAEtD,iCAAK,SAAS,EAAE,yCAAM,CAAC,MAAM,aAC3B,+BAAI,SAAS,EAAE,yCAAM,CAAC,KAAK,kCAAwB,EACnD,iCAAK,SAAS,EAAE,yCAAM,CAAC,aAAa,aACjC,YAAY,IAAI,uBAAC,qBAAqB,IAAC,MAAM,EAAE,YAAY,CAAC,MAAM,GAAI,EACvE,mCAAQ,OAAO,EAAE,cAAM,OAAA,KAAK,kBAAkB,EAAE,EAAzB,CAAyB,EAAE,SAAS,EAAE,yCAAM,CAAC,aAAa,wBAExE,IACL,IACF,EAGL,YAAY,IAAI,CACf,iCAAK,SAAS,EAAE,yCAAM,CAAC,QAAQ,aAC7B,iCAAK,SAAS,EAAE,yCAAM,CAAC,IAAI,aACzB,+BAAI,SAAS,EAAE,yCAAM,CAAC,SAAS,uBAAa,EAC5C,+BAAG,SAAS,EAAE,yCAAM,CAAC,SAAS,aAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC,SAAM,IAC9E,EACN,iCAAK,SAAS,EAAE,yCAAM,CAAC,IAAI,aACzB,+BAAI,SAAS,EAAE,yCAAM,CAAC,SAAS,wBAAc,EAC7C,8BAAG,SAAS,EAAE,yCAAM,CAAC,SAAS,YAAG,YAAY,CAAC,OAAO,GAAK,IACtD,EACN,iCAAK,SAAS,EAAE,yCAAM,CAAC,IAAI,aACzB,+BAAI,SAAS,EAAE,yCAAM,CAAC,SAAS,iCAAuB,EACtD,+BAAG,SAAS,EAAE,UAAG,yCAAM,CAAC,SAAS,cAAI,yCAAM,CAAC,cAAc,CAAE,aACzD,YAAY,CAAC,OAAO,CAAC,OAAO,OAAG,YAAY,CAAC,OAAO,CAAC,KAAK,IACxD,IACA,EACN,iCAAK,SAAS,EAAE,yCAAM,CAAC,IAAI,aACzB,+BAAI,SAAS,EAAE,yCAAM,CAAC,SAAS,2BAAiB,EAChD,8BAAG,SAAS,EAAE,UAAG,yCAAM,CAAC,SAAS,cAAI,yCAAM,CAAC,cAAc,CAAE,YACzD,YAAY,CAAC,SAAS,CAAC,kBAAkB,EAAE,GAC1C,IACA,IACF,CACP,EAGA,YAAY,IAAI,CACf,iCAAK,SAAS,EAAE,yCAAM,CAAC,OAAO,aAC5B,+BAAI,SAAS,EAAE,yCAAM,CAAC,YAAY,gCAAsB,EACxD,gCAAK,SAAS,EAAE,yCAAM,CAAC,YAAY,YAChC,YAAY,CAAC,QAAQ,CAAC,GAAG,CACxB,UAAC,OAKA,IAAK,OAAA,CACJ,uBAAC,iBAAiB,IAAoB,OAAO,EAAE,OAAO,IAA9B,OAAO,CAAC,IAAI,CAAsB,CAC3D,EAFK,CAEL,CACF,GACG,IACF,CACP,EAGD,iCAAK,SAAS,EAAE,yCAAM,CAAC,OAAO,aAC5B,+BAAI,SAAS,EAAE,yCAAM,CAAC,YAAY,8BAAoB,EACrD,YAAY,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CACzC,gCAAK,SAAS,EAAE,yCAAM,CAAC,UAAU,YAC9B,YAAY,CAAC,GAAG,CAAC,UAAC,KAAK;;4BAAK,OAAA,CAC3B,gCAAsC,SAAS,EAAE,yCAAM,CAAC,SAAS,YAC/D,iCAAK,SAAS,EAAE,yCAAM,CAAC,WAAW,aAChC,iCAAK,SAAS,EAAE,yCAAM,CAAC,YAAY,aACjC,uBAAC,mBAAmB,IAAC,KAAK,EAAE,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,KAAK,KAAI,6BAAU,CAAC,IAAI,GAAI,EAC/D,iCAAM,SAAS,EAAE,yCAAM,CAAC,YAAY,YAAG,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,OAAO,KAAI,eAAe,GAAQ,IAC5E,EACN,iCAAM,SAAS,EAAE,yCAAM,CAAC,SAAS,YAC9B,CAAA,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,SAAS,0CAAE,kBAAkB,EAAE,KAAI,cAAc,GACpD,IACH,IATE,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,EAAE,KAAI,IAAI,CAAC,MAAM,EAAE,CAU9B,CACP,CAAA;yBAAA,CAAC,GACE,CACP,CAAC,CAAC,CAAC,CACF,gCAAK,SAAS,EAAE,yCAAM,CAAC,QAAQ,YAC7B,8BAAG,SAAS,EAAE,yCAAM,CAAC,YAAY,iCAAsB,GACnD,CACP,IACG,EAGL,SAAS,IAAI,CACZ,iCAAK,SAAS,EAAE,yCAAM,CAAC,OAAO,aAC5B,+BAAI,SAAS,EAAE,yCAAM,CAAC,YAAY,mCAAyB,EAC3D,iCAAK,SAAS,EAAE,yCAAM,CAAC,aAAa,aAClC,iCAAK,SAAS,EAAE,yCAAM,CAAC,IAAI,aACzB,+BAAI,SAAS,EAAE,yCAAM,CAAC,SAAS,6BAAmB,EAClD,8BAAG,SAAS,EAAE,yCAAM,CAAC,SAAS,YAAG,SAAS,CAAC,WAAW,GAAK,IACvD,EACN,iCAAK,SAAS,EAAE,yCAAM,CAAC,IAAI,aACzB,+BAAI,SAAS,EAAE,yCAAM,CAAC,SAAS,gCAAsB,EACrD,8BAAG,SAAS,EAAE,yCAAM,CAAC,SAAS,YAAG,SAAS,CAAC,cAAc,GAAK,IAC1D,EACN,iCAAK,SAAS,EAAE,yCAAM,CAAC,IAAI,aACzB,+BAAI,SAAS,EAAE,yCAAM,CAAC,SAAS,yBAAe,EAC9C,+BAAG,SAAS,EAAE,UAAG,yCAAM,CAAC,SAAS,cAAI,yCAAM,CAAC,cAAc,CAAE,aACzD,CAAA,MAAA,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,0CAAE,IAAI,KAAI,KAAK,QAAI,CAAA,MAAA,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,0CAAE,KAAK,KAAI,CAAC,eACxE,IACA,IACF,IACF,CACP,IACG,CACP,CAAC;AACJ,CAAC,CAAC;AApNW,QAAA,mBAAmB,uBAoN9B","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/monitoring/ui/MonitoringDashboard.tsx"],"sourcesContent":["'use client';\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { MonitoringService } from '../lib/monitoring.service';\nimport {\n  AlertLevel,\n  HealthStatus,\n  MonitoringAlert,\n  MonitoringMetric,\n  SystemHealth,\n} from '../types/monitoring.types';\nimport styles from './MonitoringDashboard.module.scss';\n\ninterface MonitoringDashboardProps {\n  className?: string;\n  refreshInterval?: number;\n}\n\nconst HealthStatusIndicator: React.FC<{ status: HealthStatus }> = ({ status }) => {\n  const getStatusClass = (healthStatus: HealthStatus): string => {\n    switch (healthStatus) {\n      case HealthStatus.HEALTHY:\n        return styles.statusDotGreen || '';\n      case HealthStatus.DEGRADED:\n        return styles.statusDotYellow || '';\n      case HealthStatus.UNHEALTHY:\n        return styles.statusDotRed || '';\n      case HealthStatus.UNKNOWN:\n        return styles.statusDotGray || '';\n      default:\n        return styles.statusDotGray || '';\n    }\n  };\n\n  return (\n    <div className={styles.statusIndicator}>\n      <div className={`${styles.statusDot} ${getStatusClass(status)}`} />\n      <span className={styles.statusText}>{status}</span>\n    </div>\n  );\n};\n\nconst ServiceHealthCard: React.FC<{\n  service: {\n    name: string;\n    status: HealthStatus;\n    responseTime?: number;\n    error?: string;\n  };\n}> = ({ service }) => (\n  <div className={styles.serviceCard}>\n    <div className={styles.serviceHeader}>\n      <h3 className={styles.serviceName}>{service.name}</h3>\n      <HealthStatusIndicator status={service.status} />\n    </div>\n    {service.responseTime && (\n      <p className={styles.serviceResponse}>Response: {service.responseTime}ms</p>\n    )}\n    {service.error && <p className={styles.serviceError}>{service.error}</p>}\n  </div>\n);\n\nconst AlertLevelIndicator: React.FC<{ level: AlertLevel }> = ({ level }) => {\n  const getLevelClass = (alertLevel: AlertLevel): string => {\n    switch (alertLevel) {\n      case AlertLevel.INFO:\n        return styles.alertLevelInfo || '';\n      case AlertLevel.WARNING:\n        return styles.alertLevelWarning || '';\n      case AlertLevel.ERROR:\n        return styles.alertLevelError || '';\n      case AlertLevel.CRITICAL:\n        return styles.alertLevelCritical || '';\n      default:\n        return styles.alertLevelInfo || '';\n    }\n  };\n\n  return <span className={`${styles.alertLevel} ${getLevelClass(level)}`}>{level}</span>;\n};\n\nexport const MonitoringDashboard: React.FC<MonitoringDashboardProps> = ({\n  className,\n  refreshInterval = 10000,\n}) => {\n  const [systemHealth, setSystemHealth] = useState<SystemHealth | null>(null);\n  const [recentAlerts, setRecentAlerts] = useState<MonitoringAlert[]>([]);\n  const [_metrics, setMetrics] = useState<MonitoringMetric[]>([]);\n  const [analytics, setAnalytics] = useState<{\n    totalEvents: number;\n    activeSessions: number;\n    topPages: { path: string; views: number }[];\n  } | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Initialize monitoring service with default config if not already initialized\n  const monitoringService = React.useMemo(() => {\n    try {\n      return MonitoringService.getInstance();\n    } catch (err) {\n      // Initialize with default config if not already initialized\n      const defaultConfig = {\n        healthCheck: {\n          enabled: true,\n          interval: 30000,\n          timeout: 5000,\n          services: ['database', 'api', 'cache', 'storage'],\n        },\n        analytics: {\n          enabled: true,\n          debug: false,\n          respectDoNotTrack: true,\n          anonymizeIp: true,\n          sampleRate: 1.0,\n        },\n        alerts: {\n          enabled: true,\n        },\n        dashboard: {\n          refreshInterval: 30000,\n          maxAlerts: 50,\n          maxMetrics: 100,\n        },\n      };\n      return MonitoringService.getInstance(defaultConfig);\n    }\n  }, []);\n\n  const fetchDashboardData = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const dashboardData = await monitoringService.getDashboardData();\n\n      setSystemHealth(dashboardData.systemHealth);\n      setRecentAlerts(dashboardData.recentAlerts || []);\n      setMetrics(dashboardData.metrics || []);\n      setAnalytics(dashboardData.analytics || {});\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to fetch dashboard data');\n    } finally {\n      setLoading(false);\n    }\n  }, [monitoringService]);\n\n  useEffect(() => {\n    void fetchDashboardData();\n\n    const interval = setInterval(() => void fetchDashboardData(), refreshInterval);\n    return () => clearInterval(interval);\n  }, [refreshInterval, fetchDashboardData]);\n\n  if (loading && !systemHealth) {\n    return (\n      <div className={`${styles.dashboard} ${className || ''}`}>\n        <div className={styles.loading}>\n          <div className={styles.loadingTitle}></div>\n          <div className={styles.loadingGrid}>\n            {Array.from({ length: 4 }).map((_, i) => (\n              <div key={i} className={styles.loadingCard}></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={`${styles.dashboard} ${className || ''}`}>\n        <div className={styles.error}>\n          <div className={styles.errorCard}>\n            <h3 className={styles.errorTitle}>Dashboard Error</h3>\n            <p className={styles.errorMessage}>{error}</p>\n            <button onClick={() => void fetchDashboardData()} className={styles.retryButton}>\n              Retry\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`${styles.dashboard} ${className || ''}`}>\n      {/* Header */}\n      <div className={styles.header}>\n        <h1 className={styles.title}>System Monitoring</h1>\n        <div className={styles.headerActions}>\n          {systemHealth && <HealthStatusIndicator status={systemHealth.status} />}\n          <button onClick={() => void fetchDashboardData()} className={styles.refreshButton}>\n            Refresh\n          </button>\n        </div>\n      </div>\n\n      {/* System Overview */}\n      {systemHealth && (\n        <div className={styles.overview}>\n          <div className={styles.card}>\n            <h3 className={styles.cardTitle}>Uptime</h3>\n            <p className={styles.cardValue}>{Math.floor(systemHealth.uptime / 1000 / 60)}m</p>\n          </div>\n          <div className={styles.card}>\n            <h3 className={styles.cardTitle}>Version</h3>\n            <p className={styles.cardValue}>{systemHealth.version}</p>\n          </div>\n          <div className={styles.card}>\n            <h3 className={styles.cardTitle}>Healthy Services</h3>\n            <p className={`${styles.cardValue} ${styles.cardValueGreen}`}>\n              {systemHealth.summary.healthy}/{systemHealth.summary.total}\n            </p>\n          </div>\n          <div className={styles.card}>\n            <h3 className={styles.cardTitle}>Last Check</h3>\n            <p className={`${styles.cardValue} ${styles.cardValueSmall}`}>\n              {systemHealth.timestamp.toLocaleTimeString()}\n            </p>\n          </div>\n        </div>\n      )}\n\n      {/* Services Health */}\n      {systemHealth && (\n        <div className={styles.section}>\n          <h2 className={styles.sectionTitle}>Services Health</h2>\n          <div className={styles.servicesGrid}>\n            {systemHealth.services.map(\n              (service: {\n                name: string;\n                status: HealthStatus;\n                responseTime?: number;\n                error?: string;\n              }) => (\n                <ServiceHealthCard key={service.name} service={service} />\n              )\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Recent Alerts */}\n      <div className={styles.section}>\n        <h2 className={styles.sectionTitle}>Recent Alerts</h2>\n        {recentAlerts && recentAlerts.length > 0 ? (\n          <div className={styles.alertsList}>\n            {recentAlerts.map((alert) => (\n              <div key={alert?.id || Math.random()} className={styles.alertItem}>\n                <div className={styles.alertHeader}>\n                  <div className={styles.alertContent}>\n                    <AlertLevelIndicator level={alert?.level || AlertLevel.INFO} />\n                    <span className={styles.alertMessage}>{alert?.message || 'Unknown alert'}</span>\n                  </div>\n                  <span className={styles.alertTime}>\n                    {alert?.timestamp?.toLocaleTimeString() || 'Unknown time'}\n                  </span>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className={styles.noAlerts}>\n            <p className={styles.noAlertsText}>No recent alerts</p>\n          </div>\n        )}\n      </div>\n\n      {/* Analytics Overview */}\n      {analytics && (\n        <div className={styles.section}>\n          <h2 className={styles.sectionTitle}>Analytics Overview</h2>\n          <div className={styles.analyticsGrid}>\n            <div className={styles.card}>\n              <h3 className={styles.cardTitle}>Total Events</h3>\n              <p className={styles.cardValue}>{analytics.totalEvents}</p>\n            </div>\n            <div className={styles.card}>\n              <h3 className={styles.cardTitle}>Active Sessions</h3>\n              <p className={styles.cardValue}>{analytics.activeSessions}</p>\n            </div>\n            <div className={styles.card}>\n              <h3 className={styles.cardTitle}>Top Page</h3>\n              <p className={`${styles.cardValue} ${styles.cardValueSmall}`}>\n                {analytics.topPages[0]?.path || 'N/A'} ({analytics.topPages[0]?.views || 0} views)\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n"],"version":3}