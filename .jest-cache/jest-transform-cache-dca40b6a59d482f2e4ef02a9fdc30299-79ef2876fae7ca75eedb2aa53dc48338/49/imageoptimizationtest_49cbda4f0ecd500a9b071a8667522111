62cf434c141e77949404bdf9f3bcb216
"use strict";
/**
 * Image Optimization Tests
 *
 * Comprehensive tests for image optimization utilities.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock performance monitor
jest.mock('../performance-monitor', function () { return ({
    performanceMonitor: {
        addMetric: jest.fn(),
    },
}); });
var image_optimization_1 = require("./image-optimization");
var performance_enums_1 = require("../../types/performance.enums");
describe('Image Optimization', function () {
    var performanceMonitor;
    beforeEach(function () { return __awaiter(void 0, void 0, void 0, function () {
        var mockPerformanceMonitor;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    jest.clearAllMocks();
                    return [4 /*yield*/, Promise.resolve().then(function () { return __importStar(require('../performance-monitor')); })];
                case 1:
                    mockPerformanceMonitor = (_a.sent()).performanceMonitor;
                    performanceMonitor = mockPerformanceMonitor;
                    // Mock canvas
                    Object.defineProperty(document, 'createElement', {
                        value: jest.fn(function (tagName) {
                            if (tagName === 'canvas') {
                                return {
                                    width: 0,
                                    height: 0,
                                    getContext: jest.fn(function () { return ({
                                        createLinearGradient: jest.fn(function () { return ({
                                            addColorStop: jest.fn(),
                                        }); }),
                                        fillStyle: '',
                                        fillRect: jest.fn(),
                                    }); }),
                                    toDataURL: jest.fn(function (format) {
                                        if (format === 'image/avif')
                                            return 'data:image/png;base64,';
                                        if (format === 'image/webp')
                                            return 'data:image/png;base64,';
                                        return 'data:image/jpeg;base64,';
                                    }),
                                };
                            }
                            return {};
                        }),
                        writable: true,
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    describe('generateOptimizedImageUrl', function () {
        it('should generate optimized URL with default config', function () {
            var result = (0, image_optimization_1.generateOptimizedImageUrl)('https://example.com/image.jpg', 800, 600);
            expect(result).toContain('https://example.com/image.jpg?');
            expect(result).toContain('q=75');
            expect(result).toContain('f=webp');
            expect(result).toContain('w=800');
            expect(result).toContain('h=600');
        });
        it('should generate optimized URL with custom config', function () {
            var config = {
                quality: 90,
                format: performance_enums_1.ImageFormat.AVIF,
                responsive: false,
            };
            var result = (0, image_optimization_1.generateOptimizedImageUrl)('https://example.com/image.jpg', 800, 600, config);
            expect(result).toContain('q=90');
            expect(result).toContain('f=avif');
            expect(result).not.toContain('w=800');
            expect(result).not.toContain('h=600');
        });
        it('should track performance metrics', function () {
            (0, image_optimization_1.generateOptimizedImageUrl)('https://example.com/image.jpg', 800, 600);
            expect(performanceMonitor.addMetric).toHaveBeenCalledWith(expect.objectContaining({
                name: 'image_optimization',
                value: expect.any(Number),
                timestamp: expect.any(Number),
                rating: expect.any(String),
            }));
        });
        it('should handle errors gracefully', function () {
            // Mock an error in the generation
            jest.spyOn(URLSearchParams.prototype, 'toString').mockImplementation(function () {
                throw new Error('URLSearchParams error');
            });
            var result = (0, image_optimization_1.generateOptimizedImageUrl)('https://example.com/image.jpg', 800, 600);
            expect(result).toBe('https://example.com/image.jpg');
            expect(performanceMonitor.addMetric).toHaveBeenCalledWith(expect.objectContaining({
                name: 'image_optimization_error',
                rating: 'poor',
            }));
        });
    });
    describe('generateResponsiveImageSources', function () {
        it('should generate responsive sources for different breakpoints', function () {
            var sizes = [
                { width: 400, height: 300, breakpoint: '768px' },
                { width: 800, height: 600, breakpoint: '1024px' },
                { width: 1200, height: 900, breakpoint: '1440px' },
            ];
            var result = (0, image_optimization_1.generateResponsiveImageSources)('https://example.com/image.jpg', sizes);
            expect(result).toHaveLength(3);
            expect(result[0]).toMatchObject({
                width: 400,
                height: 300,
                media: '(max-width: 768px)',
            });
            expect(result[1]).toMatchObject({
                width: 800,
                height: 600,
                media: '(max-width: 1024px)',
            });
            expect(result[2]).toMatchObject({
                width: 1200,
                height: 900,
                media: '(max-width: 1440px)',
            });
        });
    });
    describe('generateBlurPlaceholder', function () {
        it('should generate blur placeholder data URL', function () {
            var result = (0, image_optimization_1.generateBlurPlaceholder)(10, 10);
            expect(result).toMatch(/^data:image\/jpeg;base64,/);
        });
        it('should use default dimensions when not provided', function () {
            var result = (0, image_optimization_1.generateBlurPlaceholder)();
            expect(result).toMatch(/^data:image\/jpeg;base64,/);
        });
    });
    describe('calculateOptimizationRatio', function () {
        it('should calculate correct optimization ratio', function () {
            expect((0, image_optimization_1.calculateOptimizationRatio)(1000, 300)).toBe(70);
            expect((0, image_optimization_1.calculateOptimizationRatio)(1000, 500)).toBe(50);
            expect((0, image_optimization_1.calculateOptimizationRatio)(1000, 1000)).toBe(0);
        });
        it('should handle zero original size', function () {
            expect((0, image_optimization_1.calculateOptimizationRatio)(0, 300)).toBe(0);
        });
    });
    describe('getOptimalImageFormat', function () {
        it('should return jpeg as fallback', function () {
            var result = (0, image_optimization_1.getOptimalImageFormat)();
            expect(result).toBe('jpeg');
        });
    });
    describe('preloadOptimizedImages', function () {
        beforeEach(function () {
            // Mock document methods
            Object.defineProperty(document, 'createElement', {
                value: jest.fn(function () { return ({
                    rel: '',
                    as: '',
                    href: '',
                    setAttribute: jest.fn(),
                }); }),
                writable: true,
            });
            Object.defineProperty(document, 'head', {
                value: {
                    appendChild: jest.fn(),
                },
                writable: true,
            });
        });
        it('should preload critical images', function () {
            var images = [
                { src: 'https://example.com/image1.jpg', width: 800, height: 600 },
                { src: 'https://example.com/image2.jpg', width: 400, height: 300 },
            ];
            (0, image_optimization_1.preloadOptimizedImages)(images);
            // eslint-disable-next-line @typescript-eslint/unbound-method
            expect(document.createElement).toHaveBeenCalledWith('link');
            // eslint-disable-next-line @typescript-eslint/unbound-method
            expect(document.head.appendChild).toHaveBeenCalledTimes(2);
        });
    });
    describe('setupLazyImageLoading', function () {
        beforeEach(function () {
            // Mock IntersectionObserver
            global.IntersectionObserver = jest.fn().mockImplementation(function (_callback) { return ({
                observe: jest.fn(),
                unobserve: jest.fn(),
                disconnect: jest.fn(),
            }); });
            // Mock document methods
            Object.defineProperty(document, 'querySelectorAll', {
                value: jest.fn(function () { return []; }),
                writable: true,
            });
        });
        it('should setup lazy loading for images', function () {
            (0, image_optimization_1.setupLazyImageLoading)();
            expect(global.IntersectionObserver).toHaveBeenCalled();
            // eslint-disable-next-line @typescript-eslint/unbound-method
            expect(document.querySelectorAll).toHaveBeenCalledWith('img[data-lazy]');
        });
        it('should handle server-side rendering', function () {
            // Mock window as undefined
            var originalWindow = global.window;
            delete global.window;
            (0, image_optimization_1.setupLazyImageLoading)();
            expect(global.IntersectionObserver).not.toHaveBeenCalled();
            // Restore window
            global.window = originalWindow;
        });
    });
    describe('getImageOptimizationResult', function () {
        it('should return optimization result with metrics', function () {
            var result = (0, image_optimization_1.getImageOptimizationResult)('https://example.com/original.jpg', 'https://example.com/optimized.webp', 800, 600);
            expect(result).toMatchObject({
                src: 'https://example.com/optimized.webp',
                width: 800,
                height: 600,
                format: 'webp',
                size: expect.any(Number),
                optimizationRatio: expect.any(Number),
            });
            expect(result.optimizationRatio).toBeGreaterThan(0);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2dhbXphcmFtYXphbm92L0Rlc2t0b3AvZnVtby9zcmMvaW5mcmFzdHJ1Y3R1cmUvcGVyZm9ybWFuY2UvbGliL2ltYWdlLW9wdGltaXphdGlvbi9pbWFnZS1vcHRpbWl6YXRpb24udGVzdC50cyIsIm1hcHBpbmdzIjoiO0FBQUE7Ozs7R0FJRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFhSCwyQkFBMkI7QUFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxjQUFNLE9BQUEsQ0FBQztJQUN6QyxrQkFBa0IsRUFBRTtRQUNsQixTQUFTLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtLQUNyQjtDQUNGLENBQUMsRUFKd0MsQ0FJeEMsQ0FBQyxDQUFDO0FBaEJKLDJEQVM4QjtBQUM5QixtRUFBNEQ7QUFRNUQsUUFBUSxDQUFDLG9CQUFvQixFQUFFO0lBQzdCLElBQUksa0JBQXVCLENBQUM7SUFFNUIsVUFBVSxDQUFDOzs7OztvQkFDVCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7b0JBQ2tDLHNGQUFhLHdCQUF3QixRQUFDOztvQkFBakUsc0JBQXNCLEdBQUssQ0FBQSxTQUFzQyxDQUFBLG1CQUEzQztvQkFDbEQsa0JBQWtCLEdBQUcsc0JBQXNCLENBQUM7b0JBRTVDLGNBQWM7b0JBQ2QsTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsZUFBZSxFQUFFO3dCQUMvQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFDLE9BQU87NEJBQ3JCLElBQUksT0FBTyxLQUFLLFFBQVEsRUFBRSxDQUFDO2dDQUN6QixPQUFPO29DQUNMLEtBQUssRUFBRSxDQUFDO29DQUNSLE1BQU0sRUFBRSxDQUFDO29DQUNULFVBQVUsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLGNBQU0sT0FBQSxDQUFDO3dDQUN6QixvQkFBb0IsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLGNBQU0sT0FB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QUUsb0NBQW9DO2dCQUN6QyxLQUFLLEVBQUUsR0FBRztnQkFDVixNQUFNLEVBQUUsR0FBRztnQkFDWCxNQUFNLEVBQUUsTUFBTTtnQkFDZCxJQUFJLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7Z0JBQ3hCLGlCQUFpQixFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDO2FBQ3RDLENBQUMsQ0FBQztZQUVILE1BQU0sQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9nYW16YXJhbWF6YW5vdi9EZXNrdG9wL2Z1bW8vc3JjL2luZnJhc3RydWN0dXJlL3BlcmZvcm1hbmNlL2xpYi9pbWFnZS1vcHRpbWl6YXRpb24vaW1hZ2Utb3B0aW1pemF0aW9uLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBJbWFnZSBPcHRpbWl6YXRpb24gVGVzdHNcbiAqXG4gKiBDb21wcmVoZW5zaXZlIHRlc3RzIGZvciBpbWFnZSBvcHRpbWl6YXRpb24gdXRpbGl0aWVzLlxuICovXG5cbmltcG9ydCB7XG4gIGNhbGN1bGF0ZU9wdGltaXphdGlvblJhdGlvLFxuICBnZW5lcmF0ZUJsdXJQbGFjZWhvbGRlcixcbiAgZ2VuZXJhdGVPcHRpbWl6ZWRJbWFnZVVybCxcbiAgZ2VuZXJhdGVSZXNwb25zaXZlSW1hZ2VTb3VyY2VzLFxuICBnZXRJbWFnZU9wdGltaXphdGlvblJlc3VsdCxcbiAgZ2V0T3B0aW1hbEltYWdlRm9ybWF0LFxuICBwcmVsb2FkT3B0aW1pemVkSW1hZ2VzLFxuICBzZXR1cExhenlJbWFnZUxvYWRpbmcsXG59IGZyb20gJy4vaW1hZ2Utb3B0aW1pemF0aW9uJztcbmltcG9ydCB7IEltYWdlRm9ybWF0IH0gZnJvbSAnLi4vLi4vdHlwZXMvcGVyZm9ybWFuY2UuZW51bXMnO1xuLy8gTW9jayBwZXJmb3JtYW5jZSBtb25pdG9yXG5qZXN0Lm1vY2soJy4uL3BlcmZvcm1hbmNlLW1vbml0b3InLCAoKSA9PiAoe1xuICBwZXJmb3JtYW5jZU1vbml0b3I6IHtcbiAgICBhZGRNZXRyaWM6IGplc3QuZm4oKSxcbiAgfSxcbn0pKTtcblxuZGVzY3JpYmUoJ0ltYWdlIE9wdGltaXphdGlvbicsICgpID0+IHtcbiAgbGV0IHBlcmZvcm1hbmNlTW9uaXRvcjogYW55O1xuXG4gIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICAgIGNvbnN0IHsgcGVyZm9ybWFuY2VNb25pdG9yOiBtb2NrUGVyZm9ybWFuY2VNb25pdG9yIH0gPSBhd2FpdCBpbXBvcnQoJy4uL3BlcmZvcm1hbmNlLW1vbml0b3InKTtcbiAgICBwZXJmb3JtYW5jZU1vbml0b3IgPSBtb2NrUGVyZm9ybWFuY2VNb25pdG9yO1xuXG4gICAgLy8gTW9jayBjYW52YXNcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZG9jdW1lbnQsICdjcmVhdGVFbGVtZW50Jywge1xuICAgICAgdmFsdWU6IGplc3QuZm4oKHRhZ05hbWUpID0+IHtcbiAgICAgICAgaWYgKHRhZ05hbWUgPT09ICdjYW52YXMnKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICAgICAgZ2V0Q29udGV4dDogamVzdC5mbigoKSA9PiAoe1xuICAgICAgICAgICAgICBjcmVhdGVMaW5lYXJHcmFkaWVudDogamVzdC5mbigoKSA9PiAoe1xuICAgICAgICAgICAgICAgIGFkZENvbG9yU3RvcDogamVzdC5mbigpLFxuICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgIGZpbGxTdHlsZTogJycsXG4gICAgICAgICAgICAgIGZpbGxSZWN0OiBqZXN0LmZuKCksXG4gICAgICAgICAgICB9KSksXG4gICAgICAgICAgICB0b0RhdGFVUkw6IGplc3QuZm4oKGZvcm1hdCkgPT4ge1xuICAgICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnaW1hZ2UvYXZpZicpIHJldHVybiAnZGF0YTppbWFnZS9wbmc7YmFzZTY0LCc7XG4gICAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICdpbWFnZS93ZWJwJykgcmV0dXJuICdkYXRhOmltYWdlL3BuZztiYXNlNjQsJztcbiAgICAgICAgICAgICAgcmV0dXJuICdkYXRhOmltYWdlL2pwZWc7YmFzZTY0LCc7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH0pLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZW5lcmF0ZU9wdGltaXplZEltYWdlVXJsJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgZ2VuZXJhdGUgb3B0aW1pemVkIFVSTCB3aXRoIGRlZmF1bHQgY29uZmlnJywgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gZ2VuZXJhdGVPcHRpbWl6ZWRJbWFnZVVybCgnaHR0cHM6Ly9leGFtcGxlLmNvbS9pbWFnZS5qcGcnLCA4MDAsIDYwMCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQ29udGFpbignaHR0cHM6Ly9leGFtcGxlLmNvbS9pbWFnZS5qcGc/Jyk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0NvbnRhaW4oJ3E9NzUnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQ29udGFpbignZj13ZWJwJyk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0NvbnRhaW4oJ3c9ODAwJyk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0NvbnRhaW4oJ2g9NjAwJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGdlbmVyYXRlIG9wdGltaXplZCBVUkwgd2l0aCBjdXN0b20gY29uZmlnJywgKCkgPT4ge1xuICAgICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgICBxdWFsaXR5OiA5MCxcbiAgICAgICAgZm9ybWF0OiBJbWFnZUZvcm1hdC5BVklGLFxuICAgICAgICByZXNwb25zaXZlOiBmYWxzZSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGdlbmVyYXRlT3B0aW1pemVkSW1hZ2VVcmwoJ2h0dHBzOi8vZXhhbXBsZS5jb20vaW1hZ2UuanBnJywgODAwLCA2MDAsIGNvbmZpZyk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQ29udGFpbigncT05MCcpO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9Db250YWluKCdmPWF2aWYnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLm5vdC50b0NvbnRhaW4oJ3c9ODAwJyk7XG4gICAgICBleHBlY3QocmVzdWx0KS5ub3QudG9Db250YWluKCdoPTYwMCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB0cmFjayBwZXJmb3JtYW5jZSBtZXRyaWNzJywgKCkgPT4ge1xuICAgICAgZ2VuZXJhdGVPcHRpbWl6ZWRJbWFnZVVybCgnaHR0cHM6Ly9leGFtcGxlLmNvbS9pbWFnZS5qcGcnLCA4MDAsIDYwMCk7XG5cbiAgICAgIGV4cGVjdChwZXJmb3JtYW5jZU1vbml0b3IuYWRkTWV0cmljKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgIG5hbWU6ICdpbWFnZV9vcHRpbWl6YXRpb24nLFxuICAgICAgICAgIHZhbHVlOiBleHBlY3QuYW55KE51bWJlciksXG4gICAgICAgICAgdGltZXN0YW1wOiBleHBlY3QuYW55KE51bWJlciksXG4gICAgICAgICAgcmF0aW5nOiBleHBlY3QuYW55KFN0cmluZyksXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZXJyb3JzIGdyYWNlZnVsbHknLCAoKSA9PiB7XG4gICAgICAvLyBNb2NrIGFuIGVycm9yIGluIHRoZSBnZW5lcmF0aW9uXG4gICAgICBqZXN0LnNweU9uKFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUsICd0b1N0cmluZycpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVVJMU2VhcmNoUGFyYW1zIGVycm9yJyk7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gZ2VuZXJhdGVPcHRpbWl6ZWRJbWFnZVVybCgnaHR0cHM6Ly9leGFtcGxlLmNvbS9pbWFnZS5qcGcnLCA4MDAsIDYwMCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoJ2h0dHBzOi8vZXhhbXBsZS5jb20vaW1hZ2UuanBnJyk7XG4gICAgICBleHBlY3QocGVyZm9ybWFuY2VNb25pdG9yLmFkZE1ldHJpYykudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICBuYW1lOiAnaW1hZ2Vfb3B0aW1pemF0aW9uX2Vycm9yJyxcbiAgICAgICAgICByYXRpbmc6ICdwb29yJyxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZW5lcmF0ZVJlc3BvbnNpdmVJbWFnZVNvdXJjZXMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBnZW5lcmF0ZSByZXNwb25zaXZlIHNvdXJjZXMgZm9yIGRpZmZlcmVudCBicmVha3BvaW50cycsICgpID0+IHtcbiAgICAgIGNvbnN0IHNpemVzID0gW1xuICAgICAgICB7IHdpZHRoOiA0MDAsIGhlaWdodDogMzAwLCBicmVha3BvaW50OiAnNzY4cHgnIH0sXG4gICAgICAgIHsgd2lkdGg6IDgwMCwgaGVpZ2h0OiA2MDAsIGJyZWFrcG9pbnQ6ICcxMDI0cHgnIH0sXG4gICAgICAgIHsgd2lkdGg6IDEyMDAsIGhlaWdodDogOTAwLCBicmVha3BvaW50OiAnMTQ0MHB4JyB9LFxuICAgICAgXTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gZ2VuZXJhdGVSZXNwb25zaXZlSW1hZ2VTb3VyY2VzKCdodHRwczovL2V4YW1wbGUuY29tL2ltYWdlLmpwZycsIHNpemVzKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9IYXZlTGVuZ3RoKDMpO1xuICAgICAgZXhwZWN0KHJlc3VsdFswXSkudG9NYXRjaE9iamVjdCh7XG4gICAgICAgIHdpZHRoOiA0MDAsXG4gICAgICAgIGhlaWdodDogMzAwLFxuICAgICAgICBtZWRpYTogJyhtYXgtd2lkdGg6IDc2OHB4KScsXG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChyZXN1bHRbMV0pLnRvTWF0Y2hPYmplY3Qoe1xuICAgICAgICB3aWR0aDogODAwLFxuICAgICAgICBoZWlnaHQ6IDYwMCxcbiAgICAgICAgbWVkaWE6ICcobWF4LXdpZHRoOiAxMDI0cHgpJyxcbiAgICAgIH0pO1xuICAgICAgZXhwZWN0KHJlc3VsdFsyXSkudG9NYXRjaE9iamVjdCh7XG4gICAgICAgIHdpZHRoOiAxMjAwLFxuICAgICAgICBoZWlnaHQ6IDkwMCxcbiAgICAgICAgbWVkaWE6ICcobWF4LXdpZHRoOiAxNDQwcHgpJyxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ2VuZXJhdGVCbHVyUGxhY2Vob2xkZXInLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBnZW5lcmF0ZSBibHVyIHBsYWNlaG9sZGVyIGRhdGEgVVJMJywgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gZ2VuZXJhdGVCbHVyUGxhY2Vob2xkZXIoMTAsIDEwKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9NYXRjaCgvXmRhdGE6aW1hZ2VcXC9qcGVnO2Jhc2U2NCwvKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdXNlIGRlZmF1bHQgZGltZW5zaW9ucyB3aGVuIG5vdCBwcm92aWRlZCcsICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGdlbmVyYXRlQmx1clBsYWNlaG9sZGVyKCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvTWF0Y2goL15kYXRhOmltYWdlXFwvanBlZztiYXNlNjQsLyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdjYWxjdWxhdGVPcHRpbWl6YXRpb25SYXRpbycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGNhbGN1bGF0ZSBjb3JyZWN0IG9wdGltaXphdGlvbiByYXRpbycsICgpID0+IHtcbiAgICAgIGV4cGVjdChjYWxjdWxhdGVPcHRpbWl6YXRpb25SYXRpbygxMDAwLCAzMDApKS50b0JlKDcwKTtcbiAgICAgIGV4cGVjdChjYWxjdWxhdGVPcHRpbWl6YXRpb25SYXRpbygxMDAwLCA1MDApKS50b0JlKDUwKTtcbiAgICAgIGV4cGVjdChjYWxjdWxhdGVPcHRpbWl6YXRpb25SYXRpbygxMDAwLCAxMDAwKSkudG9CZSgwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHplcm8gb3JpZ2luYWwgc2l6ZScsICgpID0+IHtcbiAgICAgIGV4cGVjdChjYWxjdWxhdGVPcHRpbWl6YXRpb25SYXRpbygwLCAzMDApKS50b0JlKDApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ2V0T3B0aW1hbEltYWdlRm9ybWF0JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIGpwZWcgYXMgZmFsbGJhY2snLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBnZXRPcHRpbWFsSW1hZ2VGb3JtYXQoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoJ2pwZWcnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3ByZWxvYWRPcHRpbWl6ZWRJbWFnZXMnLCAoKSA9PiB7XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAvLyBNb2NrIGRvY3VtZW50IG1ldGhvZHNcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkb2N1bWVudCwgJ2NyZWF0ZUVsZW1lbnQnLCB7XG4gICAgICAgIHZhbHVlOiBqZXN0LmZuKCgpID0+ICh7XG4gICAgICAgICAgcmVsOiAnJyxcbiAgICAgICAgICBhczogJycsXG4gICAgICAgICAgaHJlZjogJycsXG4gICAgICAgICAgc2V0QXR0cmlidXRlOiBqZXN0LmZuKCksXG4gICAgICAgIH0pKSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB9KTtcblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRvY3VtZW50LCAnaGVhZCcsIHtcbiAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICBhcHBlbmRDaGlsZDogamVzdC5mbigpLFxuICAgICAgICB9LFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBwcmVsb2FkIGNyaXRpY2FsIGltYWdlcycsICgpID0+IHtcbiAgICAgIGNvbnN0IGltYWdlcyA9IFtcbiAgICAgICAgeyBzcmM6ICdodHRwczovL2V4YW1wbGUuY29tL2ltYWdlMS5qcGcnLCB3aWR0aDogODAwLCBoZWlnaHQ6IDYwMCB9LFxuICAgICAgICB7IHNyYzogJ2h0dHBzOi8vZXhhbXBsZS5jb20vaW1hZ2UyLmpwZycsIHdpZHRoOiA0MDAsIGhlaWdodDogMzAwIH0sXG4gICAgICBdO1xuXG4gICAgICBwcmVsb2FkT3B0aW1pemVkSW1hZ2VzKGltYWdlcyk7XG5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbiAgICAgIGV4cGVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnbGluaycpO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC91bmJvdW5kLW1ldGhvZFxuICAgICAgZXhwZWN0KGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygyKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3NldHVwTGF6eUltYWdlTG9hZGluZycsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIC8vIE1vY2sgSW50ZXJzZWN0aW9uT2JzZXJ2ZXJcbiAgICAgIGdsb2JhbC5JbnRlcnNlY3Rpb25PYnNlcnZlciA9IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKF9jYWxsYmFjaykgPT4gKHtcbiAgICAgICAgb2JzZXJ2ZTogamVzdC5mbigpLFxuICAgICAgICB1bm9ic2VydmU6IGplc3QuZm4oKSxcbiAgICAgICAgZGlzY29ubmVjdDogamVzdC5mbigpLFxuICAgICAgfSkpO1xuXG4gICAgICAvLyBNb2NrIGRvY3VtZW50IG1ldGhvZHNcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkb2N1bWVudCwgJ3F1ZXJ5U2VsZWN0b3JBbGwnLCB7XG4gICAgICAgIHZhbHVlOiBqZXN0LmZuKCgpID0+IFtdKSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgc2V0dXAgbGF6eSBsb2FkaW5nIGZvciBpbWFnZXMnLCAoKSA9PiB7XG4gICAgICBzZXR1cExhenlJbWFnZUxvYWRpbmcoKTtcblxuICAgICAgZXhwZWN0KGdsb2JhbC5JbnRlcnNlY3Rpb25PYnNlcnZlcikudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC91bmJvdW5kLW1ldGhvZFxuICAgICAgZXhwZWN0KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdpbWdbZGF0YS1sYXp5XScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgc2VydmVyLXNpZGUgcmVuZGVyaW5nJywgKCkgPT4ge1xuICAgICAgLy8gTW9jayB3aW5kb3cgYXMgdW5kZWZpbmVkXG4gICAgICBjb25zdCBvcmlnaW5hbFdpbmRvdyA9IGdsb2JhbC53aW5kb3c7XG4gICAgICBkZWxldGUgKGdsb2JhbCBhcyBhbnkpLndpbmRvdztcblxuICAgICAgc2V0dXBMYXp5SW1hZ2VMb2FkaW5nKCk7XG5cbiAgICAgIGV4cGVjdChnbG9iYWwuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG5cbiAgICAgIC8vIFJlc3RvcmUgd2luZG93XG4gICAgICBnbG9iYWwud2luZG93ID0gb3JpZ2luYWxXaW5kb3c7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZXRJbWFnZU9wdGltaXphdGlvblJlc3VsdCcsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBvcHRpbWl6YXRpb24gcmVzdWx0IHdpdGggbWV0cmljcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGdldEltYWdlT3B0aW1pemF0aW9uUmVzdWx0KFxuICAgICAgICAnaHR0cHM6Ly9leGFtcGxlLmNvbS9vcmlnaW5hbC5qcGcnLFxuICAgICAgICAnaHR0cHM6Ly9leGFtcGxlLmNvbS9vcHRpbWl6ZWQud2VicCcsXG4gICAgICAgIDgwMCxcbiAgICAgICAgNjAwXG4gICAgICApO1xuXG4gICAgICBleHBlY3QocmVzdWx0KS50b01hdGNoT2JqZWN0KHtcbiAgICAgICAgc3JjOiAnaHR0cHM6Ly9leGFtcGxlLmNvbS9vcHRpbWl6ZWQud2VicCcsXG4gICAgICAgIHdpZHRoOiA4MDAsXG4gICAgICAgIGhlaWdodDogNjAwLFxuICAgICAgICBmb3JtYXQ6ICd3ZWJwJyxcbiAgICAgICAgc2l6ZTogZXhwZWN0LmFueShOdW1iZXIpLFxuICAgICAgICBvcHRpbWl6YXRpb25SYXRpbzogZXhwZWN0LmFueShOdW1iZXIpLFxuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQub3B0aW1pemF0aW9uUmF0aW8pLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==