{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/performance/lib/image-optimization/image-optimization.test.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/performance/lib/image-optimization/image-optimization.test.ts"],"sourcesContent":["/**\n * Image Optimization Tests\n *\n * Comprehensive tests for image optimization utilities.\n */\n\nimport {\n  calculateOptimizationRatio,\n  generateBlurPlaceholder,\n  generateOptimizedImageUrl,\n  generateResponsiveImageSources,\n  getImageOptimizationResult,\n  getOptimalImageFormat,\n  preloadOptimizedImages,\n  setupLazyImageLoading,\n} from './image-optimization';\nimport { ImageFormat } from '../../types/performance.enums';\n// Mock performance monitor\njest.mock('../performance-monitor', () => ({\n  performanceMonitor: {\n    addMetric: jest.fn(),\n  },\n}));\n\ndescribe('Image Optimization', () => {\n  let performanceMonitor: any;\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n    const { performanceMonitor: mockPerformanceMonitor } = await import('../performance-monitor');\n    performanceMonitor = mockPerformanceMonitor;\n\n    // Mock canvas\n    Object.defineProperty(document, 'createElement', {\n      value: jest.fn((tagName) => {\n        if (tagName === 'canvas') {\n          return {\n            width: 0,\n            height: 0,\n            getContext: jest.fn(() => ({\n              createLinearGradient: jest.fn(() => ({\n                addColorStop: jest.fn(),\n              })),\n              fillStyle: '',\n              fillRect: jest.fn(),\n            })),\n            toDataURL: jest.fn((format) => {\n              if (format === 'image/avif') return 'data:image/png;base64,';\n              if (format === 'image/webp') return 'data:image/png;base64,';\n              return 'data:image/jpeg;base64,';\n            }),\n          };\n        }\n        return {};\n      }),\n      writable: true,\n    });\n  });\n\n  describe('generateOptimizedImageUrl', () => {\n    it('should generate optimized URL with default config', () => {\n      const result = generateOptimizedImageUrl('https://example.com/image.jpg', 800, 600);\n\n      expect(result).toContain('https://example.com/image.jpg?');\n      expect(result).toContain('q=75');\n      expect(result).toContain('f=webp');\n      expect(result).toContain('w=800');\n      expect(result).toContain('h=600');\n    });\n\n    it('should generate optimized URL with custom config', () => {\n      const config = {\n        quality: 90,\n        format: ImageFormat.AVIF,\n        responsive: false,\n      };\n\n      const result = generateOptimizedImageUrl('https://example.com/image.jpg', 800, 600, config);\n\n      expect(result).toContain('q=90');\n      expect(result).toContain('f=avif');\n      expect(result).not.toContain('w=800');\n      expect(result).not.toContain('h=600');\n    });\n\n    it('should track performance metrics', () => {\n      generateOptimizedImageUrl('https://example.com/image.jpg', 800, 600);\n\n      expect(performanceMonitor.addMetric).toHaveBeenCalledWith(\n        expect.objectContaining({\n          name: 'image_optimization',\n          value: expect.any(Number),\n          timestamp: expect.any(Number),\n          rating: expect.any(String),\n        })\n      );\n    });\n\n    it('should handle errors gracefully', () => {\n      // Mock an error in the generation\n      jest.spyOn(URLSearchParams.prototype, 'toString').mockImplementation(() => {\n        throw new Error('URLSearchParams error');\n      });\n\n      const result = generateOptimizedImageUrl('https://example.com/image.jpg', 800, 600);\n\n      expect(result).toBe('https://example.com/image.jpg');\n      expect(performanceMonitor.addMetric).toHaveBeenCalledWith(\n        expect.objectContaining({\n          name: 'image_optimization_error',\n          rating: 'poor',\n        })\n      );\n    });\n  });\n\n  describe('generateResponsiveImageSources', () => {\n    it('should generate responsive sources for different breakpoints', () => {\n      const sizes = [\n        { width: 400, height: 300, breakpoint: '768px' },\n        { width: 800, height: 600, breakpoint: '1024px' },\n        { width: 1200, height: 900, breakpoint: '1440px' },\n      ];\n\n      const result = generateResponsiveImageSources('https://example.com/image.jpg', sizes);\n\n      expect(result).toHaveLength(3);\n      expect(result[0]).toMatchObject({\n        width: 400,\n        height: 300,\n        media: '(max-width: 768px)',\n      });\n      expect(result[1]).toMatchObject({\n        width: 800,\n        height: 600,\n        media: '(max-width: 1024px)',\n      });\n      expect(result[2]).toMatchObject({\n        width: 1200,\n        height: 900,\n        media: '(max-width: 1440px)',\n      });\n    });\n  });\n\n  describe('generateBlurPlaceholder', () => {\n    it('should generate blur placeholder data URL', () => {\n      const result = generateBlurPlaceholder(10, 10);\n\n      expect(result).toMatch(/^data:image\\/jpeg;base64,/);\n    });\n\n    it('should use default dimensions when not provided', () => {\n      const result = generateBlurPlaceholder();\n\n      expect(result).toMatch(/^data:image\\/jpeg;base64,/);\n    });\n  });\n\n  describe('calculateOptimizationRatio', () => {\n    it('should calculate correct optimization ratio', () => {\n      expect(calculateOptimizationRatio(1000, 300)).toBe(70);\n      expect(calculateOptimizationRatio(1000, 500)).toBe(50);\n      expect(calculateOptimizationRatio(1000, 1000)).toBe(0);\n    });\n\n    it('should handle zero original size', () => {\n      expect(calculateOptimizationRatio(0, 300)).toBe(0);\n    });\n  });\n\n  describe('getOptimalImageFormat', () => {\n    it('should return jpeg as fallback', () => {\n      const result = getOptimalImageFormat();\n      expect(result).toBe('jpeg');\n    });\n  });\n\n  describe('preloadOptimizedImages', () => {\n    beforeEach(() => {\n      // Mock document methods\n      Object.defineProperty(document, 'createElement', {\n        value: jest.fn(() => ({\n          rel: '',\n          as: '',\n          href: '',\n          setAttribute: jest.fn(),\n        })),\n        writable: true,\n      });\n\n      Object.defineProperty(document, 'head', {\n        value: {\n          appendChild: jest.fn(),\n        },\n        writable: true,\n      });\n    });\n\n    it('should preload critical images', () => {\n      const images = [\n        { src: 'https://example.com/image1.jpg', width: 800, height: 600 },\n        { src: 'https://example.com/image2.jpg', width: 400, height: 300 },\n      ];\n\n      preloadOptimizedImages(images);\n\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      expect(document.createElement).toHaveBeenCalledWith('link');\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      expect(document.head.appendChild).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe('setupLazyImageLoading', () => {\n    beforeEach(() => {\n      // Mock IntersectionObserver\n      global.IntersectionObserver = jest.fn().mockImplementation((_callback) => ({\n        observe: jest.fn(),\n        unobserve: jest.fn(),\n        disconnect: jest.fn(),\n      }));\n\n      // Mock document methods\n      Object.defineProperty(document, 'querySelectorAll', {\n        value: jest.fn(() => []),\n        writable: true,\n      });\n    });\n\n    it('should setup lazy loading for images', () => {\n      setupLazyImageLoading();\n\n      expect(global.IntersectionObserver).toHaveBeenCalled();\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      expect(document.querySelectorAll).toHaveBeenCalledWith('img[data-lazy]');\n    });\n\n    it('should handle server-side rendering', () => {\n      // Mock window as undefined\n      const originalWindow = global.window;\n      delete (global as any).window;\n\n      setupLazyImageLoading();\n\n      expect(global.IntersectionObserver).not.toHaveBeenCalled();\n\n      // Restore window\n      global.window = originalWindow;\n    });\n  });\n\n  describe('getImageOptimizationResult', () => {\n    it('should return optimization result with metrics', () => {\n      const result = getImageOptimizationResult(\n        'https://example.com/original.jpg',\n        'https://example.com/optimized.webp',\n        800,\n        600\n      );\n\n      expect(result).toMatchObject({\n        src: 'https://example.com/optimized.webp',\n        width: 800,\n        height: 600,\n        format: 'webp',\n        size: expect.any(Number),\n        optimizationRatio: expect.any(Number),\n      });\n\n      expect(result.optimizationRatio).toBeGreaterThan(0);\n    });\n  });\n});\n"],"version":3}