{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/state/types/types.ts","mappings":";AAAA;;;;;GAKG;;;AAEH,+EAA+E;AAC/E,cAAc;AACd,+EAA+E;AAE/E,2CAA2E;AAAlE,yGAAA,WAAW,OAAA;AAAE,yGAAA,WAAW,OAAA;AAAE,+GAAA,iBAAiB,OAAA","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/state/types/types.ts"],"sourcesContent":["/**\n * State Management Types\n *\n * Universal types for state management that work with any application.\n * Foundation-level only - no overengineering.\n */\n\n// ============================================================================\n// STATE ENUMS\n// ============================================================================\n\nexport { StorageType, Environment, BaseStateProperty } from './stateEnums';\nimport { StorageType } from './stateEnums';\n\n// ============================================================================\n// CORE TYPES\n// ============================================================================\n\nexport interface BaseState {\n  _hydrated: boolean;\n}\n\nexport interface StoreConfig<T> {\n  name: string;\n  initialState: T;\n  persist?: {\n    key: string;\n    storage?: StorageType;\n  };\n  devtools?: boolean;\n}\n\nexport interface EnhancedStore<T> {\n  getState: () => T;\n  setState: (partial: T | Partial<T> | ((state: T) => T | Partial<T>)) => void;\n  subscribe: (listener: (state: T, prevState: T) => void) => () => void;\n  reset: () => void;\n  clearStorage: () => void;\n}\n\n// ============================================================================\n// COMMON STATE PATTERNS\n// ============================================================================\n\n/**\n * Standard async operation state\n */\nexport interface AsyncState<T = unknown> {\n  data: T | null;\n  loading: boolean;\n  error: string | null;\n}\n\n/**\n * Standard pagination state\n */\nexport interface PaginationState {\n  page: number;\n  limit: number;\n  total: number;\n  hasNext: boolean;\n  hasPrev: boolean;\n}\n\n/**\n * Standard filter state\n */\nexport interface FilterState {\n  search: string;\n  filters: Record<string, unknown>;\n  sortBy: string;\n  sortOrder: 'asc' | 'desc';\n}\n\n/**\n * Standard UI state\n */\nexport interface UIState {\n  sidebarOpen: boolean;\n  theme: 'light' | 'dark';\n  currentRoute: string;\n}\n\n// ============================================================================\n// STORE UTILITIES\n// ============================================================================\n\n/**\n * Helper type to extract state type from store\n */\nexport type StoreState<T> = T extends EnhancedStore<infer S> ? S : never;\n\n/**\n * Helper type for store selector functions\n */\nexport type Selector<TStore, TResult> = (state: StoreState<TStore>) => TResult;\n"],"version":3}