{"file":"/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/browser/lib/storage/storage.mock.ts","mappings":";;;AAEA;;;;;GAKG;AACI,IAAM,WAAW,GAAG,UAAC,WAAwC;IAAxC,4BAAA,EAAA,gBAAwC;IAClE,IAAM,KAAK,GAAG,IAAI,GAAG,CAAiB,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;IAEnE,IAAM,WAAW,GAAyB;QACxC,IAAI,MAAM;YACR,OAAO,KAAK,CAAC,IAAI,CAAC;QACpB,CAAC;QAED,OAAO,YAAC,GAAW;YACjB,OAAO,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC;QAChC,CAAC;QAED,OAAO,YAAC,GAAW,EAAE,KAAa;YAChC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACxB,CAAC;QAED,UAAU,YAAC,GAAW;YACpB,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACpB,CAAC;QAED,KAAK;YACH,KAAK,CAAC,KAAK,EAAE,CAAC;QAChB,CAAC;QAED,GAAG,YAAC,KAAa;YACf,IAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;YACtC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC;QAC7B,CAAC;KACF,CAAC;IAEF,OAAO,WAAW,CAAC;AACrB,CAAC,CAAC;AA/BW,QAAA,WAAW,eA+BtB;AAEF,8BAA8B;AAC9B,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,cAAc,EAAE,EAAE,KAAK,EAAE,IAAA,mBAAW,GAAE,EAAE,CAAC,CAAC;AACxE,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,gBAAgB,EAAE,EAAE,KAAK,EAAE,IAAA,mBAAW,GAAE,EAAE,CAAC,CAAC","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/browser/lib/storage/storage.mock.ts"],"sourcesContent":["import { mockStorageInterface } from '../../types/types';\n\n/**\n * Creates a mock storage object for testing\n *\n * @param initialData - Optional initial data to populate the storage\n * @returns A mock storage object that implements StorageMockInterface\n */\nexport const mockStorage = (initialData: Record<string, string> = {}): mockStorageInterface => {\n  const store = new Map<string, string>(Object.entries(initialData));\n\n  const storageMock: mockStorageInterface = {\n    get length() {\n      return store.size;\n    },\n\n    getItem(key: string): string | null {\n      return store.get(key) || null;\n    },\n\n    setItem(key: string, value: string): void {\n      store.set(key, value);\n    },\n\n    removeItem(key: string): void {\n      store.delete(key);\n    },\n\n    clear(): void {\n      store.clear();\n    },\n\n    key(index: number): string | null {\n      const keys = Array.from(store.keys());\n      return keys[index] || null;\n    },\n  };\n\n  return storageMock;\n};\n\n// Replace window storage APIs\nObject.defineProperty(window, 'localStorage', { value: mockStorage() });\nObject.defineProperty(window, 'sessionStorage', { value: mockStorage() });\n"],"version":3}