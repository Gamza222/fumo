5968ecc912f431a0bea895ad3c2586ac
"use strict";
/**
 * Monitoring Configuration Mock
 *
 * Mock configuration factory for monitoring-related configurations.
 * Provides consistent test configurations across all monitoring tests.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeConfigs = exports.createConfigForScenario = exports.mockDisabledConfig = exports.mockMinimalConfig = exports.mockProductionConfig = exports.mockDevelopmentConfig = exports.mockDashboardConfig = exports.mockAlertsConfig = exports.mockAnalyticsConfig = exports.mockHealthCheckConfig = exports.mockMonitoringConfig = exports.createMonitoringConfig = void 0;
// ============================================================================
// BASE CONFIGURATION GENERATORS
// ============================================================================
/**
 * Create a monitoring configuration with customizable options
 */
var createMonitoringConfig = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    return __assign({ healthCheck: {
            enabled: true,
            interval: 30000,
            timeout: 5000,
            services: ['database', 'api', 'cache', 'storage'],
        }, analytics: {
            enabled: true,
            respectDoNotTrack: true,
            anonymizeIp: true,
            sampleRate: 1.0,
            debug: false,
        }, alerts: {
            enabled: true,
        }, dashboard: {
            refreshInterval: 10000,
            maxAlerts: 100,
            maxMetrics: 1000,
        } }, overrides);
};
exports.createMonitoringConfig = createMonitoringConfig;
// ============================================================================
// DEFAULT CONFIGURATIONS
// ============================================================================
/**
 * Default monitoring configuration for testing
 */
exports.mockMonitoringConfig = (0, exports.createMonitoringConfig)();
/**
 * Health check specific configuration
 */
exports.mockHealthCheckConfig = (0, exports.createMonitoringConfig)({
    healthCheck: {
        enabled: true,
        interval: 15000,
        timeout: 3000,
        services: ['database', 'api'],
    },
    analytics: {
        enabled: false,
        respectDoNotTrack: true,
        anonymizeIp: true,
        sampleRate: 1.0,
        debug: false,
    },
    alerts: {
        enabled: false,
    },
});
/**
 * Analytics specific configuration
 */
exports.mockAnalyticsConfig = (0, exports.createMonitoringConfig)({
    analytics: {
        enabled: true,
        respectDoNotTrack: true,
        anonymizeIp: true,
        sampleRate: 0.5,
        debug: true,
    },
    healthCheck: {
        enabled: false,
        interval: 30000,
        timeout: 5000,
        services: [],
    },
    alerts: {
        enabled: false,
    },
});
/**
 * Alerts specific configuration
 */
exports.mockAlertsConfig = (0, exports.createMonitoringConfig)({
    alerts: {
        enabled: true,
        webhook: 'https://hooks.slack.com/services/test',
        email: 'alerts@company.com',
    },
    healthCheck: {
        enabled: true,
        interval: 10000,
        timeout: 2000,
        services: ['database', 'api', 'cache'],
    },
});
/**
 * Dashboard specific configuration
 */
exports.mockDashboardConfig = (0, exports.createMonitoringConfig)({
    dashboard: {
        refreshInterval: 5000,
        maxAlerts: 50,
        maxMetrics: 500,
    },
});
// ============================================================================
// SPECIALIZED CONFIGURATIONS
// ============================================================================
/**
 * Development environment configuration
 */
exports.mockDevelopmentConfig = (0, exports.createMonitoringConfig)({
    analytics: {
        enabled: true,
        respectDoNotTrack: false,
        anonymizeIp: false,
        sampleRate: 1.0,
        debug: true,
    },
    healthCheck: {
        enabled: true,
        interval: 10000,
        timeout: 2000,
        services: ['database', 'api', 'cache', 'storage'],
    },
    alerts: {
        enabled: true,
        webhook: 'https://dev-hooks.slack.com/services/test',
    },
});
/**
 * Production environment configuration
 */
exports.mockProductionConfig = (0, exports.createMonitoringConfig)({
    analytics: {
        enabled: true,
        respectDoNotTrack: true,
        anonymizeIp: true,
        sampleRate: 0.1,
        debug: false,
    },
    healthCheck: {
        enabled: true,
        interval: 60000,
        timeout: 10000,
        services: ['database', 'api', 'cache', 'storage'],
    },
    alerts: {
        enabled: true,
        webhook: 'https://prod-hooks.slack.com/services/prod',
        email: 'prod-alerts@company.com',
    },
});
/**
 * Minimal configuration for basic testing
 */
exports.mockMinimalConfig = (0, exports.createMonitoringConfig)({
    healthCheck: {
        enabled: true,
        interval: 30000,
        timeout: 5000,
        services: ['database'],
    },
    analytics: {
        enabled: false,
        respectDoNotTrack: true,
        anonymizeIp: true,
        sampleRate: 1.0,
        debug: false,
    },
    alerts: {
        enabled: false,
    },
    dashboard: {
        refreshInterval: 10000,
        maxAlerts: 10,
        maxMetrics: 100,
    },
});
/**
 * Disabled configuration
 */
exports.mockDisabledConfig = (0, exports.createMonitoringConfig)({
    healthCheck: {
        enabled: false,
        interval: 30000,
        timeout: 5000,
        services: [],
    },
    analytics: {
        enabled: false,
        respectDoNotTrack: true,
        anonymizeIp: true,
        sampleRate: 1.0,
        debug: false,
    },
    alerts: {
        enabled: false,
    },
});
// ============================================================================
// CONFIGURATION UTILITIES
// ============================================================================
/**
 * Create configuration for specific test scenario
 */
var createConfigForScenario = function (scenario) {
    switch (scenario) {
        case 'healthy':
            return exports.mockMonitoringConfig;
        case 'unhealthy':
            return (0, exports.createMonitoringConfig)({
                healthCheck: {
                    enabled: true,
                    interval: 5000,
                    timeout: 1000,
                    services: ['database', 'api', 'cache', 'storage'],
                },
                alerts: {
                    enabled: true,
                    webhook: 'https://alerts.company.com/webhook',
                },
            });
        case 'degraded':
            return (0, exports.createMonitoringConfig)({
                healthCheck: {
                    enabled: true,
                    interval: 10000,
                    timeout: 3000,
                    services: ['database', 'api'],
                },
            });
        case 'minimal':
            return exports.mockMinimalConfig;
        case 'disabled':
            return exports.mockDisabledConfig;
        default:
            return exports.mockMonitoringConfig;
    }
};
exports.createConfigForScenario = createConfigForScenario;
/**
 * Merge configurations for complex test scenarios
 */
var mergeConfigs = function () {
    var configs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        configs[_i] = arguments[_i];
    }
    var result = __assign({}, exports.mockMonitoringConfig);
    for (var _a = 0, configs_1 = configs; _a < configs_1.length; _a++) {
        var config = configs_1[_a];
        result = __assign(__assign(__assign({}, result), config), { healthCheck: __assign(__assign({}, result.healthCheck), config.healthCheck), analytics: __assign(__assign({}, result.analytics), config.analytics), alerts: __assign(__assign({}, result.alerts), config.alerts), dashboard: __assign(__assign({}, result.dashboard), config.dashboard) });
    }
    return result;
};
exports.mergeConfigs = mergeConfigs;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,