{"file":"/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/monitoring/monitoringConfig.mock.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/monitoring/monitoringConfig.mock.ts"],"sourcesContent":["/**\n * Monitoring Configuration Mock\n *\n * Mock configuration factory for monitoring-related configurations.\n * Provides consistent test configurations across all monitoring tests.\n */\n\nimport { MonitoringConfig } from '@/infrastructure/monitoring/types/monitoring.types';\n\n// ============================================================================\n// BASE CONFIGURATION GENERATORS\n// ============================================================================\n\n/**\n * Create a monitoring configuration with customizable options\n */\nexport const createMonitoringConfig = (\n  overrides: Partial<MonitoringConfig> = {}\n): MonitoringConfig => {\n  return {\n    healthCheck: {\n      enabled: true,\n      interval: 30000,\n      timeout: 5000,\n      services: ['database', 'api', 'cache', 'storage'],\n    },\n    analytics: {\n      enabled: true,\n      respectDoNotTrack: true,\n      anonymizeIp: true,\n      sampleRate: 1.0,\n      debug: false,\n    },\n    alerts: {\n      enabled: true,\n    },\n    dashboard: {\n      refreshInterval: 10000,\n      maxAlerts: 100,\n      maxMetrics: 1000,\n    },\n    ...overrides,\n  };\n};\n\n// ============================================================================\n// DEFAULT CONFIGURATIONS\n// ============================================================================\n\n/**\n * Default monitoring configuration for testing\n */\nexport const mockMonitoringConfig: MonitoringConfig = createMonitoringConfig();\n\n/**\n * Health check specific configuration\n */\nexport const mockHealthCheckConfig: MonitoringConfig = createMonitoringConfig({\n  healthCheck: {\n    enabled: true,\n    interval: 15000,\n    timeout: 3000,\n    services: ['database', 'api'],\n  },\n  analytics: {\n    enabled: false,\n    respectDoNotTrack: true,\n    anonymizeIp: true,\n    sampleRate: 1.0,\n    debug: false,\n  },\n  alerts: {\n    enabled: false,\n  },\n});\n\n/**\n * Analytics specific configuration\n */\nexport const mockAnalyticsConfig: MonitoringConfig = createMonitoringConfig({\n  analytics: {\n    enabled: true,\n    respectDoNotTrack: true,\n    anonymizeIp: true,\n    sampleRate: 0.5,\n    debug: true,\n  },\n  healthCheck: {\n    enabled: false,\n    interval: 30000,\n    timeout: 5000,\n    services: [],\n  },\n  alerts: {\n    enabled: false,\n  },\n});\n\n/**\n * Alerts specific configuration\n */\nexport const mockAlertsConfig: MonitoringConfig = createMonitoringConfig({\n  alerts: {\n    enabled: true,\n    webhook: 'https://hooks.slack.com/services/test',\n    email: 'alerts@company.com',\n  },\n  healthCheck: {\n    enabled: true,\n    interval: 10000,\n    timeout: 2000,\n    services: ['database', 'api', 'cache'],\n  },\n});\n\n/**\n * Dashboard specific configuration\n */\nexport const mockDashboardConfig: MonitoringConfig = createMonitoringConfig({\n  dashboard: {\n    refreshInterval: 5000,\n    maxAlerts: 50,\n    maxMetrics: 500,\n  },\n});\n\n// ============================================================================\n// SPECIALIZED CONFIGURATIONS\n// ============================================================================\n\n/**\n * Development environment configuration\n */\nexport const mockDevelopmentConfig: MonitoringConfig = createMonitoringConfig({\n  analytics: {\n    enabled: true,\n    respectDoNotTrack: false,\n    anonymizeIp: false,\n    sampleRate: 1.0,\n    debug: true,\n  },\n  healthCheck: {\n    enabled: true,\n    interval: 10000,\n    timeout: 2000,\n    services: ['database', 'api', 'cache', 'storage'],\n  },\n  alerts: {\n    enabled: true,\n    webhook: 'https://dev-hooks.slack.com/services/test',\n  },\n});\n\n/**\n * Production environment configuration\n */\nexport const mockProductionConfig: MonitoringConfig = createMonitoringConfig({\n  analytics: {\n    enabled: true,\n    respectDoNotTrack: true,\n    anonymizeIp: true,\n    sampleRate: 0.1,\n    debug: false,\n  },\n  healthCheck: {\n    enabled: true,\n    interval: 60000,\n    timeout: 10000,\n    services: ['database', 'api', 'cache', 'storage'],\n  },\n  alerts: {\n    enabled: true,\n    webhook: 'https://prod-hooks.slack.com/services/prod',\n    email: 'prod-alerts@company.com',\n  },\n});\n\n/**\n * Minimal configuration for basic testing\n */\nexport const mockMinimalConfig: MonitoringConfig = createMonitoringConfig({\n  healthCheck: {\n    enabled: true,\n    interval: 30000,\n    timeout: 5000,\n    services: ['database'],\n  },\n  analytics: {\n    enabled: false,\n    respectDoNotTrack: true,\n    anonymizeIp: true,\n    sampleRate: 1.0,\n    debug: false,\n  },\n  alerts: {\n    enabled: false,\n  },\n  dashboard: {\n    refreshInterval: 10000,\n    maxAlerts: 10,\n    maxMetrics: 100,\n  },\n});\n\n/**\n * Disabled configuration\n */\nexport const mockDisabledConfig: MonitoringConfig = createMonitoringConfig({\n  healthCheck: {\n    enabled: false,\n    interval: 30000,\n    timeout: 5000,\n    services: [],\n  },\n  analytics: {\n    enabled: false,\n    respectDoNotTrack: true,\n    anonymizeIp: true,\n    sampleRate: 1.0,\n    debug: false,\n  },\n  alerts: {\n    enabled: false,\n  },\n});\n\n// ============================================================================\n// CONFIGURATION UTILITIES\n// ============================================================================\n\n/**\n * Create configuration for specific test scenario\n */\nexport const createConfigForScenario = (\n  scenario: 'healthy' | 'unhealthy' | 'degraded' | 'minimal' | 'disabled'\n): MonitoringConfig => {\n  switch (scenario) {\n    case 'healthy':\n      return mockMonitoringConfig;\n    case 'unhealthy':\n      return createMonitoringConfig({\n        healthCheck: {\n          enabled: true,\n          interval: 5000,\n          timeout: 1000,\n          services: ['database', 'api', 'cache', 'storage'],\n        },\n        alerts: {\n          enabled: true,\n          webhook: 'https://alerts.company.com/webhook',\n        },\n      });\n    case 'degraded':\n      return createMonitoringConfig({\n        healthCheck: {\n          enabled: true,\n          interval: 10000,\n          timeout: 3000,\n          services: ['database', 'api'],\n        },\n      });\n    case 'minimal':\n      return mockMinimalConfig;\n    case 'disabled':\n      return mockDisabledConfig;\n    default:\n      return mockMonitoringConfig;\n  }\n};\n\n/**\n * Merge configurations for complex test scenarios\n */\nexport const mergeConfigs = (...configs: Partial<MonitoringConfig>[]): MonitoringConfig => {\n  let result = { ...mockMonitoringConfig };\n\n  for (const config of configs) {\n    result = {\n      ...result,\n      ...config,\n      healthCheck: { ...result.healthCheck, ...config.healthCheck },\n      analytics: { ...result.analytics, ...config.analytics },\n      alerts: { ...result.alerts, ...config.alerts },\n      dashboard: { ...result.dashboard, ...config.dashboard },\n    };\n  }\n\n  return result;\n};\n"],"version":3}