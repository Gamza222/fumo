{"version":3,"names":["auth_types_1","cov_2l90umq93f","s","require","exports","authConfig","provider","AuthProvider","Local","tokenType","AuthTokenType","Bearer","tokenExpiry","refreshThreshold","scopes","AuthScope","Read","Write","getAuthHeaders","token","f","b","Authorization","concat","isTokenExpired","parts","split","length","payload","JSON","parse","atob","currentTime","Date","now","exp","_a","shouldRefreshToken"],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/config/auth/auth.config.ts"],"sourcesContent":["import { AuthConfig, AuthProvider, AuthScope, AuthTokenType, JwtPayload } from './auth.types';\n\n/**\n * Default authentication configuration\n */\nexport const authConfig: AuthConfig = {\n  provider: AuthProvider.Local,\n  tokenType: AuthTokenType.Bearer,\n  tokenExpiry: 3600, // 1 hour\n  refreshThreshold: 300, // 5 minutes before expiry\n  scopes: [AuthScope.Read, AuthScope.Write],\n};\n\n/**\n * Generate authentication headers for API requests\n * @param token - Authentication token\n * @param tokenType - Type of token (default: Bearer)\n * @returns Headers object for HTTP requests\n */\nexport const getAuthHeaders = (\n  token: string,\n  tokenType: AuthTokenType = AuthTokenType.Bearer\n): Record<string, string> => {\n  return {\n    Authorization: `${tokenType} ${token}`,\n    'Content-Type': 'application/json',\n  };\n};\n\n/**\n * Check if a JWT token is expired\n * @param token - JWT token to check\n * @returns true if token is expired\n */\nexport const isTokenExpired = (token: string): boolean => {\n  try {\n    const parts = token.split('.');\n    if (parts.length !== 3 || !parts[1]) return true;\n    const payload = JSON.parse(atob(parts[1])) as JwtPayload;\n    const currentTime = Date.now() / 1000;\n    return payload.exp < currentTime;\n  } catch {\n    return true; // If we can't parse it, consider it expired\n  }\n};\n\n/**\n * Check if token needs refresh based on threshold\n * @param token - JWT token to check\n * @returns true if token should be refreshed\n */\nexport const shouldRefreshToken = (token: string): boolean => {\n  try {\n    const parts = token.split('.');\n    if (parts.length !== 3 || !parts[1]) return true;\n    const payload = JSON.parse(atob(parts[1])) as JwtPayload;\n    const currentTime = Date.now() / 1000;\n    return payload.exp - currentTime < authConfig.refreshThreshold;\n  } catch {\n    return true;\n  }\n};\n"],"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","ignoreList":[]}