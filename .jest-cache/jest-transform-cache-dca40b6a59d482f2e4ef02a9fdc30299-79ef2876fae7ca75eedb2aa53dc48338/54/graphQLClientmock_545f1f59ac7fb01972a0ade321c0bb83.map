{"version":3,"names":["mockGraphQLClient","cov_leylhmn5g","s","f","baseURL","b","cache","Map","prototype","query","operation","Promise","cacheKey","generateCacheKey","has","get","resolve","setTimeout","_a","sent","mockResponse","data","errors","set","mutation","_operation","concat","request","JSON","stringify","variables","clearCache","clear","getCacheSize","size","getBaseURL","exports","mockGraphQLClientInstance"],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/api/lib/graphql/graphQLClient.mock.ts"],"sourcesContent":["import { mockGraphQLOperationInterface, mockGraphQLResponseInterface } from '../../types/types';\n\n/**\n * Mock GraphQL client for testing\n */\nexport class mockGraphQLClient {\n  private cache = new Map<string, mockGraphQLResponseInterface>();\n\n  constructor(private baseURL: string = 'https://api.example.com/graphql') {\n    // BaseURL stored for potential future use in logging or debugging\n  }\n\n  async query<T = unknown>(\n    operation: mockGraphQLOperationInterface\n  ): Promise<mockGraphQLResponseInterface<T>> {\n    const cacheKey = this.generateCacheKey(operation);\n\n    if (this.cache.has(cacheKey)) {\n      return this.cache.get(cacheKey)! as mockGraphQLResponseInterface<T>;\n    }\n\n    // Simulate network delay\n    await new Promise((resolve) => setTimeout(resolve, 10));\n\n    const mockResponse: mockGraphQLResponseInterface<T> = {\n      data: {} as T,\n      errors: [],\n    };\n\n    this.cache.set(cacheKey, mockResponse);\n    return mockResponse;\n  }\n\n  async mutation<T = unknown>(\n    _operation: mockGraphQLOperationInterface\n  ): Promise<mockGraphQLResponseInterface<T>> {\n    // Simulate network delay\n    await new Promise((resolve) => setTimeout(resolve, 10));\n\n    return {\n      data: {} as T,\n      errors: [],\n    };\n  }\n\n  private generateCacheKey(operation: mockGraphQLOperationInterface): string {\n    return `${operation.request.query}:${JSON.stringify(operation.request.variables || {})}`;\n  }\n\n  clearCache(): void {\n    this.cache.clear();\n  }\n\n  getCacheSize(): number {\n    return this.cache.size;\n  }\n\n  getBaseURL(): string {\n    return this.baseURL;\n  }\n}\n\n// Default instance for testing\nexport const mockGraphQLClientInstance = new mockGraphQLClient();\n"],"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","ignoreList":[]}