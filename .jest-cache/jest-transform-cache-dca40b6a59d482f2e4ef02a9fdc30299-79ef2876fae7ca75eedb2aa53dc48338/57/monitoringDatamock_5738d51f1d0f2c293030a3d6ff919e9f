0783aa08f0da3fbcd0c2f3b054158ba4
"use strict";
/**
 * Monitoring Data Mock
 *
 * Mock data factory for monitoring-related data structures.
 * Provides consistent test data across all monitoring tests.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCustomDashboardData = exports.generateAlertsArray = exports.generateServiceHealthArray = exports.mockMetrics = exports.mockAlerts = exports.mockAnalyticsEvent = exports.mockAnalyticsSession = exports.mockDashboardDataNoAlerts = exports.mockDashboardDataWithAlerts = exports.mockDashboardData = exports.mockDegradedSystemHealth = exports.mockUnhealthySystemHealth = exports.mockHealthySystemHealth = exports.createMonitoringAlert = exports.createServiceHealth = void 0;
var monitoring_types_1 = require("@/infrastructure/monitoring/types/monitoring.types");
// ============================================================================
// BASE DATA GENERATORS
// ============================================================================
/**
 * Create a service health object
 */
var createServiceHealth = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    return __assign({ name: 'database', status: monitoring_types_1.HealthStatus.HEALTHY, responseTime: 5, lastCheck: new Date('2024-01-01T00:00:00Z') }, overrides);
};
exports.createServiceHealth = createServiceHealth;
/**
 * Create a monitoring alert object
 */
var createMonitoringAlert = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    return __assign({ id: 'alert_123', level: monitoring_types_1.AlertLevel.INFO, message: 'Test alert message', timestamp: new Date('2024-01-01T00:00:00Z'), resolved: false }, overrides);
};
exports.createMonitoringAlert = createMonitoringAlert;
// ============================================================================
// SYSTEM HEALTH MOCKS
// ============================================================================
/**
 * Default healthy system health data
 */
exports.mockHealthySystemHealth = {
    status: monitoring_types_1.HealthStatus.HEALTHY,
    timestamp: new Date('2024-01-01T00:00:00Z'),
    uptime: 3600000, // 1 hour
    version: '1.0.0',
    versionDisplay: '1.0.0-dev',
    versionInfo: {
        major: 1,
        minor: 0,
        patch: 0,
        versionCode: 10000,
        commitHash: 'abc123',
        branch: 'main',
    },
    environment: 'development',
    services: [
        (0, exports.createServiceHealth)({
            name: 'database',
            status: monitoring_types_1.HealthStatus.HEALTHY,
            responseTime: 5,
        }),
        (0, exports.createServiceHealth)({
            name: 'api',
            status: monitoring_types_1.HealthStatus.HEALTHY,
            responseTime: 10,
        }),
        (0, exports.createServiceHealth)({
            name: 'cache',
            status: monitoring_types_1.HealthStatus.HEALTHY,
            responseTime: 2,
        }),
        (0, exports.createServiceHealth)({
            name: 'storage',
            status: monitoring_types_1.HealthStatus.HEALTHY,
            responseTime: 8,
        }),
    ],
    summary: {
        total: 4,
        healthy: 4,
        degraded: 0,
        unhealthy: 0,
    },
};
/**
 * Unhealthy system health data
 */
exports.mockUnhealthySystemHealth = {
    status: monitoring_types_1.HealthStatus.UNHEALTHY,
    timestamp: new Date('2024-01-01T00:00:00Z'),
    uptime: 3600000,
    version: '1.0.0',
    versionDisplay: '1.0.0-dev',
    versionInfo: {
        major: 1,
        minor: 0,
        patch: 0,
        versionCode: 10000,
        commitHash: 'abc123',
        branch: 'main',
    },
    environment: 'development',
    services: [
        (0, exports.createServiceHealth)({
            name: 'database',
            status: monitoring_types_1.HealthStatus.UNHEALTHY,
            responseTime: 5000,
            error: 'Connection timeout',
        }),
        (0, exports.createServiceHealth)({
            name: 'api',
            status: monitoring_types_1.HealthStatus.HEALTHY,
            responseTime: 10,
        }),
    ],
    summary: {
        total: 2,
        healthy: 1,
        degraded: 0,
        unhealthy: 1,
    },
};
/**
 * Degraded system health data
 */
exports.mockDegradedSystemHealth = {
    status: monitoring_types_1.HealthStatus.DEGRADED,
    timestamp: new Date('2024-01-01T00:00:00Z'),
    uptime: 3600000,
    version: '1.0.0',
    versionDisplay: '1.0.0-dev',
    versionInfo: {
        major: 1,
        minor: 0,
        patch: 0,
        versionCode: 10000,
        commitHash: 'abc123',
        branch: 'main',
    },
    environment: 'development',
    services: [
        (0, exports.createServiceHealth)({
            name: 'database',
            status: monitoring_types_1.HealthStatus.HEALTHY,
            responseTime: 5,
        }),
        (0, exports.createServiceHealth)({
            name: 'cache',
            status: monitoring_types_1.HealthStatus.DEGRADED,
            responseTime: 1000,
            error: 'High latency',
        }),
    ],
    summary: {
        total: 2,
        healthy: 1,
        degraded: 1,
        unhealthy: 0,
    },
};
// ============================================================================
// DASHBOARD DATA MOCKS
// ============================================================================
/**
 * Default dashboard data with healthy system
 */
exports.mockDashboardData = {
    systemHealth: exports.mockHealthySystemHealth,
    recentAlerts: [
        (0, exports.createMonitoringAlert)({
            id: 'alert_1',
            level: monitoring_types_1.AlertLevel.INFO,
            message: 'System started successfully',
            timestamp: new Date('2024-01-01T00:00:00Z'),
        }),
    ],
    metrics: [
        {
            name: 'cpu_usage',
            value: 45.5,
            unit: 'percent',
            timestamp: new Date('2024-01-01T00:00:00Z'),
            tags: { server: 'web-01' },
        },
        {
            name: 'memory_usage',
            value: 67.2,
            unit: 'percent',
            timestamp: new Date('2024-01-01T00:00:00Z'),
            tags: { server: 'web-01' },
        },
    ],
    analytics: {
        totalEvents: 100,
        activeSessions: 5,
        topPages: [
            { path: '/', views: 50 },
            { path: '/dashboard', views: 25 },
            { path: '/settings', views: 15 },
        ],
    },
};
/**
 * Dashboard data with alerts
 */
exports.mockDashboardDataWithAlerts = __assign(__assign({}, exports.mockDashboardData), { recentAlerts: [
        (0, exports.createMonitoringAlert)({
            id: 'alert_1',
            level: monitoring_types_1.AlertLevel.WARNING,
            message: 'High memory usage detected',
            timestamp: new Date('2024-01-01T00:00:00Z'),
        }),
        (0, exports.createMonitoringAlert)({
            id: 'alert_2',
            level: monitoring_types_1.AlertLevel.ERROR,
            message: 'Database connection failed',
            timestamp: new Date('2024-01-01T00:00:00Z'),
        }),
        (0, exports.createMonitoringAlert)({
            id: 'alert_3',
            level: monitoring_types_1.AlertLevel.CRITICAL,
            message: 'Service unavailable',
            timestamp: new Date('2024-01-01T00:00:00Z'),
        }),
    ] });
/**
 * Dashboard data with no alerts
 */
exports.mockDashboardDataNoAlerts = __assign(__assign({}, exports.mockDashboardData), { recentAlerts: [] });
// ============================================================================
// ANALYTICS DATA MOCKS
// ============================================================================
/**
 * Default analytics session data
 */
exports.mockAnalyticsSession = {
    id: 'session_123456',
    startTime: new Date('2024-01-01T00:00:00Z'),
    lastActivity: new Date('2024-01-01T00:30:00Z'),
    pageViews: 10,
    events: 25,
    userId: 'user_123',
};
/**
 * Analytics event data
 */
exports.mockAnalyticsEvent = {
    id: 'event_123',
    type: monitoring_types_1.AnalyticsEventType.PAGE_VIEW,
    name: 'page_view',
    timestamp: new Date('2024-01-01T00:00:00Z'),
    userId: 'user_123',
    sessionId: 'session_123456',
    properties: {
        path: '/dashboard',
        referrer: 'https://google.com',
    },
    metadata: {
        userAgent: 'Mozilla/5.0...',
        screenResolution: '1920x1080',
    },
};
// ============================================================================
// ALERT DATA MOCKS
// ============================================================================
/**
 * Various alert types for testing
 */
exports.mockAlerts = {
    info: (0, exports.createMonitoringAlert)({
        level: monitoring_types_1.AlertLevel.INFO,
        message: 'Information alert',
    }),
    warning: (0, exports.createMonitoringAlert)({
        level: monitoring_types_1.AlertLevel.WARNING,
        message: 'Warning alert',
    }),
    error: (0, exports.createMonitoringAlert)({
        level: monitoring_types_1.AlertLevel.ERROR,
        message: 'Error alert',
    }),
    critical: (0, exports.createMonitoringAlert)({
        level: monitoring_types_1.AlertLevel.CRITICAL,
        message: 'Critical alert',
    }),
};
// ============================================================================
// METRIC DATA MOCKS
// ============================================================================
/**
 * Performance metrics for testing
 */
exports.mockMetrics = {
    cpu: {
        name: 'cpu_usage',
        value: 45.5,
        unit: 'percent',
        timestamp: new Date('2024-01-01T00:00:00Z'),
        tags: { server: 'web-01' },
    },
    memory: {
        name: 'memory_usage',
        value: 67.2,
        unit: 'percent',
        timestamp: new Date('2024-01-01T00:00:00Z'),
        tags: { server: 'web-01' },
    },
    responseTime: {
        name: 'api_response_time',
        value: 150,
        unit: 'ms',
        timestamp: new Date('2024-01-01T00:00:00Z'),
        tags: { endpoint: '/api/users' },
    },
};
// ============================================================================
// DATA GENERATORS
// ============================================================================
/**
 * Generate multiple service health objects
 */
var generateServiceHealthArray = function (count, baseStatus) {
    if (baseStatus === void 0) { baseStatus = monitoring_types_1.HealthStatus.HEALTHY; }
    return Array.from({ length: count }, function (_, index) {
        return (0, exports.createServiceHealth)({
            name: "service_".concat(index + 1),
            status: baseStatus,
            responseTime: Math.random() * 100,
        });
    });
};
exports.generateServiceHealthArray = generateServiceHealthArray;
/**
 * Generate multiple alerts
 */
var generateAlertsArray = function (count, level) {
    if (level === void 0) { level = monitoring_types_1.AlertLevel.INFO; }
    return Array.from({ length: count }, function (_, index) {
        return (0, exports.createMonitoringAlert)({
            id: "alert_".concat(index + 1),
            level: level,
            message: "Test alert ".concat(index + 1),
        });
    });
};
exports.generateAlertsArray = generateAlertsArray;
/**
 * Create custom dashboard data
 */
var createCustomDashboardData = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    return __assign(__assign({}, exports.mockDashboardData), overrides);
};
exports.createCustomDashboardData = createCustomDashboardData;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,