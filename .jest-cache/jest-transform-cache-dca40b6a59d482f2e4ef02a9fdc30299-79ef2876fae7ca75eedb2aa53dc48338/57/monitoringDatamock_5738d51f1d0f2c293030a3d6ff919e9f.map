{"file":"/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/monitoring/monitoringData.mock.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/monitoring/monitoringData.mock.ts"],"sourcesContent":["/**\n * Monitoring Data Mock\n *\n * Mock data factory for monitoring-related data structures.\n * Provides consistent test data across all monitoring tests.\n */\n\nimport {\n  AlertLevel,\n  AnalyticsEventType,\n  HealthStatus,\n  MonitoringAlert,\n  MonitoringDashboardData,\n  ServiceHealth,\n  SystemHealth,\n} from '@/infrastructure/monitoring/types/monitoring.types';\n\n// ============================================================================\n// BASE DATA GENERATORS\n// ============================================================================\n\n/**\n * Create a service health object\n */\nexport const createServiceHealth = (overrides: Partial<ServiceHealth> = {}): ServiceHealth => {\n  return {\n    name: 'database',\n    status: HealthStatus.HEALTHY,\n    responseTime: 5,\n    lastCheck: new Date('2024-01-01T00:00:00Z'),\n    ...overrides,\n  };\n};\n\n/**\n * Create a monitoring alert object\n */\nexport const createMonitoringAlert = (\n  overrides: Partial<MonitoringAlert> = {}\n): MonitoringAlert => {\n  return {\n    id: 'alert_123',\n    level: AlertLevel.INFO,\n    message: 'Test alert message',\n    timestamp: new Date('2024-01-01T00:00:00Z'),\n    resolved: false,\n    ...overrides,\n  };\n};\n\n// ============================================================================\n// SYSTEM HEALTH MOCKS\n// ============================================================================\n\n/**\n * Default healthy system health data\n */\nexport const mockHealthySystemHealth: SystemHealth = {\n  status: HealthStatus.HEALTHY,\n  timestamp: new Date('2024-01-01T00:00:00Z'),\n  uptime: 3600000, // 1 hour\n  version: '1.0.0',\n  versionDisplay: '1.0.0-dev',\n  versionInfo: {\n    major: 1,\n    minor: 0,\n    patch: 0,\n    versionCode: 10000,\n    commitHash: 'abc123',\n    branch: 'main',\n  },\n  environment: 'development',\n  services: [\n    createServiceHealth({\n      name: 'database',\n      status: HealthStatus.HEALTHY,\n      responseTime: 5,\n    }),\n    createServiceHealth({\n      name: 'api',\n      status: HealthStatus.HEALTHY,\n      responseTime: 10,\n    }),\n    createServiceHealth({\n      name: 'cache',\n      status: HealthStatus.HEALTHY,\n      responseTime: 2,\n    }),\n    createServiceHealth({\n      name: 'storage',\n      status: HealthStatus.HEALTHY,\n      responseTime: 8,\n    }),\n  ],\n  summary: {\n    total: 4,\n    healthy: 4,\n    degraded: 0,\n    unhealthy: 0,\n  },\n};\n\n/**\n * Unhealthy system health data\n */\nexport const mockUnhealthySystemHealth: SystemHealth = {\n  status: HealthStatus.UNHEALTHY,\n  timestamp: new Date('2024-01-01T00:00:00Z'),\n  uptime: 3600000,\n  version: '1.0.0',\n  versionDisplay: '1.0.0-dev',\n  versionInfo: {\n    major: 1,\n    minor: 0,\n    patch: 0,\n    versionCode: 10000,\n    commitHash: 'abc123',\n    branch: 'main',\n  },\n  environment: 'development',\n  services: [\n    createServiceHealth({\n      name: 'database',\n      status: HealthStatus.UNHEALTHY,\n      responseTime: 5000,\n      error: 'Connection timeout',\n    }),\n    createServiceHealth({\n      name: 'api',\n      status: HealthStatus.HEALTHY,\n      responseTime: 10,\n    }),\n  ],\n  summary: {\n    total: 2,\n    healthy: 1,\n    degraded: 0,\n    unhealthy: 1,\n  },\n};\n\n/**\n * Degraded system health data\n */\nexport const mockDegradedSystemHealth: SystemHealth = {\n  status: HealthStatus.DEGRADED,\n  timestamp: new Date('2024-01-01T00:00:00Z'),\n  uptime: 3600000,\n  version: '1.0.0',\n  versionDisplay: '1.0.0-dev',\n  versionInfo: {\n    major: 1,\n    minor: 0,\n    patch: 0,\n    versionCode: 10000,\n    commitHash: 'abc123',\n    branch: 'main',\n  },\n  environment: 'development',\n  services: [\n    createServiceHealth({\n      name: 'database',\n      status: HealthStatus.HEALTHY,\n      responseTime: 5,\n    }),\n    createServiceHealth({\n      name: 'cache',\n      status: HealthStatus.DEGRADED,\n      responseTime: 1000,\n      error: 'High latency',\n    }),\n  ],\n  summary: {\n    total: 2,\n    healthy: 1,\n    degraded: 1,\n    unhealthy: 0,\n  },\n};\n\n// ============================================================================\n// DASHBOARD DATA MOCKS\n// ============================================================================\n\n/**\n * Default dashboard data with healthy system\n */\nexport const mockDashboardData: MonitoringDashboardData = {\n  systemHealth: mockHealthySystemHealth,\n  recentAlerts: [\n    createMonitoringAlert({\n      id: 'alert_1',\n      level: AlertLevel.INFO,\n      message: 'System started successfully',\n      timestamp: new Date('2024-01-01T00:00:00Z'),\n    }),\n  ],\n  metrics: [\n    {\n      name: 'cpu_usage',\n      value: 45.5,\n      unit: 'percent',\n      timestamp: new Date('2024-01-01T00:00:00Z'),\n      tags: { server: 'web-01' },\n    },\n    {\n      name: 'memory_usage',\n      value: 67.2,\n      unit: 'percent',\n      timestamp: new Date('2024-01-01T00:00:00Z'),\n      tags: { server: 'web-01' },\n    },\n  ],\n  analytics: {\n    totalEvents: 100,\n    activeSessions: 5,\n    topPages: [\n      { path: '/', views: 50 },\n      { path: '/dashboard', views: 25 },\n      { path: '/settings', views: 15 },\n    ],\n  },\n};\n\n/**\n * Dashboard data with alerts\n */\nexport const mockDashboardDataWithAlerts: MonitoringDashboardData = {\n  ...mockDashboardData,\n  recentAlerts: [\n    createMonitoringAlert({\n      id: 'alert_1',\n      level: AlertLevel.WARNING,\n      message: 'High memory usage detected',\n      timestamp: new Date('2024-01-01T00:00:00Z'),\n    }),\n    createMonitoringAlert({\n      id: 'alert_2',\n      level: AlertLevel.ERROR,\n      message: 'Database connection failed',\n      timestamp: new Date('2024-01-01T00:00:00Z'),\n    }),\n    createMonitoringAlert({\n      id: 'alert_3',\n      level: AlertLevel.CRITICAL,\n      message: 'Service unavailable',\n      timestamp: new Date('2024-01-01T00:00:00Z'),\n    }),\n  ],\n};\n\n/**\n * Dashboard data with no alerts\n */\nexport const mockDashboardDataNoAlerts: MonitoringDashboardData = {\n  ...mockDashboardData,\n  recentAlerts: [],\n};\n\n// ============================================================================\n// ANALYTICS DATA MOCKS\n// ============================================================================\n\n/**\n * Default analytics session data\n */\nexport const mockAnalyticsSession = {\n  id: 'session_123456',\n  startTime: new Date('2024-01-01T00:00:00Z'),\n  lastActivity: new Date('2024-01-01T00:30:00Z'),\n  pageViews: 10,\n  events: 25,\n  userId: 'user_123',\n};\n\n/**\n * Analytics event data\n */\nexport const mockAnalyticsEvent = {\n  id: 'event_123',\n  type: AnalyticsEventType.PAGE_VIEW,\n  name: 'page_view',\n  timestamp: new Date('2024-01-01T00:00:00Z'),\n  userId: 'user_123',\n  sessionId: 'session_123456',\n  properties: {\n    path: '/dashboard',\n    referrer: 'https://google.com',\n  },\n  metadata: {\n    userAgent: 'Mozilla/5.0...',\n    screenResolution: '1920x1080',\n  },\n};\n\n// ============================================================================\n// ALERT DATA MOCKS\n// ============================================================================\n\n/**\n * Various alert types for testing\n */\nexport const mockAlerts = {\n  info: createMonitoringAlert({\n    level: AlertLevel.INFO,\n    message: 'Information alert',\n  }),\n  warning: createMonitoringAlert({\n    level: AlertLevel.WARNING,\n    message: 'Warning alert',\n  }),\n  error: createMonitoringAlert({\n    level: AlertLevel.ERROR,\n    message: 'Error alert',\n  }),\n  critical: createMonitoringAlert({\n    level: AlertLevel.CRITICAL,\n    message: 'Critical alert',\n  }),\n};\n\n// ============================================================================\n// METRIC DATA MOCKS\n// ============================================================================\n\n/**\n * Performance metrics for testing\n */\nexport const mockMetrics = {\n  cpu: {\n    name: 'cpu_usage',\n    value: 45.5,\n    unit: 'percent',\n    timestamp: new Date('2024-01-01T00:00:00Z'),\n    tags: { server: 'web-01' },\n  },\n  memory: {\n    name: 'memory_usage',\n    value: 67.2,\n    unit: 'percent',\n    timestamp: new Date('2024-01-01T00:00:00Z'),\n    tags: { server: 'web-01' },\n  },\n  responseTime: {\n    name: 'api_response_time',\n    value: 150,\n    unit: 'ms',\n    timestamp: new Date('2024-01-01T00:00:00Z'),\n    tags: { endpoint: '/api/users' },\n  },\n};\n\n// ============================================================================\n// DATA GENERATORS\n// ============================================================================\n\n/**\n * Generate multiple service health objects\n */\nexport const generateServiceHealthArray = (\n  count: number,\n  baseStatus: HealthStatus = HealthStatus.HEALTHY\n): ServiceHealth[] => {\n  return Array.from({ length: count }, (_, index) =>\n    createServiceHealth({\n      name: `service_${index + 1}`,\n      status: baseStatus,\n      responseTime: Math.random() * 100,\n    })\n  );\n};\n\n/**\n * Generate multiple alerts\n */\nexport const generateAlertsArray = (\n  count: number,\n  level: AlertLevel = AlertLevel.INFO\n): MonitoringAlert[] => {\n  return Array.from({ length: count }, (_, index) =>\n    createMonitoringAlert({\n      id: `alert_${index + 1}`,\n      level,\n      message: `Test alert ${index + 1}`,\n    })\n  );\n};\n\n/**\n * Create custom dashboard data\n */\nexport const createCustomDashboardData = (\n  overrides: Partial<MonitoringDashboardData> = {}\n): MonitoringDashboardData => {\n  return {\n    ...mockDashboardData,\n    ...overrides,\n  };\n};\n"],"version":3}