d8498c3e9ead82260bca3ff6276292ea
"use strict";
/**
 * Store Factory Tests
 *
 * Real-life enterprise scenarios testing with minimal mocking.
 * Uses existing mock factory patterns.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var createStore_1 = require("./createStore");
var browser_1 = require("@/shared/testing/mocks/browser");
var stateEnums_1 = require("../types/stateEnums");
describe('Store Factory', function () {
    var mockLocalStorage;
    beforeEach(function () {
        // Create fresh localStorage mock for each test
        mockLocalStorage = (0, browser_1.mockStorage)();
        Object.defineProperty(window, 'localStorage', {
            value: mockLocalStorage,
            writable: true,
        });
    });
    afterEach(function () {
        // Clear any pending timers
        jest.clearAllTimers();
        // Clear mock storage
        mockLocalStorage.clear();
    });
    // ============================================================================
    // BASIC STORE CREATION
    // ============================================================================
    describe('Basic Store Creation', function () {
        it('should create a basic store with initial state', function () {
            // Real scenario: simple counter for any app
            var store = (0, createStore_1.createStore)({
                name: 'counter',
                initialState: {
                    count: 0,
                    step: 1,
                    isLoading: false,
                },
            });
            expect(store).toBeDefined();
            expect(typeof store.getState).toBe('function');
            expect(typeof store.setState).toBe('function');
            expect(typeof store.subscribe).toBe('function');
            expect(typeof store.reset).toBe('function');
            expect(typeof store.clearStorage).toBe('function');
        });
        it('should include base state properties', function () {
            // Real scenario: all stores need hydration tracking
            var store = (0, createStore_1.createStore)({
                name: 'counter',
                initialState: { count: 0, step: 1, isLoading: false },
            });
            var state = store.getState();
            expect(state).toHaveProperty('_hydrated');
            expect(state._hydrated).toBe(false);
        });
        it('should initialize with correct values', function () {
            // Real scenario: initial state should be preserved
            var initialTodos = [
                { id: 1, text: 'Test todo', completed: false },
                { id: 2, text: 'Another todo', completed: true },
            ];
            var store = (0, createStore_1.createStore)({
                name: 'todos',
                initialState: {
                    todos: initialTodos,
                    filter: 'all',
                },
            });
            var state = store.getState();
            expect(state.todos).toEqual(initialTodos);
            expect(state.filter).toBe('all');
        });
    });
    // ============================================================================
    // STATE UPDATES
    // ============================================================================
    describe('State Updates', function () {
        it('should update state correctly', function () {
            // Real scenario: incrementing counter
            var store = (0, createStore_1.createStore)({
                name: 'counter',
                initialState: { count: 0, step: 1, isLoading: false },
            });
            store.setState({ count: 5 });
            expect(store.getState().count).toBe(5);
            expect(store.getState().step).toBe(1); // Other properties preserved
        });
        it('should support functional updates', function () {
            // Real scenario: conditional state updates
            var store = (0, createStore_1.createStore)({
                name: 'counter',
                initialState: { count: 0, step: 1, isLoading: false },
            });
            store.setState(function (state) { return ({
                count: state.count + state.step,
            }); });
            expect(store.getState().count).toBe(1);
        });
        it('should reset to initial state', function () {
            // Real scenario: reset form or clear data
            var store = (0, createStore_1.createStore)({
                name: 'counter',
                initialState: { count: 0, step: 1, isLoading: false },
            });
            store.setState({ count: 10, isLoading: true });
            store.reset();
            var state = store.getState();
            expect(state.count).toBe(0);
            expect(state.isLoading).toBe(false);
            expect(state._hydrated).toBe(false); // Base state also reset
        });
    });
    // ============================================================================
    // SUBSCRIPTIONS
    // ============================================================================
    describe('Subscriptions', function () {
        it('should notify subscribers on state change', function () {
            // Real scenario: UI components reacting to state changes
            var store = (0, createStore_1.createStore)({
                name: 'counter',
                initialState: { count: 0, step: 1, isLoading: false },
            });
            var listener = jest.fn();
            var unsubscribe = store.subscribe(listener);
            store.setState({ count: 1 });
            expect(listener).toHaveBeenCalledTimes(1);
            // Zustand subscribe calls with (newState, prevState)
            expect(listener.mock.calls[0][0]).toEqual(expect.objectContaining({ count: 1 }));
            unsubscribe();
        });
        it('should stop notifications after unsubscribe', function () {
            // Real scenario: component unmounting
            var store = (0, createStore_1.createStore)({
                name: 'counter',
                initialState: { count: 0, step: 1, isLoading: false },
            });
            var listener = jest.fn();
            var unsubscribe = store.subscribe(listener);
            unsubscribe();
            store.setState({ count: 1 });
            expect(listener).not.toHaveBeenCalled();
        });
    });
    // ============================================================================
    // PERSISTENCE
    // ============================================================================
    describe('Persistence', function () {
        it('should work without persistence', function () {
            // Real scenario: temporary state that doesn't need persistence
            var store = (0, createStore_1.createStore)({
                name: 'temp-counter',
                initialState: { count: 0, step: 1, isLoading: false },
            });
            store.setState({ count: 5 });
            expect(mockLocalStorage.getItem('temp-counter')).toBeNull();
        });
        it('should enable persistence when configured', function () {
            // Real scenario: user preferences that should persist
            var store = (0, createStore_1.createStore)({
                name: 'persistent-counter',
                initialState: { count: 0, step: 1, isLoading: false },
                persist: {
                    key: 'counter-state',
                    storage: stateEnums_1.StorageType.LOCAL_STORAGE,
                },
            });
            expect(store).toBeDefined();
            expect(typeof store.clearStorage).toBe('function');
        });
        it('should clear storage when requested', function () {
            // Real scenario: user logout, clear stored data
            var store = (0, createStore_1.createStore)({
                name: 'user-counter',
                initialState: { count: 0, step: 1, isLoading: false },
                persist: {
                    key: 'user-counter-data',
                    storage: stateEnums_1.StorageType.LOCAL_STORAGE,
                },
            });
            // Simulate stored data
            mockLocalStorage.setItem('user-counter-data', JSON.stringify({ count: 10 }));
            store.clearStorage();
            expect(mockLocalStorage.getItem('user-counter-data')).toBeNull();
        });
        it('should support sessionStorage', function () {
            // Real scenario: temporary data that should clear on tab close
            var mockSessionStorage = (0, browser_1.mockStorage)();
            Object.defineProperty(window, 'sessionStorage', {
                value: mockSessionStorage,
                writable: true,
            });
            var store = (0, createStore_1.createStore)({
                name: 'session-counter',
                initialState: { count: 0, step: 1, isLoading: false },
                persist: {
                    key: 'session-data',
                    storage: stateEnums_1.StorageType.SESSION_STORAGE,
                },
            });
            expect(store).toBeDefined();
        });
    });
    // ============================================================================
    // DEVTOOLS
    // ============================================================================
    describe('DevTools Integration', function () {
        it('should work without devtools in production', function () {
            // Real scenario: production build without devtools
            var originalEnv = process.env.NODE_ENV;
            Object.defineProperty(process.env, 'NODE_ENV', {
                value: 'production',
                configurable: true,
            });
            var store = (0, createStore_1.createStore)({
                name: 'prod-counter',
                initialState: { count: 0, step: 1, isLoading: false },
                devtools: true,
            });
            expect(store).toBeDefined();
            expect(store.getState().count).toBe(0);
            Object.defineProperty(process.env, 'NODE_ENV', {
                value: originalEnv,
                configurable: true,
            });
        });
        it('should enable devtools in development', function () {
            // Real scenario: development with devtools enabled
            var originalEnv = process.env.NODE_ENV;
            Object.defineProperty(process.env, 'NODE_ENV', {
                value: 'development',
                configurable: true,
            });
            var store = (0, createStore_1.createStore)({
                name: 'dev-counter',
                initialState: { count: 0, step: 1, isLoading: false },
                devtools: true,
            });
            expect(store).toBeDefined();
            expect(store.getState().count).toBe(0);
            Object.defineProperty(process.env, 'NODE_ENV', {
                value: originalEnv,
                configurable: true,
            });
        });
    });
    // ============================================================================
    // SIMPLE STORE FACTORY
    // ============================================================================
    describe('Simple Store Factory', function () {
        it('should create simple store with minimal config', function () {
            // Real scenario: quick store for prototyping
            var store = (0, createStore_1.createSimpleStore)('simple-counter', { count: 0, step: 1, isLoading: false });
            expect(store).toBeDefined();
            expect(store.getState().count).toBe(0);
            expect(typeof store.setState).toBe('function');
        });
        it('should create simple store with persistence', function () {
            // Real scenario: simple persistent store
            var store = (0, createStore_1.createSimpleStore)('persistent-simple', { count: 0, step: 1, isLoading: false }, true);
            expect(store).toBeDefined();
            expect(typeof store.clearStorage).toBe('function');
        });
        it('should work without persistence', function () {
            // Real scenario: temporary simple store
            var store = (0, createStore_1.createSimpleStore)('temp-simple', { count: 0, step: 1, isLoading: false }, false);
            expect(store).toBeDefined();
            expect(store.getState().count).toBe(0);
        });
    });
    // ============================================================================
    // COMPLEX STATE SCENARIOS
    // ============================================================================
    describe('Complex State Scenarios', function () {
        it('should handle complex nested state', function () {
            var _a;
            var store = (0, createStore_1.createStore)({
                name: 'app-state',
                initialState: {
                    user: null,
                    ui: {
                        sidebarOpen: false,
                        currentRoute: '/',
                    },
                    data: {
                        loading: false,
                        error: null,
                    },
                },
            });
            // Update nested state
            store.setState(function (state) { return ({
                user: {
                    id: '123',
                    name: 'John Doe',
                    preferences: {
                        theme: 'dark',
                        language: 'en',
                    },
                },
                ui: __assign(__assign({}, state.ui), { sidebarOpen: true }),
            }); });
            var state = store.getState();
            expect((_a = state.user) === null || _a === void 0 ? void 0 : _a.name).toBe('John Doe');
            expect(state.ui.sidebarOpen).toBe(true);
            expect(state.data.loading).toBe(false); // Preserved
        });
        it('should handle array operations', function () {
            // Real scenario: managing lists of items
            var store = (0, createStore_1.createStore)({
                name: 'todos',
                initialState: {
                    todos: [],
                    filter: 'all',
                },
            });
            // Add todo
            store.setState(function (state) { return ({
                todos: __spreadArray(__spreadArray([], state.todos, true), [{ id: 1, text: 'New todo', completed: false }], false),
            }); });
            // Toggle todo
            store.setState(function (state) { return ({
                todos: state.todos.map(function (todo) { return (todo.id === 1 ? __assign(__assign({}, todo), { completed: true }) : todo); }),
            }); });
            // Remove todo
            store.setState(function (state) { return ({
                todos: state.todos.filter(function (todo) { return todo.id !== 1; }),
            }); });
            expect(store.getState().todos).toHaveLength(0);
        });
    });
});
describe('Store Factory Integration', function () {
    it('should work with real-world usage patterns', function () {
        var authStore = (0, createStore_1.createStore)({
            name: 'auth',
            initialState: {
                user: null,
                token: null,
                isAuthenticated: false,
                loading: false,
            },
            persist: {
                key: 'auth-data',
                storage: stateEnums_1.StorageType.LOCAL_STORAGE,
            },
            devtools: true,
        });
        // Login flow
        authStore.setState({ loading: true });
        authStore.setState({
            user: { id: '123', email: 'user@example.com' },
            token: 'abc123',
            isAuthenticated: true,
            loading: false,
        });
        // Logout flow
        authStore.reset();
        var state = authStore.getState();
        expect(state.isAuthenticated).toBe(false);
        expect(state.user).toBeNull();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,