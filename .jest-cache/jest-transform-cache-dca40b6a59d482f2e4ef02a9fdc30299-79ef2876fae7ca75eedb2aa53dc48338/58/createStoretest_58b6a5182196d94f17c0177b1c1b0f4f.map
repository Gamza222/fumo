{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/state/createStore/createStore.test.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/state/createStore/createStore.test.ts"],"sourcesContent":["/**\n * Store Factory Tests\n *\n * Real-life enterprise scenarios testing with minimal mocking.\n * Uses existing mock factory patterns.\n */\n\nimport { createSimpleStore, createStore } from './createStore';\nimport { mockStorage } from '@/shared/testing/mocks/browser';\nimport { StorageType } from '../types/stateEnums';\n\n// Test interfaces\ninterface CounterState extends Record<string, unknown> {\n  count: number;\n  step: number;\n  isLoading: boolean;\n}\n\ninterface TodoState extends Record<string, unknown> {\n  todos: Array<{ id: number; text: string; completed: boolean }>;\n  filter: 'all' | 'active' | 'completed';\n}\n\ndescribe('Store Factory', () => {\n  let mockLocalStorage: ReturnType<typeof mockStorage>;\n\n  beforeEach(() => {\n    // Create fresh localStorage mock for each test\n    mockLocalStorage = mockStorage();\n    Object.defineProperty(window, 'localStorage', {\n      value: mockLocalStorage,\n      writable: true,\n    });\n  });\n\n  afterEach(() => {\n    // Clear any pending timers\n    jest.clearAllTimers();\n    // Clear mock storage\n    mockLocalStorage.clear();\n  });\n\n  // ============================================================================\n  // BASIC STORE CREATION\n  // ============================================================================\n\n  describe('Basic Store Creation', () => {\n    it('should create a basic store with initial state', () => {\n      // Real scenario: simple counter for any app\n      const store = createStore<CounterState>({\n        name: 'counter',\n        initialState: {\n          count: 0,\n          step: 1,\n          isLoading: false,\n        },\n      });\n\n      expect(store).toBeDefined();\n      expect(typeof store.getState).toBe('function');\n      expect(typeof store.setState).toBe('function');\n      expect(typeof store.subscribe).toBe('function');\n      expect(typeof store.reset).toBe('function');\n      expect(typeof store.clearStorage).toBe('function');\n    });\n\n    it('should include base state properties', () => {\n      // Real scenario: all stores need hydration tracking\n      const store = createStore<CounterState>({\n        name: 'counter',\n        initialState: { count: 0, step: 1, isLoading: false },\n      });\n\n      const state = store.getState();\n      expect(state).toHaveProperty('_hydrated');\n      expect(state._hydrated).toBe(false);\n    });\n\n    it('should initialize with correct values', () => {\n      // Real scenario: initial state should be preserved\n      const initialTodos = [\n        { id: 1, text: 'Test todo', completed: false },\n        { id: 2, text: 'Another todo', completed: true },\n      ];\n\n      const store = createStore<TodoState>({\n        name: 'todos',\n        initialState: {\n          todos: initialTodos,\n          filter: 'all',\n        },\n      });\n\n      const state = store.getState();\n      expect(state.todos).toEqual(initialTodos);\n      expect(state.filter).toBe('all');\n    });\n  });\n\n  // ============================================================================\n  // STATE UPDATES\n  // ============================================================================\n\n  describe('State Updates', () => {\n    it('should update state correctly', () => {\n      // Real scenario: incrementing counter\n      const store = createStore<CounterState>({\n        name: 'counter',\n        initialState: { count: 0, step: 1, isLoading: false },\n      });\n\n      store.setState({ count: 5 });\n      expect(store.getState().count).toBe(5);\n      expect(store.getState().step).toBe(1); // Other properties preserved\n    });\n\n    it('should support functional updates', () => {\n      // Real scenario: conditional state updates\n      const store = createStore<CounterState>({\n        name: 'counter',\n        initialState: { count: 0, step: 1, isLoading: false },\n      });\n\n      store.setState((state) => ({\n        count: state.count + state.step,\n      }));\n\n      expect(store.getState().count).toBe(1);\n    });\n\n    it('should reset to initial state', () => {\n      // Real scenario: reset form or clear data\n      const store = createStore<CounterState>({\n        name: 'counter',\n        initialState: { count: 0, step: 1, isLoading: false },\n      });\n\n      store.setState({ count: 10, isLoading: true });\n      store.reset();\n\n      const state = store.getState();\n      expect(state.count).toBe(0);\n      expect(state.isLoading).toBe(false);\n      expect(state._hydrated).toBe(false); // Base state also reset\n    });\n  });\n\n  // ============================================================================\n  // SUBSCRIPTIONS\n  // ============================================================================\n\n  describe('Subscriptions', () => {\n    it('should notify subscribers on state change', () => {\n      // Real scenario: UI components reacting to state changes\n      const store = createStore<CounterState>({\n        name: 'counter',\n        initialState: { count: 0, step: 1, isLoading: false },\n      });\n\n      const listener = jest.fn();\n      const unsubscribe = store.subscribe(listener);\n\n      store.setState({ count: 1 });\n\n      expect(listener).toHaveBeenCalledTimes(1);\n      // Zustand subscribe calls with (newState, prevState)\n      expect(listener.mock.calls[0][0]).toEqual(expect.objectContaining({ count: 1 }));\n\n      unsubscribe();\n    });\n\n    it('should stop notifications after unsubscribe', () => {\n      // Real scenario: component unmounting\n      const store = createStore<CounterState>({\n        name: 'counter',\n        initialState: { count: 0, step: 1, isLoading: false },\n      });\n\n      const listener = jest.fn();\n      const unsubscribe = store.subscribe(listener);\n\n      unsubscribe();\n      store.setState({ count: 1 });\n\n      expect(listener).not.toHaveBeenCalled();\n    });\n  });\n\n  // ============================================================================\n  // PERSISTENCE\n  // ============================================================================\n\n  describe('Persistence', () => {\n    it('should work without persistence', () => {\n      // Real scenario: temporary state that doesn't need persistence\n      const store = createStore<CounterState>({\n        name: 'temp-counter',\n        initialState: { count: 0, step: 1, isLoading: false },\n      });\n\n      store.setState({ count: 5 });\n      expect(mockLocalStorage.getItem('temp-counter')).toBeNull();\n    });\n\n    it('should enable persistence when configured', () => {\n      // Real scenario: user preferences that should persist\n      const store = createStore<CounterState>({\n        name: 'persistent-counter',\n        initialState: { count: 0, step: 1, isLoading: false },\n        persist: {\n          key: 'counter-state',\n          storage: StorageType.LOCAL_STORAGE,\n        },\n      });\n\n      expect(store).toBeDefined();\n      expect(typeof store.clearStorage).toBe('function');\n    });\n\n    it('should clear storage when requested', () => {\n      // Real scenario: user logout, clear stored data\n      const store = createStore<CounterState>({\n        name: 'user-counter',\n        initialState: { count: 0, step: 1, isLoading: false },\n        persist: {\n          key: 'user-counter-data',\n          storage: StorageType.LOCAL_STORAGE,\n        },\n      });\n\n      // Simulate stored data\n      mockLocalStorage.setItem('user-counter-data', JSON.stringify({ count: 10 }));\n\n      store.clearStorage();\n      expect(mockLocalStorage.getItem('user-counter-data')).toBeNull();\n    });\n\n    it('should support sessionStorage', () => {\n      // Real scenario: temporary data that should clear on tab close\n      const mockSessionStorage = mockStorage();\n      Object.defineProperty(window, 'sessionStorage', {\n        value: mockSessionStorage,\n        writable: true,\n      });\n\n      const store = createStore<CounterState>({\n        name: 'session-counter',\n        initialState: { count: 0, step: 1, isLoading: false },\n        persist: {\n          key: 'session-data',\n          storage: StorageType.SESSION_STORAGE,\n        },\n      });\n\n      expect(store).toBeDefined();\n    });\n  });\n\n  // ============================================================================\n  // DEVTOOLS\n  // ============================================================================\n\n  describe('DevTools Integration', () => {\n    it('should work without devtools in production', () => {\n      // Real scenario: production build without devtools\n      const originalEnv = process.env.NODE_ENV;\n      Object.defineProperty(process.env, 'NODE_ENV', {\n        value: 'production',\n        configurable: true,\n      });\n\n      const store = createStore<CounterState>({\n        name: 'prod-counter',\n        initialState: { count: 0, step: 1, isLoading: false },\n        devtools: true,\n      });\n\n      expect(store).toBeDefined();\n      expect(store.getState().count).toBe(0);\n\n      Object.defineProperty(process.env, 'NODE_ENV', {\n        value: originalEnv,\n        configurable: true,\n      });\n    });\n\n    it('should enable devtools in development', () => {\n      // Real scenario: development with devtools enabled\n      const originalEnv = process.env.NODE_ENV;\n      Object.defineProperty(process.env, 'NODE_ENV', {\n        value: 'development',\n        configurable: true,\n      });\n\n      const store = createStore<CounterState>({\n        name: 'dev-counter',\n        initialState: { count: 0, step: 1, isLoading: false },\n        devtools: true,\n      });\n\n      expect(store).toBeDefined();\n      expect(store.getState().count).toBe(0);\n\n      Object.defineProperty(process.env, 'NODE_ENV', {\n        value: originalEnv,\n        configurable: true,\n      });\n    });\n  });\n\n  // ============================================================================\n  // SIMPLE STORE FACTORY\n  // ============================================================================\n\n  describe('Simple Store Factory', () => {\n    it('should create simple store with minimal config', () => {\n      // Real scenario: quick store for prototyping\n      const store = createSimpleStore('simple-counter', { count: 0, step: 1, isLoading: false });\n\n      expect(store).toBeDefined();\n      expect(store.getState().count).toBe(0);\n      expect(typeof store.setState).toBe('function');\n    });\n\n    it('should create simple store with persistence', () => {\n      // Real scenario: simple persistent store\n      const store = createSimpleStore(\n        'persistent-simple',\n        { count: 0, step: 1, isLoading: false },\n        true\n      );\n\n      expect(store).toBeDefined();\n      expect(typeof store.clearStorage).toBe('function');\n    });\n\n    it('should work without persistence', () => {\n      // Real scenario: temporary simple store\n      const store = createSimpleStore(\n        'temp-simple',\n        { count: 0, step: 1, isLoading: false },\n        false\n      );\n\n      expect(store).toBeDefined();\n      expect(store.getState().count).toBe(0);\n    });\n  });\n\n  // ============================================================================\n  // COMPLEX STATE SCENARIOS\n  // ============================================================================\n\n  describe('Complex State Scenarios', () => {\n    it('should handle complex nested state', () => {\n      // Real scenario: complex application state\n      interface AppState extends Record<string, unknown> {\n        user: {\n          id: string;\n          name: string;\n          preferences: {\n            theme: 'light' | 'dark';\n            language: string;\n          };\n        } | null;\n        ui: {\n          sidebarOpen: boolean;\n          currentRoute: string;\n        };\n        data: {\n          loading: boolean;\n          error: string | null;\n        };\n      }\n\n      const store = createStore<AppState>({\n        name: 'app-state',\n        initialState: {\n          user: null,\n          ui: {\n            sidebarOpen: false,\n            currentRoute: '/',\n          },\n          data: {\n            loading: false,\n            error: null,\n          },\n        },\n      });\n\n      // Update nested state\n      store.setState((state) => ({\n        user: {\n          id: '123',\n          name: 'John Doe',\n          preferences: {\n            theme: 'dark',\n            language: 'en',\n          },\n        },\n        ui: {\n          ...state.ui,\n          sidebarOpen: true,\n        },\n      }));\n\n      const state = store.getState();\n      expect(state.user?.name).toBe('John Doe');\n      expect(state.ui.sidebarOpen).toBe(true);\n      expect(state.data.loading).toBe(false); // Preserved\n    });\n\n    it('should handle array operations', () => {\n      // Real scenario: managing lists of items\n      const store = createStore<TodoState>({\n        name: 'todos',\n        initialState: {\n          todos: [],\n          filter: 'all',\n        },\n      });\n\n      // Add todo\n      store.setState((state) => ({\n        todos: [...state.todos, { id: 1, text: 'New todo', completed: false }],\n      }));\n\n      // Toggle todo\n      store.setState((state) => ({\n        todos: state.todos.map((todo) => (todo.id === 1 ? { ...todo, completed: true } : todo)),\n      }));\n\n      // Remove todo\n      store.setState((state) => ({\n        todos: state.todos.filter((todo) => todo.id !== 1),\n      }));\n\n      expect(store.getState().todos).toHaveLength(0);\n    });\n  });\n});\n\ndescribe('Store Factory Integration', () => {\n  it('should work with real-world usage patterns', () => {\n    // Real scenario: user authentication store\n    interface AuthState extends Record<string, unknown> {\n      user: { id: string; email: string } | null;\n      token: string | null;\n      isAuthenticated: boolean;\n      loading: boolean;\n    }\n\n    const authStore = createStore<AuthState>({\n      name: 'auth',\n      initialState: {\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        loading: false,\n      },\n      persist: {\n        key: 'auth-data',\n        storage: StorageType.LOCAL_STORAGE,\n      },\n      devtools: true,\n    });\n\n    // Login flow\n    authStore.setState({ loading: true });\n    authStore.setState({\n      user: { id: '123', email: 'user@example.com' },\n      token: 'abc123',\n      isAuthenticated: true,\n      loading: false,\n    });\n\n    // Logout flow\n    authStore.reset();\n\n    const state = authStore.getState();\n    expect(state.isAuthenticated).toBe(false);\n    expect(state.user).toBeNull();\n  });\n});\n"],"version":3}