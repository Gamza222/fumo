17bdcbe021ed8634053a106ecb3b66a2
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
// ============================================================================
// MOCK SETUP
// ============================================================================
// Mock the useAppLoading hook (from hooks/useAppLoading/useAppLoading.ts)
jest.mock('../hooks/useAppLoading/useAppLoading', function () { return ({
    useAppLoading: jest.fn(),
}); });
/**
 * AppLoadingProvider Tests
 *
 * Tests for the React Context provider component.
 * Tests provider functionality and context provision.
 * Note: useAppLoadingContext will be tested separately.
 */
var react_1 = __importDefault(require("react"));
var react_2 = require("@testing-library/react");
var AppLoadingProvider_1 = require("./AppLoadingProvider");
var useAppLoading_1 = require("../hooks/useAppLoading/useAppLoading");
var mockUseAppLoading = useAppLoading_1.useAppLoading;
// ============================================================================
// TEST COMPONENT
// ============================================================================
// Simple test component that renders children
var TestChild = function (_a) {
    var testId = _a.testId, children = _a.children;
    return ((0, jsx_runtime_1.jsx)("div", { "data-testid": testId, children: children }));
};
// ============================================================================
// TESTS
// ============================================================================
describe('AppLoadingProvider', function () {
    beforeEach(function () {
        jest.clearAllMocks();
    });
    describe('Provider Rendering', function () {
        it('should render single child without crashing', function () {
            var mockLoadingState = {
                isInitialLoading: true,
                progress: 50,
                currentStep: 'Loading Styles',
                steps: [],
                forceComplete: jest.fn(),
                restart: jest.fn(),
            };
            mockUseAppLoading.mockReturnValue(mockLoadingState);
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AppLoadingProvider_1.AppLoadingProvider, { children: (0, jsx_runtime_1.jsx)(TestChild, { testId: "single-child", children: "Single Child Content" }) }));
            expect(react_2.screen.getByTestId('single-child')).toBeInTheDocument();
            expect(react_2.screen.getByText('Single Child Content')).toBeInTheDocument();
        });
        it('should render multiple children', function () {
            var mockLoadingState = {
                isInitialLoading: true,
                progress: 0,
                currentStep: '',
                steps: [],
                forceComplete: jest.fn(),
                restart: jest.fn(),
            };
            mockUseAppLoading.mockReturnValue(mockLoadingState);
            (0, react_2.render)((0, jsx_runtime_1.jsxs)(AppLoadingProvider_1.AppLoadingProvider, { children: [(0, jsx_runtime_1.jsx)(TestChild, { testId: "child-1", children: "Child 1" }), (0, jsx_runtime_1.jsx)(TestChild, { testId: "child-2", children: "Child 2" }), (0, jsx_runtime_1.jsx)(TestChild, { testId: "child-3", children: "Child 3" })] }));
            expect(react_2.screen.getByTestId('child-1')).toBeInTheDocument();
            expect(react_2.screen.getByTestId('child-2')).toBeInTheDocument();
            expect(react_2.screen.getByTestId('child-3')).toBeInTheDocument();
        });
    });
    describe('Hook Integration', function () {
        it('should call useAppLoading hook once', function () {
            var mockLoadingState = {
                isInitialLoading: true,
                progress: 0,
                currentStep: '',
                steps: [],
                forceComplete: jest.fn(),
                restart: jest.fn(),
            };
            mockUseAppLoading.mockReturnValue(mockLoadingState);
            (0, react_2.render)((0, jsx_runtime_1.jsx)(AppLoadingProvider_1.AppLoadingProvider, { children: (0, jsx_runtime_1.jsx)(TestChild, { testId: "test-child", children: "Test" }) }));
            expect(mockUseAppLoading).toHaveBeenCalledTimes(1);
            expect(mockUseAppLoading).toHaveBeenCalledWith();
        });
    });
    describe('Edge Cases', function () {
        it('should handle null children', function () {
            var mockLoadingState = {
                isInitialLoading: true,
                progress: 0,
                currentStep: '',
                steps: [],
                forceComplete: jest.fn(),
                restart: jest.fn(),
            };
            mockUseAppLoading.mockReturnValue(mockLoadingState);
            expect(function () {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(AppLoadingProvider_1.AppLoadingProvider, { children: null }));
            }).not.toThrow();
        });
        it('should handle undefined children', function () {
            var mockLoadingState = {
                isInitialLoading: true,
                progress: 0,
                currentStep: '',
                steps: [],
                forceComplete: jest.fn(),
                restart: jest.fn(),
            };
            mockUseAppLoading.mockReturnValue(mockLoadingState);
            expect(function () {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(AppLoadingProvider_1.AppLoadingProvider, { children: undefined }));
            }).not.toThrow();
        });
    });
    describe('Error Handling', function () {
        it('should handle hook throwing error', function () {
            var consoleSpy = jest.spyOn(console, 'error').mockImplementation(function () { });
            mockUseAppLoading.mockImplementation(function () {
                throw new Error('Hook failed');
            });
            expect(function () {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(AppLoadingProvider_1.AppLoadingProvider, { children: (0, jsx_runtime_1.jsx)(TestChild, { testId: "test-child", children: "Test" }) }));
            }).toThrow('Hook failed');
            consoleSpy.mockRestore();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,