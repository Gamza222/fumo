a2eb29161b8282ae4dab064fe1aacc1d
"use strict";
/**
 * State Management Mocks
 *
 * Mock implementations for Zustand stores and state management utilities.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockMiddleware = exports.testUtils = exports.stateGenerators = exports.mockSelectors = exports.mockUseStore = exports.mockStores = exports.createMockStore = void 0;
var state_1 = require("@/infrastructure/state");
// ============================================================================
// STORE FACTORY MOCKS
// ============================================================================
/**
 * Creates a mock store for testing
 */
var createMockStore = function (initialState, options) {
    if (options === void 0) { options = {}; }
    return (0, state_1.createStore)(__assign(__assign({ name: options.name || 'mock-store', initialState: initialState }, (options.persistence && {
        persistence: {
            key: "mock-".concat(options.name || 'store'),
            storage: 'localStorage',
        },
    })), { devtools: options.devtools || false }));
};
exports.createMockStore = createMockStore;
/**
 * Pre-configured mock stores for common scenarios
 */
var mockStores = {
    /**
     * Simple counter store for basic testing
     */
    counter: function () {
        return createMockStore({
            count: 0,
            step: 1,
            isLoading: false,
        }, { name: 'mock-counter' });
    },
    /**
     * Todo list store for complex state testing
     */
    todos: function () {
        return createMockStore({
            todos: [
                { id: 1, text: 'Test todo', completed: false },
                { id: 2, text: 'Another test', completed: true },
            ],
            filter: 'all',
        }, { name: 'mock-todos' });
    },
    /**
     * User authentication store
     */
    user: function () {
        return createMockStore({
            user: null,
            isAuthenticated: false,
        }, { name: 'mock-user' });
    },
    /**
     * Persistent store for testing persistence
     */
    persistent: function (initialState) {
        return createMockStore(initialState, {
            name: 'mock-persistent',
            persistence: true,
        });
    },
    /**
     * Store with DevTools for debugging tests
     */
    withDevTools: function (initialState) {
        return createMockStore(initialState, {
            name: 'mock-devtools',
            devtools: true,
        });
    },
};
exports.mockStores = mockStores;
// ============================================================================
// HOOK MOCKS
// ============================================================================
/**
 * Mock implementation of useStore hook for isolated testing
 */
var mockUseStore = function (store, selector) {
    return selector(store.getState());
};
exports.mockUseStore = mockUseStore;
/**
 * Mock selector functions for testing
 */
var mockSelectors = {
    identity: function (state) { return state; },
    count: function (state) { return state.count; },
    isLoading: function (state) { return state.isLoading; },
    todoCount: function (state) { return state.todos.length; },
    completedTodos: function (state) { return state.todos.filter(function (todo) { return todo.completed; }); },
    isAuthenticated: function (state) { return state.isAuthenticated; },
};
exports.mockSelectors = mockSelectors;
// ============================================================================
// STATE GENERATORS
// ============================================================================
/**
 * Generates realistic test data for different state types
 */
var stateGenerators = {
    /**
     * Generate counter state with random values
     */
    counter: function (overrides) {
        if (overrides === void 0) { overrides = {}; }
        return (__assign({ count: Math.floor(Math.random() * 100), step: Math.floor(Math.random() * 5) + 1, isLoading: Math.random() > 0.5 }, overrides));
    },
    /**
     * Generate todo list with random todos
     */
    todos: function (todoCount, overrides) {
        if (todoCount === void 0) { todoCount = 3; }
        if (overrides === void 0) { overrides = {}; }
        return (__assign({ todos: Array.from({ length: todoCount }, function (_, i) { return ({
                id: i + 1,
                text: "Test todo ".concat(i + 1),
                completed: Math.random() > 0.5,
            }); }), filter: 'all' }, overrides));
    },
    /**
     * Generate user state
     */
    user: function (authenticated, overrides) {
        if (authenticated === void 0) { authenticated = false; }
        if (overrides === void 0) { overrides = {}; }
        return (__assign({ user: authenticated
                ? {
                    id: 1,
                    name: 'Test User',
                    email: 'test@example.com',
                }
                : null, isAuthenticated: authenticated }, overrides));
    },
};
exports.stateGenerators = stateGenerators;
// ============================================================================
// TEST UTILITIES
// ============================================================================
/**
 * Utilities for testing state management
 */
var testUtils = {
    /**
     * Wait for store to reach a specific state
     */
    waitForState: function (store_1, predicate_1) {
        var args_1 = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args_1[_i - 2] = arguments[_i];
        }
        return __awaiter(void 0, __spreadArray([store_1, predicate_1], args_1, true), Promise, function (store, predicate, timeout) {
            if (timeout === void 0) { timeout = 1000; }
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var timeoutId = setTimeout(function () {
                            reject(new Error("Timeout waiting for state condition after ".concat(timeout, "ms")));
                        }, timeout);
                        var unsubscribe = store.subscribe(function (state) {
                            if (predicate(state)) {
                                clearTimeout(timeoutId);
                                unsubscribe();
                                resolve(state);
                            }
                        });
                        // Check current state immediately
                        var currentState = store.getState();
                        if (predicate(currentState)) {
                            clearTimeout(timeoutId);
                            unsubscribe();
                            resolve(currentState);
                        }
                    })];
            });
        });
    },
    /**
     * Create a store with pre-defined actions for testing
     */
    createTestStore: function (initialState, actions) {
        var store = createMockStore(initialState);
        var boundActions = Object.entries(actions).reduce(function (acc, _a) {
            var key = _a[0], action = _a[1];
            acc[key] = function () {
                var currentState = store.getState();
                var updates = action(currentState);
                store.setState(updates);
            };
            return acc;
        }, {});
        return { store: store, actions: boundActions };
    },
    /**
     * Assert store state matches expected values
     */
    assertStoreState: function (store, expected) {
        var actual = store.getState();
        Object.entries(expected).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            expect(actual[key]).toEqual(value);
        });
    },
    /**
     * Track state changes for testing
     */
    trackStateChanges: function (store) {
        var changes = [];
        var unsubscribe = store.subscribe(function (state) {
            changes.push(state);
        });
        return {
            changes: changes,
            unsubscribe: unsubscribe,
            getChangeCount: function () { return changes.length; },
            getLastChange: function () { return changes[changes.length - 1]; },
        };
    },
};
exports.testUtils = testUtils;
// ============================================================================
// MOCK MIDDLEWARE
// ============================================================================
/**
 * Mock middleware for testing middleware interactions
 */
var mockMiddleware = {
    /**
     * Logger middleware that captures logs for testing
     */
    createMockLogger: function () {
        var logs = [];
        return {
            logs: logs,
            middleware: function (f) { return function (set, get, api) {
                return f(function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    logs.push({
                        action: 'setState',
                        state: get(),
                        timestamp: Date.now(),
                    });
                    return set.apply(void 0, args);
                }, get, api);
            }; },
            clearLogs: function () { return logs.splice(0, logs.length); },
            getLastLog: function () { return logs[logs.length - 1]; },
        };
    },
    /**
     * Analytics middleware that captures events for testing
     */
    createMockAnalytics: function () {
        var events = [];
        return {
            events: events,
            track: function (type, data) {
                events.push({ type: type, data: data, timestamp: Date.now() });
            },
            clearEvents: function () { return events.splice(0, events.length); },
            getEventCount: function () { return events.length; },
            getLastEvent: function () { return events[events.length - 1]; },
        };
    },
};
exports.mockMiddleware = mockMiddleware;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,