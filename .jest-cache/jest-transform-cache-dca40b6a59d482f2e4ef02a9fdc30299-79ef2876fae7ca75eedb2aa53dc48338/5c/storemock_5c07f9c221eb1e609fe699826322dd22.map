{"file":"/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/state/store.mock.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/state/store.mock.ts"],"sourcesContent":["/**\n * State Management Mocks\n *\n * Mock implementations for Zustand stores and state management utilities.\n */\n\nimport { type BaseState, createStore, type EnhancedStore } from '@/infrastructure/state';\n\n// ============================================================================\n// STORE FACTORY MOCKS\n// ============================================================================\n\n/**\n * Creates a mock store for testing\n */\nconst createMockStore = <T extends Record<string, unknown>>(\n  initialState: T,\n  options: {\n    name?: string;\n    persistence?: boolean;\n    devtools?: boolean;\n  } = {}\n): EnhancedStore<T & BaseState> => {\n  return createStore({\n    name: options.name || 'mock-store',\n    initialState,\n    ...(options.persistence && {\n      persistence: {\n        key: `mock-${options.name || 'store'}`,\n        storage: 'localStorage' as const,\n      },\n    }),\n    devtools: options.devtools || false,\n  });\n};\n\n/**\n * Common test state interfaces\n */\ninterface MockCounterState extends Record<string, unknown> {\n  count: number;\n  step: number;\n  isLoading: boolean;\n}\n\ninterface MockTodoState extends Record<string, unknown> {\n  todos: Array<{\n    id: number;\n    text: string;\n    completed: boolean;\n  }>;\n  filter: 'all' | 'active' | 'completed';\n}\n\ninterface MockUserState extends Record<string, unknown> {\n  user: {\n    id: number;\n    name: string;\n    email: string;\n  } | null;\n  isAuthenticated: boolean;\n}\n\n/**\n * Pre-configured mock stores for common scenarios\n */\nconst mockStores = {\n  /**\n   * Simple counter store for basic testing\n   */\n  counter: () =>\n    createMockStore<MockCounterState>(\n      {\n        count: 0,\n        step: 1,\n        isLoading: false,\n      },\n      { name: 'mock-counter' }\n    ),\n\n  /**\n   * Todo list store for complex state testing\n   */\n  todos: () =>\n    createMockStore<MockTodoState>(\n      {\n        todos: [\n          { id: 1, text: 'Test todo', completed: false },\n          { id: 2, text: 'Another test', completed: true },\n        ],\n        filter: 'all',\n      },\n      { name: 'mock-todos' }\n    ),\n\n  /**\n   * User authentication store\n   */\n  user: () =>\n    createMockStore<MockUserState>(\n      {\n        user: null,\n        isAuthenticated: false,\n      },\n      { name: 'mock-user' }\n    ),\n\n  /**\n   * Persistent store for testing persistence\n   */\n  persistent: <T extends Record<string, unknown>>(initialState: T) =>\n    createMockStore(initialState, {\n      name: 'mock-persistent',\n      persistence: true,\n    }),\n\n  /**\n   * Store with DevTools for debugging tests\n   */\n  withDevTools: <T extends Record<string, unknown>>(initialState: T) =>\n    createMockStore(initialState, {\n      name: 'mock-devtools',\n      devtools: true,\n    }),\n};\n\n// ============================================================================\n// HOOK MOCKS\n// ============================================================================\n\n/**\n * Mock implementation of useStore hook for isolated testing\n */\nconst mockUseStore = <T, R>(\n  store: EnhancedStore<T & BaseState>,\n  selector: (state: T & BaseState) => R\n): R => {\n  return selector(store.getState());\n};\n\n/**\n * Mock selector functions for testing\n */\nconst mockSelectors = {\n  identity: <T>(state: T) => state,\n  count: (state: MockCounterState) => state.count,\n  isLoading: (state: { isLoading: boolean }) => state.isLoading,\n  todoCount: (state: MockTodoState) => state.todos.length,\n  completedTodos: (state: MockTodoState) => state.todos.filter((todo) => todo.completed),\n  isAuthenticated: (state: MockUserState) => state.isAuthenticated,\n};\n\n// ============================================================================\n// STATE GENERATORS\n// ============================================================================\n\n/**\n * Generates realistic test data for different state types\n */\nconst stateGenerators = {\n  /**\n   * Generate counter state with random values\n   */\n  counter: (overrides: Partial<MockCounterState> = {}): MockCounterState => ({\n    count: Math.floor(Math.random() * 100),\n    step: Math.floor(Math.random() * 5) + 1,\n    isLoading: Math.random() > 0.5,\n    ...overrides,\n  }),\n\n  /**\n   * Generate todo list with random todos\n   */\n  todos: (todoCount: number = 3, overrides: Partial<MockTodoState> = {}): MockTodoState => ({\n    todos: Array.from({ length: todoCount }, (_, i) => ({\n      id: i + 1,\n      text: `Test todo ${i + 1}`,\n      completed: Math.random() > 0.5,\n    })),\n    filter: 'all',\n    ...overrides,\n  }),\n\n  /**\n   * Generate user state\n   */\n  user: (\n    authenticated: boolean = false,\n    overrides: Partial<MockUserState> = {}\n  ): MockUserState => ({\n    user: authenticated\n      ? {\n          id: 1,\n          name: 'Test User',\n          email: 'test@example.com',\n        }\n      : null,\n    isAuthenticated: authenticated,\n    ...overrides,\n  }),\n};\n\n// ============================================================================\n// TEST UTILITIES\n// ============================================================================\n\n/**\n * Utilities for testing state management\n */\nconst testUtils = {\n  /**\n   * Wait for store to reach a specific state\n   */\n  waitForState: async <T>(\n    store: EnhancedStore<T>,\n    predicate: (state: T) => boolean,\n    timeout: number = 1000\n  ): Promise<T> => {\n    return new Promise((resolve, reject) => {\n      const timeoutId = setTimeout(() => {\n        reject(new Error(`Timeout waiting for state condition after ${timeout}ms`));\n      }, timeout);\n\n      const unsubscribe = store.subscribe((state) => {\n        if (predicate(state)) {\n          clearTimeout(timeoutId);\n          unsubscribe();\n          resolve(state);\n        }\n      });\n\n      // Check current state immediately\n      const currentState = store.getState();\n      if (predicate(currentState)) {\n        clearTimeout(timeoutId);\n        unsubscribe();\n        resolve(currentState);\n      }\n    });\n  },\n\n  /**\n   * Create a store with pre-defined actions for testing\n   */\n  createTestStore: <T extends Record<string, unknown>>(\n    initialState: T,\n    actions: Record<string, (state: T) => Partial<T>>\n  ) => {\n    const store = createMockStore(initialState);\n\n    const boundActions = Object.entries(actions).reduce(\n      (acc, [key, action]) => {\n        acc[key] = () => {\n          const currentState = store.getState();\n          const updates = action(currentState);\n          store.setState(updates as Partial<T & BaseState>);\n        };\n        return acc;\n      },\n      {} as Record<string, () => void>\n    );\n\n    return { store, actions: boundActions };\n  },\n\n  /**\n   * Assert store state matches expected values\n   */\n  assertStoreState: <T>(store: EnhancedStore<T>, expected: Partial<T>): void => {\n    const actual = store.getState();\n    Object.entries(expected).forEach(([key, value]) => {\n      expect(actual[key as keyof T]).toEqual(value);\n    });\n  },\n\n  /**\n   * Track state changes for testing\n   */\n  trackStateChanges: <T>(store: EnhancedStore<T>) => {\n    const changes: T[] = [];\n    const unsubscribe = store.subscribe((state) => {\n      changes.push(state);\n    });\n\n    return {\n      changes,\n      unsubscribe,\n      getChangeCount: () => changes.length,\n      getLastChange: () => changes[changes.length - 1],\n    };\n  },\n};\n\n// ============================================================================\n// MOCK MIDDLEWARE\n// ============================================================================\n\n/**\n * Mock middleware for testing middleware interactions\n */\nconst mockMiddleware = {\n  /**\n   * Logger middleware that captures logs for testing\n   */\n  createMockLogger: () => {\n    const logs: Array<{ action: string; state: unknown; timestamp: number }> = [];\n\n    return {\n      logs,\n      middleware: (f: unknown) => (set: unknown, get: unknown, api: unknown) => {\n        return (f as (set: unknown, get: unknown, api: unknown) => unknown)(\n          (...args: unknown[]) => {\n            logs.push({\n              action: 'setState',\n              state: (get as () => unknown)(),\n              timestamp: Date.now(),\n            });\n            return (set as (...args: unknown[]) => unknown)(...args);\n          },\n          get,\n          api\n        );\n      },\n      clearLogs: () => logs.splice(0, logs.length),\n      getLastLog: () => logs[logs.length - 1],\n    };\n  },\n\n  /**\n   * Analytics middleware that captures events for testing\n   */\n  createMockAnalytics: () => {\n    const events: Array<{ type: string; data: unknown; timestamp: number }> = [];\n\n    return {\n      events,\n      track: (type: string, data: unknown) => {\n        events.push({ type, data, timestamp: Date.now() });\n      },\n      clearEvents: () => events.splice(0, events.length),\n      getEventCount: () => events.length,\n      getLastEvent: () => events[events.length - 1],\n    };\n  },\n};\n\n// ============================================================================\n// EXPORTS\n// ============================================================================\n\nexport type { MockCounterState, MockTodoState, MockUserState };\n\nexport {\n  createMockStore,\n  mockStores,\n  mockUseStore,\n  mockSelectors,\n  stateGenerators,\n  testUtils,\n  mockMiddleware,\n};\n"],"version":3}