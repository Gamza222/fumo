{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/providers/app-loading/ui/AppLoadingProvider.tsx","mappings":";AAAA;;;;GAIG;AAEH,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+Bb,gDASC;;AAtCD,6CAA6C;AAC7C,sEAAqE;AAMrE,+EAA+E;AAC/E,mBAAmB;AACnB,+EAA+E;AAE/E,kEAAkE;AAClE,IAAM,iBAAiB,GAAG,IAAA,qBAAa,EAA6B,IAAI,CAAC,CAAC;AAgCjE,8CAAiB;AA9B1B,+EAA+E;AAC/E,qCAAqC;AACrC,+EAA+E;AAE/E;;;;;;;;;;GAUG;AACH,SAAgB,kBAAkB,CAAC,EAAqC;QAAnC,QAAQ,cAAA;IAC3C,gDAAgD;IAChD,IAAM,eAAe,GAAG,IAAA,6BAAa,GAAE,CAAC;IAExC,OAAO,CACL,uBAAC,iBAAiB,CAAC,QAAQ,IAAC,KAAK,EAAE,eAAe,YAC/C,QAAQ,GACkB,CAC9B,CAAC;AACJ,CAAC","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/providers/app-loading/ui/AppLoadingProvider.tsx"],"sourcesContent":["/**\n * AppLoadingProvider\n *\n * UI Provider component that provides loading context to children.\n */\n\n\"use client\";\n\nimport React, { createContext } from \"react\";\nimport { useAppLoading } from \"../hooks/useAppLoading/useAppLoading\";\nimport {\n  AppLoadingProviderProps,\n  UseAppLoadingReturn,\n} from \"../model/types/types\";\n\n// ============================================================================\n// CONTEXT CREATION\n// ============================================================================\n\n// Create context with null default (will be provided by provider)\nconst AppLoadingContext = createContext<UseAppLoadingReturn | null>(null);\n\n// ============================================================================\n// PROVIDER COMPONENT (UI Layer Only)\n// ============================================================================\n\n/**\n * AppLoadingProvider - Provides loading state to all child components\n *\n * This is a PURE UI component - no logic, just context provision.\n * All logic is handled by useAppLoading hook.\n *\n * Usage:\n * <AppLoadingProvider>\n *   <YourApp />\n * </AppLoadingProvider>\n */\nexport function AppLoadingProvider({ children }: AppLoadingProviderProps) {\n  // Get loading state from our hook (logic layer)\n  const appLoadingState = useAppLoading();\n\n  return (\n    <AppLoadingContext.Provider value={appLoadingState}>\n      {children}\n    </AppLoadingContext.Provider>\n  );\n}\n\n// ============================================================================\n// EXPORTS\n// ============================================================================\n\nexport { AppLoadingContext };\n"],"version":3}