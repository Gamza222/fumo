{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/error-handling/ui/ErrorBoundary.test.tsx","mappings":";;;;;;AAGA,yBAAyB;AACzB,IAAI,CAAC,IAAI,CAAC,2BAA2B,EAAE,cAAM,OAAA,CAAC;IAC5C,uBAAuB,EAAE,cAAM,OAAA,yDAAqB,EAArB,CAAqB;CACrD,CAAC,EAF2C,CAE3C,CAAC,CAAC;AAEJ,wBAAwB;AACxB,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,cAAM,OAAA,CAAC;IACtC,SAAS,EAAE,cAAM,OAAA,yDAAqB,EAArB,CAAqB;CACvC,CAAC,EAFqC,CAErC,CAAC,CAAC;AAEJ,wBAAwB;AACxB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,cAAM,OAAA,CAAC;IAC7B,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;CACpB,CAAC,EAF4B,CAE5B,CAAC,CAAC;AAhBJ,gDAAwD;AACxD,kEAA4C;AAiB5C,iCAAiC;AACjC,IAAM,UAAU,GAAG,UAAC,EAAyC;QAAvC,WAAW,iBAAA;IAC/B,IAAI,WAAW,EAAE,CAAC;QAChB,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;IAChC,CAAC;IACD,OAAO,uDAAmB,CAAC;AAC7B,CAAC,CAAC;AAEF,QAAQ,CAAC,eAAe,EAAE;IACxB,yCAAyC;IACzC,IAAM,aAAa,GAAG,OAAO,CAAC,KAAK,CAAC;IACpC,SAAS,CAAC;QACR,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;IAC5B,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC;QACP,OAAO,CAAC,KAAK,GAAG,aAAa,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,UAAU,CAAC;QACT,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE;QAChD,IAAA,cAAM,EACJ,uBAAC,uBAAa,cACZ,uBAAC,UAAU,IAAC,WAAW,EAAE,KAAK,GAAI,GACpB,CACjB,CAAC;QAEF,MAAM,CAAC,cAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;IAC3D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE;QAC9C,IAAA,cAAM,EACJ,uBAAC,uBAAa,cACZ,uBAAC,UAAU,IAAC,WAAW,EAAE,IAAI,GAAI,GACnB,CACjB,CAAC;QAEF,MAAM,CAAC,cAAM,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;QAC3D,MAAM,CAAC,cAAM,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC;IACjE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE;QAClD,IAAA,cAAM,EACJ,wBAAC,uBAAa,eACZ,sDAAkB,EAClB,sDAAkB,IACJ,CACjB,CAAC;QAEF,MAAM,CAAC,cAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;QACxD,MAAM,CAAC,cAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;IAC1D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/error-handling/ui/ErrorBoundary.test.tsx"],"sourcesContent":["import { render, screen } from '@testing-library/react';\nimport ErrorBoundary from './ErrorBoundary';\n\n// Mock Suspense fallback\njest.mock('@/infrastructure/suspense', () => ({\n  DefaultSuspenseFallback: () => <div>Loading...</div>,\n}));\n\n// Mock PageError widget\njest.mock('@/widgets/PageError', () => ({\n  PageError: () => <div>Error Page</div>,\n}));\n\n// Mock the log function\njest.mock('../lib/lib', () => ({\n  logError: jest.fn(),\n}));\n\n// Component that throws an error\nconst ThrowError = ({ shouldThrow }: { shouldThrow: boolean }) => {\n  if (shouldThrow) {\n    throw new Error('Test error');\n  }\n  return <div>No Error</div>;\n};\n\ndescribe('ErrorBoundary', () => {\n  // Suppress console.error for these tests\n  const originalError = console.error;\n  beforeAll(() => {\n    console.error = jest.fn();\n  });\n\n  afterAll(() => {\n    console.error = originalError;\n  });\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should render children when no error occurs', () => {\n    render(\n      <ErrorBoundary>\n        <ThrowError shouldThrow={false} />\n      </ErrorBoundary>\n    );\n\n    expect(screen.getByText('No Error')).toBeInTheDocument();\n  });\n\n  it('should render PageError when error occurs', () => {\n    render(\n      <ErrorBoundary>\n        <ThrowError shouldThrow={true} />\n      </ErrorBoundary>\n    );\n\n    expect(screen.getByText('Error Page')).toBeInTheDocument();\n    expect(screen.queryByText('No Error')).not.toBeInTheDocument();\n  });\n\n  it('should render multiple children when no error', () => {\n    render(\n      <ErrorBoundary>\n        <div>Child 1</div>\n        <div>Child 2</div>\n      </ErrorBoundary>\n    );\n\n    expect(screen.getByText('Child 1')).toBeInTheDocument();\n    expect(screen.getByText('Child 2')).toBeInTheDocument();\n  });\n});\n"],"version":3}