bb8e837191562d113d4bfe218f9fb8aa
"use strict";
/**
 * Authentication Service
 *
 * Handles user authentication, token management, and session handling.
 * Universal authentication service for enterprise applications.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.authService = exports.AuthService = void 0;
var jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
var bcryptjs_1 = __importDefault(require("bcryptjs"));
var security_types_1 = require("../../types/security.types");
var security_config_1 = require("../security-config");
// ============================================================================
// AUTHENTICATION SERVICE
// ============================================================================
var AuthService = /** @class */ (function () {
    function AuthService() {
        this.users = [];
        this.securityEvents = [];
    }
    AuthService.getInstance = function () {
        if (!AuthService.instance) {
            AuthService.instance = new AuthService();
        }
        return AuthService.instance;
    };
    /**
     * Register a new user
     */
    AuthService.prototype.register = function (data) {
        return __awaiter(this, void 0, Promise, function () {
            var existingUser, emailRegex, hashedPassword, user, tokens;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Validate passwords match
                        if (data.password !== data.confirmPassword) {
                            throw new Error('Passwords do not match');
                        }
                        return [4 /*yield*/, this.findUserByEmail(data.email)];
                    case 1:
                        existingUser = _a.sent();
                        if (existingUser) {
                            throw new Error('User already exists');
                        }
                        emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                        if (!emailRegex.test(data.email)) {
                            throw new Error('Invalid email format');
                        }
                        return [4 /*yield*/, this.hashPassword(data.password)];
                    case 2:
                        hashedPassword = _a.sent();
                        user = {
                            id: "user_".concat(Date.now(), "_").concat(Math.random().toString(36).substr(2, 9)),
                            email: data.email,
                            username: data.username,
                            password: hashedPassword,
                            role: security_types_1.UserRole.USER,
                            permissions: this.getDefaultPermissions(security_types_1.UserRole.USER),
                            isActive: true,
                            createdAt: new Date(),
                            updatedAt: new Date(),
                        };
                        // Store user (in real app, this would be in database)
                        this.users.push(__assign(__assign({}, user), { password: hashedPassword }));
                        tokens = this.generateTokens(user);
                        // Log security event
                        this.logSecurityEvent({
                            type: security_types_1.SecurityEventType.LOGIN_SUCCESS,
                            userId: user.id,
                            ipAddress: '127.0.0.1',
                            userAgent: 'Registration',
                            details: { action: 'user_registration' },
                            severity: security_types_1.SecuritySeverity.LOW,
                        });
                        return [2 /*return*/, { user: user, tokens: tokens }];
                }
            });
        });
    };
    /**
     * Login user
     */
    AuthService.prototype.login = function (credentials) {
        return __awaiter(this, void 0, Promise, function () {
            var user, isValidPassword, tokens;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.findUserByEmail(credentials.email)];
                    case 1:
                        user = _a.sent();
                        if (!user) {
                            this.logSecurityEvent({
                                type: security_types_1.SecurityEventType.LOGIN_FAILED,
                                ipAddress: '127.0.0.1',
                                userAgent: 'Login Attempt',
                                details: { email: credentials.email, reason: 'user_not_found' },
                                severity: security_types_1.SecuritySeverity.MEDIUM,
                            });
                            throw new Error('Invalid credentials');
                        }
                        return [4 /*yield*/, this.verifyPassword(credentials.password, user.password)];
                    case 2:
                        isValidPassword = _a.sent();
                        if (!isValidPassword) {
                            this.logSecurityEvent({
                                type: security_types_1.SecurityEventType.LOGIN_FAILED,
                                userId: user.id,
                                ipAddress: '127.0.0.1',
                                userAgent: 'Login Attempt',
                                details: { email: credentials.email, reason: 'invalid_password' },
                                severity: security_types_1.SecuritySeverity.MEDIUM,
                            });
                            throw new Error('Invalid credentials');
                        }
                        if (!user.isActive) {
                            throw new Error('Account is inactive');
                        }
                        // Update last login
                        user.lastLoginAt = new Date();
                        user.updatedAt = new Date();
                        tokens = this.generateTokens(user);
                        // Log security event
                        this.logSecurityEvent({
                            type: security_types_1.SecurityEventType.LOGIN_SUCCESS,
                            userId: user.id,
                            ipAddress: '127.0.0.1',
                            userAgent: 'Login Success',
                            details: { action: 'user_login' },
                            severity: security_types_1.SecuritySeverity.LOW,
                        });
                        return [2 /*return*/, { user: user, tokens: tokens }];
                }
            });
        });
    };
    /**
     * Verify JWT token
     */
    AuthService.prototype.verifyToken = function (token) {
        return __awaiter(this, void 0, Promise, function () {
            var decoded, user, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        decoded = jsonwebtoken_1.default.verify(token, security_config_1.securityConfig.auth.jwtSecret);
                        return [4 /*yield*/, this.findUserById(decoded.userId)];
                    case 1:
                        user = _a.sent();
                        if (!user || !user.isActive) {
                            throw new Error('Invalid token');
                        }
                        return [2 /*return*/, user];
                    case 2:
                        error_1 = _a.sent();
                        this.logSecurityEvent({
                            type: security_types_1.SecurityEventType.INVALID_TOKEN,
                            ipAddress: '127.0.0.1',
                            userAgent: 'Token Verification',
                            details: { error: error_1 instanceof Error ? error_1.message : 'Unknown error' },
                            severity: security_types_1.SecuritySeverity.HIGH,
                        });
                        throw new Error('Invalid token');
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Refresh access token
     */
    AuthService.prototype.refreshToken = function (refreshToken) {
        return __awaiter(this, void 0, Promise, function () {
            var decoded, user, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        decoded = jsonwebtoken_1.default.verify(refreshToken, security_config_1.securityConfig.auth.jwtSecret);
                        return [4 /*yield*/, this.findUserById(decoded.userId)];
                    case 1:
                        user = _a.sent();
                        if (!user || !user.isActive) {
                            throw new Error('Invalid refresh token');
                        }
                        return [2 /*return*/, this.generateTokens(user)];
                    case 2:
                        error_2 = _a.sent();
                        this.logSecurityEvent({
                            type: security_types_1.SecurityEventType.TOKEN_EXPIRED,
                            ipAddress: '127.0.0.1',
                            userAgent: 'Token Refresh',
                            details: { error: error_2 instanceof Error ? error_2.message : 'Unknown error' },
                            severity: security_types_1.SecuritySeverity.MEDIUM,
                        });
                        throw new Error('Invalid refresh token');
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get security events
     */
    AuthService.prototype.getSecurityEvents = function () {
        return __spreadArray([], this.securityEvents, true);
    };
    // ============================================================================
    // PRIVATE METHODS
    // ============================================================================
    AuthService.prototype.findUserByEmail = function (email) {
        return Promise.resolve(this.users.find(function (user) { return user.email === email; }) || null);
    };
    AuthService.prototype.findUserById = function (id) {
        return Promise.resolve(this.users.find(function (user) { return user.id === id; }) || null);
    };
    AuthService.prototype.hashPassword = function (password) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, bcryptjs_1.default.hash(password, 12)];
            });
        });
    };
    AuthService.prototype.verifyPassword = function (password, hashedPassword) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, bcryptjs_1.default.compare(password, hashedPassword)];
            });
        });
    };
    AuthService.prototype.generateTokens = function (user) {
        var payload = { userId: user.id };
        var secret = security_config_1.securityConfig.auth.jwtSecret;
        // Use type assertion to fix JWT overload issues
        var accessToken = jsonwebtoken_1.default.sign(payload, secret, {
            expiresIn: security_config_1.securityConfig.auth.jwtExpiresIn,
        });
        var refreshToken = jsonwebtoken_1.default.sign(payload, secret, {
            expiresIn: security_config_1.securityConfig.auth.refreshTokenExpiresIn,
        });
        return {
            accessToken: accessToken,
            refreshToken: refreshToken,
            expiresIn: 15 * 60, // 15 minutes in seconds
            tokenType: 'Bearer',
        };
    };
    AuthService.prototype.getDefaultPermissions = function (role) {
        switch (role) {
            case security_types_1.UserRole.ADMIN:
                return [
                    security_types_1.Permission.READ_USERS,
                    security_types_1.Permission.WRITE_USERS,
                    security_types_1.Permission.DELETE_USERS,
                    security_types_1.Permission.READ_CONTENT,
                    security_types_1.Permission.WRITE_CONTENT,
                    security_types_1.Permission.DELETE_CONTENT,
                    security_types_1.Permission.READ_SYSTEM,
                    security_types_1.Permission.WRITE_SYSTEM,
                    security_types_1.Permission.ADMIN_SYSTEM,
                ];
            case security_types_1.UserRole.MODERATOR:
                return [
                    security_types_1.Permission.READ_USERS,
                    security_types_1.Permission.READ_CONTENT,
                    security_types_1.Permission.WRITE_CONTENT,
                    security_types_1.Permission.DELETE_CONTENT,
                ];
            case security_types_1.UserRole.USER:
                return [security_types_1.Permission.READ_CONTENT, security_types_1.Permission.WRITE_CONTENT];
            case security_types_1.UserRole.GUEST:
                return [security_types_1.Permission.READ_CONTENT];
            default:
                return [];
        }
    };
    AuthService.prototype.logSecurityEvent = function (event) {
        var securityEvent = __assign(__assign({}, event), { id: "event_".concat(Date.now(), "_").concat(Math.random().toString(36).substr(2, 9)), timestamp: new Date() });
        this.securityEvents.push(securityEvent);
        // In real app, send to security monitoring system
        // console.log('Security Event:', securityEvent);
    };
    return AuthService;
}());
exports.AuthService = AuthService;
// Export singleton instance
exports.authService = AuthService.getInstance();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,