{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/security/lib/auth/auth.service.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/security/lib/auth/auth.service.ts"],"sourcesContent":["/**\n * Authentication Service\n *\n * Handles user authentication, token management, and session handling.\n * Universal authentication service for enterprise applications.\n */\n\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\nimport {\n  AuthToken,\n  LoginCredentials,\n  Permission,\n  RegisterData,\n  SecurityEvent,\n  SecurityEventType,\n  SecuritySeverity,\n  User,\n  UserRole,\n} from '../../types/security.types';\nimport { securityConfig } from '../security-config';\n\n// ============================================================================\n// AUTHENTICATION SERVICE\n// ============================================================================\n\nexport class AuthService {\n  private users: User[] = [];\n  private securityEvents: SecurityEvent[] = [];\n  private static instance: AuthService;\n\n  private constructor() {}\n\n  public static getInstance(): AuthService {\n    if (!AuthService.instance) {\n      AuthService.instance = new AuthService();\n    }\n    return AuthService.instance;\n  }\n\n  /**\n   * Register a new user\n   */\n  public async register(data: RegisterData): Promise<{ user: User; tokens: AuthToken }> {\n    // Validate passwords match\n    if (data.password !== data.confirmPassword) {\n      throw new Error('Passwords do not match');\n    }\n\n    // Check if user already exists\n    const existingUser = await this.findUserByEmail(data.email);\n    if (existingUser) {\n      throw new Error('User already exists');\n    }\n\n    // Validate email format\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(data.email)) {\n      throw new Error('Invalid email format');\n    }\n\n    // Hash password\n    const hashedPassword = await this.hashPassword(data.password);\n\n    // Create user\n    const user: User = {\n      id: `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      email: data.email,\n      username: data.username,\n      password: hashedPassword,\n      role: UserRole.USER,\n      permissions: this.getDefaultPermissions(UserRole.USER),\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    // Store user (in real app, this would be in database)\n    this.users.push({ ...user, password: hashedPassword } as User);\n\n    // Generate tokens\n    const tokens = this.generateTokens(user);\n\n    // Log security event\n    this.logSecurityEvent({\n      type: SecurityEventType.LOGIN_SUCCESS,\n      userId: user.id,\n      ipAddress: '127.0.0.1',\n      userAgent: 'Registration',\n      details: { action: 'user_registration' },\n      severity: SecuritySeverity.LOW,\n    });\n\n    return { user, tokens };\n  }\n\n  /**\n   * Login user\n   */\n  public async login(credentials: LoginCredentials): Promise<{ user: User; tokens: AuthToken }> {\n    const user = await this.findUserByEmail(credentials.email);\n    if (!user) {\n      this.logSecurityEvent({\n        type: SecurityEventType.LOGIN_FAILED,\n        ipAddress: '127.0.0.1',\n        userAgent: 'Login Attempt',\n        details: { email: credentials.email, reason: 'user_not_found' },\n        severity: SecuritySeverity.MEDIUM,\n      });\n      throw new Error('Invalid credentials');\n    }\n\n    const isValidPassword = await this.verifyPassword(credentials.password, user.password);\n    if (!isValidPassword) {\n      this.logSecurityEvent({\n        type: SecurityEventType.LOGIN_FAILED,\n        userId: user.id,\n        ipAddress: '127.0.0.1',\n        userAgent: 'Login Attempt',\n        details: { email: credentials.email, reason: 'invalid_password' },\n        severity: SecuritySeverity.MEDIUM,\n      });\n      throw new Error('Invalid credentials');\n    }\n\n    if (!user.isActive) {\n      throw new Error('Account is inactive');\n    }\n\n    // Update last login\n    user.lastLoginAt = new Date();\n    user.updatedAt = new Date();\n\n    // Generate tokens\n    const tokens = this.generateTokens(user);\n\n    // Log security event\n    this.logSecurityEvent({\n      type: SecurityEventType.LOGIN_SUCCESS,\n      userId: user.id,\n      ipAddress: '127.0.0.1',\n      userAgent: 'Login Success',\n      details: { action: 'user_login' },\n      severity: SecuritySeverity.LOW,\n    });\n\n    return { user, tokens };\n  }\n\n  /**\n   * Verify JWT token\n   */\n  public async verifyToken(token: string): Promise<User> {\n    try {\n      const decoded = jwt.verify(token, securityConfig.auth.jwtSecret) as { userId: string };\n      const user = await this.findUserById(decoded.userId);\n\n      if (!user || !user.isActive) {\n        throw new Error('Invalid token');\n      }\n\n      return user;\n    } catch (error) {\n      this.logSecurityEvent({\n        type: SecurityEventType.INVALID_TOKEN,\n        ipAddress: '127.0.0.1',\n        userAgent: 'Token Verification',\n        details: { error: error instanceof Error ? error.message : 'Unknown error' },\n        severity: SecuritySeverity.HIGH,\n      });\n      throw new Error('Invalid token');\n    }\n  }\n\n  /**\n   * Refresh access token\n   */\n  public async refreshToken(refreshToken: string): Promise<AuthToken> {\n    try {\n      const decoded = jwt.verify(refreshToken, securityConfig.auth.jwtSecret) as { userId: string };\n      const user = await this.findUserById(decoded.userId);\n\n      if (!user || !user.isActive) {\n        throw new Error('Invalid refresh token');\n      }\n\n      return this.generateTokens(user);\n    } catch (error) {\n      this.logSecurityEvent({\n        type: SecurityEventType.TOKEN_EXPIRED,\n        ipAddress: '127.0.0.1',\n        userAgent: 'Token Refresh',\n        details: { error: error instanceof Error ? error.message : 'Unknown error' },\n        severity: SecuritySeverity.MEDIUM,\n      });\n      throw new Error('Invalid refresh token');\n    }\n  }\n\n  /**\n   * Get security events\n   */\n  public getSecurityEvents(): SecurityEvent[] {\n    return [...this.securityEvents];\n  }\n\n  // ============================================================================\n  // PRIVATE METHODS\n  // ============================================================================\n\n  private findUserByEmail(email: string): Promise<User | null> {\n    return Promise.resolve(this.users.find((user) => user.email === email) || null);\n  }\n\n  private findUserById(id: string): Promise<User | null> {\n    return Promise.resolve(this.users.find((user) => user.id === id) || null);\n  }\n\n  private async hashPassword(password: string): Promise<string> {\n    return bcrypt.hash(password, 12);\n  }\n\n  private async verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n    return bcrypt.compare(password, hashedPassword);\n  }\n\n  private generateTokens(user: User): AuthToken {\n    const payload = { userId: user.id };\n    const secret = securityConfig.auth.jwtSecret;\n\n    // Use type assertion to fix JWT overload issues\n    const accessToken = (\n      jwt.sign as (payload: object, secret: string, options: { expiresIn: string }) => string\n    )(payload, secret, {\n      expiresIn: securityConfig.auth.jwtExpiresIn,\n    });\n\n    const refreshToken = (\n      jwt.sign as (payload: object, secret: string, options: { expiresIn: string }) => string\n    )(payload, secret, {\n      expiresIn: securityConfig.auth.refreshTokenExpiresIn,\n    });\n\n    return {\n      accessToken,\n      refreshToken,\n      expiresIn: 15 * 60, // 15 minutes in seconds\n      tokenType: 'Bearer',\n    };\n  }\n\n  private getDefaultPermissions(role: UserRole): Permission[] {\n    switch (role) {\n      case UserRole.ADMIN:\n        return [\n          Permission.READ_USERS,\n          Permission.WRITE_USERS,\n          Permission.DELETE_USERS,\n          Permission.READ_CONTENT,\n          Permission.WRITE_CONTENT,\n          Permission.DELETE_CONTENT,\n          Permission.READ_SYSTEM,\n          Permission.WRITE_SYSTEM,\n          Permission.ADMIN_SYSTEM,\n        ];\n      case UserRole.MODERATOR:\n        return [\n          Permission.READ_USERS,\n          Permission.READ_CONTENT,\n          Permission.WRITE_CONTENT,\n          Permission.DELETE_CONTENT,\n        ];\n      case UserRole.USER:\n        return [Permission.READ_CONTENT, Permission.WRITE_CONTENT];\n      case UserRole.GUEST:\n        return [Permission.READ_CONTENT];\n      default:\n        return [];\n    }\n  }\n\n  private logSecurityEvent(event: Omit<SecurityEvent, 'id' | 'timestamp'>): void {\n    const securityEvent: SecurityEvent = {\n      ...event,\n      id: `event_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: new Date(),\n    };\n\n    this.securityEvents.push(securityEvent);\n\n    // In real app, send to security monitoring system\n    // console.log('Security Event:', securityEvent);\n  }\n}\n\n// Export singleton instance\nexport const authService = AuthService.getInstance();\n"],"version":3}