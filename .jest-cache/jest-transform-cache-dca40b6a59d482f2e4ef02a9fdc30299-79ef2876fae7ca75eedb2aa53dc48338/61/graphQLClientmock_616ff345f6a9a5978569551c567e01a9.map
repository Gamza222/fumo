{"file":"/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/api/lib/graphql/graphQLClient.mock.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;GAEG;AACH;IAGE,2BAAoB,OAAmD;QAAnD,wBAAA,EAAA,2CAAmD;QAAnD,YAAO,GAAP,OAAO,CAA4C;QAF/D,UAAK,GAAG,IAAI,GAAG,EAAwC,CAAC;QAG9D,kEAAkE;IACpE,CAAC;IAEK,iCAAK,GAAX,UACE,SAAwC;uCACvC,OAAO;;;;;wBACF,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;wBAElD,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC;4BAC7B,sBAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAqC,EAAC;wBACtE,CAAC;wBAED,yBAAyB;wBACzB,qBAAM,IAAI,OAAO,CAAC,UAAC,OAAO,IAAK,OAAA,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,EAAvB,CAAuB,CAAC,EAAA;;wBADvD,yBAAyB;wBACzB,SAAuD,CAAC;wBAElD,YAAY,GAAoC;4BACpD,IAAI,EAAE,EAAO;4BACb,MAAM,EAAE,EAAE;yBACX,CAAC;wBAEF,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;wBACvC,sBAAO,YAAY,EAAC;;;;KACrB;IAEK,oCAAQ,GAAd,UACE,UAAyC;uCACxC,OAAO;;;;oBACR,yBAAyB;oBACzB,qBAAM,IAAI,OAAO,CAAC,UAAC,OAAO,IAAK,OAAA,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,EAAvB,CAAuB,CAAC,EAAA;;wBADvD,yBAAyB;wBACzB,SAAuD,CAAC;wBAExD,sBAAO;gCACL,IAAI,EAAE,EAAO;gCACb,MAAM,EAAE,EAAE;6BACX,EAAC;;;;KACH;IAEO,4CAAgB,GAAxB,UAAyB,SAAwC;QAC/D,OAAO,UAAG,SAAS,CAAC,OAAO,CAAC,KAAK,cAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,IAAI,EAAE,CAAC,CAAE,CAAC;IAC3F,CAAC;IAED,sCAAU,GAAV;QACE,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IACrB,CAAC;IAED,wCAAY,GAAZ;QACE,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;IACzB,CAAC;IAED,sCAAU,GAAV;QACE,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IACH,wBAAC;AAAD,CAAC,AAvDD,IAuDC;AAvDY,8CAAiB;AAyD9B,+BAA+B;AAClB,QAAA,yBAAyB,GAAG,IAAI,iBAAiB,EAAE,CAAC","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/api/lib/graphql/graphQLClient.mock.ts"],"sourcesContent":["import { mockGraphQLOperationInterface, mockGraphQLResponseInterface } from '../../types/types';\n\n/**\n * Mock GraphQL client for testing\n */\nexport class mockGraphQLClient {\n  private cache = new Map<string, mockGraphQLResponseInterface>();\n\n  constructor(private baseURL: string = 'https://api.example.com/graphql') {\n    // BaseURL stored for potential future use in logging or debugging\n  }\n\n  async query<T = unknown>(\n    operation: mockGraphQLOperationInterface\n  ): Promise<mockGraphQLResponseInterface<T>> {\n    const cacheKey = this.generateCacheKey(operation);\n\n    if (this.cache.has(cacheKey)) {\n      return this.cache.get(cacheKey)! as mockGraphQLResponseInterface<T>;\n    }\n\n    // Simulate network delay\n    await new Promise((resolve) => setTimeout(resolve, 10));\n\n    const mockResponse: mockGraphQLResponseInterface<T> = {\n      data: {} as T,\n      errors: [],\n    };\n\n    this.cache.set(cacheKey, mockResponse);\n    return mockResponse;\n  }\n\n  async mutation<T = unknown>(\n    _operation: mockGraphQLOperationInterface\n  ): Promise<mockGraphQLResponseInterface<T>> {\n    // Simulate network delay\n    await new Promise((resolve) => setTimeout(resolve, 10));\n\n    return {\n      data: {} as T,\n      errors: [],\n    };\n  }\n\n  private generateCacheKey(operation: mockGraphQLOperationInterface): string {\n    return `${operation.request.query}:${JSON.stringify(operation.request.variables || {})}`;\n  }\n\n  clearCache(): void {\n    this.cache.clear();\n  }\n\n  getCacheSize(): number {\n    return this.cache.size;\n  }\n\n  getBaseURL(): string {\n    return this.baseURL;\n  }\n}\n\n// Default instance for testing\nexport const mockGraphQLClientInstance = new mockGraphQLClient();\n"],"version":3}