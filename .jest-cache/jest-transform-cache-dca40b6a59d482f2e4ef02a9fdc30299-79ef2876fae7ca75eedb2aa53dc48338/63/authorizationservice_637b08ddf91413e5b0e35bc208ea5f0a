f8a33f808c81f9251e17c3ae062c8c42
"use strict";
/**
 * Authorization Service
 *
 * Handles user authorization, permission checking, and access control.
 * Universal authorization service for enterprise applications.
 */
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.authorizationService = exports.AuthorizationService = void 0;
var security_types_1 = require("../../types/security.types");
// ============================================================================
// AUTHORIZATION SERVICE
// ============================================================================
var AuthorizationService = /** @class */ (function () {
    function AuthorizationService() {
    }
    AuthorizationService.getInstance = function () {
        if (!AuthorizationService.instance) {
            AuthorizationService.instance = new AuthorizationService();
        }
        return AuthorizationService.instance;
    };
    /**
     * Check if user has specific permission
     */
    AuthorizationService.prototype.hasPermission = function (user, permission) {
        if (!user.isActive) {
            return {
                hasPermission: false,
                reason: 'User account is inactive',
            };
        }
        var userPermissions = this.getEffectivePermissions(user);
        var hasPermission = userPermissions.includes(permission);
        return {
            hasPermission: hasPermission,
            reason: hasPermission ? undefined : "User lacks permission: ".concat(permission),
        };
    };
    /**
     * Check if user has any of the specified permissions
     */
    AuthorizationService.prototype.hasAnyPermission = function (user, permissions) {
        if (!user.isActive) {
            return {
                hasPermission: false,
                reason: 'User account is inactive',
            };
        }
        var userPermissions = this.getEffectivePermissions(user);
        var hasAnyPermission = permissions.some(function (permission) { return userPermissions.includes(permission); });
        return {
            hasPermission: hasAnyPermission,
            reason: hasAnyPermission
                ? undefined
                : "User lacks any of the required permissions: ".concat(permissions.join(', ')),
        };
    };
    /**
     * Check if user has all of the specified permissions
     */
    AuthorizationService.prototype.hasAllPermissions = function (user, permissions) {
        if (!user.isActive) {
            return {
                hasPermission: false,
                reason: 'User account is inactive',
            };
        }
        var userPermissions = this.getEffectivePermissions(user);
        var hasAllPermissions = permissions.every(function (permission) {
            return userPermissions.includes(permission);
        });
        return {
            hasPermission: hasAllPermissions,
            reason: hasAllPermissions
                ? undefined
                : "User lacks required permissions: ".concat(permissions.filter(function (p) { return !userPermissions.includes(p); }).join(', ')),
        };
    };
    /**
     * Check if user has specific role
     */
    AuthorizationService.prototype.hasRole = function (user, role) {
        if (!user.isActive) {
            return {
                hasPermission: false,
                reason: 'User account is inactive',
            };
        }
        var hasRole = user.role === role;
        return {
            hasPermission: hasRole,
            reason: hasRole
                ? undefined
                : "User role '".concat(user.role, "' does not match required role '").concat(role, "'"),
        };
    };
    /**
     * Check if user has any of the specified roles
     */
    AuthorizationService.prototype.hasAnyRole = function (user, roles) {
        if (!user.isActive) {
            return {
                hasPermission: false,
                reason: 'User account is inactive',
            };
        }
        var hasAnyRole = roles.includes(user.role);
        return {
            hasPermission: hasAnyRole,
            reason: hasAnyRole
                ? undefined
                : "User role '".concat(user.role, "' is not in required roles: ").concat(roles.join(', ')),
        };
    };
    /**
     * Check if user can access a specific resource
     */
    AuthorizationService.prototype.canAccessResource = function (context) {
        var user = context.user, resource = context.resource, action = context.action;
        if (!user.isActive) {
            return {
                hasPermission: false,
                reason: 'User account is inactive',
            };
        }
        // Admin users can access everything
        if (user.role === security_types_1.UserRole.ADMIN) {
            return { hasPermission: true };
        }
        // Check resource-specific permissions
        if (resource && action) {
            var requiredPermission = this.getResourcePermission(resource, action);
            if (requiredPermission) {
                return this.hasPermission(user, requiredPermission);
            }
        }
        return { hasPermission: false, reason: 'Access denied' };
    };
    /**
     * Check if user can perform a specific action
     */
    AuthorizationService.prototype.canPerformAction = function (user, resource, action, resourceId) {
        return this.canAccessResource({ user: user, resource: resource, action: action, resourceId: resourceId });
    };
    /**
     * Get effective permissions for a user (role + user-specific)
     */
    AuthorizationService.prototype.getEffectivePermissions = function (user) {
        if (!user.isActive) {
            return [];
        }
        var rolePermissions = this.getRolePermissions(user.role);
        var userPermissions = user.permissions || [];
        var allPermissions = __spreadArray(__spreadArray([], rolePermissions, true), userPermissions, true);
        // Use Array.from instead of spread operator to avoid potential issues
        var result = Array.from(new Set(allPermissions));
        return result;
    };
    // ============================================================================
    // PRIVATE METHODS
    // ============================================================================
    /**
     * Get permissions for a role
     */
    AuthorizationService.prototype.getRolePermissions = function (role) {
        var _a;
        var rolePermissions = (_a = {},
            _a[security_types_1.UserRole.ADMIN] = [
                security_types_1.Permission.READ_USERS,
                security_types_1.Permission.WRITE_USERS,
                security_types_1.Permission.DELETE_USERS,
                security_types_1.Permission.READ_CONTENT,
                security_types_1.Permission.WRITE_CONTENT,
                security_types_1.Permission.DELETE_CONTENT,
                security_types_1.Permission.READ_SYSTEM,
                security_types_1.Permission.WRITE_SYSTEM,
                security_types_1.Permission.ADMIN_SYSTEM,
            ],
            _a[security_types_1.UserRole.MODERATOR] = [
                security_types_1.Permission.READ_USERS,
                security_types_1.Permission.READ_CONTENT,
                security_types_1.Permission.WRITE_CONTENT,
                security_types_1.Permission.DELETE_CONTENT,
            ],
            _a[security_types_1.UserRole.USER] = [security_types_1.Permission.READ_CONTENT, security_types_1.Permission.WRITE_CONTENT],
            _a[security_types_1.UserRole.GUEST] = [security_types_1.Permission.READ_CONTENT],
            _a);
        return rolePermissions[role] || [];
    };
    /**
     * Get permission required for resource action
     */
    AuthorizationService.prototype.getResourcePermission = function (resource, action) {
        var _a;
        var permissionMap = {
            users: {
                read: security_types_1.Permission.READ_USERS,
                write: security_types_1.Permission.WRITE_USERS,
                delete: security_types_1.Permission.DELETE_USERS,
            },
            content: {
                read: security_types_1.Permission.READ_CONTENT,
                write: security_types_1.Permission.WRITE_CONTENT,
                delete: security_types_1.Permission.DELETE_CONTENT,
            },
            system: {
                read: security_types_1.Permission.READ_SYSTEM,
                write: security_types_1.Permission.WRITE_SYSTEM,
                admin: security_types_1.Permission.ADMIN_SYSTEM,
            },
        };
        return ((_a = permissionMap[resource]) === null || _a === void 0 ? void 0 : _a[action]) || null;
    };
    return AuthorizationService;
}());
exports.AuthorizationService = AuthorizationService;
// Export singleton instance
exports.authorizationService = AuthorizationService.getInstance();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,