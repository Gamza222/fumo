{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/security/lib/authorization/authorization.service.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/security/lib/authorization/authorization.service.ts"],"sourcesContent":["/**\n * Authorization Service\n *\n * Handles user authorization, permission checking, and access control.\n * Universal authorization service for enterprise applications.\n */\n\nimport {\n  AuthorizationContext,\n  Permission,\n  PermissionCheck,\n  User,\n  UserRole,\n} from '../../types/security.types';\n\n// ============================================================================\n// AUTHORIZATION SERVICE\n// ============================================================================\n\nexport class AuthorizationService {\n  private static instance: AuthorizationService;\n\n  public constructor() {}\n\n  public static getInstance(): AuthorizationService {\n    if (!AuthorizationService.instance) {\n      AuthorizationService.instance = new AuthorizationService();\n    }\n    return AuthorizationService.instance;\n  }\n\n  /**\n   * Check if user has specific permission\n   */\n  public hasPermission(user: User, permission: Permission): PermissionCheck {\n    if (!user.isActive) {\n      return {\n        hasPermission: false,\n        reason: 'User account is inactive',\n      };\n    }\n\n    const userPermissions = this.getEffectivePermissions(user);\n    const hasPermission = userPermissions.includes(permission);\n\n    return {\n      hasPermission,\n      reason: hasPermission ? undefined : `User lacks permission: ${permission}`,\n    };\n  }\n\n  /**\n   * Check if user has any of the specified permissions\n   */\n  public hasAnyPermission(user: User, permissions: Permission[]): PermissionCheck {\n    if (!user.isActive) {\n      return {\n        hasPermission: false,\n        reason: 'User account is inactive',\n      };\n    }\n\n    const userPermissions = this.getEffectivePermissions(user);\n    const hasAnyPermission = permissions.some((permission) => userPermissions.includes(permission));\n\n    return {\n      hasPermission: hasAnyPermission,\n      reason: hasAnyPermission\n        ? undefined\n        : `User lacks any of the required permissions: ${permissions.join(', ')}`,\n    };\n  }\n\n  /**\n   * Check if user has all of the specified permissions\n   */\n  public hasAllPermissions(user: User, permissions: Permission[]): PermissionCheck {\n    if (!user.isActive) {\n      return {\n        hasPermission: false,\n        reason: 'User account is inactive',\n      };\n    }\n\n    const userPermissions = this.getEffectivePermissions(user);\n    const hasAllPermissions = permissions.every((permission) =>\n      userPermissions.includes(permission)\n    );\n\n    return {\n      hasPermission: hasAllPermissions,\n      reason: hasAllPermissions\n        ? undefined\n        : `User lacks required permissions: ${permissions.filter((p) => !userPermissions.includes(p)).join(', ')}`,\n    };\n  }\n\n  /**\n   * Check if user has specific role\n   */\n  public hasRole(user: User, role: UserRole): PermissionCheck {\n    if (!user.isActive) {\n      return {\n        hasPermission: false,\n        reason: 'User account is inactive',\n      };\n    }\n\n    const hasRole = user.role === role;\n\n    return {\n      hasPermission: hasRole,\n      reason: hasRole\n        ? undefined\n        : `User role '${user.role}' does not match required role '${role}'`,\n    };\n  }\n\n  /**\n   * Check if user has any of the specified roles\n   */\n  public hasAnyRole(user: User, roles: UserRole[]): PermissionCheck {\n    if (!user.isActive) {\n      return {\n        hasPermission: false,\n        reason: 'User account is inactive',\n      };\n    }\n\n    const hasAnyRole = roles.includes(user.role);\n\n    return {\n      hasPermission: hasAnyRole,\n      reason: hasAnyRole\n        ? undefined\n        : `User role '${user.role}' is not in required roles: ${roles.join(', ')}`,\n    };\n  }\n\n  /**\n   * Check if user can access a specific resource\n   */\n  public canAccessResource(context: AuthorizationContext): PermissionCheck {\n    const { user, resource, action } = context;\n\n    if (!user.isActive) {\n      return {\n        hasPermission: false,\n        reason: 'User account is inactive',\n      };\n    }\n\n    // Admin users can access everything\n    if (user.role === UserRole.ADMIN) {\n      return { hasPermission: true };\n    }\n\n    // Check resource-specific permissions\n    if (resource && action) {\n      const requiredPermission = this.getResourcePermission(resource, action);\n      if (requiredPermission) {\n        return this.hasPermission(user, requiredPermission);\n      }\n    }\n\n    return { hasPermission: false, reason: 'Access denied' };\n  }\n\n  /**\n   * Check if user can perform a specific action\n   */\n  public canPerformAction(\n    user: User,\n    resource: string,\n    action: string,\n    resourceId?: string\n  ): PermissionCheck {\n    return this.canAccessResource({ user, resource, action, resourceId });\n  }\n\n  /**\n   * Get effective permissions for a user (role + user-specific)\n   */\n  public getEffectivePermissions(user: User): Permission[] {\n    if (!user.isActive) {\n      return [];\n    }\n    const rolePermissions = this.getRolePermissions(user.role);\n    const userPermissions = user.permissions || [];\n    const allPermissions = [...rolePermissions, ...userPermissions];\n    // Use Array.from instead of spread operator to avoid potential issues\n    const result = Array.from(new Set(allPermissions));\n    return result;\n  }\n\n  // ============================================================================\n  // PRIVATE METHODS\n  // ============================================================================\n\n  /**\n   * Get permissions for a role\n   */\n  private getRolePermissions(role: UserRole): Permission[] {\n    const rolePermissions: Record<UserRole, Permission[]> = {\n      [UserRole.ADMIN]: [\n        Permission.READ_USERS,\n        Permission.WRITE_USERS,\n        Permission.DELETE_USERS,\n        Permission.READ_CONTENT,\n        Permission.WRITE_CONTENT,\n        Permission.DELETE_CONTENT,\n        Permission.READ_SYSTEM,\n        Permission.WRITE_SYSTEM,\n        Permission.ADMIN_SYSTEM,\n      ],\n      [UserRole.MODERATOR]: [\n        Permission.READ_USERS,\n        Permission.READ_CONTENT,\n        Permission.WRITE_CONTENT,\n        Permission.DELETE_CONTENT,\n      ],\n      [UserRole.USER]: [Permission.READ_CONTENT, Permission.WRITE_CONTENT],\n      [UserRole.GUEST]: [Permission.READ_CONTENT],\n    };\n\n    return rolePermissions[role] || [];\n  }\n\n  /**\n   * Get permission required for resource action\n   */\n  private getResourcePermission(resource: string, action: string): Permission | null {\n    const permissionMap: Record<string, Record<string, Permission>> = {\n      users: {\n        read: Permission.READ_USERS,\n        write: Permission.WRITE_USERS,\n        delete: Permission.DELETE_USERS,\n      },\n      content: {\n        read: Permission.READ_CONTENT,\n        write: Permission.WRITE_CONTENT,\n        delete: Permission.DELETE_CONTENT,\n      },\n      system: {\n        read: Permission.READ_SYSTEM,\n        write: Permission.WRITE_SYSTEM,\n        admin: Permission.ADMIN_SYSTEM,\n      },\n    };\n\n    return permissionMap[resource]?.[action] || null;\n  }\n}\n\n// Export singleton instance\nexport const authorizationService = AuthorizationService.getInstance();\n"],"version":3}