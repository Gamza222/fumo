e98ee8a8500d4b745a0d3527b60da381
"use strict";
/**
 * Authentication Service Tests
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock dependencies
jest.mock('jsonwebtoken');
jest.mock('bcryptjs');
var auth_service_1 = require("./auth.service");
var security_types_1 = require("../../types/security.types");
describe('AuthService', function () {
    var authService;
    beforeEach(function () {
        authService = auth_service_1.AuthService.getInstance();
        // Clear any existing users and events
        authService.users = [];
        authService.securityEvents = [];
        jest.clearAllMocks();
    });
    describe('register', function () {
        it('should register a new user successfully', function () { return __awaiter(void 0, void 0, void 0, function () {
            var jwt, registerData, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        jwt = jest.requireMock('jsonwebtoken');
                        jest.mocked(jwt.sign).mockReturnValueOnce('mock_access_token');
                        jest.mocked(jwt.sign).mockReturnValueOnce('mock_refresh_token');
                        registerData = {
                            email: 'test@example.com',
                            username: 'testuser',
                            password: 'password123',
                            confirmPassword: 'password123',
                        };
                        return [4 /*yield*/, authService.register(registerData)];
                    case 1:
                        result = _a.sent();
                        expect(result.user.email).toBe(registerData.email);
                        expect(result.user.username).toBe(registerData.username);
                        expect(result.user.role).toBe(security_types_1.UserRole.USER);
                        expect(result.tokens.accessToken).toBe('mock_access_token');
                        expect(result.tokens.refreshToken).toBe('mock_refresh_token');
                        return [2 /*return*/];
                }
            });
        }); });
        it('should throw error if user already exists', function () { return __awaiter(void 0, void 0, void 0, function () {
            var registerData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        registerData = {
                            email: 'test@example.com',
                            username: 'testuser',
                            password: 'password123',
                            confirmPassword: 'password123',
                        };
                        // Register first user
                        return [4 /*yield*/, authService.register(registerData)];
                    case 1:
                        // Register first user
                        _a.sent();
                        // Try to register same user again
                        return [4 /*yield*/, expect(authService.register(registerData)).rejects.toThrow('User already exists')];
                    case 2:
                        // Try to register same user again
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        it('should throw error if passwords do not match', function () { return __awaiter(void 0, void 0, void 0, function () {
            var registerData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        registerData = {
                            email: 'test@example.com',
                            username: 'testuser',
                            password: 'password123',
                            confirmPassword: 'differentpassword',
                        };
                        return [4 /*yield*/, expect(authService.register(registerData)).rejects.toThrow('Passwords do not match')];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        it('should throw error for invalid email format', function () { return __awaiter(void 0, void 0, void 0, function () {
            var registerData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        registerData = {
                            email: 'invalid-email',
                            username: 'testuser',
                            password: 'password123',
                            confirmPassword: 'password123',
                        };
                        return [4 /*yield*/, expect(authService.register(registerData)).rejects.toThrow('Invalid email format')];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('login', function () {
        it('should login user successfully with valid credentials', function () { return __awaiter(void 0, void 0, void 0, function () {
            var jwt, bcrypt, registerData, loginData, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        jwt = jest.requireMock('jsonwebtoken');
                        bcrypt = jest.requireMock('bcryptjs');
                        // Mock bcrypt.hash for registration
                        jest.mocked(bcrypt.hash).mockResolvedValue('hashed_password');
                        // Mock bcrypt.compare for login
                        jest.mocked(bcrypt.compare).mockResolvedValue(true);
                        // Mock JWT sign for both registration and login
                        jest.mocked(jwt.sign).mockReturnValue('mock_token');
                        registerData = {
                            email: 'test@example.com',
                            username: 'testuser',
                            password: 'password123',
                            confirmPassword: 'password123',
                        };
                        // Register user first
                        return [4 /*yield*/, authService.register(registerData)];
                    case 1:
                        // Register user first
                        _a.sent();
                        loginData = {
                            email: 'test@example.com',
                            password: 'password123',
                        };
                        return [4 /*yield*/, authService.login(loginData)];
                    case 2:
                        result = _a.sent();
                        expect(result.user.email).toBe(loginData.email);
                        expect(result.tokens.accessToken).toBe('mock_token');
                        expect(result.tokens.refreshToken).toBe('mock_token');
                        return [2 /*return*/];
                }
            });
        }); });
        it('should throw error for invalid credentials', function () { return __awaiter(void 0, void 0, void 0, function () {
            var loginData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        loginData = {
                            email: 'nonexistent@example.com',
                            password: 'wrongpassword',
                        };
                        return [4 /*yield*/, expect(authService.login(loginData)).rejects.toThrow('Invalid credentials')];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        it('should throw error for inactive user', function () { return __awaiter(void 0, void 0, void 0, function () {
            var jwt, bcrypt, registerData, users, user, loginData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        jwt = jest.requireMock('jsonwebtoken');
                        bcrypt = jest.requireMock('bcryptjs');
                        // Mock bcrypt.hash for registration
                        jest.mocked(bcrypt.hash).mockResolvedValue('hashed_password');
                        // Mock bcrypt.compare for login
                        jest.mocked(bcrypt.compare).mockResolvedValue(true);
                        // Mock JWT sign for registration
                        jest.mocked(jwt.sign).mockReturnValue('mock_token');
                        registerData = {
                            email: 'test@example.com',
                            username: 'testuser',
                            password: 'password123',
                            confirmPassword: 'password123',
                        };
                        // Register user first
                        return [4 /*yield*/, authService.register(registerData)];
                    case 1:
                        // Register user first
                        _a.sent();
                        users = authService.users;
                        user = users.find(function (u) { return u.email === 'test@example.com'; });
                        if (user) {
                            user.isActive = false;
                        }
                        loginData = {
                            email: 'test@example.com',
                            password: 'password123',
                        };
                        return [4 /*yield*/, expect(authService.login(loginData)).rejects.toThrow('Account is inactive')];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('verifyToken', function () {
        it('should verify valid token successfully', function () { return __awaiter(void 0, void 0, void 0, function () {
            var jwt, registerData, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        jwt = jest.requireMock('jsonwebtoken');
                        jest.mocked(jwt.verify).mockReturnValue({ userId: 'user_123' });
                        registerData = {
                            email: 'test@example.com',
                            username: 'testuser',
                            password: 'password123',
                            confirmPassword: 'password123',
                        };
                        return [4 /*yield*/, authService.register(registerData)];
                    case 1:
                        _a.sent();
                        authService.users[0].id = 'user_123';
                        return [4 /*yield*/, authService.verifyToken('valid_token')];
                    case 2:
                        result = _a.sent();
                        expect(result.id).toBe('user_123');
                        return [2 /*return*/];
                }
            });
        }); });
        it('should throw error for invalid token', function () { return __awaiter(void 0, void 0, void 0, function () {
            var jwt;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        jwt = jest.requireMock('jsonwebtoken');
                        jest.mocked(jwt.verify).mockImplementation(function () {
                            throw new Error('Invalid token');
                        });
                        return [4 /*yield*/, expect(authService.verifyToken('invalid_token')).rejects.toThrow('Invalid token')];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('getSecurityEvents', function () {
        it('should return security events', function () { return __awaiter(void 0, void 0, void 0, function () {
            var registerData, events;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        registerData = {
                            email: 'test@example.com',
                            username: 'testuser',
                            password: 'password123',
                            confirmPassword: 'password123',
                        };
                        return [4 /*yield*/, authService.register(registerData)];
                    case 1:
                        _b.sent();
                        events = authService.getSecurityEvents();
                        expect(events).toHaveLength(1);
                        expect((_a = events[0]) === null || _a === void 0 ? void 0 : _a.type).toBe(security_types_1.SecurityEventType.LOGIN_SUCCESS);
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,