{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/security/lib/auth/auth.service.test.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/security/lib/auth/auth.service.test.ts"],"sourcesContent":["/**\n * Authentication Service Tests\n */\n\nimport { AuthService } from './auth.service';\nimport { SecurityEventType, UserRole } from '../../types/security.types';\n\n// Mock dependencies\njest.mock('jsonwebtoken');\njest.mock('bcryptjs');\n\ndescribe('AuthService', () => {\n  let authService: AuthService;\n\n  beforeEach(() => {\n    authService = AuthService.getInstance();\n    // Clear any existing users and events\n    (authService as any).users = [];\n    (authService as any).securityEvents = [];\n    jest.clearAllMocks();\n  });\n\n  describe('register', () => {\n    it('should register a new user successfully', async () => {\n      const jwt = jest.requireMock('jsonwebtoken');\n      jest.mocked(jwt.sign).mockReturnValueOnce('mock_access_token');\n      jest.mocked(jwt.sign).mockReturnValueOnce('mock_refresh_token');\n\n      const registerData = {\n        email: 'test@example.com',\n        username: 'testuser',\n        password: 'password123',\n        confirmPassword: 'password123',\n      };\n\n      const result = await authService.register(registerData);\n\n      expect(result.user.email).toBe(registerData.email);\n      expect(result.user.username).toBe(registerData.username);\n      expect(result.user.role).toBe(UserRole.USER);\n      expect(result.tokens.accessToken).toBe('mock_access_token');\n      expect(result.tokens.refreshToken).toBe('mock_refresh_token');\n    });\n\n    it('should throw error if user already exists', async () => {\n      const registerData = {\n        email: 'test@example.com',\n        username: 'testuser',\n        password: 'password123',\n        confirmPassword: 'password123',\n      };\n\n      // Register first user\n      await authService.register(registerData);\n\n      // Try to register same user again\n      await expect(authService.register(registerData)).rejects.toThrow('User already exists');\n    });\n\n    it('should throw error if passwords do not match', async () => {\n      const registerData = {\n        email: 'test@example.com',\n        username: 'testuser',\n        password: 'password123',\n        confirmPassword: 'differentpassword',\n      };\n\n      await expect(authService.register(registerData)).rejects.toThrow('Passwords do not match');\n    });\n\n    it('should throw error for invalid email format', async () => {\n      const registerData = {\n        email: 'invalid-email',\n        username: 'testuser',\n        password: 'password123',\n        confirmPassword: 'password123',\n      };\n\n      await expect(authService.register(registerData)).rejects.toThrow('Invalid email format');\n    });\n  });\n\n  describe('login', () => {\n    it('should login user successfully with valid credentials', async () => {\n      const jwt = jest.requireMock('jsonwebtoken');\n      const bcrypt = jest.requireMock('bcryptjs');\n\n      // Mock bcrypt.hash for registration\n      jest.mocked(bcrypt.hash).mockResolvedValue('hashed_password');\n      // Mock bcrypt.compare for login\n      jest.mocked(bcrypt.compare).mockResolvedValue(true);\n      // Mock JWT sign for both registration and login\n      jest.mocked(jwt.sign).mockReturnValue('mock_token');\n\n      const registerData = {\n        email: 'test@example.com',\n        username: 'testuser',\n        password: 'password123',\n        confirmPassword: 'password123',\n      };\n\n      // Register user first\n      await authService.register(registerData);\n\n      const loginData = {\n        email: 'test@example.com',\n        password: 'password123',\n      };\n\n      const result = await authService.login(loginData);\n\n      expect(result.user.email).toBe(loginData.email);\n      expect(result.tokens.accessToken).toBe('mock_token');\n      expect(result.tokens.refreshToken).toBe('mock_token');\n    });\n\n    it('should throw error for invalid credentials', async () => {\n      const loginData = {\n        email: 'nonexistent@example.com',\n        password: 'wrongpassword',\n      };\n\n      await expect(authService.login(loginData)).rejects.toThrow('Invalid credentials');\n    });\n\n    it('should throw error for inactive user', async () => {\n      const jwt = jest.requireMock('jsonwebtoken');\n      const bcrypt = jest.requireMock('bcryptjs');\n\n      // Mock bcrypt.hash for registration\n      jest.mocked(bcrypt.hash).mockResolvedValue('hashed_password');\n      // Mock bcrypt.compare for login\n      jest.mocked(bcrypt.compare).mockResolvedValue(true);\n      // Mock JWT sign for registration\n      jest.mocked(jwt.sign).mockReturnValue('mock_token');\n\n      const registerData = {\n        email: 'test@example.com',\n        username: 'testuser',\n        password: 'password123',\n        confirmPassword: 'password123',\n      };\n\n      // Register user first\n      await authService.register(registerData);\n\n      // Manually deactivate the user in the service's internal storage\n      const users = (authService as any).users;\n      const user = users.find((u: any) => u.email === 'test@example.com');\n      if (user) {\n        user.isActive = false;\n      }\n\n      const loginData = {\n        email: 'test@example.com',\n        password: 'password123',\n      };\n\n      await expect(authService.login(loginData)).rejects.toThrow('Account is inactive');\n    });\n  });\n\n  describe('verifyToken', () => {\n    it('should verify valid token successfully', async () => {\n      const jwt = jest.requireMock('jsonwebtoken');\n      jest.mocked(jwt.verify).mockReturnValue({ userId: 'user_123' });\n\n      const registerData = {\n        email: 'test@example.com',\n        username: 'testuser',\n        password: 'password123',\n        confirmPassword: 'password123',\n      };\n\n      await authService.register(registerData);\n      (authService as any).users[0].id = 'user_123';\n\n      const result = await authService.verifyToken('valid_token');\n\n      expect(result.id).toBe('user_123');\n    });\n\n    it('should throw error for invalid token', async () => {\n      const jwt = jest.requireMock('jsonwebtoken');\n      jest.mocked(jwt.verify).mockImplementation(() => {\n        throw new Error('Invalid token');\n      });\n\n      await expect(authService.verifyToken('invalid_token')).rejects.toThrow('Invalid token');\n    });\n  });\n\n  describe('getSecurityEvents', () => {\n    it('should return security events', async () => {\n      const registerData = {\n        email: 'test@example.com',\n        username: 'testuser',\n        password: 'password123',\n        confirmPassword: 'password123',\n      };\n\n      await authService.register(registerData);\n\n      const events = authService.getSecurityEvents();\n      expect(events).toHaveLength(1);\n      expect(events[0]?.type).toBe(SecurityEventType.LOGIN_SUCCESS);\n    });\n  });\n});\n"],"version":3}