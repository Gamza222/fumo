4514e277a4061c44e1d937c6c7ad8eef
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var classNames_1 = require("./classNames");
describe('classNames utility', function () {
    describe('Basic functionality', function () {
        it('should return base class when called with string only', function () {
            expect((0, classNames_1.classNames)('btn')).toBe('btn');
        });
        it('should return base class with empty mods and additional arrays', function () {
            expect((0, classNames_1.classNames)('btn', {}, [])).toBe('btn');
        });
        it('should handle empty base class', function () {
            expect((0, classNames_1.classNames)('', {}, ['btn-primary'])).toBe('btn-primary');
        });
        it('should handle all empty parameters', function () {
            expect((0, classNames_1.classNames)('', {}, [])).toBe('');
        });
        it('should filter out falsy values', function () {
            expect((0, classNames_1.classNames)('btn', {}, ['btn-primary', '', null, undefined, 'btn-lg'])).toBe('btn btn-primary btn-lg');
        });
    });
    describe('Conditional classes (mods parameter)', function () {
        it('should include classes for truthy values', function () {
            expect((0, classNames_1.classNames)('btn', { 'btn-primary': true, 'btn-disabled': false })).toBe('btn btn-primary');
        });
        it('should handle string values as truthy', function () {
            expect((0, classNames_1.classNames)('btn', { 'btn-primary': 'active', 'btn-disabled': '' })).toBe('btn btn-primary');
        });
        it('should handle number values correctly', function () {
            expect((0, classNames_1.classNames)('btn', { 'btn-primary': 1, 'btn-disabled': 0, 'btn-large': -1 })).toBe('btn btn-primary btn-large');
        });
        it('should handle undefined and null values as falsy', function () {
            expect((0, classNames_1.classNames)('btn', { 'btn-primary': undefined, 'btn-secondary': null, 'btn-tertiary': true })).toBe('btn btn-tertiary');
        });
        it('should handle empty mods object', function () {
            expect((0, classNames_1.classNames)('btn', {})).toBe('btn');
        });
        it('should handle complex boolean expressions', function () {
            var isActive = true;
            var isDisabled = false;
            var isLoading = true;
            var user = { role: 'admin' };
            expect((0, classNames_1.classNames)('btn', {
                'btn-active': isActive,
                'btn-disabled': isDisabled,
                'btn-loading': isLoading,
                'btn-admin': user.role === 'admin',
                'btn-user': user.role === 'user',
            })).toBe('btn btn-active btn-loading btn-admin');
        });
    });
    describe('Additional classes array', function () {
        it('should handle array of strings', function () {
            expect((0, classNames_1.classNames)('btn', {}, ['btn-primary', 'btn-lg'])).toBe('btn btn-primary btn-lg');
        });
        it('should filter out falsy values from additional array', function () {
            expect((0, classNames_1.classNames)('btn', {}, ['btn-primary', undefined, null, '', 'btn-lg'])).toBe('btn btn-primary btn-lg');
        });
        it('should handle empty additional array', function () {
            expect((0, classNames_1.classNames)('btn', {}, [])).toBe('btn');
        });
        it('should handle conditional values in additional array', function () {
            var size = 'lg';
            var variant = 'primary';
            var disabled = false;
            expect((0, classNames_1.classNames)('btn', {}, [
                size && "btn-".concat(size),
                variant && "btn-".concat(variant),
                disabled && 'btn-disabled',
                'btn-rounded',
            ])).toBe('btn btn-lg btn-primary btn-rounded');
        });
    });
    describe('Combined usage patterns', function () {
        it('should combine base, mods, and additional correctly', function () {
            expect((0, classNames_1.classNames)('btn', { 'btn-primary': true, 'btn-disabled': false }, ['btn-lg', 'btn-rounded'])).toBe('btn btn-lg btn-rounded btn-primary');
        });
        it('should handle real-world component scenario', function () {
            var variant = 'primary';
            var size = 'lg';
            var isLoading = true;
            var isDisabled = false;
            var fullWidth = true;
            expect((0, classNames_1.classNames)('button', {
                'button--primary': variant === 'primary',
                'button--secondary': variant === 'secondary',
                'button--loading': isLoading,
                'button--disabled': isDisabled,
                'button--full-width': fullWidth,
            }, [size && "button--".concat(size), 'button--rounded'])).toBe('button button--lg button--rounded button--primary button--loading button--full-width');
        });
        it('should handle complex component with multiple conditions', function () {
            var theme = 'dark';
            var status = 'success';
            var features = ['clickable', 'hoverable'];
            expect((0, classNames_1.classNames)('card', {
                'card--dark': theme === 'dark',
                'card--light': theme === 'light',
                'card--success': status === 'success',
                'card--error': status === 'error',
                'card--clickable': features.includes('clickable'),
                'card--hoverable': features.includes('hoverable'),
            }, ["card--".concat(theme), 'card--elevated'])).toBe('card card--dark card--elevated card--dark card--success card--clickable card--hoverable');
        });
    });
    describe('CSS Modules integration', function () {
        it('should work with CSS modules object', function () {
            var _a;
            var styles = {
                button: 'button_abc123',
                primary: 'primary_def456',
                loading: 'loading_ghi789',
                disabled: 'disabled_jkl012',
            };
            expect((0, classNames_1.classNames)('btn', (_a = {},
                _a[styles.primary] = true,
                _a[styles.loading] = true,
                _a[styles.disabled] = false,
                _a), [styles.button, 'custom-class'])).toBe('btn button_abc123 custom-class primary_def456 loading_ghi789');
        });
        it('should handle CSS modules with dynamic keys', function () {
            var _a;
            var styles = {
                button: 'button_abc123',
                primary: 'primary_def456',
                secondary: 'secondary_ghi789',
                large: 'large_jkl012',
            };
            var variant = 'primary';
            var size = 'large';
            expect((0, classNames_1.classNames)('btn', (_a = {},
                _a[styles[variant]] = true,
                _a[styles[size]] = true,
                _a), [styles.button])).toBe('btn button_abc123 primary_def456 large_jkl012');
        });
    });
    describe('Performance and edge cases', function () {
        it('should handle special characters in class names', function () {
            expect((0, classNames_1.classNames)('btn-primary_123', {}, ['btn--modifier', 'btn:hover', 'btn@media'])).toBe('btn-primary_123 btn--modifier btn:hover btn@media');
        });
        it('should handle empty string base class', function () {
            expect((0, classNames_1.classNames)('', { active: true }, ['btn', 'primary'])).toBe('btn primary active');
        });
        it('should handle large number of classes', function () {
            var mods = Object.fromEntries(Array.from({ length: 20 }, function (_, i) { return ["class-".concat(i), i % 2 === 0]; }));
            var additional = Array.from({ length: 10 }, function (_, i) { return "additional-".concat(i); });
            var result = (0, classNames_1.classNames)('base', mods, additional);
            var classes = result.split(' ');
            expect(result).toContain('base');
            expect(result).toContain('additional-0');
            expect(result).toContain('class-0');
            expect(classes).not.toContain('class-1'); // Use exact match instead of substring
            expect(classes).toContain('class-2');
            expect(classes).not.toContain('class-3');
        });
        it('should maintain consistent class order', function () {
            // Order should be: base, additional, mods
            var result = (0, classNames_1.classNames)('base', { 'mod-z': true, 'mod-a': true }, [
                'additional-z',
                'additional-a',
            ]);
            var classes = result.split(' ');
            expect(classes[0]).toBe('base');
            expect(classes[1]).toBe('additional-z');
            expect(classes[2]).toBe('additional-a');
            // mods order might vary due to Object.entries
        });
        it('should handle duplicate class names gracefully', function () {
            // Note: This utility doesn't dedupe, which is acceptable behavior
            expect((0, classNames_1.classNames)('btn', { btn: true }, ['btn'])).toBe('btn btn btn');
        });
    });
    describe('TypeScript type safety', function () {
        it('should handle different value types in mods', function () {
            var mods = {
                string: 'truthy',
                emptyString: '',
                number: 42,
                zero: 0,
                boolean: true,
                booleanFalse: false,
                undefined: undefined,
                null: null,
            };
            expect((0, classNames_1.classNames)('base', mods)).toBe('base string number boolean');
        });
        it('should handle undefined values throughout', function () {
            expect((0, classNames_1.classNames)('btn', { active: undefined }, [undefined, 'valid', undefined])).toBe('btn valid');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,