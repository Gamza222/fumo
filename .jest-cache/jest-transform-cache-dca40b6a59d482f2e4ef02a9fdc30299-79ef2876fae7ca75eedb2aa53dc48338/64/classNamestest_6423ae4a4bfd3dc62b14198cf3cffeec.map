{"file":"/Users/gamzaramazanov/Desktop/fumo/src/shared/lib/utils/classNames/classNames.test.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/lib/utils/classNames/classNames.test.ts"],"sourcesContent":["import { classNames } from './classNames';\n\ndescribe('classNames utility', () => {\n  describe('Basic functionality', () => {\n    it('should return base class when called with string only', () => {\n      expect(classNames('btn')).toBe('btn');\n    });\n\n    it('should return base class with empty mods and additional arrays', () => {\n      expect(classNames('btn', {}, [])).toBe('btn');\n    });\n\n    it('should handle empty base class', () => {\n      expect(classNames('', {}, ['btn-primary'])).toBe('btn-primary');\n    });\n\n    it('should handle all empty parameters', () => {\n      expect(classNames('', {}, [])).toBe('');\n    });\n\n    it('should filter out falsy values', () => {\n      expect(classNames('btn', {}, ['btn-primary', '', null, undefined, 'btn-lg'])).toBe(\n        'btn btn-primary btn-lg'\n      );\n    });\n  });\n\n  describe('Conditional classes (mods parameter)', () => {\n    it('should include classes for truthy values', () => {\n      expect(classNames('btn', { 'btn-primary': true, 'btn-disabled': false })).toBe(\n        'btn btn-primary'\n      );\n    });\n\n    it('should handle string values as truthy', () => {\n      expect(classNames('btn', { 'btn-primary': 'active', 'btn-disabled': '' })).toBe(\n        'btn btn-primary'\n      );\n    });\n\n    it('should handle number values correctly', () => {\n      expect(classNames('btn', { 'btn-primary': 1, 'btn-disabled': 0, 'btn-large': -1 })).toBe(\n        'btn btn-primary btn-large'\n      );\n    });\n\n    it('should handle undefined and null values as falsy', () => {\n      expect(\n        classNames('btn', { 'btn-primary': undefined, 'btn-secondary': null, 'btn-tertiary': true })\n      ).toBe('btn btn-tertiary');\n    });\n\n    it('should handle empty mods object', () => {\n      expect(classNames('btn', {})).toBe('btn');\n    });\n\n    it('should handle complex boolean expressions', () => {\n      const isActive = true;\n      const isDisabled = false;\n      const isLoading = true;\n      const user = { role: 'admin' };\n\n      expect(\n        classNames('btn', {\n          'btn-active': isActive,\n          'btn-disabled': isDisabled,\n          'btn-loading': isLoading,\n          'btn-admin': user.role === 'admin',\n          'btn-user': user.role === 'user',\n        })\n      ).toBe('btn btn-active btn-loading btn-admin');\n    });\n  });\n\n  describe('Additional classes array', () => {\n    it('should handle array of strings', () => {\n      expect(classNames('btn', {}, ['btn-primary', 'btn-lg'])).toBe('btn btn-primary btn-lg');\n    });\n\n    it('should filter out falsy values from additional array', () => {\n      expect(classNames('btn', {}, ['btn-primary', undefined, null, '', 'btn-lg'])).toBe(\n        'btn btn-primary btn-lg'\n      );\n    });\n\n    it('should handle empty additional array', () => {\n      expect(classNames('btn', {}, [])).toBe('btn');\n    });\n\n    it('should handle conditional values in additional array', () => {\n      const size = 'lg';\n      const variant = 'primary';\n      const disabled = false;\n\n      expect(\n        classNames('btn', {}, [\n          size && `btn-${size}`,\n          variant && `btn-${variant}`,\n          disabled && 'btn-disabled',\n          'btn-rounded',\n        ])\n      ).toBe('btn btn-lg btn-primary btn-rounded');\n    });\n  });\n\n  describe('Combined usage patterns', () => {\n    it('should combine base, mods, and additional correctly', () => {\n      expect(\n        classNames('btn', { 'btn-primary': true, 'btn-disabled': false }, ['btn-lg', 'btn-rounded'])\n      ).toBe('btn btn-lg btn-rounded btn-primary');\n    });\n\n    it('should handle real-world component scenario', () => {\n      const variant = 'primary' as 'primary' | 'secondary';\n      const size = 'lg';\n      const isLoading = true;\n      const isDisabled = false;\n      const fullWidth = true;\n\n      expect(\n        classNames(\n          'button',\n          {\n            'button--primary': variant === 'primary',\n            'button--secondary': variant === 'secondary',\n            'button--loading': isLoading,\n            'button--disabled': isDisabled,\n            'button--full-width': fullWidth,\n          },\n          [size && `button--${size}`, 'button--rounded']\n        )\n      ).toBe(\n        'button button--lg button--rounded button--primary button--loading button--full-width'\n      );\n    });\n\n    it('should handle complex component with multiple conditions', () => {\n      const theme = 'dark' as 'dark' | 'light';\n      const status = 'success' as 'success' | 'error';\n      const features = ['clickable', 'hoverable'];\n\n      expect(\n        classNames(\n          'card',\n          {\n            'card--dark': theme === 'dark',\n            'card--light': theme === 'light',\n            'card--success': status === 'success',\n            'card--error': status === 'error',\n            'card--clickable': features.includes('clickable'),\n            'card--hoverable': features.includes('hoverable'),\n          },\n          [`card--${theme}`, 'card--elevated']\n        )\n      ).toBe(\n        'card card--dark card--elevated card--dark card--success card--clickable card--hoverable'\n      );\n    });\n  });\n\n  describe('CSS Modules integration', () => {\n    it('should work with CSS modules object', () => {\n      const styles = {\n        button: 'button_abc123',\n        primary: 'primary_def456',\n        loading: 'loading_ghi789',\n        disabled: 'disabled_jkl012',\n      };\n\n      expect(\n        classNames(\n          'btn',\n          {\n            [styles.primary]: true,\n            [styles.loading]: true,\n            [styles.disabled]: false,\n          },\n          [styles.button, 'custom-class']\n        )\n      ).toBe('btn button_abc123 custom-class primary_def456 loading_ghi789');\n    });\n\n    it('should handle CSS modules with dynamic keys', () => {\n      const styles = {\n        button: 'button_abc123',\n        primary: 'primary_def456',\n        secondary: 'secondary_ghi789',\n        large: 'large_jkl012',\n      };\n\n      const variant = 'primary';\n      const size = 'large';\n\n      expect(\n        classNames(\n          'btn',\n          {\n            [styles[variant]]: true,\n            [styles[size]]: true,\n          },\n          [styles.button]\n        )\n      ).toBe('btn button_abc123 primary_def456 large_jkl012');\n    });\n  });\n\n  describe('Performance and edge cases', () => {\n    it('should handle special characters in class names', () => {\n      expect(classNames('btn-primary_123', {}, ['btn--modifier', 'btn:hover', 'btn@media'])).toBe(\n        'btn-primary_123 btn--modifier btn:hover btn@media'\n      );\n    });\n\n    it('should handle empty string base class', () => {\n      expect(classNames('', { active: true }, ['btn', 'primary'])).toBe('btn primary active');\n    });\n\n    it('should handle large number of classes', () => {\n      const mods = Object.fromEntries(\n        Array.from({ length: 20 }, (_, i) => [`class-${i}`, i % 2 === 0])\n      );\n      const additional = Array.from({ length: 10 }, (_, i) => `additional-${i}`);\n\n      const result = classNames('base', mods, additional);\n      const classes = result.split(' ');\n\n      expect(result).toContain('base');\n      expect(result).toContain('additional-0');\n      expect(result).toContain('class-0');\n      expect(classes).not.toContain('class-1'); // Use exact match instead of substring\n      expect(classes).toContain('class-2');\n      expect(classes).not.toContain('class-3');\n    });\n\n    it('should maintain consistent class order', () => {\n      // Order should be: base, additional, mods\n      const result = classNames('base', { 'mod-z': true, 'mod-a': true }, [\n        'additional-z',\n        'additional-a',\n      ]);\n      const classes = result.split(' ');\n\n      expect(classes[0]).toBe('base');\n      expect(classes[1]).toBe('additional-z');\n      expect(classes[2]).toBe('additional-a');\n      // mods order might vary due to Object.entries\n    });\n\n    it('should handle duplicate class names gracefully', () => {\n      // Note: This utility doesn't dedupe, which is acceptable behavior\n      expect(classNames('btn', { btn: true }, ['btn'])).toBe('btn btn btn');\n    });\n  });\n\n  describe('TypeScript type safety', () => {\n    it('should handle different value types in mods', () => {\n      const mods = {\n        string: 'truthy',\n        emptyString: '',\n        number: 42,\n        zero: 0,\n        boolean: true,\n        booleanFalse: false,\n        undefined,\n        null: null,\n      };\n\n      expect(classNames('base', mods)).toBe('base string number boolean');\n    });\n\n    it('should handle undefined values throughout', () => {\n      expect(classNames('btn', { active: undefined }, [undefined, 'valid', undefined])).toBe(\n        'btn valid'\n      );\n    });\n  });\n});\n"],"version":3}