{"file":"/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/security/rateLimiter.mock.ts","mappings":";AAAA;;;;;GAKG;;;;;;;;;;;;;;AAIH,+BAA+B;AAC/B,IAAM,wBAAwB,GAA+B;IAC3D,KAAK,EAAE,CAAC;IACR,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,EAAE,oBAAoB;IACnD,KAAK,EAAE,GAAG;IACV,SAAS,EAAE,GAAG;IACd,QAAQ,EAAE,KAAK;CAChB,CAAC;AAEF;;;;;GAKG;AACI,IAAM,sBAAsB,GAAG,UACpC,UAAyD;IAAzD,2BAAA,EAAA,eAAyD;IAEzD,IAAM,WAAW,cACf,cAAc,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;YACxC,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,wBAAwB;SAC/B,CAAC,EACF,gBAAgB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,wBAAwB,CAAC,EACrE,cAAc,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,EAC/C,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,UAAU,CAAC,EAClD,sBAAsB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,EAAE,CAAC,EACrD,aAAa,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;YACvC,aAAa,EAAE,CAAC;YAChB,eAAe,EAAE,CAAC;YAClB,YAAY,EAAE,CAAC;SAChB,CAAC,IACC,UAAU,CACd,CAAC;IAEF,OAAO,WAAW,CAAC;AACrB,CAAC,CAAC;AArBW,QAAA,sBAAsB,0BAqBjC;AAEF;;;;;GAKG;AACI,IAAM,iBAAiB,GAAG,UAC/B,UAAoD;IAApD,2BAAA,EAAA,eAAoD;IAEpD,6BACK,wBAAwB,GACxB,UAAU,EACb;AACJ,CAAC,CAAC;AAPW,QAAA,iBAAiB,qBAO5B;AAEF;;;;;;GAMG;AACI,IAAM,mBAAmB,GAAG,UACjC,OAAuB,EACvB,UAAgD;IADhD,wBAAA,EAAA,cAAuB;IAGvB,OAAO;QACL,OAAO,SAAA;QACP,IAAI,EAAE,IAAA,yBAAiB,EAAC,UAAU,CAAC;KACpC,CAAC;AACJ,CAAC,CAAC;AARW,QAAA,mBAAmB,uBAQ9B;AAEF,yBAAyB;AACZ,QAAA,6BAA6B,GAAG,IAAA,8BAAsB,GAAE,CAAC;AACzD,QAAA,wBAAwB,GAAG,IAAA,yBAAiB,GAAE,CAAC;AAC/C,QAAA,0BAA0B,GAAG,IAAA,2BAAmB,GAAE,CAAC","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/security/rateLimiter.mock.ts"],"sourcesContent":["/**\n * Rate Limiter Service Mock for Testing\n *\n * Provides mock implementations for rate limiter service testing.\n * Simulates rate limiting, request tracking, and statistics.\n */\n\nimport { mockRateLimiterServiceInterface, mockRateLimitInfoInterface } from '../../types/types';\n\n// Default mock rate limit info\nconst defaultMockRateLimitInfo: mockRateLimitInfoInterface = {\n  count: 0,\n  resetTime: Date.now() + 60000, // 1 minute from now\n  limit: 100,\n  remaining: 100,\n  windowMs: 60000,\n};\n\n/**\n * Creates a mock rate limiter service for testing\n *\n * @param customData - Optional custom mock data to override defaults\n * @returns A mock rate limiter service object\n */\nexport const mockRateLimiterService = (\n  customData: Partial<mockRateLimiterServiceInterface> = {}\n): mockRateLimiterServiceInterface => {\n  const mockService: mockRateLimiterServiceInterface = {\n    checkRateLimit: jest.fn().mockReturnValue({\n      allowed: true,\n      info: defaultMockRateLimitInfo,\n    }),\n    getRateLimitInfo: jest.fn().mockReturnValue(defaultMockRateLimitInfo),\n    resetRateLimit: jest.fn().mockReturnValue(true),\n    generateKey: jest.fn().mockReturnValue('mock-key'),\n    getAllActiveRateLimits: jest.fn().mockReturnValue([]),\n    getStatistics: jest.fn().mockReturnValue({\n      totalRequests: 0,\n      blockedRequests: 0,\n      activeLimits: 0,\n    }),\n    ...customData,\n  };\n\n  return mockService;\n};\n\n/**\n * Creates mock rate limit info for testing\n *\n * @param customData - Optional custom rate limit info to override defaults\n * @returns Mock rate limit info\n */\nexport const mockRateLimitInfo = (\n  customData: Partial<mockRateLimitInfoInterface> = {}\n): mockRateLimitInfoInterface => {\n  return {\n    ...defaultMockRateLimitInfo,\n    ...customData,\n  };\n};\n\n/**\n * Creates mock rate limit check result for testing\n *\n * @param allowed - Whether the request is allowed\n * @param customInfo - Optional custom rate limit info\n * @returns Mock rate limit check result\n */\nexport const mockRateLimitResult = (\n  allowed: boolean = true,\n  customInfo?: Partial<mockRateLimitInfoInterface>\n) => {\n  return {\n    allowed,\n    info: mockRateLimitInfo(customInfo),\n  };\n};\n\n// Default mock instances\nexport const defaultRateLimiterServiceMock = mockRateLimiterService();\nexport const defaultRateLimitInfoMock = mockRateLimitInfo();\nexport const defaultRateLimitResultMock = mockRateLimitResult();\n"],"version":3}