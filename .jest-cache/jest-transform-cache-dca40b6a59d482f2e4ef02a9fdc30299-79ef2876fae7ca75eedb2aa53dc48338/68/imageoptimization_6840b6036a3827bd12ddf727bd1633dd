4f16712660f49fb5225469c4d5472b74
"use strict";
/**
 * Image Optimization Utilities
 *
 * Next.js Image component optimization and utilities for maximum performance.
 * Built on top of existing performance monitoring infrastructure.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateOptimizedImageUrl = generateOptimizedImageUrl;
exports.generateResponsiveImageSources = generateResponsiveImageSources;
exports.generateBlurPlaceholder = generateBlurPlaceholder;
exports.calculateOptimizationRatio = calculateOptimizationRatio;
exports.getOptimalImageFormat = getOptimalImageFormat;
exports.preloadOptimizedImages = preloadOptimizedImages;
exports.setupLazyImageLoading = setupLazyImageLoading;
exports.getImageOptimizationResult = getImageOptimizationResult;
var performance_enums_1 = require("../../types/performance.enums");
var performance_monitor_1 = require("../performance-monitor");
// ============================================================================
// DEFAULT CONFIGURATION
// ============================================================================
var DEFAULT_CONFIG = {
    quality: 75,
    format: performance_enums_1.ImageFormat.WEBP,
    responsive: true,
    lazyThreshold: 0.1,
    placeholder: 'blur',
};
// ============================================================================
// IMAGE OPTIMIZATION UTILITIES
// ============================================================================
/**
 * Generate optimized image URL with Next.js Image optimization
 */
function generateOptimizedImageUrl(src, width, height, config) {
    if (config === void 0) { config = {}; }
    var finalConfig = __assign(__assign({}, DEFAULT_CONFIG), config);
    // Start performance measurement
    var startTime = performance.now();
    try {
        // Build Next.js Image optimization URL
        var params = new URLSearchParams();
        // Add quality parameter
        if (finalConfig.quality) {
            params.set('q', finalConfig.quality.toString());
        }
        // Add format parameter
        if (finalConfig.format) {
            params.set('f', finalConfig.format);
        }
        // Add responsive parameter
        if (finalConfig.responsive) {
            params.set('w', width.toString());
            params.set('h', height.toString());
        }
        // Build optimized URL
        var optimizedUrl = "".concat(src, "?").concat(params.toString());
        // Measure performance
        var endTime = performance.now();
        var optimizationTime = endTime - startTime;
        // Track performance metric
        performance_monitor_1.performanceMonitor.addMetric({
            name: 'image_optimization',
            value: optimizationTime,
            timestamp: Date.now(),
            rating: optimizationTime < 10
                ? performance_enums_1.PerformanceRating.GOOD
                : optimizationTime < 50
                    ? performance_enums_1.PerformanceRating.NEEDS_IMPROVEMENT
                    : performance_enums_1.PerformanceRating.POOR,
        });
        return optimizedUrl;
    }
    catch (error) {
        // Track error as performance metric
        performance_monitor_1.performanceMonitor.addMetric({
            name: 'image_optimization_error',
            value: 0,
            timestamp: Date.now(),
            rating: performance_enums_1.PerformanceRating.POOR,
        });
        // Return original URL as fallback
        return src;
    }
}
/**
 * Generate responsive image sources for different screen sizes
 */
function generateResponsiveImageSources(src, sizes, config) {
    if (config === void 0) { config = {}; }
    var finalConfig = __assign(__assign({}, DEFAULT_CONFIG), config);
    return sizes.map(function (_a) {
        var width = _a.width, height = _a.height, breakpoint = _a.breakpoint;
        return ({
            src: generateOptimizedImageUrl(src, width, height, finalConfig),
            width: width,
            height: height,
            media: "(max-width: ".concat(breakpoint, ")"),
        });
    });
}
/**
 * Generate blur placeholder data URL
 */
function generateBlurPlaceholder(width, height) {
    if (width === void 0) { width = 10; }
    if (height === void 0) { height = 10; }
    var canvas = document.createElement('canvas');
    canvas.width = width;
    canvas.height = height;
    var ctx = canvas.getContext('2d');
    if (!ctx)
        return '';
    // Create a simple gradient placeholder
    var gradient = ctx.createLinearGradient(0, 0, width, height);
    gradient.addColorStop(0, '#f3f4f6');
    gradient.addColorStop(1, '#e5e7eb');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, width, height);
    return canvas.toDataURL('image/jpeg', 0.1);
}
/**
 * Calculate image optimization ratio
 */
function calculateOptimizationRatio(originalSize, optimizedSize) {
    if (originalSize === 0)
        return 0;
    return Math.round(((originalSize - optimizedSize) / originalSize) * 100);
}
/**
 * Get image format based on browser support
 */
function getOptimalImageFormat() {
    // Check for AVIF support
    if (typeof window !== 'undefined') {
        var canvas = document.createElement('canvas');
        canvas.width = 1;
        canvas.height = 1;
        var ctx = canvas.getContext('2d');
        if (ctx) {
            // Test AVIF support
            var avifSupported = canvas.toDataURL('image/avif').indexOf('data:image/avif') === 0;
            if (avifSupported)
                return 'avif';
            // Test WebP support
            var webpSupported = canvas.toDataURL('image/webp').indexOf('data:image/webp') === 0;
            if (webpSupported)
                return 'webp';
        }
    }
    // Fallback to JPEG
    return 'jpeg';
}
/**
 * Preload critical images with optimization
 */
function preloadOptimizedImages(images, config) {
    if (config === void 0) { config = {}; }
    var finalConfig = __assign(__assign({}, DEFAULT_CONFIG), config);
    images.forEach(function (_a) {
        var src = _a.src, width = _a.width, height = _a.height;
        var optimizedSrc = generateOptimizedImageUrl(src, width, height, finalConfig);
        var link = document.createElement('link');
        link.rel = 'preload';
        link.as = 'image';
        link.href = optimizedSrc;
        link.setAttribute('imagesizes', "".concat(width, "px"));
        link.setAttribute('imagesrcset', optimizedSrc);
        document.head.appendChild(link);
    });
}
/**
 * Lazy load images with intersection observer
 */
function setupLazyImageLoading(imageSelector, config) {
    if (imageSelector === void 0) { imageSelector = 'img[data-lazy]'; }
    if (config === void 0) { config = {}; }
    var finalConfig = __assign(__assign({}, DEFAULT_CONFIG), config);
    if (typeof window === 'undefined')
        return;
    var images = document.querySelectorAll(imageSelector);
    var observer = new IntersectionObserver(function (entries) {
        entries.forEach(function (entry) {
            if (entry.isIntersecting) {
                var img = entry.target;
                var src = img.dataset.lazy;
                if (src) {
                    // Load the optimized image
                    var optimizedSrc = generateOptimizedImageUrl(src, img.width || 800, img.height || 600, finalConfig);
                    img.src = optimizedSrc;
                    img.removeAttribute('data-lazy');
                    observer.unobserve(img);
                }
            }
        });
    }, {
        rootMargin: "".concat((finalConfig.lazyThreshold || 0.1) * 100, "%"),
    });
    images.forEach(function (img) { return observer.observe(img); });
}
/**
 * Get image optimization result with metrics
 */
function getImageOptimizationResult(_originalSrc, optimizedSrc, width, height) {
    // Calculate file size (simplified - in real app you'd measure actual sizes)
    var estimatedOriginalSize = width * height * 3; // Rough estimate
    var estimatedOptimizedSize = Math.round(estimatedOriginalSize * 0.3); // WebP is ~70% smaller
    return {
        src: optimizedSrc,
        width: width,
        height: height,
        format: 'webp',
        size: estimatedOptimizedSize,
        optimizationRatio: calculateOptimizationRatio(estimatedOriginalSize, estimatedOptimizedSize),
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,