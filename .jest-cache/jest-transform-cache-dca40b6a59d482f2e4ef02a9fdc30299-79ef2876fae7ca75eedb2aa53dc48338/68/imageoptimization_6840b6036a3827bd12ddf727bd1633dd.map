{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/performance/lib/image-optimization/image-optimization.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/performance/lib/image-optimization/image-optimization.ts"],"sourcesContent":["/**\n * Image Optimization Utilities\n *\n * Next.js Image component optimization and utilities for maximum performance.\n * Built on top of existing performance monitoring infrastructure.\n */\n\nimport type {\n  ImageOptimizationConfig,\n  ImageOptimizationResult,\n} from '../../types/performance.types';\nimport { ImageFormat, PerformanceRating } from '../../types/performance.enums';\nimport { performanceMonitor } from '../performance-monitor';\n\n// ============================================================================\n// DEFAULT CONFIGURATION\n// ============================================================================\n\nconst DEFAULT_CONFIG: ImageOptimizationConfig = {\n  quality: 75,\n  format: ImageFormat.WEBP,\n  responsive: true,\n  lazyThreshold: 0.1,\n  placeholder: 'blur',\n};\n\n// ============================================================================\n// IMAGE OPTIMIZATION UTILITIES\n// ============================================================================\n\n/**\n * Generate optimized image URL with Next.js Image optimization\n */\nexport function generateOptimizedImageUrl(\n  src: string,\n  width: number,\n  height: number,\n  config: ImageOptimizationConfig = {}\n): string {\n  const finalConfig = { ...DEFAULT_CONFIG, ...config };\n\n  // Start performance measurement\n  const startTime = performance.now();\n\n  try {\n    // Build Next.js Image optimization URL\n    const params = new URLSearchParams();\n\n    // Add quality parameter\n    if (finalConfig.quality) {\n      params.set('q', finalConfig.quality.toString());\n    }\n\n    // Add format parameter\n    if (finalConfig.format) {\n      params.set('f', finalConfig.format);\n    }\n\n    // Add responsive parameter\n    if (finalConfig.responsive) {\n      params.set('w', width.toString());\n      params.set('h', height.toString());\n    }\n\n    // Build optimized URL\n    const optimizedUrl = `${src}?${params.toString()}`;\n\n    // Measure performance\n    const endTime = performance.now();\n    const optimizationTime = endTime - startTime;\n\n    // Track performance metric\n    performanceMonitor.addMetric({\n      name: 'image_optimization',\n      value: optimizationTime,\n      timestamp: Date.now(),\n      rating:\n        optimizationTime < 10\n          ? PerformanceRating.GOOD\n          : optimizationTime < 50\n            ? PerformanceRating.NEEDS_IMPROVEMENT\n            : PerformanceRating.POOR,\n    });\n\n    return optimizedUrl;\n  } catch (error) {\n    // Track error as performance metric\n    performanceMonitor.addMetric({\n      name: 'image_optimization_error',\n      value: 0,\n      timestamp: Date.now(),\n      rating: PerformanceRating.POOR,\n    });\n\n    // Return original URL as fallback\n    return src;\n  }\n}\n\n/**\n * Generate responsive image sources for different screen sizes\n */\nexport function generateResponsiveImageSources(\n  src: string,\n  sizes: { width: number; height: number; breakpoint: string }[],\n  config: ImageOptimizationConfig = {}\n): { src: string; width: number; height: number; media: string }[] {\n  const finalConfig = { ...DEFAULT_CONFIG, ...config };\n\n  return sizes.map(({ width, height, breakpoint }) => ({\n    src: generateOptimizedImageUrl(src, width, height, finalConfig),\n    width,\n    height,\n    media: `(max-width: ${breakpoint})`,\n  }));\n}\n\n/**\n * Generate blur placeholder data URL\n */\nexport function generateBlurPlaceholder(width: number = 10, height: number = 10): string {\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n\n  const ctx = canvas.getContext('2d');\n  if (!ctx) return '';\n\n  // Create a simple gradient placeholder\n  const gradient = ctx.createLinearGradient(0, 0, width, height);\n  gradient.addColorStop(0, '#f3f4f6');\n  gradient.addColorStop(1, '#e5e7eb');\n\n  ctx.fillStyle = gradient;\n  ctx.fillRect(0, 0, width, height);\n\n  return canvas.toDataURL('image/jpeg', 0.1);\n}\n\n/**\n * Calculate image optimization ratio\n */\nexport function calculateOptimizationRatio(originalSize: number, optimizedSize: number): number {\n  if (originalSize === 0) return 0;\n  return Math.round(((originalSize - optimizedSize) / originalSize) * 100);\n}\n\n/**\n * Get image format based on browser support\n */\nexport function getOptimalImageFormat(): 'webp' | 'avif' | 'jpeg' | 'png' {\n  // Check for AVIF support\n  if (typeof window !== 'undefined') {\n    const canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n\n    const ctx = canvas.getContext('2d');\n    if (ctx) {\n      // Test AVIF support\n      const avifSupported = canvas.toDataURL('image/avif').indexOf('data:image/avif') === 0;\n      if (avifSupported) return 'avif';\n\n      // Test WebP support\n      const webpSupported = canvas.toDataURL('image/webp').indexOf('data:image/webp') === 0;\n      if (webpSupported) return 'webp';\n    }\n  }\n\n  // Fallback to JPEG\n  return 'jpeg';\n}\n\n/**\n * Preload critical images with optimization\n */\nexport function preloadOptimizedImages(\n  images: { src: string; width: number; height: number }[],\n  config: ImageOptimizationConfig = {}\n): void {\n  const finalConfig = { ...DEFAULT_CONFIG, ...config };\n\n  images.forEach(({ src, width, height }) => {\n    const optimizedSrc = generateOptimizedImageUrl(src, width, height, finalConfig);\n\n    const link = document.createElement('link');\n    link.rel = 'preload';\n    link.as = 'image';\n    link.href = optimizedSrc;\n    link.setAttribute('imagesizes', `${width}px`);\n    link.setAttribute('imagesrcset', optimizedSrc);\n\n    document.head.appendChild(link);\n  });\n}\n\n/**\n * Lazy load images with intersection observer\n */\nexport function setupLazyImageLoading(\n  imageSelector: string = 'img[data-lazy]',\n  config: ImageOptimizationConfig = {}\n): void {\n  const finalConfig = { ...DEFAULT_CONFIG, ...config };\n\n  if (typeof window === 'undefined') return;\n\n  const images = document.querySelectorAll(imageSelector);\n\n  const observer = new IntersectionObserver(\n    (entries) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          const img = entry.target as HTMLImageElement;\n          const src = img.dataset.lazy;\n\n          if (src) {\n            // Load the optimized image\n            const optimizedSrc = generateOptimizedImageUrl(\n              src,\n              img.width || 800,\n              img.height || 600,\n              finalConfig\n            );\n\n            img.src = optimizedSrc;\n            img.removeAttribute('data-lazy');\n            observer.unobserve(img);\n          }\n        }\n      });\n    },\n    {\n      rootMargin: `${(finalConfig.lazyThreshold || 0.1) * 100}%`,\n    }\n  );\n\n  images.forEach((img) => observer.observe(img));\n}\n\n/**\n * Get image optimization result with metrics\n */\nexport function getImageOptimizationResult(\n  _originalSrc: string,\n  optimizedSrc: string,\n  width: number,\n  height: number\n): ImageOptimizationResult {\n  // Calculate file size (simplified - in real app you'd measure actual sizes)\n  const estimatedOriginalSize = width * height * 3; // Rough estimate\n  const estimatedOptimizedSize = Math.round(estimatedOriginalSize * 0.3); // WebP is ~70% smaller\n\n  return {\n    src: optimizedSrc,\n    width,\n    height,\n    format: 'webp',\n    size: estimatedOptimizedSize,\n    optimizationRatio: calculateOptimizationRatio(estimatedOriginalSize, estimatedOptimizedSize),\n  };\n}\n"],"version":3}