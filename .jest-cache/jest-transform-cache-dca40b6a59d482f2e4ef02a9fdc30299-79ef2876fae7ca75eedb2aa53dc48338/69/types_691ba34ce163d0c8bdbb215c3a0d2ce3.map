{"version":3,"names":["cov_2lisi9wqf7","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","branchMap","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage"],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/types/types.ts"],"sourcesContent":["/**\n * Infrastructure Mock Types\n *\n * Type definitions for infrastructure-related mocks.\n */\n\nimport type { BaseState, EnhancedStore } from '@/infrastructure/state';\n\n// ============================================================================\n// STATE MANAGEMENT MOCK TYPES\n// ============================================================================\n\n/**\n * Mock store factory options\n */\nexport interface MockStoreOptions {\n  name?: string;\n  persistence?: boolean;\n  devtools?: boolean;\n}\n\n/**\n * Mock store with additional testing utilities\n */\nexport interface MockStoreWithUtils<T> extends EnhancedStore<T & BaseState> {\n  mockUtils: {\n    reset: () => void;\n    setLoading: (loading: boolean) => void;\n    simulateError: (error: Error) => void;\n    waitForState: (predicate: (state: T & BaseState) => boolean) => Promise<T & BaseState>;\n  };\n}\n\n/**\n * State change tracker\n */\nexport interface StateChangeTracker<T> {\n  changes: T[];\n  unsubscribe: () => void;\n  getChangeCount: () => number;\n  getLastChange: () => T | undefined;\n}\n\n/**\n * Mock middleware logger\n */\nexport interface MockLogger {\n  logs: Array<{ action: string; state: unknown; timestamp: number }>;\n  middleware: (f: unknown) => unknown;\n  clearLogs: () => void;\n  getLastLog: () => unknown;\n}\n\n/**\n * Mock analytics tracker\n */\nexport interface MockAnalytics {\n  events: Array<{ type: string; data: unknown; timestamp: number }>;\n  track: (type: string, data: unknown) => void;\n  clearEvents: () => void;\n  getEventCount: () => number;\n  getLastEvent: () => unknown;\n}\n\n// ============================================================================\n// COMMON TEST PATTERNS\n// ============================================================================\n\n/**\n * Common loading state pattern\n */\nexport interface LoadingState {\n  isLoading: boolean;\n  error: string | null;\n}\n\n/**\n * Common async action state pattern\n */\nexport interface AsyncActionState<T> extends LoadingState {\n  data: T | null;\n  lastFetch: number | null;\n}\n\n/**\n * Common paginated data pattern\n */\nexport interface PaginatedState<T> {\n  items: T[];\n  page: number;\n  pageSize: number;\n  total: number;\n  hasMore: boolean;\n}\n\n// ============================================================================\n// SECURITY MOCK TYPES\n// ============================================================================\n\n/**\n * Mock user interface for testing\n */\nexport interface mockUserInterface {\n  id: string;\n  email: string;\n  username: string;\n  role: string;\n  isActive: boolean;\n  permissions: string[];\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n/**\n * Mock login credentials interface for testing\n */\nexport interface mockLoginCredentialsInterface {\n  email: string;\n  password: string;\n}\n\n/**\n * Mock permission type for testing\n */\nexport type mockPermissionInterface = string;\n\n/**\n * Mock auth service interface for testing\n */\nexport interface mockAuthServiceInterface {\n  register: jest.Mock;\n  login: jest.Mock;\n  verifyToken: jest.Mock;\n  getSecurityEvents: jest.Mock;\n}\n\n/**\n * Mock authorization service interface for testing\n */\nexport interface mockAuthorizationServiceInterface {\n  hasPermission: jest.Mock;\n  hasAnyPermission: jest.Mock;\n  hasAllPermissions: jest.Mock;\n  hasRole: jest.Mock;\n  hasAnyRole: jest.Mock;\n  canAccessResource: jest.Mock;\n  getEffectivePermissions: jest.Mock;\n  canPerformAction: jest.Mock;\n  getRolePermissions: jest.Mock;\n}\n\n/**\n * Mock rate limit info interface for testing\n */\nexport interface mockRateLimitInfoInterface {\n  count: number;\n  resetTime: number;\n  limit: number;\n  remaining: number;\n  windowMs: number;\n}\n\n/**\n * Mock rate limiter service interface for testing\n */\nexport interface mockRateLimiterServiceInterface {\n  checkRateLimit: jest.Mock;\n  getRateLimitInfo: jest.Mock;\n  resetRateLimit: jest.Mock;\n  generateKey: jest.Mock;\n  getAllActiveRateLimits: jest.Mock;\n  getStatistics: jest.Mock;\n}\n\n// ============================================================================\n// EXPORTS\n// ============================================================================\n\n// All types are exported inline above\n"],"mappings":";;AAAA;;;;;AAAA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;IAAA;IAAAE,KAAA;IAAAC,SAAA;IAAAC,CAAA;MAAA;IAAA;IAAAC,CAAA;IAAAC,CAAA;IAAAC,cAAA;MAAAC,IAAA;MAAAC,QAAA;MAAAC,KAAA;MAAAC,OAAA;MAAAC,cAAA;MAAAC,OAAA;IAAA;IAAAC,eAAA;IAAAtB,IAAA;EAAA;EAAA,IAAAuB,QAAA,GAAAtB,MAAA,CAAAE,GAAA,MAAAF,MAAA,CAAAE,GAAA;EAAA,KAAAoB,QAAA,CAAAxB,IAAA,KAAAwB,QAAA,CAAAxB,IAAA,EAAAC,IAAA,KAAAA,IAAA;IAAAuB,QAAA,CAAAxB,IAAA,IAAAK,YAAA;EAAA;EAAA,IAAAoB,cAAA,GAAAD,QAAA,CAAAxB,IAAA;EAAA;;;;;;;;;;;;;AA8KA;AACA;AACA;AAEA","ignoreList":[]}