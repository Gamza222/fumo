089a304d4cf24e624b4a103cf03b9fe0
"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
// ============================================================================
// TEST SETUP
// ============================================================================
// Mock the shared Text component
jest.mock("@/shared/ui/Text", function () { return ({
    Text: function (_a) {
        var children = _a.children, className = _a.className;
        return (0, jsx_runtime_1.jsx)("span", { className: className, children: children });
    },
}); });
// Mock the classNames utility
jest.mock("@/shared/lib/utils/classNames", function () { return ({
    classNames: function (base, mods, classes) {
        return __spreadArray([base], classes, true).filter(Boolean).join(" ");
    },
}); });
/**
 * ProgressBar Component Tests
 *
 * Comprehensive tests for the ProgressBar component using semantic queries.
 */
var react_1 = __importDefault(require("react"));
var react_2 = require("@testing-library/react");
var ProgressBar_1 = require("./ProgressBar");
// ============================================================================
// BASIC RENDERING TESTS
// ============================================================================
describe("ProgressBar", function () {
    describe("Basic Rendering", function () {
        it("should render with default props", function () {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 50 }));
            expect(react_2.screen.getByText("50%")).toBeInTheDocument();
        });
        it("should render with custom className", function () {
            var container = (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 25, className: "custom-class" })).container;
            var progressBar = container.firstChild;
            expect(progressBar).toHaveClass("custom-class");
        });
        it("should render progress bar with correct width", function () {
            var container = (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 75 })).container;
            var progressBar = container.firstChild;
            var barElement = progressBar.querySelector(".bar");
            expect(barElement).toHaveStyle("width: 75%");
        });
    });
    // ============================================================================
    // PROGRESS DISPLAY TESTS
    // ============================================================================
    describe("Progress Display", function () {
        it("should show percentage when showPercentage is true", function () {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 33, showPercentage: true }));
            expect(react_2.screen.getByText("33%")).toBeInTheDocument();
        });
        it("should hide percentage when showPercentage is false", function () {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 67, showPercentage: false }));
            expect(react_2.screen.queryByText("67%")).not.toBeInTheDocument();
        });
        it("should round progress to nearest integer", function () {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 33.7 }));
            expect(react_2.screen.getByText("34%")).toBeInTheDocument();
        });
        it("should handle edge case of 0 progress", function () {
            var container = (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 0 })).container;
            expect(react_2.screen.getByText("0%")).toBeInTheDocument();
            var progressBar = container.firstChild;
            var barElement = progressBar.querySelector(".bar");
            expect(barElement).toHaveStyle("width: 0%");
        });
        it("should handle edge case of 100 progress", function () {
            var container = (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 100 })).container;
            expect(react_2.screen.getByText("100%")).toBeInTheDocument();
            var progressBar = container.firstChild;
            var barElement = progressBar.querySelector(".bar");
            expect(barElement).toHaveStyle("width: 100%");
        });
    });
    // ============================================================================
    // MESSAGE DISPLAY TESTS
    // ============================================================================
    describe("Message Display", function () {
        it("should show message when provided", function () {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 50, message: "Loading files..." }));
            expect(react_2.screen.getByText("Loading files...")).toBeInTheDocument();
        });
        it("should not show message when not provided", function () {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 50 }));
            expect(react_2.screen.getByText("50%")).toBeInTheDocument();
            expect(react_2.screen.queryByText("Loading files...")).not.toBeInTheDocument();
        });
        it("should show both percentage and message", function () {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 75, message: "Almost done...", showPercentage: true }));
            expect(react_2.screen.getByText("75%")).toBeInTheDocument();
            expect(react_2.screen.getByText("Almost done...")).toBeInTheDocument();
        });
    });
    // ============================================================================
    // PROGRESS VALIDATION TESTS
    // ============================================================================
    describe("Progress Validation", function () {
        it("should show actual progress above 100 (no clamping in display)", function () {
            var container = (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 150 })).container;
            expect(react_2.screen.getByText("150%")).toBeInTheDocument();
            var progressBar = container.firstChild;
            var barElement = progressBar.querySelector(".bar");
            expect(barElement).toHaveStyle("width: 100%"); // Width is clamped, but display shows actual
        });
        it("should show actual progress below 0 (no clamping in display)", function () {
            var container = (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: -25 })).container;
            expect(react_2.screen.getByText("-25%")).toBeInTheDocument();
            var progressBar = container.firstChild;
            var barElement = progressBar.querySelector(".bar");
            expect(barElement).toHaveStyle("width: 0%"); // Width is clamped, but display shows actual
        });
    });
    // ============================================================================
    // COMPONENT STRUCTURE TESTS
    // ============================================================================
    describe("Component Structure", function () {
        it("should render with correct DOM structure", function () {
            var container = (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 50, message: "Test message" })).container;
            var progressBar = container.firstChild;
            expect(progressBar).toBeInTheDocument();
            // Check container exists
            var containerDiv = progressBar.querySelector(".container");
            expect(containerDiv).toBeInTheDocument();
            // Check bar exists
            var bar = progressBar.querySelector(".bar");
            expect(bar).toBeInTheDocument();
            // Check percentage text exists
            expect(react_2.screen.getByText("50%")).toBeInTheDocument();
            // Check message text exists
            expect(react_2.screen.getByText("Test message")).toBeInTheDocument();
        });
        it("should render percentage and message as separate text elements", function () {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 25, message: "Test message" }));
            var percentageText = react_2.screen.getByText("25%");
            var messageText = react_2.screen.getByText("Test message");
            expect(percentageText).toBeInTheDocument();
            expect(messageText).toBeInTheDocument();
            expect(percentageText).not.toBe(messageText);
        });
    });
    // ============================================================================
    // PROPS COMBINATIONS TESTS
    // ============================================================================
    describe("Props Combinations", function () {
        it("should work with all props provided", function () {
            var container = (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 85, showPercentage: true, message: "Finalizing...", className: "custom-progress" })).container;
            expect(react_2.screen.getByText("85%")).toBeInTheDocument();
            expect(react_2.screen.getByText("Finalizing...")).toBeInTheDocument();
            var progressBar = container.firstChild;
            expect(progressBar).toHaveClass("custom-progress");
        });
        it("should work with minimal props", function () {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 0 }));
            expect(react_2.screen.getByText("0%")).toBeInTheDocument();
        });
        it("should handle empty message gracefully", function () {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 50, message: "" }));
            expect(react_2.screen.getByText("50%")).toBeInTheDocument();
            expect(react_2.screen.queryByText("")).not.toBeInTheDocument();
        });
    });
    // ============================================================================
    // EDGE CASES TESTS
    // ============================================================================
    describe("Edge Cases", function () {
        it("should handle decimal progress values", function () {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 33.333 }));
            expect(react_2.screen.getByText("33%")).toBeInTheDocument();
        });
        it("should handle very large progress values", function () {
            var container = (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 999 })).container;
            expect(react_2.screen.getByText("999%")).toBeInTheDocument();
            var progressBar = container.firstChild;
            var barElement = progressBar.querySelector(".bar");
            expect(barElement).toHaveStyle("width: 100%"); // Clamped
        });
        it("should handle very negative progress values", function () {
            var container = (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: -999 })).container;
            expect(react_2.screen.getByText("-999%")).toBeInTheDocument();
            var progressBar = container.firstChild;
            var barElement = progressBar.querySelector(".bar");
            expect(barElement).toHaveStyle("width: 0%"); // Clamped
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,