{"file":"/Users/gamzaramazanov/Desktop/fumo/src/shared/ui/Text/Text.test.tsx","mappings":";;;AAAA,8BAA8B;AAC9B,gDAAwD;AACxD,+BAA8B;AAC9B,2CAAgE;AAEhE,QAAQ,CAAC,MAAM,EAAE;IACf,IAAI,CAAC,4BAA4B,EAAE;QACjC,IAAA,cAAM,EAAC,uBAAC,WAAI,8BAAmB,CAAC,CAAC;QACjC,IAAM,WAAW,GAAG,cAAM,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QACrD,MAAM,CAAC,WAAW,CAAC,CAAC,iBAAiB,EAAE,CAAC;QACxC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,sBAAsB;IAC/D,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,8BAA8B,EAAE;QACnC,IAAA,cAAM,EAAC,uBAAC,WAAI,IAAC,EAAE,EAAC,IAAI,wBAAe,CAAC,CAAC;QACrC,IAAM,WAAW,GAAG,cAAM,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;QACtE,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,0CAA0C,EAAE;QAC/C,IAAA,cAAM,EACJ,uBAAC,WAAI,IAAC,OAAO,EAAE,wBAAW,CAAC,SAAS,EAAE,IAAI,EAAE,qBAAQ,CAAC,EAAE,EAAE,KAAK,EAAE,sBAAS,CAAC,MAAM,4BAEzE,CACR,CAAC;QACF,IAAM,WAAW,GAAG,cAAM,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QACrD,0DAA0D;QAC1D,MAAM,CAAC,WAAW,CAAC,CAAC,WAAW,CAAC,WAAW,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,0BAA0B,EAAE;QAC/B,IAAA,cAAM,EAAC,uBAAC,WAAI,IAAC,SAAS,EAAC,iBAAiB,uBAAc,CAAC,CAAC;QACxD,IAAM,WAAW,GAAG,cAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QAChD,MAAM,CAAC,WAAW,CAAC,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/ui/Text/Text.test.tsx"],"sourcesContent":["// Removed unused React import\nimport { render, screen } from '@testing-library/react';\nimport { Text } from './Text';\nimport { TextAlign, TextSize, TextVariant } from './Text.types';\n\ndescribe('Text', () => {\n  test('renders with default props', () => {\n    render(<Text>Hello World</Text>);\n    const textElement = screen.getByText(/hello world/i);\n    expect(textElement).toBeInTheDocument();\n    expect(textElement.tagName).toBe('P'); // Default 'as' is 'p'\n  });\n\n  test('renders with a different tag', () => {\n    render(<Text as=\"h1\">Heading</Text>);\n    const textElement = screen.getByRole('heading', { name: /heading/i });\n    expect(textElement.tagName).toBe('H1');\n  });\n\n  test('applies variant, size, and align classes', () => {\n    render(\n      <Text variant={TextVariant.SECONDARY} size={TextSize.LG} align={TextAlign.CENTER}>\n        Styled Text\n      </Text>\n    );\n    const textElement = screen.getByText(/styled text/i);\n    // Test for CSS module classes instead of Tailwind classes\n    expect(textElement).toHaveClass('secondary', 'lg', 'center');\n  });\n\n  test('applies custom className', () => {\n    render(<Text className=\"my-custom-class\">Custom</Text>);\n    const textElement = screen.getByText(/custom/i);\n    expect(textElement).toHaveClass('my-custom-class');\n  });\n});\n"],"version":3}