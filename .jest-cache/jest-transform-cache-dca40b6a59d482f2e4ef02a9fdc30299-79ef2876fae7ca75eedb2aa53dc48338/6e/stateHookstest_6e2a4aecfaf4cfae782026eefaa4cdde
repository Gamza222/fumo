165e43227786b4a799adc0ac2c9e26fe
"use strict";
/**
 * Store Hooks Tests
 *
 * Real-life enterprise scenarios testing with minimal mocking.
 * Uses existing mock factory patterns.
 */
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("@testing-library/react");
var stateHooks_1 = require("./stateHooks");
var createStore_1 = require("../createStore/createStore");
var stateEnums_1 = require("../types/stateEnums");
describe('Store Hooks', function () {
    // ============================================================================
    // BASIC HOOK FUNCTIONALITY
    // ============================================================================
    describe('useStore Hook', function () {
        it('should select and return specific state slice', function () {
            // Real scenario: component needs only count value
            var store = (0, createStore_1.createStore)({
                name: 'counter',
                initialState: {
                    count: 0,
                    step: 1,
                    nested: {
                        items: ['a', 'b'],
                        meta: { updated: false },
                    },
                },
            });
            var result = (0, react_1.renderHook)(function () { return (0, stateHooks_1.useStore)(store, function (state) { return state.count; }); }).result;
            expect(result.current).toBe(0);
        });
        it('should update when selected state changes', function () {
            // Real scenario: reactive component updates
            var store = (0, createStore_1.createStore)({
                name: 'counter',
                initialState: {
                    count: 0,
                    step: 1,
                    nested: {
                        items: ['a', 'b'],
                        meta: { updated: false },
                    },
                },
            });
            var result = (0, react_1.renderHook)(function () { return (0, stateHooks_1.useStore)(store, function (state) { return state.count; }); }).result;
            expect(result.current).toBe(0);
            (0, react_1.act)(function () {
                store.setState({ count: 5 });
            });
            expect(result.current).toBe(5);
        });
        it('should not update when unrelated state changes', function () {
            // Real scenario: optimization - only update when relevant data changes
            var store = (0, createStore_1.createStore)({
                name: 'counter',
                initialState: {
                    count: 0,
                    step: 1,
                    nested: {
                        items: ['a', 'b'],
                        meta: { updated: false },
                    },
                },
            });
            var result = (0, react_1.renderHook)(function () { return (0, stateHooks_1.useStore)(store, function (state) { return state.count; }); }).result;
            var initialRender = result.current;
            (0, react_1.act)(function () {
                store.setState({ step: 2 }); // Unrelated change
            });
            expect(result.current).toBe(initialRender);
            expect(result.current).toBe(0);
        });
        it('should work with complex selectors', function () {
            // Real scenario: computed values from multiple state pieces
            var store = (0, createStore_1.createStore)({
                name: 'todos',
                initialState: {
                    todos: [
                        { id: 1, text: 'Todo 1', completed: false },
                        { id: 2, text: 'Todo 2', completed: true },
                        { id: 3, text: 'Todo 3', completed: false },
                    ],
                    filter: 'all',
                },
            });
            var result = (0, react_1.renderHook)(function () {
                return (0, stateHooks_1.useStore)(store, function (state) { return state.todos.filter(function (todo) { return todo.completed; }).length; });
            }).result;
            expect(result.current).toBe(1);
        });
        it('should work with custom equality function', function () {
            // Real scenario: shallow comparison for object selectors
            var store = (0, createStore_1.createStore)({
                name: 'counter',
                initialState: {
                    count: 0,
                    step: 1,
                    nested: {
                        items: ['a', 'b'],
                        meta: { updated: false },
                    },
                },
            });
            var result = (0, react_1.renderHook)(function () { return (0, stateHooks_1.useStore)(store, function (state) { return state.nested.items; }); }).result;
            var initialItems = result.current;
            (0, react_1.act)(function () {
                // Change array content but keep same length
                store.setState({
                    nested: {
                        items: ['x', 'y'], // Different content, same length
                        meta: { updated: true },
                    },
                });
            });
            // Should update since array changed (custom equality not implemented in basic version)
            expect(result.current).toEqual(['x', 'y']);
            expect(result.current).not.toBe(initialItems);
        });
    });
    // ============================================================================
    // SHALLOW STORE HOOK
    // ============================================================================
    describe('useShallowStore Hook', function () {
        it('should use shallow comparison for basic values', function () {
            // Real scenario: selecting simple values
            var store = (0, createStore_1.createStore)({
                name: 'counter',
                initialState: {
                    count: 0,
                    step: 1,
                    nested: {
                        items: ['a', 'b'],
                        meta: { updated: false },
                    },
                },
            });
            var result = (0, react_1.renderHook)(function () { return (0, stateHooks_1.useShallowStore)(store, function (state) { return state.count; }); }).result;
            expect(result.current).toBe(0);
            (0, react_1.act)(function () {
                store.setState({ count: 5 });
            });
            expect(result.current).toBe(5);
        });
        it('should work with array length selections', function () {
            // Real scenario: selecting array properties
            var store = (0, createStore_1.createStore)({
                name: 'todos',
                initialState: {
                    todos: [
                        { id: 1, text: 'Todo 1', completed: false },
                        { id: 2, text: 'Todo 2', completed: true },
                    ],
                    filter: 'all',
                },
            });
            var result = (0, react_1.renderHook)(function () { return (0, stateHooks_1.useShallowStore)(store, function (state) { return state.todos.length; }); }).result;
            expect(result.current).toBe(2);
        });
    });
    // ============================================================================
    // FULL STATE HOOK
    // ============================================================================
    describe('useStoreState Hook', function () {
        it('should return complete store state', function () {
            // Real scenario: component needs access to entire state
            var store = (0, createStore_1.createStore)({
                name: 'counter',
                initialState: {
                    count: 0,
                    step: 1,
                    nested: {
                        items: ['a', 'b'],
                        meta: { updated: false },
                    },
                },
            });
            var result = (0, react_1.renderHook)(function () { return (0, stateHooks_1.useStoreState)(store); }).result;
            expect(result.current.count).toBe(0);
            expect(result.current.step).toBe(1);
            expect(result.current.nested.items).toEqual(['a', 'b']);
            expect(result.current._hydrated).toBe(false);
        });
        it('should update when any state changes', function () {
            // Real scenario: debug component or state inspector
            var store = (0, createStore_1.createStore)({
                name: 'counter',
                initialState: {
                    count: 0,
                    step: 1,
                    nested: {
                        items: ['a', 'b'],
                        meta: { updated: false },
                    },
                },
            });
            var result = (0, react_1.renderHook)(function () { return (0, stateHooks_1.useStoreState)(store); }).result;
            (0, react_1.act)(function () {
                store.setState({ count: 5, step: 2 });
            });
            expect(result.current.count).toBe(5);
            expect(result.current.step).toBe(2);
        });
    });
    // ============================================================================
    // HYDRATION HOOK
    // ============================================================================
    describe('useStoreHydrated Hook', function () {
        it('should track hydration status', function () {
            // Real scenario: show loading until store is hydrated from persistence
            var store = (0, createStore_1.createStore)({
                name: 'counter',
                initialState: {
                    count: 0,
                    step: 1,
                    nested: {
                        items: ['a', 'b'],
                        meta: { updated: false },
                    },
                },
            });
            var result = (0, react_1.renderHook)(function () { return (0, stateHooks_1.useStoreHydrated)(store); }).result;
            expect(result.current).toBe(false);
            (0, react_1.act)(function () {
                store.setState({ _hydrated: true });
            });
            expect(result.current).toBe(true);
        });
        it('should update when hydration status changes', function () {
            // Real scenario: persistence middleware updates hydration status
            var store = (0, createStore_1.createStore)({
                name: 'counter',
                initialState: {
                    count: 0,
                    step: 1,
                    nested: {
                        items: ['a', 'b'],
                        meta: { updated: false },
                    },
                },
            });
            var result = (0, react_1.renderHook)(function () { return (0, stateHooks_1.useStoreHydrated)(store); }).result;
            expect(result.current).toBe(false);
            // Simulate persistence middleware hydration
            (0, react_1.act)(function () {
                store.setState({ _hydrated: true });
            });
            expect(result.current).toBe(true);
        });
    });
    // ============================================================================
    // ACTIONS HOOK
    // ============================================================================
    describe('useStoreActions Hook', function () {
        it('should provide store action methods', function () {
            // Real scenario: component needs to dispatch actions
            var store = (0, createStore_1.createStore)({
                name: 'counter',
                initialState: {
                    count: 0,
                    step: 1,
                    nested: {
                        items: ['a', 'b'],
                        meta: { updated: false },
                    },
                },
            });
            var result = (0, react_1.renderHook)(function () { return (0, stateHooks_1.useStoreActions)(store); }).result;
            expect(typeof result.current.setState).toBe('function');
            expect(typeof result.current.reset).toBe('function');
            expect(typeof result.current.clearStorage).toBe('function');
        });
        it('should allow state updates through actions', function () {
            // Real scenario: form components updating state
            var store = (0, createStore_1.createStore)({
                name: 'counter',
                initialState: {
                    count: 0,
                    step: 1,
                    nested: {
                        items: ['a', 'b'],
                        meta: { updated: false },
                    },
                },
            });
            var result = (0, react_1.renderHook)(function () { return (0, stateHooks_1.useStoreActions)(store); }).result;
            (0, react_1.act)(function () {
                result.current.setState({ count: 10 });
            });
            expect(store.getState().count).toBe(10);
            (0, react_1.act)(function () {
                result.current.reset();
            });
            expect(store.getState().count).toBe(0);
        });
    });
    // ============================================================================
    // INTEGRATION SCENARIOS
    // ============================================================================
    describe('Integration Scenarios', function () {
        it('should work with multiple hooks on same store', function () {
            // Real scenario: different components using different parts of same store
            var store = (0, createStore_1.createStore)({
                name: 'todos',
                initialState: {
                    todos: [
                        { id: 1, text: 'Todo 1', completed: false },
                        { id: 2, text: 'Todo 2', completed: true },
                    ],
                    filter: 'all',
                },
            });
            var countResult = (0, react_1.renderHook)(function () {
                return (0, stateHooks_1.useStore)(store, function (state) { return state.todos.length; });
            }).result;
            var filterResult = (0, react_1.renderHook)(function () { return (0, stateHooks_1.useStore)(store, function (state) { return state.filter; }); }).result;
            var actionsResult = (0, react_1.renderHook)(function () { return (0, stateHooks_1.useStoreActions)(store); }).result;
            expect(countResult.current).toBe(2);
            expect(filterResult.current).toBe('all');
            (0, react_1.act)(function () {
                actionsResult.current.setState({
                    todos: __spreadArray(__spreadArray([], store.getState().todos, true), [{ id: 3, text: 'Todo 3', completed: false }], false),
                    filter: 'active',
                });
            });
            expect(countResult.current).toBe(3);
            expect(filterResult.current).toBe('active');
        });
        it('should handle rapid state updates efficiently', function () {
            // Real scenario: high-frequency updates (real-time data)
            var store = (0, createStore_1.createStore)({
                name: 'counter',
                initialState: {
                    count: 0,
                    step: 1,
                    nested: {
                        items: ['a', 'b'],
                        meta: { updated: false },
                    },
                },
            });
            var result = (0, react_1.renderHook)(function () { return (0, stateHooks_1.useStore)(store, function (state) { return state.count; }); }).result;
            // Rapid updates
            (0, react_1.act)(function () {
                for (var i = 1; i <= 10; i++) {
                    store.setState({ count: i });
                }
            });
            expect(result.current).toBe(10);
        });
        it('should work with persistence stores', function () {
            // Real scenario: persisted store with hydration
            var store = (0, createStore_1.createStore)({
                name: 'persistent-counter',
                initialState: {
                    count: 0,
                    step: 1,
                    nested: {
                        items: ['a', 'b'],
                        meta: { updated: false },
                    },
                },
                persist: {
                    key: 'counter-data',
                    storage: stateEnums_1.StorageType.LOCAL_STORAGE,
                },
            });
            var countResult = (0, react_1.renderHook)(function () { return (0, stateHooks_1.useStore)(store, function (state) { return state.count; }); }).result;
            expect(countResult.current).toBe(0);
            // Update state
            (0, react_1.act)(function () {
                store.setState({ count: 5 });
            });
            expect(countResult.current).toBe(5);
        });
    });
    // ============================================================================
    // PERFORMANCE SCENARIOS
    // ============================================================================
    describe('Performance Scenarios', function () {
        it('should prevent unnecessary re-renders', function () {
            // Real scenario: optimization for large lists
            var store = (0, createStore_1.createStore)({
                name: 'todos',
                initialState: {
                    todos: Array.from({ length: 1000 }, function (_, i) { return ({
                        id: i,
                        text: "Todo ".concat(i),
                        completed: false,
                    }); }),
                    filter: 'all',
                },
            });
            var renderCount = jest.fn();
            var result = (0, react_1.renderHook)(function () {
                renderCount();
                return (0, stateHooks_1.useStore)(store, function (state) { return state.todos.length; });
            }).result;
            expect(renderCount).toHaveBeenCalledTimes(1);
            expect(result.current).toBe(1000);
            // Update filter (unrelated to selected data)
            (0, react_1.act)(function () {
                store.setState({ filter: 'active' });
            });
            // Should not re-render since length didn't change
            expect(renderCount).toHaveBeenCalledTimes(1);
        });
        it('should handle basic computations', function () {
            // Real scenario: computed values
            var store = (0, createStore_1.createStore)({
                name: 'todos',
                initialState: {
                    todos: [
                        { id: 1, text: 'Todo 1', completed: false },
                        { id: 2, text: 'Todo 2', completed: true },
                        { id: 3, text: 'Todo 3', completed: false },
                    ],
                    filter: 'all',
                },
            });
            var result = (0, react_1.renderHook)(function () {
                return (0, stateHooks_1.useStore)(store, function (state) { return state.todos.filter(function (todo) { return todo.completed; }).length; });
            }).result;
            expect(result.current).toBe(1);
            // Update unrelated state
            (0, react_1.act)(function () {
                store.setState({ filter: 'active' });
            });
            // Result should stay the same
            expect(result.current).toBe(1);
        });
    });
});
describe('Store Hooks Integration', function () {
    it('should work in real component-like scenarios', function () {
        var _a;
        var store = (0, createStore_1.createStore)({
            name: 'app',
            initialState: {
                user: null,
                loading: false,
                error: null,
            },
        });
        // Component 1: Login form
        var loginResult = (0, react_1.renderHook)(function () { return ({
            loading: (0, stateHooks_1.useStore)(store, function (state) { return state.loading; }),
            error: (0, stateHooks_1.useStore)(store, function (state) { return state.error; }),
            actions: (0, stateHooks_1.useStoreActions)(store),
        }); }).result;
        // Component 2: User profile
        var profileResult = (0, react_1.renderHook)(function () { return ({
            user: (0, stateHooks_1.useStore)(store, function (state) { return state.user; }),
            isLoggedIn: (0, stateHooks_1.useStore)(store, function (state) { return !!state.user; }),
        }); }).result;
        // Initial state
        expect(loginResult.current.loading).toBe(false);
        expect(profileResult.current.isLoggedIn).toBe(false);
        // Start login
        (0, react_1.act)(function () {
            loginResult.current.actions.setState({ loading: true });
        });
        expect(loginResult.current.loading).toBe(true);
        // Complete login
        (0, react_1.act)(function () {
            loginResult.current.actions.setState({
                user: { id: '123', name: 'John Doe' },
                loading: false,
                error: null,
            });
        });
        expect(loginResult.current.loading).toBe(false);
        expect(profileResult.current.isLoggedIn).toBe(true);
        expect((_a = profileResult.current.user) === null || _a === void 0 ? void 0 : _a.name).toBe('John Doe');
        // Logout
        (0, react_1.act)(function () {
            loginResult.current.actions.reset();
        });
        expect(profileResult.current.isLoggedIn).toBe(false);
        expect(profileResult.current.user).toBeNull();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,