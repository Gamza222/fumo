{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/state/stateHooks/stateHooks.test.ts","mappings":";AAAA;;;;;GAKG;;;;;;;;;;;AAEH,gDAAyD;AACzD,2CAMsB;AACtB,0DAAyD;AACzD,kDAAkD;AAiBlD,QAAQ,CAAC,aAAa,EAAE;IACtB,+EAA+E;IAC/E,2BAA2B;IAC3B,+EAA+E;IAE/E,QAAQ,CAAC,eAAe,EAAE;QACxB,EAAE,CAAC,+CAA+C,EAAE;YAClD,kDAAkD;YAClD,IAAM,KAAK,GAAG,IAAA,yBAAW,EAAe;gBACtC,IAAI,EAAE,SAAS;gBACf,YAAY,EAAE;oBACZ,KAAK,EAAE,CAAC;oBACR,IAAI,EAAE,CAAC;oBACP,MAAM,EAAE;wBACN,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;wBACjB,IAAI,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;qBACzB;iBACF;aACF,CAAC,CAAC;YAEK,IAAA,MAAM,GAAK,IAAA,kBAAU,EAAC,cAAM,OAAA,IAAA,qBAAQ,EAAC,KAAK,EAAE,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,KAAK,EAAX,CAAW,CAAC,EAAvC,CAAuC,CAAC,OAA9D,CAA+D;YAE7E,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE;YAC9C,4CAA4C;YAC5C,IAAM,KAAK,GAAG,IAAA,yBAAW,EAAe;gBACtC,IAAI,EAAE,SAAS;gBACf,YAAY,EAAE;oBACZ,KAAK,EAAE,CAAC;oBACR,IAAI,EAAE,CAAC;oBACP,MAAM,EAAE;wBACN,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;wBACjB,IAAI,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;qBACzB;iBACF;aACF,CAAC,CAAC;YAEK,IAAA,MAAM,GAAK,IAAA,kBAAU,EAAC,cAAM,OAAA,IAAA,qBAAQ,EAAC,KAAK,EAAE,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,KAAK,EAAX,CAAW,CAAC,EAAvC,CAAuC,CAAC,OAA9D,CAA+D;YAE7E,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAE/B,IAAA,WAAG,EAAC;gBACF,KAAK,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE;YACnD,uEAAuE;YACvE,IAAM,KAAK,GAAG,IAAA,yBAAW,EAAe;gBACtC,IAAI,EAAE,SAAS;gBACf,YAAY,EAAE;oBACZ,KAAK,EAAE,CAAC;oBACR,IAAI,EAAE,CAAC;oBACP,MAAM,EAAE;wBACN,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;wBACjB,IAAI,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;qBACzB;iBACF;aACF,CAAC,CAAC;YAEK,IAAA,MAAM,GAAK,IAAA,kBAAU,EAAC,cAAM,OAAA,IAAA,qBAAQ,EAAC,KAAK,EAAE,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,KAAK,EAAX,CAAW,CAAC,EAAvC,CAAuC,CAAC,OAA9D,CAA+D;YAE7E,IAAM,aAAa,GAAG,MAAM,CAAC,OAAO,CAAC;YAErC,IAAA,WAAG,EAAC;gBACF,KAAK,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB;YAClD,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YAC3C,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oCAAoC,EAAE;YACvC,4DAA4D;YAC5D,IAAM,KAAK,GAAG,IAAA,yBAAW,EAAY;gBACnC,IAAI,EAAE,OAAO;gBACb,YAAY,EAAE;oBACZ,KAAK,EAAE;wBACL,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,KAAK,EAAE;wBAC3C,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,IAAI,EAAE;wBAC1C,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,KAAK,EAAE;qBAC5C;oBACD,MAAM,EAAE,KAAK;iBACd;aACF,CAAC,CAAC;YAEK,IAAA,MAAM,GAAK,IAAA,kBAAU,EAAC;gBAC5B,OAAA,IAAA,qBAAQ,EAAC,KAAK,EAAE,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,UAAC,IAAI,IAAK,OAAA,IAAI,CAAC,SAAS,EAAd,CAAc,CAAC,CAAC,MAAM,EAAnD,CAAmD,CAAC;YAA/E,CAA+E,CAChF,OAFa,CAEZ;YAEF,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE;YAC9C,yDAAyD;YACzD,IAAM,KAAK,GAAG,IAAA,yBAAW,EAAe;gBACtC,IAAI,EAAE,SAAS;gBACf,YAAY,EAAE;oBACZ,KAAK,EAAE,CAAC;oBACR,IAAI,EAAE,CAAC;oBACP,MAAM,EAAE;wBACN,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;wBACjB,IAAI,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;qBACzB;iBACF;aACF,CAAC,CAAC;YAEK,IAAA,MAAM,GAAK,IAAA,kBAAU,EAAC,cAAM,OAAA,IAAA,qBAAQ,EAAC,KAAK,EAAE,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,MAAM,CAAC,KAAK,EAAlB,CAAkB,CAAC,EAA9C,CAA8C,CAAC,OAArE,CAAsE;YAEpF,IAAM,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC;YAEpC,IAAA,WAAG,EAAC;gBACF,4CAA4C;gBAC5C,KAAK,CAAC,QAAQ,CAAC;oBACb,MAAM,EAAE;wBACN,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,iCAAiC;wBACpD,IAAI,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;qBACxB;iBACF,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,uFAAuF;YACvF,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,+EAA+E;IAC/E,qBAAqB;IACrB,+EAA+E;IAE/E,QAAQ,CAAC,sBAAsB,EAAE;QAC/B,EAAE,CAAC,gDAAgD,EAAE;YACnD,yCAAyC;YACzC,IAAM,KAAK,GAAG,IAAA,yBAAW,EAAe;gBACtC,IAAI,EAAE,SAAS;gBACf,YAAY,EAAE;oBACZ,KAAK,EAAE,CAAC;oBACR,IAAI,EAAE,CAAC;oBACP,MAAM,EAAE;wBACN,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;wBACjB,IAAI,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;qBACzB;iBACF;aACF,CAAC,CAAC;YAEK,IAAA,MAAM,GAAK,IAAA,kBAAU,EAAC,cAAM,OAAA,IAAA,4BAAe,EAAC,KAAK,EAAE,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,KAAK,EAAX,CAAW,CAAC,EAA9C,CAA8C,CAAC,OAArE,CAAsE;YAEpF,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAE/B,IAAA,WAAG,EAAC;gBACF,KAAK,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE;YAC7C,4CAA4C;YAC5C,IAAM,KAAK,GAAG,IAAA,yBAAW,EAAY;gBACnC,IAAI,EAAE,OAAO;gBACb,YAAY,EAAE;oBACZ,KAAK,EAAE;wBACL,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,KAAK,EAAE;wBAC3C,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,IAAI,EAAE;qBAC3C;oBACD,MAAM,EAAE,KAAK;iBACd;aACF,CAAC,CAAC;YAEK,IAAA,MAAM,GAAK,IAAA,kBAAU,EAAC,cAAM,OAAA,IAAA,4BAAe,EAAC,KAAK,EAAE,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,KAAK,CAAC,MAAM,EAAlB,CAAkB,CAAC,EAArD,CAAqD,CAAC,OAA5E,CAA6E;YAE3F,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,+EAA+E;IAC/E,kBAAkB;IAClB,+EAA+E;IAE/E,QAAQ,CAAC,oBAAoB,EAAE;QAC7B,EAAE,CAAC,oCAAoC,EAAE;YACvC,wDAAwD;YACxD,IAAM,KAAK,GAAG,IAAA,yBAAW,EAAe;gBACtC,IAAI,EAAE,SAAS;gBACf,YAAY,EAAE;oBACZ,KAAK,EAAE,CAAC;oBACR,IAAI,EAAE,CAAC;oBACP,MAAM,EAAE;wBACN,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;wBACjB,IAAI,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;qBACzB;iBACF;aACF,CAAC,CAAC;YAEK,IAAA,MAAM,GAAK,IAAA,kBAAU,EAAC,cAAM,OAAA,IAAA,0BAAa,EAAC,KAAK,CAAC,EAApB,CAAoB,CAAC,OAA3C,CAA4C;YAE1D,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;YACxD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE;YACzC,oDAAoD;YACpD,IAAM,KAAK,GAAG,IAAA,yBAAW,EAAe;gBACtC,IAAI,EAAE,SAAS;gBACf,YAAY,EAAE;oBACZ,KAAK,EAAE,CAAC;oBACR,IAAI,EAAE,CAAC;oBACP,MAAM,EAAE;wBACN,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;wBACjB,IAAI,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;qBACzB;iBACF;aACF,CAAC,CAAC;YAEK,IAAA,MAAM,GAAK,IAAA,kBAAU,EAAC,cAAM,OAAA,IAAA,0BAAa,EAAC,KAAK,CAAC,EAApB,CAAoB,CAAC,OAA3C,CAA4C;YAE1D,IAAA,WAAG,EAAC;gBACF,KAAK,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,+EAA+E;IAC/E,iBAAiB;IACjB,+EAA+E;IAE/E,QAAQ,CAAC,uBAAuB,EAAE;QAChC,EAAE,CAAC,+BAA+B,EAAE;YAClC,uEAAuE;YACvE,IAAM,KAAK,GAAG,IAAA,yBAAW,EAAe;gBACtC,IAAI,EAAE,SAAS;gBACf,YAAY,EAAE;oBACZ,KAAK,EAAE,CAAC;oBACR,IAAI,EAAE,CAAC;oBACP,MAAM,EAAE;wBACN,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;wBACjB,IAAI,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;qBACzB;iBACF;aACF,CAAC,CAAC;YAEK,IAAA,MAAM,GAAK,IAAA,kBAAU,EAAC,cAAM,OAAA,IAAA,6BAAgB,EAAC,KAAK,CAAC,EAAvB,CAAuB,CAAC,OAA9C,CAA+C;YAE7D,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAEnC,IAAA,WAAG,EAAC;gBACF,KAAK,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;YACtC,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE;YAChD,iEAAiE;YACjE,IAAM,KAAK,GAAG,IAAA,yBAAW,EAAe;gBACtC,IAAI,EAAE,SAAS;gBACf,YAAY,EAAE;oBACZ,KAAK,EAAE,CAAC;oBACR,IAAI,EAAE,CAAC;oBACP,MAAM,EAAE;wBACN,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;wBACjB,IAAI,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;qBACzB;iBACF;aACF,CAAC,CAAC;YAEK,IAAA,MAAM,GAAK,IAAA,kBAAU,EAAC,cAAM,OAAA,IAAA,6BAAgB,EAAC,KAAK,CAAC,EAAvB,CAAuB,CAAC,OAA9C,CAA+C;YAE7D,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAEnC,4CAA4C;YAC5C,IAAA,WAAG,EAAC;gBACF,KAAK,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;YACtC,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,+EAA+E;IAC/E,eAAe;IACf,+EAA+E;IAE/E,QAAQ,CAAC,sBAAsB,EAAE;QAC/B,EAAE,CAAC,qCAAqC,EAAE;YACxC,qDAAqD;YACrD,IAAM,KAAK,GAAG,IAAA,yBAAW,EAAe;gBACtC,IAAI,EAAE,SAAS;gBACf,YAAY,EAAE;oBACZ,KAAK,EAAE,CAAC;oBACR,IAAI,EAAE,CAAC;oBACP,MAAM,EAAE;wBACN,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;wBACjB,IAAI,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;qBACzB;iBACF;aACF,CAAC,CAAC;YAEK,IAAA,MAAM,GAAK,IAAA,kBAAU,EAAC,cAAM,OAAA,IAAA,4BAAe,EAAC,KAAK,CAAC,EAAtB,CAAsB,CAAC,OAA7C,CAA8C;YAE5D,MAAM,CAAC,OAAO,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACxD,MAAM,CAAC,OAAO,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACrD,MAAM,CAAC,OAAO,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4CAA4C,EAAE;YAC/C,gDAAgD;YAChD,IAAM,KAAK,GAAG,IAAA,yBAAW,EAAe;gBACtC,IAAI,EAAE,SAAS;gBACf,YAAY,EAAE;oBACZ,KAAK,EAAE,CAAC;oBACR,IAAI,EAAE,CAAC;oBACP,MAAM,EAAE;wBACN,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;wBACjB,IAAI,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;qBACzB;iBACF;aACF,CAAC,CAAC;YAEK,IAAA,MAAM,GAAK,IAAA,kBAAU,EAAC,cAAM,OAAA,IAAA,4BAAe,EAAC,KAAK,CAAC,EAAtB,CAAsB,CAAC,OAA7C,CAA8C;YAE5D,IAAA,WAAG,EAAC;gBACF,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;YACzC,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAExC,IAAA,WAAG,EAAC;gBACF,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;YACzB,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,+EAA+E;IAC/E,wBAAwB;IACxB,+EAA+E;IAE/E,QAAQ,CAAC,uBAAuB,EAAE;QAChC,EAAE,CAAC,+CAA+C,EAAE;YAClD,0EAA0E;YAC1E,IAAM,KAAK,GAAG,IAAA,yBAAW,EAAY;gBACnC,IAAI,EAAE,OAAO;gBACb,YAAY,EAAE;oBACZ,KAAK,EAAE;wBACL,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,KAAK,EAAE;wBAC3C,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,IAAI,EAAE;qBAC3C;oBACD,MAAM,EAAE,KAAK;iBACd;aACF,CAAC,CAAC;YAEK,IAAQ,WAAW,GAAK,IAAA,kBAAU,EAAC;gBACzC,OAAA,IAAA,qBAAQ,EAAC,KAAK,EAAE,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,KAAK,CAAC,MAAM,EAAlB,CAAkB,CAAC;YAA9C,CAA8C,CAC/C,OAF0B,CAEzB;YAEM,IAAQ,YAAY,GAAK,IAAA,kBAAU,EAAC,cAAM,OAAA,IAAA,qBAAQ,EAAC,KAAK,EAAE,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,MAAM,EAAZ,CAAY,CAAC,EAAxC,CAAwC,CAAC,OAA/D,CAAgE;YAEpF,IAAQ,aAAa,GAAK,IAAA,kBAAU,EAAC,cAAM,OAAA,IAAA,4BAAe,EAAC,KAAK,CAAC,EAAtB,CAAsB,CAAC,OAA7C,CAA8C;YAE3E,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAEzC,IAAA,WAAG,EAAC;gBACF,aAAa,CAAC,OAAO,CAAC,QAAQ,CAAC;oBAC7B,KAAK,kCAAM,KAAK,CAAC,QAAQ,EAAE,CAAC,KAAK,UAAE,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,KAAK,EAAE,SAAC;oBAC/E,MAAM,EAAE,QAAQ;iBACjB,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE;YAClD,yDAAyD;YACzD,IAAM,KAAK,GAAG,IAAA,yBAAW,EAAe;gBACtC,IAAI,EAAE,SAAS;gBACf,YAAY,EAAE;oBACZ,KAAK,EAAE,CAAC;oBACR,IAAI,EAAE,CAAC;oBACP,MAAM,EAAE;wBACN,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;wBACjB,IAAI,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;qBACzB;iBACF;aACF,CAAC,CAAC;YAEK,IAAA,MAAM,GAAK,IAAA,kBAAU,EAAC,cAAM,OAAA,IAAA,qBAAQ,EAAC,KAAK,EAAE,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,KAAK,EAAX,CAAW,CAAC,EAAvC,CAAuC,CAAC,OAA9D,CAA+D;YAE7E,gBAAgB;YAChB,IAAA,WAAG,EAAC;gBACF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;oBAC7B,KAAK,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;gBAC/B,CAAC;YACH,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE;YACxC,gDAAgD;YAChD,IAAM,KAAK,GAAG,IAAA,yBAAW,EAAe;gBACtC,IAAI,EAAE,oBAAoB;gBAC1B,YAAY,EAAE;oBACZ,KAAK,EAAE,CAAC;oBACR,IAAI,EAAE,CAAC;oBACP,MAAM,EAAE;wBACN,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;wBACjB,IAAI,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;qBACzB;iBACF;gBACD,OAAO,EAAE;oBACP,GAAG,EAAE,cAAc;oBACnB,OAAO,EAAE,wBAAW,CAAC,aAAa;iBACnC;aACF,CAAC,CAAC;YAEK,IAAQ,WAAW,GAAK,IAAA,kBAAU,EAAC,cAAM,OAAA,IAAA,qBAAQ,EAAC,KAAK,EAAE,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,KAAK,EAAX,CAAW,CAAC,EAAvC,CAAuC,CAAC,OAA9D,CAA+D;YAE1F,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAEpC,eAAe;YACf,IAAA,WAAG,EAAC;gBACF,KAAK,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,+EAA+E;IAC/E,wBAAwB;IACxB,+EAA+E;IAE/E,QAAQ,CAAC,uBAAuB,EAAE;QAChC,EAAE,CAAC,uCAAuC,EAAE;YAC1C,8CAA8C;YAC9C,IAAM,KAAK,GAAG,IAAA,yBAAW,EAAY;gBACnC,IAAI,EAAE,OAAO;gBACb,YAAY,EAAE;oBACZ,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC;wBAC7C,EAAE,EAAE,CAAC;wBACL,IAAI,EAAE,eAAQ,CAAC,CAAE;wBACjB,SAAS,EAAE,KAAK;qBACjB,CAAC,EAJ4C,CAI5C,CAAC;oBACH,MAAM,EAAE,KAAK;iBACd;aACF,CAAC,CAAC;YAEH,IAAM,WAAW,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YACtB,IAAA,MAAM,GAAK,IAAA,kBAAU,EAAC;gBAC5B,WAAW,EAAE,CAAC;gBACd,OAAO,IAAA,qBAAQ,EAAC,KAAK,EAAE,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,KAAK,CAAC,MAAM,EAAlB,CAAkB,CAAC,CAAC;YACxD,CAAC,CAAC,OAHY,CAGX;YAEH,MAAM,CAAC,WAAW,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAElC,6CAA6C;YAC7C,IAAA,WAAG,EAAC;gBACF,KAAK,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC;YAEH,kDAAkD;YAClD,MAAM,CAAC,WAAW,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE;YACrC,iCAAiC;YACjC,IAAM,KAAK,GAAG,IAAA,yBAAW,EAAY;gBACnC,IAAI,EAAE,OAAO;gBACb,YAAY,EAAE;oBACZ,KAAK,EAAE;wBACL,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,KAAK,EAAE;wBAC3C,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,IAAI,EAAE;wBAC1C,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,KAAK,EAAE;qBAC5C;oBACD,MAAM,EAAE,KAAK;iBACd;aACF,CAAC,CAAC;YAEK,IAAA,MAAM,GAAK,IAAA,kBAAU,EAAC;gBAC5B,OAAA,IAAA,qBAAQ,EAAC,KAAK,EAAE,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,UAAC,IAAI,IAAK,OAAA,IAAI,CAAC,SAAS,EAAd,CAAc,CAAC,CAAC,MAAM,EAAnD,CAAmD,CAAC;YAA/E,CAA+E,CAChF,OAFa,CAEZ;YAEF,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAE/B,yBAAyB;YACzB,IAAA,WAAG,EAAC;gBACF,KAAK,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC;YAEH,8BAA8B;YAC9B,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,yBAAyB,EAAE;IAClC,EAAE,CAAC,8CAA8C,EAAE;;QAQjD,IAAM,KAAK,GAAG,IAAA,yBAAW,EAAW;YAClC,IAAI,EAAE,KAAK;YACX,YAAY,EAAE;gBACZ,IAAI,EAAE,IAAI;gBACV,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,IAAI;aACZ;SACF,CAAC,CAAC;QAEH,0BAA0B;QAClB,IAAQ,WAAW,GAAK,IAAA,kBAAU,EAAC,cAAM,OAAA,CAAC;YAChD,OAAO,EAAE,IAAA,qBAAQ,EAAC,KAAK,EAAE,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,OAAO,EAAb,CAAa,CAAC;YAClD,KAAK,EAAE,IAAA,qBAAQ,EAAC,KAAK,EAAE,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,KAAK,EAAX,CAAW,CAAC;YAC9C,OAAO,EAAE,IAAA,4BAAe,EAAC,KAAK,CAAC;SAChC,CAAC,EAJ+C,CAI/C,CAAC,OAJwB,CAIvB;QAEJ,4BAA4B;QACpB,IAAQ,aAAa,GAAK,IAAA,kBAAU,EAAC,cAAM,OAAA,CAAC;YAClD,IAAI,EAAE,IAAA,qBAAQ,EAAC,KAAK,EAAE,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,IAAI,EAAV,CAAU,CAAC;YAC5C,UAAU,EAAE,IAAA,qBAAQ,EAAC,KAAK,EAAE,UAAC,KAAK,IAAK,OAAA,CAAC,CAAC,KAAK,CAAC,IAAI,EAAZ,CAAY,CAAC;SACrD,CAAC,EAHiD,CAGjD,CAAC,OAH0B,CAGzB;QAEJ,gBAAgB;QAChB,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAChD,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAErD,cAAc;QACd,IAAA,WAAG,EAAC;YACF,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE/C,iBAAiB;QACjB,IAAA,WAAG,EAAC;YACF,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC;gBACnC,IAAI,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,UAAU,EAAE;gBACrC,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,IAAI;aACZ,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAChD,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpD,MAAM,CAAC,MAAA,aAAa,CAAC,OAAO,CAAC,IAAI,0CAAE,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAE1D,SAAS;QACT,IAAA,WAAG,EAAC;YACF,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACrD,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC;IAChD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/state/stateHooks/stateHooks.test.ts"],"sourcesContent":["/**\n * Store Hooks Tests\n *\n * Real-life enterprise scenarios testing with minimal mocking.\n * Uses existing mock factory patterns.\n */\n\nimport { act, renderHook } from '@testing-library/react';\nimport {\n  useShallowStore,\n  useStore,\n  useStoreActions,\n  useStoreHydrated,\n  useStoreState,\n} from './stateHooks';\nimport { createStore } from '../createStore/createStore';\nimport { StorageType } from '../types/stateEnums';\n\n// Test interfaces\ninterface CounterState extends Record<string, unknown> {\n  count: number;\n  step: number;\n  nested: {\n    items: string[];\n    meta: { updated: boolean };\n  };\n}\n\ninterface TodoState extends Record<string, unknown> {\n  todos: Array<{ id: number; text: string; completed: boolean }>;\n  filter: 'all' | 'active' | 'completed';\n}\n\ndescribe('Store Hooks', () => {\n  // ============================================================================\n  // BASIC HOOK FUNCTIONALITY\n  // ============================================================================\n\n  describe('useStore Hook', () => {\n    it('should select and return specific state slice', () => {\n      // Real scenario: component needs only count value\n      const store = createStore<CounterState>({\n        name: 'counter',\n        initialState: {\n          count: 0,\n          step: 1,\n          nested: {\n            items: ['a', 'b'],\n            meta: { updated: false },\n          },\n        },\n      });\n\n      const { result } = renderHook(() => useStore(store, (state) => state.count));\n\n      expect(result.current).toBe(0);\n    });\n\n    it('should update when selected state changes', () => {\n      // Real scenario: reactive component updates\n      const store = createStore<CounterState>({\n        name: 'counter',\n        initialState: {\n          count: 0,\n          step: 1,\n          nested: {\n            items: ['a', 'b'],\n            meta: { updated: false },\n          },\n        },\n      });\n\n      const { result } = renderHook(() => useStore(store, (state) => state.count));\n\n      expect(result.current).toBe(0);\n\n      act(() => {\n        store.setState({ count: 5 });\n      });\n\n      expect(result.current).toBe(5);\n    });\n\n    it('should not update when unrelated state changes', () => {\n      // Real scenario: optimization - only update when relevant data changes\n      const store = createStore<CounterState>({\n        name: 'counter',\n        initialState: {\n          count: 0,\n          step: 1,\n          nested: {\n            items: ['a', 'b'],\n            meta: { updated: false },\n          },\n        },\n      });\n\n      const { result } = renderHook(() => useStore(store, (state) => state.count));\n\n      const initialRender = result.current;\n\n      act(() => {\n        store.setState({ step: 2 }); // Unrelated change\n      });\n\n      expect(result.current).toBe(initialRender);\n      expect(result.current).toBe(0);\n    });\n\n    it('should work with complex selectors', () => {\n      // Real scenario: computed values from multiple state pieces\n      const store = createStore<TodoState>({\n        name: 'todos',\n        initialState: {\n          todos: [\n            { id: 1, text: 'Todo 1', completed: false },\n            { id: 2, text: 'Todo 2', completed: true },\n            { id: 3, text: 'Todo 3', completed: false },\n          ],\n          filter: 'all',\n        },\n      });\n\n      const { result } = renderHook(() =>\n        useStore(store, (state) => state.todos.filter((todo) => todo.completed).length)\n      );\n\n      expect(result.current).toBe(1);\n    });\n\n    it('should work with custom equality function', () => {\n      // Real scenario: shallow comparison for object selectors\n      const store = createStore<CounterState>({\n        name: 'counter',\n        initialState: {\n          count: 0,\n          step: 1,\n          nested: {\n            items: ['a', 'b'],\n            meta: { updated: false },\n          },\n        },\n      });\n\n      const { result } = renderHook(() => useStore(store, (state) => state.nested.items));\n\n      const initialItems = result.current;\n\n      act(() => {\n        // Change array content but keep same length\n        store.setState({\n          nested: {\n            items: ['x', 'y'], // Different content, same length\n            meta: { updated: true },\n          },\n        });\n      });\n\n      // Should update since array changed (custom equality not implemented in basic version)\n      expect(result.current).toEqual(['x', 'y']);\n      expect(result.current).not.toBe(initialItems);\n    });\n  });\n\n  // ============================================================================\n  // SHALLOW STORE HOOK\n  // ============================================================================\n\n  describe('useShallowStore Hook', () => {\n    it('should use shallow comparison for basic values', () => {\n      // Real scenario: selecting simple values\n      const store = createStore<CounterState>({\n        name: 'counter',\n        initialState: {\n          count: 0,\n          step: 1,\n          nested: {\n            items: ['a', 'b'],\n            meta: { updated: false },\n          },\n        },\n      });\n\n      const { result } = renderHook(() => useShallowStore(store, (state) => state.count));\n\n      expect(result.current).toBe(0);\n\n      act(() => {\n        store.setState({ count: 5 });\n      });\n\n      expect(result.current).toBe(5);\n    });\n\n    it('should work with array length selections', () => {\n      // Real scenario: selecting array properties\n      const store = createStore<TodoState>({\n        name: 'todos',\n        initialState: {\n          todos: [\n            { id: 1, text: 'Todo 1', completed: false },\n            { id: 2, text: 'Todo 2', completed: true },\n          ],\n          filter: 'all',\n        },\n      });\n\n      const { result } = renderHook(() => useShallowStore(store, (state) => state.todos.length));\n\n      expect(result.current).toBe(2);\n    });\n  });\n\n  // ============================================================================\n  // FULL STATE HOOK\n  // ============================================================================\n\n  describe('useStoreState Hook', () => {\n    it('should return complete store state', () => {\n      // Real scenario: component needs access to entire state\n      const store = createStore<CounterState>({\n        name: 'counter',\n        initialState: {\n          count: 0,\n          step: 1,\n          nested: {\n            items: ['a', 'b'],\n            meta: { updated: false },\n          },\n        },\n      });\n\n      const { result } = renderHook(() => useStoreState(store));\n\n      expect(result.current.count).toBe(0);\n      expect(result.current.step).toBe(1);\n      expect(result.current.nested.items).toEqual(['a', 'b']);\n      expect(result.current._hydrated).toBe(false);\n    });\n\n    it('should update when any state changes', () => {\n      // Real scenario: debug component or state inspector\n      const store = createStore<CounterState>({\n        name: 'counter',\n        initialState: {\n          count: 0,\n          step: 1,\n          nested: {\n            items: ['a', 'b'],\n            meta: { updated: false },\n          },\n        },\n      });\n\n      const { result } = renderHook(() => useStoreState(store));\n\n      act(() => {\n        store.setState({ count: 5, step: 2 });\n      });\n\n      expect(result.current.count).toBe(5);\n      expect(result.current.step).toBe(2);\n    });\n  });\n\n  // ============================================================================\n  // HYDRATION HOOK\n  // ============================================================================\n\n  describe('useStoreHydrated Hook', () => {\n    it('should track hydration status', () => {\n      // Real scenario: show loading until store is hydrated from persistence\n      const store = createStore<CounterState>({\n        name: 'counter',\n        initialState: {\n          count: 0,\n          step: 1,\n          nested: {\n            items: ['a', 'b'],\n            meta: { updated: false },\n          },\n        },\n      });\n\n      const { result } = renderHook(() => useStoreHydrated(store));\n\n      expect(result.current).toBe(false);\n\n      act(() => {\n        store.setState({ _hydrated: true });\n      });\n\n      expect(result.current).toBe(true);\n    });\n\n    it('should update when hydration status changes', () => {\n      // Real scenario: persistence middleware updates hydration status\n      const store = createStore<CounterState>({\n        name: 'counter',\n        initialState: {\n          count: 0,\n          step: 1,\n          nested: {\n            items: ['a', 'b'],\n            meta: { updated: false },\n          },\n        },\n      });\n\n      const { result } = renderHook(() => useStoreHydrated(store));\n\n      expect(result.current).toBe(false);\n\n      // Simulate persistence middleware hydration\n      act(() => {\n        store.setState({ _hydrated: true });\n      });\n\n      expect(result.current).toBe(true);\n    });\n  });\n\n  // ============================================================================\n  // ACTIONS HOOK\n  // ============================================================================\n\n  describe('useStoreActions Hook', () => {\n    it('should provide store action methods', () => {\n      // Real scenario: component needs to dispatch actions\n      const store = createStore<CounterState>({\n        name: 'counter',\n        initialState: {\n          count: 0,\n          step: 1,\n          nested: {\n            items: ['a', 'b'],\n            meta: { updated: false },\n          },\n        },\n      });\n\n      const { result } = renderHook(() => useStoreActions(store));\n\n      expect(typeof result.current.setState).toBe('function');\n      expect(typeof result.current.reset).toBe('function');\n      expect(typeof result.current.clearStorage).toBe('function');\n    });\n\n    it('should allow state updates through actions', () => {\n      // Real scenario: form components updating state\n      const store = createStore<CounterState>({\n        name: 'counter',\n        initialState: {\n          count: 0,\n          step: 1,\n          nested: {\n            items: ['a', 'b'],\n            meta: { updated: false },\n          },\n        },\n      });\n\n      const { result } = renderHook(() => useStoreActions(store));\n\n      act(() => {\n        result.current.setState({ count: 10 });\n      });\n\n      expect(store.getState().count).toBe(10);\n\n      act(() => {\n        result.current.reset();\n      });\n\n      expect(store.getState().count).toBe(0);\n    });\n  });\n\n  // ============================================================================\n  // INTEGRATION SCENARIOS\n  // ============================================================================\n\n  describe('Integration Scenarios', () => {\n    it('should work with multiple hooks on same store', () => {\n      // Real scenario: different components using different parts of same store\n      const store = createStore<TodoState>({\n        name: 'todos',\n        initialState: {\n          todos: [\n            { id: 1, text: 'Todo 1', completed: false },\n            { id: 2, text: 'Todo 2', completed: true },\n          ],\n          filter: 'all',\n        },\n      });\n\n      const { result: countResult } = renderHook(() =>\n        useStore(store, (state) => state.todos.length)\n      );\n\n      const { result: filterResult } = renderHook(() => useStore(store, (state) => state.filter));\n\n      const { result: actionsResult } = renderHook(() => useStoreActions(store));\n\n      expect(countResult.current).toBe(2);\n      expect(filterResult.current).toBe('all');\n\n      act(() => {\n        actionsResult.current.setState({\n          todos: [...store.getState().todos, { id: 3, text: 'Todo 3', completed: false }],\n          filter: 'active',\n        });\n      });\n\n      expect(countResult.current).toBe(3);\n      expect(filterResult.current).toBe('active');\n    });\n\n    it('should handle rapid state updates efficiently', () => {\n      // Real scenario: high-frequency updates (real-time data)\n      const store = createStore<CounterState>({\n        name: 'counter',\n        initialState: {\n          count: 0,\n          step: 1,\n          nested: {\n            items: ['a', 'b'],\n            meta: { updated: false },\n          },\n        },\n      });\n\n      const { result } = renderHook(() => useStore(store, (state) => state.count));\n\n      // Rapid updates\n      act(() => {\n        for (let i = 1; i <= 10; i++) {\n          store.setState({ count: i });\n        }\n      });\n\n      expect(result.current).toBe(10);\n    });\n\n    it('should work with persistence stores', () => {\n      // Real scenario: persisted store with hydration\n      const store = createStore<CounterState>({\n        name: 'persistent-counter',\n        initialState: {\n          count: 0,\n          step: 1,\n          nested: {\n            items: ['a', 'b'],\n            meta: { updated: false },\n          },\n        },\n        persist: {\n          key: 'counter-data',\n          storage: StorageType.LOCAL_STORAGE,\n        },\n      });\n\n      const { result: countResult } = renderHook(() => useStore(store, (state) => state.count));\n\n      expect(countResult.current).toBe(0);\n\n      // Update state\n      act(() => {\n        store.setState({ count: 5 });\n      });\n\n      expect(countResult.current).toBe(5);\n    });\n  });\n\n  // ============================================================================\n  // PERFORMANCE SCENARIOS\n  // ============================================================================\n\n  describe('Performance Scenarios', () => {\n    it('should prevent unnecessary re-renders', () => {\n      // Real scenario: optimization for large lists\n      const store = createStore<TodoState>({\n        name: 'todos',\n        initialState: {\n          todos: Array.from({ length: 1000 }, (_, i) => ({\n            id: i,\n            text: `Todo ${i}`,\n            completed: false,\n          })),\n          filter: 'all',\n        },\n      });\n\n      const renderCount = jest.fn();\n      const { result } = renderHook(() => {\n        renderCount();\n        return useStore(store, (state) => state.todos.length);\n      });\n\n      expect(renderCount).toHaveBeenCalledTimes(1);\n      expect(result.current).toBe(1000);\n\n      // Update filter (unrelated to selected data)\n      act(() => {\n        store.setState({ filter: 'active' });\n      });\n\n      // Should not re-render since length didn't change\n      expect(renderCount).toHaveBeenCalledTimes(1);\n    });\n\n    it('should handle basic computations', () => {\n      // Real scenario: computed values\n      const store = createStore<TodoState>({\n        name: 'todos',\n        initialState: {\n          todos: [\n            { id: 1, text: 'Todo 1', completed: false },\n            { id: 2, text: 'Todo 2', completed: true },\n            { id: 3, text: 'Todo 3', completed: false },\n          ],\n          filter: 'all',\n        },\n      });\n\n      const { result } = renderHook(() =>\n        useStore(store, (state) => state.todos.filter((todo) => todo.completed).length)\n      );\n\n      expect(result.current).toBe(1);\n\n      // Update unrelated state\n      act(() => {\n        store.setState({ filter: 'active' });\n      });\n\n      // Result should stay the same\n      expect(result.current).toBe(1);\n    });\n  });\n});\n\ndescribe('Store Hooks Integration', () => {\n  it('should work in real component-like scenarios', () => {\n    // Real scenario: complete component workflow\n    interface AppState extends Record<string, unknown> {\n      user: { id: string; name: string } | null;\n      loading: boolean;\n      error: string | null;\n    }\n\n    const store = createStore<AppState>({\n      name: 'app',\n      initialState: {\n        user: null,\n        loading: false,\n        error: null,\n      },\n    });\n\n    // Component 1: Login form\n    const { result: loginResult } = renderHook(() => ({\n      loading: useStore(store, (state) => state.loading),\n      error: useStore(store, (state) => state.error),\n      actions: useStoreActions(store),\n    }));\n\n    // Component 2: User profile\n    const { result: profileResult } = renderHook(() => ({\n      user: useStore(store, (state) => state.user),\n      isLoggedIn: useStore(store, (state) => !!state.user),\n    }));\n\n    // Initial state\n    expect(loginResult.current.loading).toBe(false);\n    expect(profileResult.current.isLoggedIn).toBe(false);\n\n    // Start login\n    act(() => {\n      loginResult.current.actions.setState({ loading: true });\n    });\n\n    expect(loginResult.current.loading).toBe(true);\n\n    // Complete login\n    act(() => {\n      loginResult.current.actions.setState({\n        user: { id: '123', name: 'John Doe' },\n        loading: false,\n        error: null,\n      });\n    });\n\n    expect(loginResult.current.loading).toBe(false);\n    expect(profileResult.current.isLoggedIn).toBe(true);\n    expect(profileResult.current.user?.name).toBe('John Doe');\n\n    // Logout\n    act(() => {\n      loginResult.current.actions.reset();\n    });\n\n    expect(profileResult.current.isLoggedIn).toBe(false);\n    expect(profileResult.current.user).toBeNull();\n  });\n});\n"],"version":3}