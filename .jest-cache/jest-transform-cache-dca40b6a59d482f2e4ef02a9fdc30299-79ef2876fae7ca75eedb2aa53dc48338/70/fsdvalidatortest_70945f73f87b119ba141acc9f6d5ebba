728b90bce2b33fa9483cbef5c6ccb7e3
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock fs module
jest.mock('fs');
var fs_1 = __importDefault(require("fs"));
var fsd_validator_1 = require("./fsd-validator");
var mockedFs = fs_1.default;
describe('fsdValidator', function () {
    beforeEach(function () {
        // Reset all mocks
        jest.clearAllMocks();
    });
    it('returns validation result structure', function () {
        // Mock empty file list
        mockedFs.existsSync.mockReturnValue(false);
        mockedFs.readdirSync.mockReturnValue([]);
        var result = (0, fsd_validator_1.fsdValidator)();
        expect(result).toHaveProperty('isValid');
        expect(result).toHaveProperty('errors');
        expect(result).toHaveProperty('warnings');
        expect(typeof result.isValid).toBe('boolean');
        expect(Array.isArray(result.errors)).toBe(true);
        expect(Array.isArray(result.warnings)).toBe(true);
    });
    it('validates files successfully when no violations found', function () {
        // Mock file system with valid files
        mockedFs.existsSync.mockReturnValue(true);
        mockedFs.readdirSync.mockReturnValue(['src']);
        mockedFs.statSync.mockReturnValue({ isDirectory: function () { return true; } });
        // Mock getAllTsFiles to return empty array (no files to validate)
        jest.spyOn(fs_1.default, 'readdirSync').mockImplementation(function (dir) {
            if (dir === 'src') {
                return ['shared', 'widgets', 'infrastructure'];
            }
            return [];
        });
        jest.spyOn(fs_1.default, 'statSync').mockImplementation(function (filePath) {
            var filePathStr = filePath;
            if (filePathStr.includes('shared') ||
                filePathStr.includes('widgets') ||
                filePathStr.includes('infrastructure')) {
                return { isDirectory: function () { return true; } };
            }
            return { isDirectory: function () { return false; } };
        });
        var result = (0, fsd_validator_1.fsdValidator)();
        expect(result.isValid).toBe(true);
        expect(result.errors).toHaveLength(0);
    });
    it('detects FSD violations correctly', function () {
        // Mock file with violation
        var mockFileContent = "\n      import { Button } from '@/shared/ui/Button';\n      import { UserCard } from '@/widgets/UserCard';\n      import { authService } from '@/infrastructure/lib/auth';\n    ";
        mockedFs.existsSync.mockReturnValue(true);
        mockedFs.readdirSync.mockImplementation(function (dir) {
            if (dir === 'src') {
                return ['shared', 'widgets', 'infrastructure'];
            }
            if (dir === 'src/shared') {
                return ['ui', 'lib', 'model'];
            }
            if (dir === 'src/shared/ui') {
                return ['Button'];
            }
            if (dir === 'src/widgets') {
                return ['UserCard'];
            }
            if (dir === 'src/infrastructure') {
                return ['lib'];
            }
            if (dir === 'src/infrastructure/lib') {
                return ['auth'];
            }
            return [];
        });
        mockedFs.statSync.mockImplementation(function (filePath) {
            var path = filePath;
            if (path.endsWith('.ts') || path.endsWith('.tsx')) {
                return { isDirectory: function () { return false; } };
            }
            return { isDirectory: function () { return true; } };
        });
        mockedFs.readFileSync.mockReturnValue(mockFileContent);
        var result = (0, fsd_validator_1.fsdValidator)();
        // Should be valid since all imports are allowed
        expect(result.isValid).toBe(true);
    });
    it('handles file reading errors gracefully', function () {
        mockedFs.existsSync.mockReturnValue(true);
        mockedFs.readdirSync.mockReturnValue(['src']);
        mockedFs.statSync.mockReturnValue({ isDirectory: function () { return true; } });
        // Mock getAllTsFiles to return a file
        jest.spyOn(fs_1.default, 'readdirSync').mockImplementation(function (dir) {
            if (dir === 'src') {
                return ['test.ts'];
            }
            return [];
        });
        jest.spyOn(fs_1.default, 'statSync').mockImplementation(function (filePath) {
            var filePathStr = filePath;
            if (filePathStr.endsWith('.ts')) {
                return { isDirectory: function () { return false; } };
            }
            return { isDirectory: function () { return true; } };
        });
        // Mock readFileSync to throw error
        mockedFs.readFileSync.mockImplementation(function () {
            throw new Error('File read error');
        });
        var result = (0, fsd_validator_1.fsdValidator)();
        expect(result.isValid).toBe(false);
        expect(result.errors).toHaveLength(1);
        expect(result.errors[0]).toContain('Failed to read file');
    });
    it('handles missing src directory', function () {
        mockedFs.existsSync.mockReturnValue(false);
        var result = (0, fsd_validator_1.fsdValidator)();
        expect(result.isValid).toBe(true);
        expect(result.errors).toHaveLength(0);
    });
    it('validates import extraction correctly', function () {
        var mockFileContent = "\n      import React from 'react';\n      import { Button } from '@/shared/ui/Button';\n      import { classNames } from '@/shared/lib/utils/classNames';\n      import { external } from 'external-package';\n      import { relative } from './relative-file';\n      import { parent } from '../parent-file';\n    ";
        mockedFs.existsSync.mockReturnValue(true);
        mockedFs.readdirSync.mockReturnValue(['src']);
        mockedFs.statSync.mockReturnValue({ isDirectory: function () { return true; } });
        // Mock getAllTsFiles to return a file
        jest.spyOn(fs_1.default, 'readdirSync').mockImplementation(function (dir) {
            if (dir === 'src') {
                return ['test.ts'];
            }
            return [];
        });
        jest.spyOn(fs_1.default, 'statSync').mockImplementation(function (filePath) {
            var filePathStr = filePath;
            if (filePathStr.endsWith('.ts')) {
                return { isDirectory: function () { return false; } };
            }
            return { isDirectory: function () { return true; } };
        });
        mockedFs.readFileSync.mockReturnValue(mockFileContent);
        var result = (0, fsd_validator_1.fsdValidator)();
        // Should be valid since all internal imports are allowed
        expect(result.isValid).toBe(true);
    });
    it('handles validation errors gracefully', function () {
        // Mock fs.existsSync to throw error
        mockedFs.existsSync.mockImplementation(function () {
            throw new Error('File system error');
        });
        var result = (0, fsd_validator_1.fsdValidator)();
        expect(result.isValid).toBe(false);
        expect(result.errors).toHaveLength(1);
        expect(result.errors[0]).toContain('Validation failed: Error: File system error');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,