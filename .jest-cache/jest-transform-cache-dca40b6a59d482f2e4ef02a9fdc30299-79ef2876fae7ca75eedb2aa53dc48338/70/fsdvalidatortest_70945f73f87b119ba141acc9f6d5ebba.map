{"file":"/Users/gamzaramazanov/Desktop/fumo/src/shared/lib/dev-tools/generators/fsd-validator/fsd-validator.test.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/lib/dev-tools/generators/fsd-validator/fsd-validator.test.ts"],"sourcesContent":["import fs from 'fs';\nimport { fsdValidator } from './fsd-validator';\n\n// Mock fs module\njest.mock('fs');\nconst mockedFs = fs as jest.Mocked<typeof fs>;\n\ndescribe('fsdValidator', () => {\n  beforeEach(() => {\n    // Reset all mocks\n    jest.clearAllMocks();\n  });\n\n  it('returns validation result structure', () => {\n    // Mock empty file list\n    mockedFs.existsSync.mockReturnValue(false);\n    mockedFs.readdirSync.mockReturnValue([]);\n\n    const result = fsdValidator();\n\n    expect(result).toHaveProperty('isValid');\n    expect(result).toHaveProperty('errors');\n    expect(result).toHaveProperty('warnings');\n    expect(typeof result.isValid).toBe('boolean');\n    expect(Array.isArray(result.errors)).toBe(true);\n    expect(Array.isArray(result.warnings)).toBe(true);\n  });\n\n  it('validates files successfully when no violations found', () => {\n    // Mock file system with valid files\n    mockedFs.existsSync.mockReturnValue(true);\n    mockedFs.readdirSync.mockReturnValue(['src'] as any);\n    mockedFs.statSync.mockReturnValue({ isDirectory: () => true } as any);\n\n    // Mock getAllTsFiles to return empty array (no files to validate)\n    jest.spyOn(fs, 'readdirSync').mockImplementation((dir) => {\n      if (dir === 'src') {\n        return ['shared', 'widgets', 'infrastructure'] as any;\n      }\n      return [] as any;\n    });\n\n    jest.spyOn(fs, 'statSync').mockImplementation((filePath) => {\n      const filePathStr = filePath as string;\n      if (\n        filePathStr.includes('shared') ||\n        filePathStr.includes('widgets') ||\n        filePathStr.includes('infrastructure')\n      ) {\n        return { isDirectory: () => true } as any;\n      }\n      return { isDirectory: () => false } as any;\n    });\n\n    const result = fsdValidator();\n\n    expect(result.isValid).toBe(true);\n    expect(result.errors).toHaveLength(0);\n  });\n\n  it('detects FSD violations correctly', () => {\n    // Mock file with violation\n    const mockFileContent = `\n      import { Button } from '@/shared/ui/Button';\n      import { UserCard } from '@/widgets/UserCard';\n      import { authService } from '@/infrastructure/lib/auth';\n    `;\n\n    mockedFs.existsSync.mockReturnValue(true);\n    mockedFs.readdirSync.mockImplementation((dir) => {\n      if (dir === 'src') {\n        return ['shared', 'widgets', 'infrastructure'] as any;\n      }\n      if (dir === 'src/shared') {\n        return ['ui', 'lib', 'model'] as any;\n      }\n      if (dir === 'src/shared/ui') {\n        return ['Button'] as any;\n      }\n      if (dir === 'src/widgets') {\n        return ['UserCard'] as any;\n      }\n      if (dir === 'src/infrastructure') {\n        return ['lib'] as any;\n      }\n      if (dir === 'src/infrastructure/lib') {\n        return ['auth'] as any;\n      }\n      return [] as any;\n    });\n\n    mockedFs.statSync.mockImplementation((filePath) => {\n      const path = filePath as string;\n      if (path.endsWith('.ts') || path.endsWith('.tsx')) {\n        return { isDirectory: () => false } as any;\n      }\n      return { isDirectory: () => true } as any;\n    });\n\n    mockedFs.readFileSync.mockReturnValue(mockFileContent);\n\n    const result = fsdValidator();\n\n    // Should be valid since all imports are allowed\n    expect(result.isValid).toBe(true);\n  });\n\n  it('handles file reading errors gracefully', () => {\n    mockedFs.existsSync.mockReturnValue(true);\n    mockedFs.readdirSync.mockReturnValue(['src'] as any);\n    mockedFs.statSync.mockReturnValue({ isDirectory: () => true } as any);\n\n    // Mock getAllTsFiles to return a file\n    jest.spyOn(fs, 'readdirSync').mockImplementation((dir) => {\n      if (dir === 'src') {\n        return ['test.ts'] as any;\n      }\n      return [] as any;\n    });\n\n    jest.spyOn(fs, 'statSync').mockImplementation((filePath) => {\n      const filePathStr = filePath as string;\n      if (filePathStr.endsWith('.ts')) {\n        return { isDirectory: () => false } as any;\n      }\n      return { isDirectory: () => true } as any;\n    });\n\n    // Mock readFileSync to throw error\n    mockedFs.readFileSync.mockImplementation(() => {\n      throw new Error('File read error');\n    });\n\n    const result = fsdValidator();\n\n    expect(result.isValid).toBe(false);\n    expect(result.errors).toHaveLength(1);\n    expect(result.errors[0]).toContain('Failed to read file');\n  });\n\n  it('handles missing src directory', () => {\n    mockedFs.existsSync.mockReturnValue(false);\n\n    const result = fsdValidator();\n\n    expect(result.isValid).toBe(true);\n    expect(result.errors).toHaveLength(0);\n  });\n\n  it('validates import extraction correctly', () => {\n    const mockFileContent = `\n      import React from 'react';\n      import { Button } from '@/shared/ui/Button';\n      import { classNames } from '@/shared/lib/utils/classNames';\n      import { external } from 'external-package';\n      import { relative } from './relative-file';\n      import { parent } from '../parent-file';\n    `;\n\n    mockedFs.existsSync.mockReturnValue(true);\n    mockedFs.readdirSync.mockReturnValue(['src'] as any);\n    mockedFs.statSync.mockReturnValue({ isDirectory: () => true } as any);\n\n    // Mock getAllTsFiles to return a file\n    jest.spyOn(fs, 'readdirSync').mockImplementation((dir) => {\n      if (dir === 'src') {\n        return ['test.ts'] as any;\n      }\n      return [] as any;\n    });\n\n    jest.spyOn(fs, 'statSync').mockImplementation((filePath) => {\n      const filePathStr = filePath as string;\n      if (filePathStr.endsWith('.ts')) {\n        return { isDirectory: () => false } as any;\n      }\n      return { isDirectory: () => true } as any;\n    });\n\n    mockedFs.readFileSync.mockReturnValue(mockFileContent);\n\n    const result = fsdValidator();\n\n    // Should be valid since all internal imports are allowed\n    expect(result.isValid).toBe(true);\n  });\n\n  it('handles validation errors gracefully', () => {\n    // Mock fs.existsSync to throw error\n    mockedFs.existsSync.mockImplementation(() => {\n      throw new Error('File system error');\n    });\n\n    const result = fsdValidator();\n\n    expect(result.isValid).toBe(false);\n    expect(result.errors).toHaveLength(1);\n    expect(result.errors[0]).toContain('Validation failed: Error: File system error');\n  });\n});\n"],"version":3}