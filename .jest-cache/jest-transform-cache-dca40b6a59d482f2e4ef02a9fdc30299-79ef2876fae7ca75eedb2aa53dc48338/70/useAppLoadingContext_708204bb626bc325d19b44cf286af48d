6db40a33cd2acf66031ab9f27ad19c02
"use strict";
/**
 * useAppLoadingContext Hook
 *
 * Hook for consuming AppLoading context safely.
 */
"use client";
/**
 * useAppLoadingContext Hook
 *
 * Hook for consuming AppLoading context safely.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAppLoadingContext = useAppLoadingContext;
var react_1 = require("react");
var AppLoadingProvider_1 = require("../../ui/AppLoadingProvider");
// ============================================================================
// CONTEXT HOOK (Logic Layer)
// ============================================================================
/**
 * useAppLoadingContext - Hook to access loading state from context
 *
 * This hook handles context consumption logic with proper error handling.
 * Memoized for performance optimization.
 *
 * Usage:
 * const { isInitialLoading, progress, forceComplete } = useAppLoadingContext();
 *
 * @throws Error if used outside of AppLoadingProvider
 * @returns AppLoadingContextType - Loading state and methods
 */
function useAppLoadingContext() {
    // Get context from provider
    var context = (0, react_1.useContext)(AppLoadingProvider_1.AppLoadingContext);
    if (!context) {
        throw new Error("useAppLoadingContext must be used within an AppLoadingProvider. " +
            "Make sure your component is wrapped with <AppLoadingProvider>.");
    }
    return context;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2dhbXphcmFtYXphbm92L0Rlc2t0b3AvZnVtby9zcmMvaW5mcmFzdHJ1Y3R1cmUvcHJvdmlkZXJzL2FwcC1sb2FkaW5nL2hvb2tzL3VzZUFwcExvYWRpbmdDb250ZXh0L3VzZUFwcExvYWRpbmdDb250ZXh0LnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7OztHQUlHO0FBRUgsWUFBWSxDQUFDO0FBTmI7Ozs7R0FJRzs7QUF3Qkgsb0RBWUM7QUFoQ0QsK0JBQW1DO0FBQ25DLGtFQUFnRTtBQUdoRSwrRUFBK0U7QUFDL0UsNkJBQTZCO0FBQzdCLCtFQUErRTtBQUUvRTs7Ozs7Ozs7Ozs7R0FXRztBQUNILFNBQWdCLG9CQUFvQjtJQUNsQyw0QkFBNEI7SUFDNUIsSUFBTSxPQUFPLEdBQUcsSUFBQSxrQkFBVSxFQUFDLHNDQUFpQixDQUFDLENBQUM7SUFFOUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2IsTUFBTSxJQUFJLEtBQUssQ0FDYixrRUFBa0U7WUFDaEUsZ0VBQWdFLENBQ25FLENBQUM7SUFDSixDQUFDO0lBRUQsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZ2FtemFyYW1hemFub3YvRGVza3RvcC9mdW1vL3NyYy9pbmZyYXN0cnVjdHVyZS9wcm92aWRlcnMvYXBwLWxvYWRpbmcvaG9va3MvdXNlQXBwTG9hZGluZ0NvbnRleHQvdXNlQXBwTG9hZGluZ0NvbnRleHQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiB1c2VBcHBMb2FkaW5nQ29udGV4dCBIb29rXG4gKlxuICogSG9vayBmb3IgY29uc3VtaW5nIEFwcExvYWRpbmcgY29udGV4dCBzYWZlbHkuXG4gKi9cblxuXCJ1c2UgY2xpZW50XCI7XG5cbmltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IEFwcExvYWRpbmdDb250ZXh0IH0gZnJvbSBcIi4uLy4uL3VpL0FwcExvYWRpbmdQcm92aWRlclwiO1xuaW1wb3J0IHsgVXNlQXBwTG9hZGluZ1JldHVybiB9IGZyb20gXCIuLi8uLi9tb2RlbC90eXBlcy90eXBlc1wiO1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBDT05URVhUIEhPT0sgKExvZ2ljIExheWVyKVxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vKipcbiAqIHVzZUFwcExvYWRpbmdDb250ZXh0IC0gSG9vayB0byBhY2Nlc3MgbG9hZGluZyBzdGF0ZSBmcm9tIGNvbnRleHRcbiAqXG4gKiBUaGlzIGhvb2sgaGFuZGxlcyBjb250ZXh0IGNvbnN1bXB0aW9uIGxvZ2ljIHdpdGggcHJvcGVyIGVycm9yIGhhbmRsaW5nLlxuICogTWVtb2l6ZWQgZm9yIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbi5cbiAqXG4gKiBVc2FnZTpcbiAqIGNvbnN0IHsgaXNJbml0aWFsTG9hZGluZywgcHJvZ3Jlc3MsIGZvcmNlQ29tcGxldGUgfSA9IHVzZUFwcExvYWRpbmdDb250ZXh0KCk7XG4gKlxuICogQHRocm93cyBFcnJvciBpZiB1c2VkIG91dHNpZGUgb2YgQXBwTG9hZGluZ1Byb3ZpZGVyXG4gKiBAcmV0dXJucyBBcHBMb2FkaW5nQ29udGV4dFR5cGUgLSBMb2FkaW5nIHN0YXRlIGFuZCBtZXRob2RzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VBcHBMb2FkaW5nQ29udGV4dCgpOiBVc2VBcHBMb2FkaW5nUmV0dXJuIHtcbiAgLy8gR2V0IGNvbnRleHQgZnJvbSBwcm92aWRlclxuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChBcHBMb2FkaW5nQ29udGV4dCk7XG5cbiAgaWYgKCFjb250ZXh0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJ1c2VBcHBMb2FkaW5nQ29udGV4dCBtdXN0IGJlIHVzZWQgd2l0aGluIGFuIEFwcExvYWRpbmdQcm92aWRlci4gXCIgK1xuICAgICAgICBcIk1ha2Ugc3VyZSB5b3VyIGNvbXBvbmVudCBpcyB3cmFwcGVkIHdpdGggPEFwcExvYWRpbmdQcm92aWRlcj4uXCJcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRleHQ7XG59XG4iXSwidmVyc2lvbiI6M30=