0346e68143ad1482d7b56b905d07968b
"use strict";
/**
 * Production Configuration Tests
 *
 * Comprehensive tests for production configuration utilities.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock performance monitor
jest.mock('../performance-monitor', function () { return ({
    performanceMonitor: {
        addMetric: jest.fn(),
        getMetricsByName: jest.fn(),
    },
}); });
var production_config_1 = require("./production.config");
// Mock process.env
var originalEnv = process.env;
describe('Production Configuration', function () {
    var performanceMonitor;
    beforeEach(function () { return __awaiter(void 0, void 0, void 0, function () {
        var mockPerformanceMonitor;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    jest.clearAllMocks();
                    jest.spyOn(performance, 'now').mockReturnValue(1000);
                    process.env = __assign({}, originalEnv);
                    return [4 /*yield*/, Promise.resolve().then(function () { return __importStar(require('../performance-monitor')); })];
                case 1:
                    mockPerformanceMonitor = (_a.sent()).performanceMonitor;
                    performanceMonitor = mockPerformanceMonitor;
                    return [2 /*return*/];
            }
        });
    }); });
    afterEach(function () {
        process.env = originalEnv;
    });
    describe('getProductionConfig', function () {
        it('should return production config for production environment', function () {
            Object.defineProperty(process.env, 'NODE_ENV', {
                value: 'production',
                writable: true,
                configurable: true,
            });
            var result = (0, production_config_1.getProductionConfig)();
            expect(result.compression).toBe(true);
            expect(result.minification).toBe(true);
            expect(result.treeShaking).toBe(true);
            expect(result.codeSplitting).toBe(true);
            expect(result.bundleAnalyzer).toBe(false);
            expect(result.sourceMaps).toBe(false);
            expect(performanceMonitor.addMetric).toHaveBeenCalledWith(expect.objectContaining({
                name: 'production_config_generation',
                value: 0,
                rating: 'good',
            }));
        });
        it('should return development config for development environment', function () {
            Object.defineProperty(process.env, 'NODE_ENV', {
                value: 'development',
                writable: true,
                configurable: true,
            });
            var result = (0, production_config_1.getProductionConfig)();
            expect(result.bundleAnalyzer).toBe(true);
            expect(result.sourceMaps).toBe(true);
        });
    });
    describe('generateNextJSConfig', function () {
        it('should generate Next.js config with default settings', function () {
            var result = (0, production_config_1.generateNextJSConfig)();
            expect(result.reactStrictMode).toBe(true);
            expect(result.poweredByHeader).toBe(false);
            expect(result.compress).toBe(true);
            expect(result.images).toBeDefined();
            expect(result.images.formats).toContain('image/webp');
            expect(result.images.formats).toContain('image/avif');
            expect(performanceMonitor.addMetric).toHaveBeenCalledWith(expect.objectContaining({
                name: 'nextjs_config_generation',
                value: 0,
                rating: 'good',
            }));
        });
        it('should generate Next.js config with custom settings', function () {
            var config = {
                compression: false,
                minification: false,
                bundleAnalyzer: true,
                sourceMaps: true,
            };
            var result = (0, production_config_1.generateNextJSConfig)(config);
            expect(result.compress).toBe(false);
            expect(result.bundleAnalyzer).toBeDefined();
            expect(result.productionBrowserSourceMaps).toBe(true);
        });
    });
    describe('generateWebpackConfig', function () {
        it('should generate webpack config with default settings', function () {
            var result = (0, production_config_1.generateWebpackConfig)();
            expect(result.optimization.minimize).toBe(true);
            expect(result.optimization.splitChunks).toBeDefined();
            expect(result.optimization.splitChunks.chunks).toBe('all');
            expect(result.performance).toBeDefined();
            expect(result.performance.hints).toBe('warning');
            expect(performanceMonitor.addMetric).toHaveBeenCalledWith(expect.objectContaining({
                name: 'webpack_config_generation',
                value: 0,
                rating: 'good',
            }));
        });
        it('should generate webpack config with custom settings', function () {
            var config = {
                minification: false,
                codeSplitting: false,
                treeShaking: false,
            };
            var result = (0, production_config_1.generateWebpackConfig)(config);
            expect(result.optimization.minimize).toBe(false);
            expect(result.optimization.splitChunks).toBe(false);
            expect(result.optimization.usedExports).toBeUndefined();
        });
        it('should enable tree shaking when configured', function () {
            var config = {
                treeShaking: true,
            };
            var result = (0, production_config_1.generateWebpackConfig)(config);
            expect(result.optimization.usedExports).toBe(true);
            expect(result.optimization.sideEffects).toBe(false);
        });
    });
    describe('generateEnvironmentConfig', function () {
        it('should generate development environment config', function () {
            var result = (0, production_config_1.generateEnvironmentConfig)('development');
            expect(result.NODE_ENV).toBe('development');
            expect(result.NEXT_PUBLIC_APP_ENV).toBe('development');
            expect(result.NEXT_PUBLIC_DEBUG).toBe('true');
            expect(result.NEXT_PUBLIC_ANALYTICS).toBe('false');
            expect(performanceMonitor.addMetric).toHaveBeenCalledWith(expect.objectContaining({
                name: 'environment_config_generation',
                value: 0,
                rating: 'good',
            }));
        });
        it('should generate production environment config', function () {
            var result = (0, production_config_1.generateEnvironmentConfig)('production');
            expect(result.NODE_ENV).toBe('production');
            expect(result.NEXT_PUBLIC_APP_ENV).toBe('production');
            expect(result.NEXT_PUBLIC_DEBUG).toBe('false');
            expect(result.NEXT_PUBLIC_ANALYTICS).toBe('true');
        });
        it('should generate test environment config', function () {
            var result = (0, production_config_1.generateEnvironmentConfig)('test');
            expect(result.NODE_ENV).toBe('test');
            expect(result.NEXT_PUBLIC_APP_ENV).toBe('test');
            expect(result.NEXT_PUBLIC_DEBUG).toBe('false');
            expect(result.NEXT_PUBLIC_ANALYTICS).toBe('false');
        });
        it('should handle unknown environment', function () {
            var result = (0, production_config_1.generateEnvironmentConfig)('unknown');
            expect(result.NODE_ENV).toBe('unknown');
            expect(result.NEXT_PUBLIC_APP_ENV).toBe('unknown');
        });
    });
    describe('validateProductionConfig', function () {
        it('should validate correct production config', function () {
            var config = {
                compression: true,
                minification: true,
                treeShaking: true,
                codeSplitting: true,
                bundleAnalyzer: false,
                sourceMaps: false,
            };
            var result = (0, production_config_1.validateProductionConfig)(config);
            expect(result.isValid).toBe(true);
            expect(result.errors).toHaveLength(0);
            expect(performanceMonitor.addMetric).toHaveBeenCalledWith(expect.objectContaining({
                name: 'production_config_validation',
                value: 0,
                rating: 'good',
            }));
        });
        it('should validate empty config', function () {
            var result = (0, production_config_1.validateProductionConfig)({});
            expect(result.isValid).toBe(true);
            expect(result.errors).toHaveLength(0);
        });
        it('should detect invalid compression type', function () {
            var config = {
                compression: 'true',
            };
            var result = (0, production_config_1.validateProductionConfig)(config);
            expect(result.isValid).toBe(false);
            expect(result.errors).toContain('compression must be a boolean');
        });
        it('should detect invalid minification type', function () {
            var config = {
                minification: 123,
            };
            var result = (0, production_config_1.validateProductionConfig)(config);
            expect(result.isValid).toBe(false);
            expect(result.errors).toContain('minification must be a boolean');
        });
        it('should detect multiple validation errors', function () {
            var config = {
                compression: 'true',
                minification: 123,
                treeShaking: 'false',
            };
            var result = (0, production_config_1.validateProductionConfig)(config);
            expect(result.isValid).toBe(false);
            expect(result.errors).toHaveLength(3);
            expect(result.errors).toContain('compression must be a boolean');
            expect(result.errors).toContain('minification must be a boolean');
            expect(result.errors).toContain('treeShaking must be a boolean');
        });
    });
    describe('getProductionMetrics', function () {
        it('should return production metrics', function () {
            var mockMetrics = [
                { name: 'production_config_generation', value: 10 },
                { name: 'nextjs_config_generation', value: 5 },
            ];
            performanceMonitor.getMetricsByName.mockImplementation(function (name) {
                return mockMetrics.filter(function (metric) { return metric.name === name; });
            });
            var result = (0, production_config_1.getProductionMetrics)();
            expect(result).toHaveLength(2);
            expect(performanceMonitor.getMetricsByName).toHaveBeenCalledWith('production_config_generation');
            expect(performanceMonitor.getMetricsByName).toHaveBeenCalledWith('nextjs_config_generation');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,