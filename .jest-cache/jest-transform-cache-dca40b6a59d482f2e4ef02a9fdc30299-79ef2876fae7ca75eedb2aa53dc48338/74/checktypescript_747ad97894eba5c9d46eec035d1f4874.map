{"file":"/Users/gamzaramazanov/Desktop/fumo/config/jest/setup/check-typescript.ts","mappings":";AAAA;;;;GAIG;;AAEH,+CAAyC;AACzC,6BAA+B;AAE/B,2DAA2D;AAC3D,IAAI,CAAC;IACH,wDAAwD;IAExD,8CAA8C;IAC9C,IAAA,wBAAQ,EAAC,sDAAsD,EAAE;QAC/D,GAAG,EAAE,IAAA,cAAO,EAAC,SAAS,EAAE,aAAa,CAAC;QACtC,QAAQ,EAAE,MAAM;QAChB,KAAK,EAAE,MAAM,EAAE,uCAAuC;KACvD,CAAC,CAAC;IAEH,wDAAwD;AAC1D,CAAC;AAAC,OAAO,KAAc,EAAE,CAAC;IACxB,IAAM,WAAW,GACd,KAA+C,CAAC,MAAM,IAAK,KAAe,CAAC,OAAO,CAAC;IAEtF,gDAAgD;IAChD,IAAM,cAAc,GAAG,oBAAoB,CAAC,WAAW,CAAC,CAAC;IAEzD,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QAC9B,sDAAsD;QACtD,0CAA0C;QAE1C,+CAA+C;QAC/C,MAAM,IAAI,KAAK,CACb,8FAA8F,CAC/F,CAAC;IACJ,CAAC;SAAM,CAAC;QACN,wFAAwF;QACxF,iEAAiE;QACjE,4BAA4B;IAC9B,CAAC;AACH,CAAC;AAED;;GAEG;AACH,SAAS,oBAAoB,CAAC,WAAmB;IAC/C,IAAM,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACtC,IAAM,cAAc,GAAa,EAAE,CAAC;IAEpC,6DAA6D;IAC7D,IAAM,gBAAgB,GAAG;QACvB,gBAAgB;QAChB,+BAA+B;QAC/B,iCAAiC;QACjC,iDAAiD;QACjD,mDAAmD;QACnD,kDAAkD;QAClD,mEAAmE;QACnE,+DAA+D;QAC/D,kDAAkD;QAClD,uEAAuE;QACvE,mDAAmD;QACnD,yFAAyF;KAC1F,CAAC;IAEF,uEAAuE;IACvE,IAAM,mBAAmB,GAAG;QAC1B,oDAAoD;QACpD,4DAA4D;QAC5D,4DAA4D;QAC5D,kEAAkE;QAClE,sEAAsE;QACtE,yDAAyD;QACzD,qEAAqE;QACrE,0DAA0D;QAC1D,kEAAkE;QAClE,6DAA6D;QAC7D,sDAAsD;KACvD,CAAC;4BAES,IAAI;QACb,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;YAC9B,qCAAqC;YACrC,IAAM,aAAa,GAAG,mBAAmB,CAAC,IAAI,CAAC,UAAC,OAAO,IAAK,OAAA,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAlB,CAAkB,CAAC,CAAC;YAEhF,IAAI,CAAC,aAAa,EAAE,CAAC;gBACnB,iCAAiC;gBACjC,IAAM,UAAU,GAAG,gBAAgB,CAAC,IAAI,CAAC,UAAC,OAAO,IAAK,OAAA,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAlB,CAAkB,CAAC,CAAC;gBAE1E,IAAI,UAAU,EAAE,CAAC;oBACf,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC5B,CAAC;YACH,CAAC;QACH,CAAC;;IAbH,KAAmB,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK;QAAnB,IAAM,IAAI,cAAA;gBAAJ,IAAI;KAcd;IAED,OAAO,cAAc,CAAC;AACxB,CAAC","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/config/jest/setup/check-typescript.ts"],"sourcesContent":["/**\n * Jest setup to check TypeScript compilation errors\n * This ensures that critical TypeScript errors cause test failures\n * while allowing non-critical errors to pass\n */\n\nimport { execSync } from 'child_process';\nimport { resolve } from 'path';\n\n// Check TypeScript compilation errors before running tests\ntry {\n  // console.log('🔍 Checking TypeScript compilation...');\n\n  // Run TypeScript compiler to check for errors\n  execSync('npx tsc --noEmit --project config/jest/tsconfig.json', {\n    cwd: resolve(__dirname, '../../../..'),\n    encoding: 'utf8',\n    stdio: 'pipe', // Capture output instead of showing it\n  });\n\n  // console.log('✅ TypeScript compilation check passed');\n} catch (error: unknown) {\n  const errorOutput =\n    (error as { stdout?: string; message?: string }).stdout || (error as Error).message;\n\n  // Parse errors and filter out non-critical ones\n  const criticalErrors = filterCriticalErrors(errorOutput);\n\n  if (criticalErrors.length > 0) {\n    // console.log('❌ Critical TypeScript errors found:');\n    // console.log(criticalErrors.join('\\n'));\n\n    // Fail the test suite only for critical errors\n    throw new Error(\n      'Critical TypeScript compilation errors detected. Please fix the errors before running tests.'\n    );\n  } else {\n    // console.log('⚠️  Non-critical TypeScript errors found (allowing tests to continue)');\n    // console.log('📝 Consider fixing these errors when possible:');\n    // console.log(errorOutput);\n  }\n}\n\n/**\n * Filter TypeScript errors to only include critical ones\n */\nfunction filterCriticalErrors(errorOutput: string): string[] {\n  const lines = errorOutput.split('\\n');\n  const criticalErrors: string[] = [];\n\n  // Define patterns for critical errors that should fail tests\n  const criticalPatterns = [\n    // Syntax errors\n    /error TS\\d+: Cannot find name/,\n    /error TS\\d+: Cannot find module/,\n    /error TS\\d+: Module '.*' has no exported member/,\n    /error TS\\d+: Property '.*' does not exist on type/,\n    /error TS\\d+: Type '.*' is not assignable to type/,\n    /error TS\\d+: Argument of type '.*' is not assignable to parameter/,\n    /error TS\\d+: Object literal may only specify known properties/,\n    /error TS\\d+: Expected \\d+ arguments, but got \\d+/,\n    /error TS\\d+: Cannot assign to '.*' because it is a read-only property/,\n    /error TS\\d+: Element implicitly has an 'any' type/,\n    /error TS\\d+: Type '.*' is not assignable to type '.*' with 'exactOptionalPropertyTypes'/,\n  ];\n\n  // Define patterns for non-critical errors that can be ignored in tests\n  const nonCriticalPatterns = [\n    // Unused variables in tests (common and acceptable)\n    /error TS6133: '.*' is declared but its value is never read/,\n    /error TS6192: All imports in import declaration are unused/,\n    // Export conflicts in test mocks (acceptable in test environment)\n    /error TS2484: Export declaration conflicts with exported declaration/,\n    // Re-export type issues (acceptable in test environment)\n    /error TS1205: Re-exporting a type when 'isolatedModules' is enabled/,\n    // Enum value type issues (acceptable in test environment)\n    /error TS18033: Type 'boolean' is not assignable to type 'number'/,\n    // Function condition issues (acceptable in test environment)\n    /error TS2774: This condition will always return true/,\n  ];\n\n  for (const line of lines) {\n    if (line.includes('error TS')) {\n      // Check if it's a non-critical error\n      const isNonCritical = nonCriticalPatterns.some((pattern) => pattern.test(line));\n\n      if (!isNonCritical) {\n        // Check if it's a critical error\n        const isCritical = criticalPatterns.some((pattern) => pattern.test(line));\n\n        if (isCritical) {\n          criticalErrors.push(line);\n        }\n      }\n    }\n  }\n\n  return criticalErrors;\n}\n"],"version":3}