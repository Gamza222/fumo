{"file":"/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/browser/lib/media/intersectionObserver.mock.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/browser/lib/media/intersectionObserver.mock.ts"],"sourcesContent":["/**\n * IntersectionObserver Mock for Testing\n *\n * Provides a mock implementation of IntersectionObserver for testing environments\n * where the API is not available (like jsdom).\n */\n\n// Mock implementation\nclass MockIntersectionObserver implements IntersectionObserver {\n  private callback: IntersectionObserverCallback;\n  public root: Element | Document | null = null;\n  public rootMargin: string = '0px';\n  public thresholds: ReadonlyArray<number> = [0];\n  private observedElements: Set<Element> = new Set();\n\n  constructor(callback: IntersectionObserverCallback, options?: IntersectionObserverInit) {\n    this.callback = callback;\n    this.root = options?.root || null;\n    this.rootMargin = options?.rootMargin || '0px';\n    this.thresholds = options?.threshold\n      ? Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold]\n      : [0];\n  }\n\n  observe(target: Element): void {\n    this.observedElements.add(target);\n\n    // Simulate immediate intersection\n    const entry: IntersectionObserverEntry = {\n      boundingClientRect: target.getBoundingClientRect(),\n      intersectionRect: target.getBoundingClientRect(),\n      rootBounds:\n        this.root && 'getBoundingClientRect' in this.root\n          ? this.root.getBoundingClientRect()\n          : null,\n      isIntersecting: true,\n      intersectionRatio: 1,\n      target,\n      time: Date.now(),\n    } as IntersectionObserverEntry;\n\n    // Call the callback with the mock entry\n    this.callback([entry], this as unknown as IntersectionObserver);\n  }\n\n  unobserve(target: Element): void {\n    this.observedElements.delete(target);\n  }\n\n  disconnect(): void {\n    this.observedElements.clear();\n  }\n\n  takeRecords(): IntersectionObserverEntry[] {\n    return [];\n  }\n\n  // Helper method for testing - trigger intersection\n  triggerIntersection(target: Element, isIntersecting: boolean): void {\n    if (!this.observedElements.has(target)) {\n      return;\n    }\n\n    const entry: IntersectionObserverEntry = {\n      boundingClientRect: target.getBoundingClientRect(),\n      intersectionRect: isIntersecting ? target.getBoundingClientRect() : new DOMRect(),\n      rootBounds:\n        this.root && 'getBoundingClientRect' in this.root\n          ? this.root.getBoundingClientRect()\n          : null,\n      isIntersecting,\n      intersectionRatio: isIntersecting ? 1 : 0,\n      target,\n      time: Date.now(),\n    } as IntersectionObserverEntry;\n\n    this.callback([entry], this as unknown as IntersectionObserver);\n  }\n}\n\n// Mock IntersectionObserver globally\nglobal.IntersectionObserver = MockIntersectionObserver as unknown as typeof IntersectionObserver;\n\n// Export for direct usage in tests\nexport { MockIntersectionObserver };\n"],"version":3}