{"file":"/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/browser/lib/event/event.mock.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/browser/lib/event/event.mock.ts"],"sourcesContent":["/**\n * Event Mock Utilities\n *\n * Common event-related mocks for testing event listeners,\n * event emission, and event handling patterns.\n */\n\n/**\n * Creates a mock event listener function\n */\nexport const createMockEventListener = () => jest.fn();\n\n/**\n * Creates a mock event listener with specific call expectations\n */\nexport const createMockEventListenerWithExpectations = (expectedCalls: number = 1) => {\n  const mockListener = jest.fn();\n  mockListener.mockImplementation(() => {\n    expect(mockListener).toHaveBeenCalledTimes(expectedCalls);\n  });\n  return mockListener;\n};\n\n/**\n * Creates a mock event listener that tracks call arguments\n */\nexport const createMockEventListenerWithTracking = () => {\n  const mockListener = jest.fn();\n  const calls: unknown[][] = [];\n\n  mockListener.mockImplementation((...args: unknown[]) => {\n    calls.push(args);\n  });\n\n  return {\n    listener: mockListener,\n    getCalls: () => calls as unknown[],\n    getLastCall: () => calls[calls.length - 1] as unknown,\n    getCallCount: () => calls.length,\n  };\n};\n\n/**\n * Mock event object factory\n */\nexport const createMockEvent = (type: string, data?: unknown) => ({\n  type,\n  data,\n  timestamp: Date.now(),\n  preventDefault: jest.fn(),\n  stopPropagation: jest.fn(),\n});\n\n/**\n * Mock event emitter for testing\n */\nexport const createMockEventEmitter = () => {\n  const listeners = new Map<string, jest.Mock[]>();\n\n  return {\n    addEventListener: jest.fn((event: string, listener: jest.Mock) => {\n      if (!listeners.has(event)) {\n        listeners.set(event, []);\n      }\n      const eventListeners = listeners.get(event);\n      if (eventListeners) {\n        eventListeners.push(listener);\n      }\n    }),\n\n    removeEventListener: jest.fn((event: string, listener: jest.Mock) => {\n      const eventListeners = listeners.get(event);\n      if (eventListeners) {\n        const index = eventListeners.indexOf(listener);\n        if (index > -1) {\n          eventListeners.splice(index, 1);\n        }\n      }\n    }),\n\n    emit: jest.fn((event: string, data?: unknown) => {\n      const eventListeners = listeners.get(event);\n      if (eventListeners) {\n        eventListeners.forEach((listener) => (listener as (data: unknown) => void)(data));\n      }\n    }),\n\n    getListeners: (event: string) => (listeners.get(event) || []) as unknown[],\n    hasListeners: (event: string) => (listeners.get(event)?.length || 0) > 0,\n  };\n};\n"],"version":3}