e4d0823a8af585bcbc40da4026e4c258
"use strict";
/**
 * Lazy Loading Utilities
 *
 * Simple, reliable lazy loading with retry logic for any application.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.lazyWithRetry = lazyWithRetry;
exports.simpleLazy = simpleLazy;
exports.robustLazy = robustLazy;
var react_1 = require("react");
var types_1 = require("../types/types");
// ============================================================================
// LAZY LOADING WITH RETRY
// ============================================================================
/**
 * Enhanced lazy loading with retry logic for chunk loading failures
 */
function lazyWithRetry(importFn, options) {
    var _this = this;
    if (options === void 0) { options = {}; }
    var _a = options.maxRetries, maxRetries = _a === void 0 ? types_1.RetryConfig.DEFAULT_MAX_RETRIES : _a, _b = options.retryDelay, retryDelay = _b === void 0 ? types_1.RetryConfig.DEFAULT_RETRY_DELAY : _b;
    return (0, react_1.lazy)(function () { return __awaiter(_this, void 0, void 0, function () {
        var lastError, _loop_1, attempt, state_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    lastError = new Error('Lazy loading failed');
                    _loop_1 = function (attempt) {
                        var _b, error_1;
                        return __generator(this, function (_c) {
                            switch (_c.label) {
                                case 0:
                                    _c.trys.push([0, 2, , 4]);
                                    _b = {};
                                    return [4 /*yield*/, importFn()];
                                case 1: return [2 /*return*/, (_b.value = _c.sent(), _b)];
                                case 2:
                                    error_1 = _c.sent();
                                    lastError = error_1;
                                    // Don't retry on the last attempt
                                    if (attempt === maxRetries) {
                                        return [2 /*return*/, "break"];
                                    }
                                    // Log retry attempt in development
                                    if (process.env.NODE_ENV === types_1.Environment.DEVELOPMENT) {
                                        console.warn("Lazy loading attempt ".concat(attempt + 1, "/").concat(maxRetries + 1, " failed, retrying..."), {
                                            error: lastError.message,
                                            attempt: attempt + 1,
                                        });
                                    }
                                    // Wait before retrying with exponential backoff
                                    return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, retryDelay * Math.pow(2, attempt)); })];
                                case 3:
                                    // Wait before retrying with exponential backoff
                                    _c.sent();
                                    return [3 /*break*/, 4];
                                case 4: return [2 /*return*/];
                            }
                        });
                    };
                    attempt = 0;
                    _a.label = 1;
                case 1:
                    if (!(attempt <= maxRetries)) return [3 /*break*/, 4];
                    return [5 /*yield**/, _loop_1(attempt)];
                case 2:
                    state_1 = _a.sent();
                    if (typeof state_1 === "object")
                        return [2 /*return*/, state_1.value];
                    if (state_1 === "break")
                        return [3 /*break*/, 4];
                    _a.label = 3;
                case 3:
                    attempt++;
                    return [3 /*break*/, 1];
                case 4: 
                // If we get here, all attempts failed
                throw lastError;
            }
        });
    }); });
}
// ============================================================================
// CONVENIENCE FUNCTIONS
// ============================================================================
/**
 * Simple lazy loading without retry (for stable chunks)
 */
function simpleLazy(importFn) {
    return (0, react_1.lazy)(importFn);
}
/**
 * Lazy loading with aggressive retry (for unstable networks)
 */
function robustLazy(importFn) {
    return lazyWithRetry(importFn, {
        maxRetries: types_1.RetryConfig.ROBUST_MAX_RETRIES,
        retryDelay: types_1.RetryConfig.ROBUST_RETRY_DELAY,
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2dhbXphcmFtYXphbm92L0Rlc2t0b3AvZnVtby9zcmMvaW5mcmFzdHJ1Y3R1cmUvc3VzcGVuc2UvbGF6eS9sYXp5LnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7OztHQUlHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXFCSCxzQ0EwQ0M7QUFTRCxnQ0FJQztBQUtELGdDQU9DO0FBdEZELCtCQUE0QztBQUM1Qyx3Q0FBMEQ7QUFXMUQsK0VBQStFO0FBQy9FLDBCQUEwQjtBQUMxQiwrRUFBK0U7QUFFL0U7O0dBRUc7QUFDSCxTQUFnQixhQUFhLENBQzNCLFFBQXVDLEVBQ3ZDLE9BQXlCO0lBRjNCLGlCQTBDQztJQXhDQyx3QkFBQSxFQUFBLFlBQXlCO0lBR3ZCLElBQUEsS0FFRSxPQUFPLFdBRm1DLEVBQTVDLFVBQVUsbUJBQUcsbUJBQVcsQ0FBQyxtQkFBbUIsS0FBQSxFQUM1QyxLQUNFLE9BQU8sV0FEbUMsRUFBNUMsVUFBVSxtQkFBRyxtQkFBVyxDQUFDLG1CQUFtQixLQUFBLENBQ2xDO0lBRVosT0FBTyxJQUFBLFlBQUksRUFBQzs7Ozs7b0JBQ04sU0FBUyxHQUFVLElBQUksS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7d0NBRS9DLE9BQU87Ozs7Ozs7b0NBRUwscUJBQU0sUUFBUSxFQUFFLEVBQUE7MEVBQWhCLFNBQWdCOzs7b0NBRXZCLFNBQVMsR0FBRyxPQUFjLENBQUM7b0NBRTNCLGtDQUFrQztvQ0FDbEMsSUFBSSxPQUFPLEtBQUssVUFBVSxFQUFFLENBQUM7O29DQUU3QixDQUFDO29DQUVELG1DQUFtQztvQ0FDbkMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxtQkFBVyxDQUFDLFdBQVcsRUFBRSxDQUFDO3dDQUNyRCxPQUFPLENBQUMsSUFBSSxDQUNWLCtCQUF3QixPQUFPLEdBQUcsQ0FBQyxjQUFJLFVBQVUsR0FBRyxDQUFDLHlCQUFzQixFQUMzRTs0Q0FDRSxLQUFLLEVBQUUsU0FBUyxDQUFDLE9BQU87NENBQ3hCLE9BQU8sRUFBRSxPQUFPLEdBQUcsQ0FBQzt5Q0FDckIsQ0FDRixDQUFDO29DQUNKLENBQUM7b0NBRUQsZ0RBQWdEO29DQUNoRCxxQkFBTSxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sSUFBSyxPQUFBLFVBQVUsQ0FBQyxPQUFPLEVBQUUsVUFBVSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLEVBQXRELENBQXNELENBQUMsRUFBQTs7b0NBRHRGLGdEQUFnRDtvQ0FDaEQsU0FBc0YsQ0FBQzs7Ozs7O29CQXZCbEYsT0FBTyxHQUFHLENBQUM7Ozt5QkFBRSxDQUFBLE9BQU8sSUFBSSxVQUFVLENBQUE7a0RBQWxDLE9BQU87Ozs7Ozs7OztvQkFBNkIsT0FBTyxFQUFFLENBQUE7OztnQkEyQnRELHNDQUFzQztnQkFDdEMsTUFBTSxTQUFTLENBQUM7OztTQUNqQixDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsK0VBQStFO0FBQy9FLHdCQUF3QjtBQUN4QiwrRUFBK0U7QUFFL0U7O0dBRUc7QUFDSCxTQUFnQixVQUFVLENBQ3hCLFFBQXVDO0lBRXZDLE9BQU8sSUFBQSxZQUFJLEVBQUMsUUFBUSxDQUFDLENBQUM7QUFDeEIsQ0FBQztBQUVEOztHQUVHO0FBQ0gsU0FBZ0IsVUFBVSxDQUN4QixRQUF1QztJQUV2QyxPQUFPLGFBQWEsQ0FBQyxRQUFRLEVBQUU7UUFDN0IsVUFBVSxFQUFFLG1CQUFXLENBQUMsa0JBQWtCO1FBQzFDLFVBQVUsRUFBRSxtQkFBVyxDQUFDLGtCQUFrQjtLQUMzQyxDQUFDLENBQUM7QUFDTCxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9nYW16YXJhbWF6YW5vdi9EZXNrdG9wL2Z1bW8vc3JjL2luZnJhc3RydWN0dXJlL3N1c3BlbnNlL2xhenkvbGF6eS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIExhenkgTG9hZGluZyBVdGlsaXRpZXNcbiAqXG4gKiBTaW1wbGUsIHJlbGlhYmxlIGxhenkgbG9hZGluZyB3aXRoIHJldHJ5IGxvZ2ljIGZvciBhbnkgYXBwbGljYXRpb24uXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50VHlwZSwgbGF6eSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEVudmlyb25tZW50LCBSZXRyeUNvbmZpZyB9IGZyb20gJy4uL3R5cGVzL3R5cGVzJztcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gVFlQRVNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuZXhwb3J0IGludGVyZmFjZSBMYXp5T3B0aW9ucyB7XG4gIG1heFJldHJpZXM/OiBudW1iZXI7XG4gIHJldHJ5RGVsYXk/OiBudW1iZXI7XG59XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIExBWlkgTE9BRElORyBXSVRIIFJFVFJZXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8qKlxuICogRW5oYW5jZWQgbGF6eSBsb2FkaW5nIHdpdGggcmV0cnkgbG9naWMgZm9yIGNodW5rIGxvYWRpbmcgZmFpbHVyZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxhenlXaXRoUmV0cnk8VCBleHRlbmRzIENvbXBvbmVudFR5cGU8dW5rbm93bj4+KFxuICBpbXBvcnRGbjogKCkgPT4gUHJvbWlzZTx7IGRlZmF1bHQ6IFQgfT4sXG4gIG9wdGlvbnM6IExhenlPcHRpb25zID0ge31cbik6IFJlYWN0LkxhenlFeG90aWNDb21wb25lbnQ8VD4ge1xuICBjb25zdCB7XG4gICAgbWF4UmV0cmllcyA9IFJldHJ5Q29uZmlnLkRFRkFVTFRfTUFYX1JFVFJJRVMsXG4gICAgcmV0cnlEZWxheSA9IFJldHJ5Q29uZmlnLkRFRkFVTFRfUkVUUllfREVMQVksXG4gIH0gPSBvcHRpb25zO1xuXG4gIHJldHVybiBsYXp5KGFzeW5jICgpID0+IHtcbiAgICBsZXQgbGFzdEVycm9yOiBFcnJvciA9IG5ldyBFcnJvcignTGF6eSBsb2FkaW5nIGZhaWxlZCcpO1xuXG4gICAgZm9yIChsZXQgYXR0ZW1wdCA9IDA7IGF0dGVtcHQgPD0gbWF4UmV0cmllczsgYXR0ZW1wdCsrKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgaW1wb3J0Rm4oKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGxhc3RFcnJvciA9IGVycm9yIGFzIEVycm9yO1xuXG4gICAgICAgIC8vIERvbid0IHJldHJ5IG9uIHRoZSBsYXN0IGF0dGVtcHRcbiAgICAgICAgaWYgKGF0dGVtcHQgPT09IG1heFJldHJpZXMpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIExvZyByZXRyeSBhdHRlbXB0IGluIGRldmVsb3BtZW50XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gRW52aXJvbm1lbnQuREVWRUxPUE1FTlQpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICBgTGF6eSBsb2FkaW5nIGF0dGVtcHQgJHthdHRlbXB0ICsgMX0vJHttYXhSZXRyaWVzICsgMX0gZmFpbGVkLCByZXRyeWluZy4uLmAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGVycm9yOiBsYXN0RXJyb3IubWVzc2FnZSxcbiAgICAgICAgICAgICAgYXR0ZW1wdDogYXR0ZW1wdCArIDEsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdhaXQgYmVmb3JlIHJldHJ5aW5nIHdpdGggZXhwb25lbnRpYWwgYmFja29mZlxuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCByZXRyeURlbGF5ICogTWF0aC5wb3coMiwgYXR0ZW1wdCkpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiB3ZSBnZXQgaGVyZSwgYWxsIGF0dGVtcHRzIGZhaWxlZFxuICAgIHRocm93IGxhc3RFcnJvcjtcbiAgfSk7XG59XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIENPTlZFTklFTkNFIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vKipcbiAqIFNpbXBsZSBsYXp5IGxvYWRpbmcgd2l0aG91dCByZXRyeSAoZm9yIHN0YWJsZSBjaHVua3MpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaW1wbGVMYXp5PFQgZXh0ZW5kcyBDb21wb25lbnRUeXBlPHVua25vd24+PihcbiAgaW1wb3J0Rm46ICgpID0+IFByb21pc2U8eyBkZWZhdWx0OiBUIH0+XG4pOiBSZWFjdC5MYXp5RXhvdGljQ29tcG9uZW50PFQ+IHtcbiAgcmV0dXJuIGxhenkoaW1wb3J0Rm4pO1xufVxuXG4vKipcbiAqIExhenkgbG9hZGluZyB3aXRoIGFnZ3Jlc3NpdmUgcmV0cnkgKGZvciB1bnN0YWJsZSBuZXR3b3JrcylcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJvYnVzdExhenk8VCBleHRlbmRzIENvbXBvbmVudFR5cGU8dW5rbm93bj4+KFxuICBpbXBvcnRGbjogKCkgPT4gUHJvbWlzZTx7IGRlZmF1bHQ6IFQgfT5cbik6IFJlYWN0LkxhenlFeG90aWNDb21wb25lbnQ8VD4ge1xuICByZXR1cm4gbGF6eVdpdGhSZXRyeShpbXBvcnRGbiwge1xuICAgIG1heFJldHJpZXM6IFJldHJ5Q29uZmlnLlJPQlVTVF9NQVhfUkVUUklFUyxcbiAgICByZXRyeURlbGF5OiBSZXRyeUNvbmZpZy5ST0JVU1RfUkVUUllfREVMQVksXG4gIH0pO1xufVxuIl0sInZlcnNpb24iOjN9