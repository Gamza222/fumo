{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/suspense/lazy/lazy.ts","mappings":";AAAA;;;;GAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBH,sCA0CC;AASD,gCAIC;AAKD,gCAOC;AAtFD,+BAA4C;AAC5C,wCAA0D;AAW1D,+EAA+E;AAC/E,0BAA0B;AAC1B,+EAA+E;AAE/E;;GAEG;AACH,SAAgB,aAAa,CAC3B,QAAuC,EACvC,OAAyB;IAF3B,iBA0CC;IAxCC,wBAAA,EAAA,YAAyB;IAGvB,IAAA,KAEE,OAAO,WAFmC,EAA5C,UAAU,mBAAG,mBAAW,CAAC,mBAAmB,KAAA,EAC5C,KACE,OAAO,WADmC,EAA5C,UAAU,mBAAG,mBAAW,CAAC,mBAAmB,KAAA,CAClC;IAEZ,OAAO,IAAA,YAAI,EAAC;;;;;oBACN,SAAS,GAAU,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;wCAE/C,OAAO;;;;;;;oCAEL,qBAAM,QAAQ,EAAE,EAAA;0EAAhB,SAAgB;;;oCAEvB,SAAS,GAAG,OAAc,CAAC;oCAE3B,kCAAkC;oCAClC,IAAI,OAAO,KAAK,UAAU,EAAE,CAAC;;oCAE7B,CAAC;oCAED,mCAAmC;oCACnC,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,mBAAW,CAAC,WAAW,EAAE,CAAC;wCACrD,OAAO,CAAC,IAAI,CACV,+BAAwB,OAAO,GAAG,CAAC,cAAI,UAAU,GAAG,CAAC,yBAAsB,EAC3E;4CACE,KAAK,EAAE,SAAS,CAAC,OAAO;4CACxB,OAAO,EAAE,OAAO,GAAG,CAAC;yCACrB,CACF,CAAC;oCACJ,CAAC;oCAED,gDAAgD;oCAChD,qBAAM,IAAI,OAAO,CAAC,UAAC,OAAO,IAAK,OAAA,UAAU,CAAC,OAAO,EAAE,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,EAAtD,CAAsD,CAAC,EAAA;;oCADtF,gDAAgD;oCAChD,SAAsF,CAAC;;;;;;oBAvBlF,OAAO,GAAG,CAAC;;;yBAAE,CAAA,OAAO,IAAI,UAAU,CAAA;kDAAlC,OAAO;;;;;;;;;oBAA6B,OAAO,EAAE,CAAA;;;gBA2BtD,sCAAsC;gBACtC,MAAM,SAAS,CAAC;;;SACjB,CAAC,CAAC;AACL,CAAC;AAED,+EAA+E;AAC/E,wBAAwB;AACxB,+EAA+E;AAE/E;;GAEG;AACH,SAAgB,UAAU,CACxB,QAAuC;IAEvC,OAAO,IAAA,YAAI,EAAC,QAAQ,CAAC,CAAC;AACxB,CAAC;AAED;;GAEG;AACH,SAAgB,UAAU,CACxB,QAAuC;IAEvC,OAAO,aAAa,CAAC,QAAQ,EAAE;QAC7B,UAAU,EAAE,mBAAW,CAAC,kBAAkB;QAC1C,UAAU,EAAE,mBAAW,CAAC,kBAAkB;KAC3C,CAAC,CAAC;AACL,CAAC","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/suspense/lazy/lazy.ts"],"sourcesContent":["/**\n * Lazy Loading Utilities\n *\n * Simple, reliable lazy loading with retry logic for any application.\n */\n\nimport { ComponentType, lazy } from 'react';\nimport { Environment, RetryConfig } from '../types/types';\n\n// ============================================================================\n// TYPES\n// ============================================================================\n\nexport interface LazyOptions {\n  maxRetries?: number;\n  retryDelay?: number;\n}\n\n// ============================================================================\n// LAZY LOADING WITH RETRY\n// ============================================================================\n\n/**\n * Enhanced lazy loading with retry logic for chunk loading failures\n */\nexport function lazyWithRetry<T extends ComponentType<unknown>>(\n  importFn: () => Promise<{ default: T }>,\n  options: LazyOptions = {}\n): React.LazyExoticComponent<T> {\n  const {\n    maxRetries = RetryConfig.DEFAULT_MAX_RETRIES,\n    retryDelay = RetryConfig.DEFAULT_RETRY_DELAY,\n  } = options;\n\n  return lazy(async () => {\n    let lastError: Error = new Error('Lazy loading failed');\n\n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        return await importFn();\n      } catch (error) {\n        lastError = error as Error;\n\n        // Don't retry on the last attempt\n        if (attempt === maxRetries) {\n          break;\n        }\n\n        // Log retry attempt in development\n        if (process.env.NODE_ENV === Environment.DEVELOPMENT) {\n          console.warn(\n            `Lazy loading attempt ${attempt + 1}/${maxRetries + 1} failed, retrying...`,\n            {\n              error: lastError.message,\n              attempt: attempt + 1,\n            }\n          );\n        }\n\n        // Wait before retrying with exponential backoff\n        await new Promise((resolve) => setTimeout(resolve, retryDelay * Math.pow(2, attempt)));\n      }\n    }\n\n    // If we get here, all attempts failed\n    throw lastError;\n  });\n}\n\n// ============================================================================\n// CONVENIENCE FUNCTIONS\n// ============================================================================\n\n/**\n * Simple lazy loading without retry (for stable chunks)\n */\nexport function simpleLazy<T extends ComponentType<unknown>>(\n  importFn: () => Promise<{ default: T }>\n): React.LazyExoticComponent<T> {\n  return lazy(importFn);\n}\n\n/**\n * Lazy loading with aggressive retry (for unstable networks)\n */\nexport function robustLazy<T extends ComponentType<unknown>>(\n  importFn: () => Promise<{ default: T }>\n): React.LazyExoticComponent<T> {\n  return lazyWithRetry(importFn, {\n    maxRetries: RetryConfig.ROBUST_MAX_RETRIES,\n    retryDelay: RetryConfig.ROBUST_RETRY_DELAY,\n  });\n}\n"],"version":3}