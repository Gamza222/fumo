752dd463d0fc8286843da48ae0c00630
"use strict";
/**
 * Monitoring Service Mock
 *
 * Mock factory for MonitoringService with comprehensive test scenarios.
 * Follows the established mock factory pattern for enterprise testing.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupMonitoringServiceMock = exports.resetMonitoringServiceMocks = exports.createServiceErrorMock = exports.createDegradedSystemMock = exports.createUnhealthySystemMock = exports.mockMonitoringService = exports.defaultMonitoringServiceMock = exports.createMockMonitoringServiceClass = exports.createMockMonitoringServiceInstance = void 0;
var monitoring_types_1 = require("@/infrastructure/monitoring/types/monitoring.types");
// ============================================================================
// MOCK FACTORY FUNCTIONS
// ============================================================================
/**
 * Create a mock MonitoringService instance with customizable methods
 */
var createMockMonitoringServiceInstance = function (overrides) {
    if (overrides === void 0) { overrides = {}; }
    var defaultMock = {
        getSystemHealth: jest.fn(),
        getDashboardData: jest.fn(),
        trackEvent: jest.fn(),
        trackPageView: jest.fn(),
        addMetric: jest.fn(),
        addAlert: jest.fn(),
        updateConfig: jest.fn(),
        getAnalyticsSession: jest.fn(),
    };
    return __assign(__assign({}, defaultMock), overrides);
};
exports.createMockMonitoringServiceInstance = createMockMonitoringServiceInstance;
/**
 * Create a mock MonitoringService class with getInstance method
 */
var createMockMonitoringServiceClass = function (instanceMock) {
    var mockInstance = instanceMock || (0, exports.createMockMonitoringServiceInstance)();
    return {
        getInstance: jest.fn().mockReturnValue(mockInstance),
    };
};
exports.createMockMonitoringServiceClass = createMockMonitoringServiceClass;
// ============================================================================
// DEFAULT MOCK INSTANCES
// ============================================================================
/**
 * Default mock MonitoringService instance with healthy system responses
 */
exports.defaultMonitoringServiceMock = (0, exports.createMockMonitoringServiceInstance)({
    getSystemHealth: jest.fn().mockResolvedValue({
        status: monitoring_types_1.HealthStatus.HEALTHY,
        timestamp: new Date('2024-01-01T00:00:00Z'),
        uptime: 3600000,
        version: '1.0.0',
        services: [
            {
                name: 'database',
                status: monitoring_types_1.HealthStatus.HEALTHY,
                responseTime: 5,
                lastCheck: new Date('2024-01-01T00:00:00Z'),
            },
            {
                name: 'api',
                status: monitoring_types_1.HealthStatus.HEALTHY,
                responseTime: 10,
                lastCheck: new Date('2024-01-01T00:00:00Z'),
            },
        ],
        summary: {
            total: 2,
            healthy: 2,
            degraded: 0,
            unhealthy: 0,
        },
    }),
    getDashboardData: jest.fn().mockResolvedValue({
        systemHealth: {
            status: monitoring_types_1.HealthStatus.HEALTHY,
            timestamp: new Date('2024-01-01T00:00:00Z'),
            uptime: 3600000,
            version: '1.0.0',
            services: [
                {
                    name: 'database',
                    status: monitoring_types_1.HealthStatus.HEALTHY,
                    responseTime: 5,
                    lastCheck: new Date('2024-01-01T00:00:00Z'),
                },
                {
                    name: 'api',
                    status: monitoring_types_1.HealthStatus.HEALTHY,
                    responseTime: 10,
                    lastCheck: new Date('2024-01-01T00:00:00Z'),
                },
            ],
            summary: {
                total: 2,
                healthy: 2,
                degraded: 0,
                unhealthy: 0,
            },
        },
        recentAlerts: [],
        metrics: [],
        analytics: {
            totalEvents: 100,
            activeSessions: 5,
            topPages: [
                { path: '/', views: 50 },
                { path: '/dashboard', views: 25 },
            ],
        },
    }),
    trackEvent: jest.fn(),
    trackPageView: jest.fn(),
    addMetric: jest.fn(),
    addAlert: jest.fn(),
    updateConfig: jest.fn(),
    getAnalyticsSession: jest.fn().mockReturnValue({
        id: 'session_123',
        startTime: new Date('2024-01-01T00:00:00Z'),
        lastActivity: new Date('2024-01-01T00:00:00Z'),
        pageViews: 10,
        events: 25,
    }),
});
/**
 * Mock MonitoringService class with default instance
 */
exports.mockMonitoringService = (0, exports.createMockMonitoringServiceClass)(exports.defaultMonitoringServiceMock);
// ============================================================================
// SPECIALIZED MOCK SCENARIOS
// ============================================================================
/**
 * Mock for unhealthy system scenario
 */
var createUnhealthySystemMock = function () {
    return (0, exports.createMockMonitoringServiceInstance)({
        getSystemHealth: jest.fn().mockResolvedValue({
            status: monitoring_types_1.HealthStatus.UNHEALTHY,
            timestamp: new Date('2024-01-01T00:00:00Z'),
            uptime: 3600000,
            version: '1.0.0',
            services: [
                {
                    name: 'database',
                    status: monitoring_types_1.HealthStatus.UNHEALTHY,
                    responseTime: 5000,
                    lastCheck: new Date('2024-01-01T00:00:00Z'),
                    error: 'Connection timeout',
                },
            ],
            summary: {
                total: 1,
                healthy: 0,
                degraded: 0,
                unhealthy: 1,
            },
        }),
    });
};
exports.createUnhealthySystemMock = createUnhealthySystemMock;
/**
 * Mock for degraded system scenario
 */
var createDegradedSystemMock = function () {
    return (0, exports.createMockMonitoringServiceInstance)({
        getSystemHealth: jest.fn().mockResolvedValue({
            status: monitoring_types_1.HealthStatus.DEGRADED,
            timestamp: new Date('2024-01-01T00:00:00Z'),
            uptime: 3600000,
            version: '1.0.0',
            services: [
                {
                    name: 'database',
                    status: monitoring_types_1.HealthStatus.HEALTHY,
                    responseTime: 5,
                    lastCheck: new Date('2024-01-01T00:00:00Z'),
                },
                {
                    name: 'cache',
                    status: monitoring_types_1.HealthStatus.DEGRADED,
                    responseTime: 1000,
                    lastCheck: new Date('2024-01-01T00:00:00Z'),
                    error: 'High latency',
                },
            ],
            summary: {
                total: 2,
                healthy: 1,
                degraded: 1,
                unhealthy: 0,
            },
        }),
    });
};
exports.createDegradedSystemMock = createDegradedSystemMock;
/**
 * Mock for service error scenario
 */
var createServiceErrorMock = function () {
    return (0, exports.createMockMonitoringServiceInstance)({
        getSystemHealth: jest.fn().mockRejectedValue(new Error('Service unavailable')),
        getDashboardData: jest.fn().mockRejectedValue(new Error('Dashboard data unavailable')),
    });
};
exports.createServiceErrorMock = createServiceErrorMock;
// ============================================================================
// MOCK UTILITIES
// ============================================================================
/**
 * Reset all mocks to default state
 */
var resetMonitoringServiceMocks = function (mockInstance) {
    Object.values(mockInstance).forEach(function (mockFn) {
        if (jest.isMockFunction(mockFn)) {
            mockFn.mockReset();
        }
    });
};
exports.resetMonitoringServiceMocks = resetMonitoringServiceMocks;
/**
 * Setup mock for specific test scenario
 */
var setupMonitoringServiceMock = function (mockInstance, scenario) {
    if (scenario === void 0) { scenario = 'healthy'; }
    switch (scenario) {
        case 'healthy':
            mockInstance.getSystemHealth.mockResolvedValue(exports.defaultMonitoringServiceMock.getSystemHealth());
            break;
        case 'unhealthy':
            mockInstance.getSystemHealth.mockResolvedValue((0, exports.createUnhealthySystemMock)().getSystemHealth());
            break;
        case 'degraded':
            mockInstance.getSystemHealth.mockResolvedValue((0, exports.createDegradedSystemMock)().getSystemHealth());
            break;
        case 'error':
            mockInstance.getSystemHealth.mockRejectedValue(new Error('Service error'));
            break;
    }
};
exports.setupMonitoringServiceMock = setupMonitoringServiceMock;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,