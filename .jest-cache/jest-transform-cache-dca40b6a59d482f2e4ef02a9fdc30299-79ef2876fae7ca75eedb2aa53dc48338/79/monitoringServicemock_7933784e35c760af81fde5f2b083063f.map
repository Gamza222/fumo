{"file":"/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/monitoring/monitoringService.mock.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/monitoring/monitoringService.mock.ts"],"sourcesContent":["/**\n * Monitoring Service Mock\n *\n * Mock factory for MonitoringService with comprehensive test scenarios.\n * Follows the established mock factory pattern for enterprise testing.\n */\n\nimport { MonitoringService } from '@/infrastructure/monitoring';\nimport { HealthStatus } from '@/infrastructure/monitoring/types/monitoring.types';\n\n// ============================================================================\n// MOCK FACTORY FUNCTIONS\n// ============================================================================\n\n/**\n * Create a mock MonitoringService instance with customizable methods\n */\nexport const createMockMonitoringServiceInstance = (\n  overrides: Partial<{\n    getSystemHealth: jest.Mock;\n    getDashboardData: jest.Mock;\n    trackEvent: jest.Mock;\n    trackPageView: jest.Mock;\n    addMetric: jest.Mock;\n    addAlert: jest.Mock;\n    updateConfig: jest.Mock;\n    getAnalyticsSession: jest.Mock;\n  }> = {}\n): jest.Mocked<MonitoringService> => {\n  const defaultMock = {\n    getSystemHealth: jest.fn(),\n    getDashboardData: jest.fn(),\n    trackEvent: jest.fn(),\n    trackPageView: jest.fn(),\n    addMetric: jest.fn(),\n    addAlert: jest.fn(),\n    updateConfig: jest.fn(),\n    getAnalyticsSession: jest.fn(),\n  };\n\n  return {\n    ...defaultMock,\n    ...overrides,\n  } as unknown as jest.Mocked<MonitoringService>;\n};\n\n/**\n * Create a mock MonitoringService class with getInstance method\n */\nexport const createMockMonitoringServiceClass = (instanceMock?: jest.Mocked<MonitoringService>) => {\n  const mockInstance = instanceMock || createMockMonitoringServiceInstance();\n\n  return {\n    getInstance: jest.fn().mockReturnValue(mockInstance),\n  } as unknown as typeof MonitoringService;\n};\n\n// ============================================================================\n// DEFAULT MOCK INSTANCES\n// ============================================================================\n\n/**\n * Default mock MonitoringService instance with healthy system responses\n */\nexport const defaultMonitoringServiceMock = createMockMonitoringServiceInstance({\n  getSystemHealth: jest.fn().mockResolvedValue({\n    status: HealthStatus.HEALTHY,\n    timestamp: new Date('2024-01-01T00:00:00Z'),\n    uptime: 3600000,\n    version: '1.0.0',\n    services: [\n      {\n        name: 'database',\n        status: HealthStatus.HEALTHY,\n        responseTime: 5,\n        lastCheck: new Date('2024-01-01T00:00:00Z'),\n      },\n      {\n        name: 'api',\n        status: HealthStatus.HEALTHY,\n        responseTime: 10,\n        lastCheck: new Date('2024-01-01T00:00:00Z'),\n      },\n    ],\n    summary: {\n      total: 2,\n      healthy: 2,\n      degraded: 0,\n      unhealthy: 0,\n    },\n  }),\n  getDashboardData: jest.fn().mockResolvedValue({\n    systemHealth: {\n      status: HealthStatus.HEALTHY,\n      timestamp: new Date('2024-01-01T00:00:00Z'),\n      uptime: 3600000,\n      version: '1.0.0',\n      services: [\n        {\n          name: 'database',\n          status: HealthStatus.HEALTHY,\n          responseTime: 5,\n          lastCheck: new Date('2024-01-01T00:00:00Z'),\n        },\n        {\n          name: 'api',\n          status: HealthStatus.HEALTHY,\n          responseTime: 10,\n          lastCheck: new Date('2024-01-01T00:00:00Z'),\n        },\n      ],\n      summary: {\n        total: 2,\n        healthy: 2,\n        degraded: 0,\n        unhealthy: 0,\n      },\n    },\n    recentAlerts: [],\n    metrics: [],\n    analytics: {\n      totalEvents: 100,\n      activeSessions: 5,\n      topPages: [\n        { path: '/', views: 50 },\n        { path: '/dashboard', views: 25 },\n      ],\n    },\n  }),\n  trackEvent: jest.fn(),\n  trackPageView: jest.fn(),\n  addMetric: jest.fn(),\n  addAlert: jest.fn(),\n  updateConfig: jest.fn(),\n  getAnalyticsSession: jest.fn().mockReturnValue({\n    id: 'session_123',\n    startTime: new Date('2024-01-01T00:00:00Z'),\n    lastActivity: new Date('2024-01-01T00:00:00Z'),\n    pageViews: 10,\n    events: 25,\n  }),\n});\n\n/**\n * Mock MonitoringService class with default instance\n */\nexport const mockMonitoringService = createMockMonitoringServiceClass(defaultMonitoringServiceMock);\n\n// ============================================================================\n// SPECIALIZED MOCK SCENARIOS\n// ============================================================================\n\n/**\n * Mock for unhealthy system scenario\n */\nexport const createUnhealthySystemMock = (): jest.Mocked<MonitoringService> => {\n  return createMockMonitoringServiceInstance({\n    getSystemHealth: jest.fn().mockResolvedValue({\n      status: HealthStatus.UNHEALTHY,\n      timestamp: new Date('2024-01-01T00:00:00Z'),\n      uptime: 3600000,\n      version: '1.0.0',\n      services: [\n        {\n          name: 'database',\n          status: HealthStatus.UNHEALTHY,\n          responseTime: 5000,\n          lastCheck: new Date('2024-01-01T00:00:00Z'),\n          error: 'Connection timeout',\n        },\n      ],\n      summary: {\n        total: 1,\n        healthy: 0,\n        degraded: 0,\n        unhealthy: 1,\n      },\n    }),\n  });\n};\n\n/**\n * Mock for degraded system scenario\n */\nexport const createDegradedSystemMock = (): jest.Mocked<MonitoringService> => {\n  return createMockMonitoringServiceInstance({\n    getSystemHealth: jest.fn().mockResolvedValue({\n      status: HealthStatus.DEGRADED,\n      timestamp: new Date('2024-01-01T00:00:00Z'),\n      uptime: 3600000,\n      version: '1.0.0',\n      services: [\n        {\n          name: 'database',\n          status: HealthStatus.HEALTHY,\n          responseTime: 5,\n          lastCheck: new Date('2024-01-01T00:00:00Z'),\n        },\n        {\n          name: 'cache',\n          status: HealthStatus.DEGRADED,\n          responseTime: 1000,\n          lastCheck: new Date('2024-01-01T00:00:00Z'),\n          error: 'High latency',\n        },\n      ],\n      summary: {\n        total: 2,\n        healthy: 1,\n        degraded: 1,\n        unhealthy: 0,\n      },\n    }),\n  });\n};\n\n/**\n * Mock for service error scenario\n */\nexport const createServiceErrorMock = (): jest.Mocked<MonitoringService> => {\n  return createMockMonitoringServiceInstance({\n    getSystemHealth: jest.fn().mockRejectedValue(new Error('Service unavailable')),\n    getDashboardData: jest.fn().mockRejectedValue(new Error('Dashboard data unavailable')),\n  });\n};\n\n// ============================================================================\n// MOCK UTILITIES\n// ============================================================================\n\n/**\n * Reset all mocks to default state\n */\nexport const resetMonitoringServiceMocks = (mockInstance: jest.Mocked<MonitoringService>): void => {\n  Object.values(mockInstance).forEach((mockFn) => {\n    if (jest.isMockFunction(mockFn)) {\n      mockFn.mockReset();\n    }\n  });\n};\n\n/**\n * Setup mock for specific test scenario\n */\nexport const setupMonitoringServiceMock = (\n  mockInstance: jest.Mocked<MonitoringService>,\n  scenario: 'healthy' | 'unhealthy' | 'degraded' | 'error' = 'healthy'\n): void => {\n  switch (scenario) {\n    case 'healthy':\n      mockInstance.getSystemHealth.mockResolvedValue(\n        defaultMonitoringServiceMock.getSystemHealth()\n      );\n      break;\n    case 'unhealthy':\n      mockInstance.getSystemHealth.mockResolvedValue(createUnhealthySystemMock().getSystemHealth());\n      break;\n    case 'degraded':\n      mockInstance.getSystemHealth.mockResolvedValue(createDegradedSystemMock().getSystemHealth());\n      break;\n    case 'error':\n      mockInstance.getSystemHealth.mockRejectedValue(new Error('Service error'));\n      break;\n  }\n};\n"],"version":3}