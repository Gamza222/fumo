918aef58d55872744dfa6d9273171320
"use strict";
/**
 * Performance Types Mock Data for Testing
 *
 * Provides mock data for performance-related types and interfaces
 * for testing performance monitoring functionality.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateMockPerformanceReport = exports.generateMockPerformanceMetrics = exports.mockProductionConfig = exports.mockHTTPCacheConfig = exports.mockCriticalCSSConfig = exports.mockResourcePreloadConfig = exports.mockImageOptimizationConfig = exports.mockPerformanceReport = exports.mockPerformanceMetrics = exports.mockPerformanceMetric = void 0;
var performance_enums_1 = require("@/infrastructure/performance/types/performance.enums");
// Mock performance metrics
exports.mockPerformanceMetric = {
    name: 'test-metric',
    value: 100,
    timestamp: Date.now(),
    rating: performance_enums_1.PerformanceRating.GOOD,
};
exports.mockPerformanceMetrics = [
    {
        name: 'image-optimization',
        value: 50,
        timestamp: Date.now() - 1000,
        rating: performance_enums_1.PerformanceRating.GOOD,
    },
    {
        name: 'resource-preloading',
        value: 200,
        timestamp: Date.now() - 2000,
        rating: performance_enums_1.PerformanceRating.NEEDS_IMPROVEMENT,
    },
    {
        name: 'critical-css',
        value: 300,
        timestamp: Date.now() - 3000,
        rating: performance_enums_1.PerformanceRating.POOR,
    },
];
// Mock performance report
exports.mockPerformanceReport = {
    metrics: exports.mockPerformanceMetrics,
    summary: {
        totalMetrics: 3,
        goodMetrics: 1,
        needsImprovementMetrics: 1,
        poorMetrics: 1,
    },
    timestamp: Date.now(),
};
// Mock image optimization config
exports.mockImageOptimizationConfig = {
    quality: 80,
    format: performance_enums_1.ImageFormat.WEBP,
    responsive: true,
    lazyThreshold: 100,
    placeholder: 'blur',
};
// Mock resource preload config
exports.mockResourcePreloadConfig = {
    fonts: true,
    css: true,
    js: true,
    images: true,
    custom: [
        {
            href: '/api/data',
            as: 'fetch',
            crossOrigin: 'anonymous',
        },
    ],
};
// Mock critical CSS config
exports.mockCriticalCSSConfig = {
    extract: true,
    inline: true,
    selector: 'style[data-critical]',
    nonCriticalStrategy: performance_enums_1.NonCriticalStrategy.ASYNC,
};
// Mock HTTP cache config
exports.mockHTTPCacheConfig = {
    maxAge: 3600,
    sMaxAge: 86400,
    etag: true,
    lastModified: true,
    directives: ['public'],
};
// Mock production config
exports.mockProductionConfig = {
    compression: true,
    minification: true,
    treeShaking: true,
    codeSplitting: true,
    bundleAnalyzer: false,
    sourceMaps: false,
};
// Mock performance data generators
var generateMockPerformanceMetrics = function (count) {
    if (count === void 0) { count = 5; }
    return Array.from({ length: count }, function (_, index) { return ({
        name: "test-metric-".concat(index),
        value: Math.random() * 1000,
        timestamp: Date.now() - index * 1000,
        rating: [performance_enums_1.PerformanceRating.GOOD, performance_enums_1.PerformanceRating.NEEDS_IMPROVEMENT, performance_enums_1.PerformanceRating.POOR][Math.floor(Math.random() * 3)],
    }); });
};
exports.generateMockPerformanceMetrics = generateMockPerformanceMetrics;
var generateMockPerformanceReport = function (metricsCount) {
    if (metricsCount === void 0) { metricsCount = 10; }
    var metrics = (0, exports.generateMockPerformanceMetrics)(metricsCount);
    var goodMetrics = metrics.filter(function (m) { return m.rating === performance_enums_1.PerformanceRating.GOOD; }).length;
    var needsImprovementMetrics = metrics.filter(function (m) { return m.rating === performance_enums_1.PerformanceRating.NEEDS_IMPROVEMENT; }).length;
    var poorMetrics = metrics.filter(function (m) { return m.rating === performance_enums_1.PerformanceRating.POOR; }).length;
    return {
        metrics: metrics,
        summary: {
            totalMetrics: metrics.length,
            goodMetrics: goodMetrics,
            needsImprovementMetrics: needsImprovementMetrics,
            poorMetrics: poorMetrics,
        },
        timestamp: Date.now(),
    };
};
exports.generateMockPerformanceReport = generateMockPerformanceReport;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,