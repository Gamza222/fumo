{"file":"/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/performance/performanceTypes.mock.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/performance/performanceTypes.mock.ts"],"sourcesContent":["/**\n * Performance Types Mock Data for Testing\n *\n * Provides mock data for performance-related types and interfaces\n * for testing performance monitoring functionality.\n */\n\nimport type {\n  CriticalCSSConfig,\n  HTTPCacheConfig,\n  ImageOptimizationConfig,\n  PerformanceMetric,\n  PerformanceReport,\n  ProductionConfig,\n  ResourcePreloadConfig,\n} from '@/infrastructure/performance/types/performance.types';\nimport {\n  ImageFormat,\n  NonCriticalStrategy,\n  PerformanceRating,\n} from '@/infrastructure/performance/types/performance.enums';\n\n// Mock performance metrics\nexport const mockPerformanceMetric: PerformanceMetric = {\n  name: 'test-metric',\n  value: 100,\n  timestamp: Date.now(),\n  rating: PerformanceRating.GOOD,\n};\n\nexport const mockPerformanceMetrics: PerformanceMetric[] = [\n  {\n    name: 'image-optimization',\n    value: 50,\n    timestamp: Date.now() - 1000,\n    rating: PerformanceRating.GOOD,\n  },\n  {\n    name: 'resource-preloading',\n    value: 200,\n    timestamp: Date.now() - 2000,\n    rating: PerformanceRating.NEEDS_IMPROVEMENT,\n  },\n  {\n    name: 'critical-css',\n    value: 300,\n    timestamp: Date.now() - 3000,\n    rating: PerformanceRating.POOR,\n  },\n];\n\n// Mock performance report\nexport const mockPerformanceReport: PerformanceReport = {\n  metrics: mockPerformanceMetrics,\n  summary: {\n    totalMetrics: 3,\n    goodMetrics: 1,\n    needsImprovementMetrics: 1,\n    poorMetrics: 1,\n  },\n  timestamp: Date.now(),\n};\n\n// Mock image optimization config\nexport const mockImageOptimizationConfig: ImageOptimizationConfig = {\n  quality: 80,\n  format: ImageFormat.WEBP,\n  responsive: true,\n  lazyThreshold: 100,\n  placeholder: 'blur',\n};\n\n// Mock resource preload config\nexport const mockResourcePreloadConfig: ResourcePreloadConfig = {\n  fonts: true,\n  css: true,\n  js: true,\n  images: true,\n  custom: [\n    {\n      href: '/api/data',\n      as: 'fetch',\n      crossOrigin: 'anonymous',\n    },\n  ],\n};\n\n// Mock critical CSS config\nexport const mockCriticalCSSConfig: CriticalCSSConfig = {\n  extract: true,\n  inline: true,\n  selector: 'style[data-critical]',\n  nonCriticalStrategy: NonCriticalStrategy.ASYNC,\n};\n\n// Mock HTTP cache config\nexport const mockHTTPCacheConfig: HTTPCacheConfig = {\n  maxAge: 3600,\n  sMaxAge: 86400,\n  etag: true,\n  lastModified: true,\n  directives: ['public'],\n};\n\n// Mock production config\nexport const mockProductionConfig: ProductionConfig = {\n  compression: true,\n  minification: true,\n  treeShaking: true,\n  codeSplitting: true,\n  bundleAnalyzer: false,\n  sourceMaps: false,\n};\n\n// Mock performance data generators\nexport const generateMockPerformanceMetrics = (count: number = 5): PerformanceMetric[] => {\n  return Array.from({ length: count }, (_, index) => ({\n    name: `test-metric-${index}`,\n    value: Math.random() * 1000,\n    timestamp: Date.now() - index * 1000,\n    rating: [PerformanceRating.GOOD, PerformanceRating.NEEDS_IMPROVEMENT, PerformanceRating.POOR][\n      Math.floor(Math.random() * 3)\n    ],\n  }));\n};\n\nexport const generateMockPerformanceReport = (metricsCount: number = 10): PerformanceReport => {\n  const metrics = generateMockPerformanceMetrics(metricsCount);\n  const goodMetrics = metrics.filter((m) => m.rating === PerformanceRating.GOOD).length;\n  const needsImprovementMetrics = metrics.filter(\n    (m) => m.rating === PerformanceRating.NEEDS_IMPROVEMENT\n  ).length;\n  const poorMetrics = metrics.filter((m) => m.rating === PerformanceRating.POOR).length;\n\n  return {\n    metrics,\n    summary: {\n      totalMetrics: metrics.length,\n      goodMetrics,\n      needsImprovementMetrics,\n      poorMetrics,\n    },\n    timestamp: Date.now(),\n  };\n};\n"],"version":3}