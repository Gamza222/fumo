04c5e06d2f10b81b165c1214a894824c
"use strict";
/**
 * Monitoring Service Tests
 *
 * Comprehensive tests for the monitoring service including health checks,
 * analytics tracking, and monitoring functionality.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var monitoring_service_1 = require("./monitoring.service");
var monitoring_types_1 = require("../types/monitoring.types");
var infrastructure_1 = require("@/shared/testing/mocks/infrastructure");
describe('MonitoringService', function () {
    var monitoringService;
    beforeEach(function () {
        // Reset singleton instance
        monitoring_service_1.MonitoringService.instance = undefined;
        monitoringService = monitoring_service_1.MonitoringService.getInstance(infrastructure_1.mockMonitoringConfig);
    });
    afterEach(function () {
        jest.clearAllMocks();
    });
    describe('Singleton Pattern', function () {
        it('should return the same instance', function () {
            var instance1 = monitoring_service_1.MonitoringService.getInstance();
            var instance2 = monitoring_service_1.MonitoringService.getInstance();
            expect(instance1).toBe(instance2);
        });
        it('should throw error if no config provided on first initialization', function () {
            monitoring_service_1.MonitoringService.instance = undefined;
            expect(function () { return monitoring_service_1.MonitoringService.getInstance(); }).toThrow('MonitoringService requires configuration on first initialization');
        });
    });
    describe('System Health', function () {
        it('should return system health status', function () { return __awaiter(void 0, void 0, void 0, function () {
            var health;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, monitoringService.getSystemHealth()];
                    case 1:
                        health = _a.sent();
                        expect(health).toBeDefined();
                        expect(health.status).toBe(monitoring_types_1.HealthStatus.HEALTHY);
                        expect(health.timestamp).toBeInstanceOf(Date);
                        expect(health.uptime).toBeGreaterThan(0);
                        expect(health.version).toBeDefined();
                        expect(health.services).toHaveLength(4);
                        expect(health.summary.total).toBe(4);
                        expect(health.summary.healthy).toBe(4);
                        return [2 /*return*/];
                }
            });
        }); });
        it('should include all configured services', function () { return __awaiter(void 0, void 0, void 0, function () {
            var health, serviceNames;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, monitoringService.getSystemHealth()];
                    case 1:
                        health = _a.sent();
                        serviceNames = health.services.map(function (s) { return s.name; });
                        expect(serviceNames).toContain('database');
                        expect(serviceNames).toContain('api');
                        expect(serviceNames).toContain('cache');
                        expect(serviceNames).toContain('storage');
                        return [2 /*return*/];
                }
            });
        }); });
        it('should have proper service health structure', function () { return __awaiter(void 0, void 0, void 0, function () {
            var health, service;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, monitoringService.getSystemHealth()];
                    case 1:
                        health = _a.sent();
                        service = health.services[0];
                        expect(service).toBeDefined();
                        expect(service === null || service === void 0 ? void 0 : service.name).toBeDefined();
                        expect(service === null || service === void 0 ? void 0 : service.status).toBe(monitoring_types_1.HealthStatus.HEALTHY);
                        expect(service === null || service === void 0 ? void 0 : service.lastCheck).toBeInstanceOf(Date);
                        expect(service === null || service === void 0 ? void 0 : service.responseTime).toBeGreaterThanOrEqual(0);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('Analytics Tracking', function () {
        it('should track events when analytics is enabled', function () {
            // Enable debug mode for this test
            monitoringService.updateConfig({
                analytics: __assign(__assign({}, infrastructure_1.mockMonitoringConfig.analytics), { debug: true }),
            });
            var consoleSpy = jest.spyOn(console, 'log').mockImplementation();
            monitoringService.trackEvent(monitoring_types_1.AnalyticsEventType.PAGE_VIEW, 'test_event', { test: 'data' });
            expect(consoleSpy).toHaveBeenCalledWith('Analytics Event:', expect.objectContaining({
                type: monitoring_types_1.AnalyticsEventType.PAGE_VIEW,
                name: 'test_event',
                properties: { test: 'data' },
            }));
            consoleSpy.mockRestore();
        });
        it('should not track events when analytics is disabled', function () {
            var disabledConfig = __assign(__assign({}, infrastructure_1.mockMonitoringConfig), { analytics: __assign(__assign({}, infrastructure_1.mockMonitoringConfig.analytics), { enabled: false }) });
            monitoringService.updateConfig(disabledConfig);
            var consoleSpy = jest.spyOn(console, 'log').mockImplementation();
            monitoringService.trackEvent(monitoring_types_1.AnalyticsEventType.PAGE_VIEW, 'test_event');
            expect(consoleSpy).not.toHaveBeenCalled();
            consoleSpy.mockRestore();
        });
        it('should track page views', function () {
            // Enable debug mode for this test
            monitoringService.updateConfig({
                analytics: __assign(__assign({}, infrastructure_1.mockMonitoringConfig.analytics), { debug: true }),
            });
            var consoleSpy = jest.spyOn(console, 'log').mockImplementation();
            monitoringService.trackPageView('/test-page', 'user123');
            expect(consoleSpy).toHaveBeenCalledWith('Analytics Event:', expect.objectContaining({
                type: monitoring_types_1.AnalyticsEventType.PAGE_VIEW,
                name: 'page_view',
                properties: { path: '/test-page' },
                userId: 'user123',
            }));
            consoleSpy.mockRestore();
        });
        it('should maintain analytics session', function () {
            var session = monitoringService.getAnalyticsSession();
            expect(session).toBeDefined();
            expect(session === null || session === void 0 ? void 0 : session.id).toBeDefined();
            expect(session === null || session === void 0 ? void 0 : session.startTime).toBeInstanceOf(Date);
            expect(session === null || session === void 0 ? void 0 : session.pageViews).toBe(0);
            expect(session === null || session === void 0 ? void 0 : session.events).toBe(0);
        });
    });
    describe('Metrics Management', function () {
        it('should add metrics', function () {
            monitoringService.addMetric('cpu_usage', 75.5, 'percent', { server: 'web-01' });
            // Metrics are stored internally, we can't directly access them
            // but we can verify the method doesn't throw
            expect(function () {
                monitoringService.addMetric('memory_usage', 60, 'percent');
            }).not.toThrow();
        });
        it('should limit number of stored metrics', function () {
            var limitedConfig = __assign(__assign({}, infrastructure_1.mockMonitoringConfig), { dashboard: __assign(__assign({}, infrastructure_1.mockMonitoringConfig.dashboard), { maxMetrics: 2 }) });
            monitoringService.updateConfig(limitedConfig);
            // Add more metrics than the limit
            monitoringService.addMetric('metric1', 1, 'unit');
            monitoringService.addMetric('metric2', 2, 'unit');
            monitoringService.addMetric('metric3', 3, 'unit');
            // Should not throw and should maintain limit internally
            expect(function () {
                monitoringService.addMetric('metric4', 4, 'unit');
            }).not.toThrow();
        });
    });
    describe('Alert Management', function () {
        it('should add alerts', function () {
            var consoleSpy = jest.spyOn(console, 'log').mockImplementation();
            monitoringService.addAlert(monitoring_types_1.AlertLevel.WARNING, 'Test warning', { component: 'test' });
            expect(consoleSpy).toHaveBeenCalledWith('Monitoring Alert:', expect.objectContaining({
                level: monitoring_types_1.AlertLevel.WARNING,
                message: 'Test warning',
                metadata: { component: 'test' },
                resolved: false,
            }));
            consoleSpy.mockRestore();
        });
        it('should not send alerts when disabled', function () {
            var disabledConfig = __assign(__assign({}, infrastructure_1.mockMonitoringConfig), { alerts: __assign(__assign({}, infrastructure_1.mockMonitoringConfig.alerts), { enabled: false }) });
            monitoringService.updateConfig(disabledConfig);
            var consoleSpy = jest.spyOn(console, 'log').mockImplementation();
            monitoringService.addAlert(monitoring_types_1.AlertLevel.ERROR, 'Test error');
            expect(consoleSpy).not.toHaveBeenCalled();
            consoleSpy.mockRestore();
        });
        it('should limit number of stored alerts', function () {
            var limitedConfig = __assign(__assign({}, infrastructure_1.mockMonitoringConfig), { dashboard: __assign(__assign({}, infrastructure_1.mockMonitoringConfig.dashboard), { maxAlerts: 2 }) });
            monitoringService.updateConfig(limitedConfig);
            // Add more alerts than the limit
            monitoringService.addAlert(monitoring_types_1.AlertLevel.INFO, 'Alert 1');
            monitoringService.addAlert(monitoring_types_1.AlertLevel.WARNING, 'Alert 2');
            monitoringService.addAlert(monitoring_types_1.AlertLevel.ERROR, 'Alert 3');
            // Should not throw and should maintain limit internally
            expect(function () {
                monitoringService.addAlert(monitoring_types_1.AlertLevel.CRITICAL, 'Alert 4');
            }).not.toThrow();
        });
    });
    describe('Dashboard Data', function () {
        it('should return dashboard data', function () { return __awaiter(void 0, void 0, void 0, function () {
            var dashboardData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Add some test data
                        monitoringService.addMetric('test_metric', 100, 'count');
                        monitoringService.addAlert(monitoring_types_1.AlertLevel.INFO, 'Test alert');
                        return [4 /*yield*/, monitoringService.getDashboardData()];
                    case 1:
                        dashboardData = _a.sent();
                        expect(dashboardData).toBeDefined();
                        expect(dashboardData.systemHealth).toBeDefined();
                        expect(dashboardData.recentAlerts).toBeDefined();
                        expect(dashboardData.metrics).toBeDefined();
                        expect(dashboardData.analytics).toBeDefined();
                        expect(dashboardData.analytics.totalEvents).toBeGreaterThanOrEqual(0);
                        expect(dashboardData.analytics.activeSessions).toBeGreaterThanOrEqual(0);
                        expect(dashboardData.analytics.topPages).toBeDefined();
                        return [2 /*return*/];
                }
            });
        }); });
        it('should include system health in dashboard data', function () { return __awaiter(void 0, void 0, void 0, function () {
            var dashboardData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, monitoringService.getDashboardData()];
                    case 1:
                        dashboardData = _a.sent();
                        expect(dashboardData.systemHealth.status).toBe(monitoring_types_1.HealthStatus.HEALTHY);
                        expect(dashboardData.systemHealth.services).toHaveLength(4);
                        expect(dashboardData.systemHealth.summary.total).toBe(4);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('Configuration Management', function () {
        it('should update configuration', function () {
            var newConfig = {
                analytics: __assign(__assign({}, infrastructure_1.mockMonitoringConfig.analytics), { debug: false }),
            };
            monitoringService.updateConfig(newConfig);
            // Verify configuration was updated by checking behavior
            var consoleSpy = jest.spyOn(console, 'log').mockImplementation();
            monitoringService.trackEvent(monitoring_types_1.AnalyticsEventType.PAGE_VIEW, 'test');
            // Should not log when debug is false
            expect(consoleSpy).not.toHaveBeenCalled();
            consoleSpy.mockRestore();
        });
    });
    describe('Error Handling', function () {
        it('should handle service health check errors gracefully', function () { return __awaiter(void 0, void 0, void 0, function () {
            var originalCheckServiceHealth, health;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        originalCheckServiceHealth = monitoringService.checkServiceHealth;
                        monitoringService.checkServiceHealth = jest
                            .fn()
                            .mockRejectedValue(new Error('Service error'));
                        return [4 /*yield*/, monitoringService.getSystemHealth()];
                    case 1:
                        health = _a.sent();
                        expect(health.services).toHaveLength(4);
                        expect(health.services.some(function (s) { return s.status === monitoring_types_1.HealthStatus.UNHEALTHY; })).toBe(true);
                        // Restore original method
                        monitoringService.checkServiceHealth = originalCheckServiceHealth;
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,