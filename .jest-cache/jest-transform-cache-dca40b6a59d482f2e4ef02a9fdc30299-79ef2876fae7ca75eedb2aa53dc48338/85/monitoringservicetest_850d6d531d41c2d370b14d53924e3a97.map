{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/monitoring/lib/monitoring.service.test.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/monitoring/lib/monitoring.service.test.ts"],"sourcesContent":["/**\n * Monitoring Service Tests\n *\n * Comprehensive tests for the monitoring service including health checks,\n * analytics tracking, and monitoring functionality.\n */\n\nimport { MonitoringService } from './monitoring.service';\nimport { AlertLevel, AnalyticsEventType, HealthStatus } from '../types/monitoring.types';\nimport { mockMonitoringConfig } from '@/shared/testing/mocks/infrastructure';\n\ndescribe('MonitoringService', () => {\n  let monitoringService: MonitoringService;\n\n  beforeEach(() => {\n    // Reset singleton instance\n    (MonitoringService as any).instance = undefined;\n    monitoringService = MonitoringService.getInstance(mockMonitoringConfig);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Singleton Pattern', () => {\n    it('should return the same instance', () => {\n      const instance1 = MonitoringService.getInstance();\n      const instance2 = MonitoringService.getInstance();\n      expect(instance1).toBe(instance2);\n    });\n\n    it('should throw error if no config provided on first initialization', () => {\n      (MonitoringService as any).instance = undefined;\n      expect(() => MonitoringService.getInstance()).toThrow(\n        'MonitoringService requires configuration on first initialization'\n      );\n    });\n  });\n\n  describe('System Health', () => {\n    it('should return system health status', async () => {\n      const health = await monitoringService.getSystemHealth();\n\n      expect(health).toBeDefined();\n      expect(health.status).toBe(HealthStatus.HEALTHY);\n      expect(health.timestamp).toBeInstanceOf(Date);\n      expect(health.uptime).toBeGreaterThan(0);\n      expect(health.version).toBeDefined();\n      expect(health.services).toHaveLength(4);\n      expect(health.summary.total).toBe(4);\n      expect(health.summary.healthy).toBe(4);\n    });\n\n    it('should include all configured services', async () => {\n      const health = await monitoringService.getSystemHealth();\n      const serviceNames = health.services.map((s) => s.name);\n\n      expect(serviceNames).toContain('database');\n      expect(serviceNames).toContain('api');\n      expect(serviceNames).toContain('cache');\n      expect(serviceNames).toContain('storage');\n    });\n\n    it('should have proper service health structure', async () => {\n      const health = await monitoringService.getSystemHealth();\n      const service = health.services[0];\n\n      expect(service).toBeDefined();\n      expect(service?.name).toBeDefined();\n      expect(service?.status).toBe(HealthStatus.HEALTHY);\n      expect(service?.lastCheck).toBeInstanceOf(Date);\n      expect(service?.responseTime).toBeGreaterThanOrEqual(0);\n    });\n  });\n\n  describe('Analytics Tracking', () => {\n    it('should track events when analytics is enabled', () => {\n      // Enable debug mode for this test\n      monitoringService.updateConfig({\n        analytics: { ...mockMonitoringConfig.analytics, debug: true },\n      });\n\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n\n      monitoringService.trackEvent(AnalyticsEventType.PAGE_VIEW, 'test_event', { test: 'data' });\n\n      expect(consoleSpy).toHaveBeenCalledWith(\n        'Analytics Event:',\n        expect.objectContaining({\n          type: AnalyticsEventType.PAGE_VIEW,\n          name: 'test_event',\n          properties: { test: 'data' },\n        })\n      );\n\n      consoleSpy.mockRestore();\n    });\n\n    it('should not track events when analytics is disabled', () => {\n      const disabledConfig = {\n        ...mockMonitoringConfig,\n        analytics: { ...mockMonitoringConfig.analytics, enabled: false },\n      };\n      monitoringService.updateConfig(disabledConfig);\n\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n\n      monitoringService.trackEvent(AnalyticsEventType.PAGE_VIEW, 'test_event');\n\n      expect(consoleSpy).not.toHaveBeenCalled();\n      consoleSpy.mockRestore();\n    });\n\n    it('should track page views', () => {\n      // Enable debug mode for this test\n      monitoringService.updateConfig({\n        analytics: { ...mockMonitoringConfig.analytics, debug: true },\n      });\n\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n\n      monitoringService.trackPageView('/test-page', 'user123');\n\n      expect(consoleSpy).toHaveBeenCalledWith(\n        'Analytics Event:',\n        expect.objectContaining({\n          type: AnalyticsEventType.PAGE_VIEW,\n          name: 'page_view',\n          properties: { path: '/test-page' },\n          userId: 'user123',\n        })\n      );\n\n      consoleSpy.mockRestore();\n    });\n\n    it('should maintain analytics session', () => {\n      const session = monitoringService.getAnalyticsSession();\n\n      expect(session).toBeDefined();\n      expect(session?.id).toBeDefined();\n      expect(session?.startTime).toBeInstanceOf(Date);\n      expect(session?.pageViews).toBe(0);\n      expect(session?.events).toBe(0);\n    });\n  });\n\n  describe('Metrics Management', () => {\n    it('should add metrics', () => {\n      monitoringService.addMetric('cpu_usage', 75.5, 'percent', { server: 'web-01' });\n\n      // Metrics are stored internally, we can't directly access them\n      // but we can verify the method doesn't throw\n      expect(() => {\n        monitoringService.addMetric('memory_usage', 60, 'percent');\n      }).not.toThrow();\n    });\n\n    it('should limit number of stored metrics', () => {\n      const limitedConfig = {\n        ...mockMonitoringConfig,\n        dashboard: { ...mockMonitoringConfig.dashboard, maxMetrics: 2 },\n      };\n      monitoringService.updateConfig(limitedConfig);\n\n      // Add more metrics than the limit\n      monitoringService.addMetric('metric1', 1, 'unit');\n      monitoringService.addMetric('metric2', 2, 'unit');\n      monitoringService.addMetric('metric3', 3, 'unit');\n\n      // Should not throw and should maintain limit internally\n      expect(() => {\n        monitoringService.addMetric('metric4', 4, 'unit');\n      }).not.toThrow();\n    });\n  });\n\n  describe('Alert Management', () => {\n    it('should add alerts', () => {\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n\n      monitoringService.addAlert(AlertLevel.WARNING, 'Test warning', { component: 'test' });\n\n      expect(consoleSpy).toHaveBeenCalledWith(\n        'Monitoring Alert:',\n        expect.objectContaining({\n          level: AlertLevel.WARNING,\n          message: 'Test warning',\n          metadata: { component: 'test' },\n          resolved: false,\n        })\n      );\n\n      consoleSpy.mockRestore();\n    });\n\n    it('should not send alerts when disabled', () => {\n      const disabledConfig = {\n        ...mockMonitoringConfig,\n        alerts: { ...mockMonitoringConfig.alerts, enabled: false },\n      };\n      monitoringService.updateConfig(disabledConfig);\n\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n\n      monitoringService.addAlert(AlertLevel.ERROR, 'Test error');\n\n      expect(consoleSpy).not.toHaveBeenCalled();\n      consoleSpy.mockRestore();\n    });\n\n    it('should limit number of stored alerts', () => {\n      const limitedConfig = {\n        ...mockMonitoringConfig,\n        dashboard: { ...mockMonitoringConfig.dashboard, maxAlerts: 2 },\n      };\n      monitoringService.updateConfig(limitedConfig);\n\n      // Add more alerts than the limit\n      monitoringService.addAlert(AlertLevel.INFO, 'Alert 1');\n      monitoringService.addAlert(AlertLevel.WARNING, 'Alert 2');\n      monitoringService.addAlert(AlertLevel.ERROR, 'Alert 3');\n\n      // Should not throw and should maintain limit internally\n      expect(() => {\n        monitoringService.addAlert(AlertLevel.CRITICAL, 'Alert 4');\n      }).not.toThrow();\n    });\n  });\n\n  describe('Dashboard Data', () => {\n    it('should return dashboard data', async () => {\n      // Add some test data\n      monitoringService.addMetric('test_metric', 100, 'count');\n      monitoringService.addAlert(AlertLevel.INFO, 'Test alert');\n\n      const dashboardData = await monitoringService.getDashboardData();\n\n      expect(dashboardData).toBeDefined();\n      expect(dashboardData.systemHealth).toBeDefined();\n      expect(dashboardData.recentAlerts).toBeDefined();\n      expect(dashboardData.metrics).toBeDefined();\n      expect(dashboardData.analytics).toBeDefined();\n      expect(dashboardData.analytics.totalEvents).toBeGreaterThanOrEqual(0);\n      expect(dashboardData.analytics.activeSessions).toBeGreaterThanOrEqual(0);\n      expect(dashboardData.analytics.topPages).toBeDefined();\n    });\n\n    it('should include system health in dashboard data', async () => {\n      const dashboardData = await monitoringService.getDashboardData();\n\n      expect(dashboardData.systemHealth.status).toBe(HealthStatus.HEALTHY);\n      expect(dashboardData.systemHealth.services).toHaveLength(4);\n      expect(dashboardData.systemHealth.summary.total).toBe(4);\n    });\n  });\n\n  describe('Configuration Management', () => {\n    it('should update configuration', () => {\n      const newConfig = {\n        analytics: { ...mockMonitoringConfig.analytics, debug: false },\n      };\n\n      monitoringService.updateConfig(newConfig);\n\n      // Verify configuration was updated by checking behavior\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n      monitoringService.trackEvent(AnalyticsEventType.PAGE_VIEW, 'test');\n\n      // Should not log when debug is false\n      expect(consoleSpy).not.toHaveBeenCalled();\n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle service health check errors gracefully', async () => {\n      // Mock a service to throw an error\n      const originalCheckServiceHealth = (monitoringService as any).checkServiceHealth;\n      (monitoringService as any).checkServiceHealth = jest\n        .fn()\n        .mockRejectedValue(new Error('Service error'));\n\n      const health = await monitoringService.getSystemHealth();\n\n      expect(health.services).toHaveLength(4);\n      expect(health.services.some((s) => s.status === HealthStatus.UNHEALTHY)).toBe(true);\n\n      // Restore original method\n      (monitoringService as any).checkServiceHealth = originalCheckServiceHealth;\n    });\n  });\n});\n"],"version":3}