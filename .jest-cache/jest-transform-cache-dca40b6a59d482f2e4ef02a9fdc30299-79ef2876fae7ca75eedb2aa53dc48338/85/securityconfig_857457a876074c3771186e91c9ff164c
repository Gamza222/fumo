9478f37536a050771144316796f9ee6b
"use strict";
/**
 * Security Configuration
 *
 * Comprehensive security settings for enterprise applications.
 * Includes CSP, security headers, authentication, and authorization.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isOriginAllowed = exports.generateSecureToken = exports.validatePassword = exports.securityConfig = void 0;
var env_1 = require("../../../../../config/env");
// ============================================================================
// ENVIRONMENT-SPECIFIC SECURITY CONFIGURATION
// ============================================================================
var getSecurityConfig = function () {
    var isProduction = process.env.NODE_ENV === env_1.Environment.Production;
    var isDevelopment = process.env.NODE_ENV === env_1.Environment.Development;
    // Base CSP policy
    var baseCSP = [
        "default-src 'self'",
        "script-src 'self' 'unsafe-inline' 'unsafe-eval'", // Next.js requires unsafe-eval in dev
        "style-src 'self' 'unsafe-inline'",
        "img-src 'self' data: blob: https:",
        "font-src 'self' data:",
        "connect-src 'self' ws: wss: https:",
        "media-src 'self'",
        "object-src 'none'",
        "base-uri 'self'",
        "form-action 'self'",
        "frame-ancestors 'none'",
    ];
    // Add development-specific CSP
    if (isDevelopment) {
        baseCSP.push("'unsafe-eval'"); // Required for Next.js dev mode
    }
    // Add production-specific CSP
    if (isProduction) {
        // Remove unsafe-inline and unsafe-eval in production
        var productionCSP = baseCSP.map(function (directive) {
            if (directive.includes('unsafe-inline') || directive.includes('unsafe-eval')) {
                return directive.replace(/ 'unsafe-inline'|'unsafe-eval'/g, '');
            }
            return directive;
        });
        baseCSP.splice.apply(baseCSP, __spreadArray([0, baseCSP.length], productionCSP, false));
    }
    return {
        headers: __assign({ 'Content-Security-Policy': baseCSP.join('; '), 'X-Frame-Options': 'DENY', 'X-Content-Type-Options': 'nosniff', 'Referrer-Policy': 'strict-origin-when-cross-origin', 'Permissions-Policy': 'camera=(), microphone=(), geolocation=(), payment=()', 'X-XSS-Protection': '1; mode=block' }, (isProduction && {
            'Strict-Transport-Security': 'max-age=31536000; includeSubDomains; preload',
        })),
        cors: {
            origin: isDevelopment
                ? ['http://localhost:3000', 'http://localhost:3001']
                : process.env.NEXT_PUBLIC_APP_URL || 'https://yourdomain.com',
            credentials: true,
            methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
            allowedHeaders: [
                'Content-Type',
                'Authorization',
                'X-Requested-With',
                'Accept',
                'Origin',
                'Access-Control-Request-Method',
                'Access-Control-Request-Headers',
            ],
            exposedHeaders: ['X-Total-Count', 'X-Page-Count'],
            maxAge: 86400, // 24 hours
        },
        auth: {
            jwtSecret: process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-in-production',
            jwtExpiresIn: process.env.JWT_EXPIRES_IN || '15m',
            refreshTokenExpiresIn: process.env.REFRESH_TOKEN_EXPIRES_IN || '7d',
            passwordMinLength: parseInt(process.env.PASSWORD_MIN_LENGTH || '8', 10),
            passwordRequireSpecialChars: process.env.PASSWORD_REQUIRE_SPECIAL_CHARS === 'true',
            passwordRequireNumbers: process.env.PASSWORD_REQUIRE_NUMBERS === 'true',
            passwordRequireUppercase: process.env.PASSWORD_REQUIRE_UPPERCASE === 'true',
            sessionTimeout: parseInt(process.env.SESSION_TIMEOUT || '3600000', 10), // 1 hour
        },
        rateLimit: {
            windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS || '900000', 10), // 15 minutes
            maxRequests: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS || '100', 10),
            skipSuccessfulRequests: process.env.RATE_LIMIT_SKIP_SUCCESS === 'true',
            skipFailedRequests: process.env.RATE_LIMIT_SKIP_FAILED === 'false',
        },
    };
};
exports.securityConfig = getSecurityConfig();
// ============================================================================
// SECURITY UTILITIES
// ============================================================================
/**
 * Validate password strength based on security configuration
 */
var validatePassword = function (password) {
    var config = exports.securityConfig.auth;
    var errors = [];
    if (password.length < config.passwordMinLength) {
        errors.push("Password must be at least ".concat(config.passwordMinLength, " characters long"));
    }
    if (config.passwordRequireSpecialChars && !/[!@#$%^&*(),.?":{}|<>]/.test(password)) {
        errors.push('Password must contain at least one special character');
    }
    if (config.passwordRequireNumbers && !/\d/.test(password)) {
        errors.push('Password must contain at least one number');
    }
    if (config.passwordRequireUppercase && !/[A-Z]/.test(password)) {
        errors.push('Password must contain at least one uppercase letter');
    }
    return {
        isValid: errors.length === 0,
        errors: errors,
    };
};
exports.validatePassword = validatePassword;
/**
 * Generate secure random string for tokens
 */
var generateSecureToken = function (length) {
    if (length === void 0) { length = 32; }
    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    var result = '';
    var array = new Uint8Array(length);
    crypto.getRandomValues(array);
    for (var i = 0; i < length; i++) {
        result += chars[(array[i] || 0) % chars.length];
    }
    return result;
};
exports.generateSecureToken = generateSecureToken;
/**
 * Check if request origin is allowed
 */
var isOriginAllowed = function (origin) {
    var config = exports.securityConfig.cors;
    var allowedOrigins = Array.isArray(config.origin) ? config.origin : [config.origin];
    return allowedOrigins.includes(origin);
};
exports.isOriginAllowed = isOriginAllowed;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,