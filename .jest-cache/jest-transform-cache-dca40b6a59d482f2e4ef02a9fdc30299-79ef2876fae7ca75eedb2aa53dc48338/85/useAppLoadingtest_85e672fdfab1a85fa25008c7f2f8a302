6cbf2c1ca6d90e5734956f35a874e08c
"use strict";
/**
 * useAppLoading Hook Tests
 */
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("@testing-library/react");
var useAppLoading_1 = require("./useAppLoading");
// Mock setup
Object.defineProperty(window, "performance", {
    value: { now: jest.fn(function () { return 1000; }) },
    writable: true,
});
Object.defineProperty(document, "readyState", {
    get: function () { return "complete"; },
    configurable: true,
});
Object.defineProperty(document, "querySelectorAll", {
    value: jest.fn(function () { return []; }),
    writable: true,
});
Object.defineProperty(document.documentElement, "hasAttribute", {
    value: jest.fn(function () { return true; }),
});
Object.defineProperty(document.documentElement, "classList", {
    value: { contains: jest.fn(function () { return true; }) },
});
Object.defineProperty(document.body, "classList", {
    value: { contains: jest.fn(function () { return true; }) },
});
describe("useAppLoading", function () {
    beforeEach(function () {
        jest.clearAllMocks();
    });
    it("should start with loading state", function () {
        var result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
        expect(result.current.isInitialLoading).toBe(true);
        expect(result.current.isOverallLoading).toBe(true);
        expect(result.current.isSuspenseLoading).toBe(false);
        expect(typeof result.current.forceComplete).toBe("function");
        expect(typeof result.current.restart).toBe("function");
        expect(typeof result.current.setSuspenseLoading).toBe("function");
    });
    it("should force complete immediately", function () {
        var result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
        (0, react_1.act)(function () {
            result.current.forceComplete();
        });
        expect(result.current.isInitialLoading).toBe(false);
        expect(result.current.isOverallLoading).toBe(false);
        expect(result.current.progress).toBe(100);
        expect(result.current.currentStep).toBe("Ready");
    });
    it("should restart loading", function () {
        var result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
        (0, react_1.act)(function () {
            result.current.forceComplete();
        });
        expect(result.current.isInitialLoading).toBe(false);
        expect(result.current.isOverallLoading).toBe(false);
        (0, react_1.act)(function () {
            result.current.restart();
        });
        expect(result.current.isInitialLoading).toBe(true);
        expect(result.current.isOverallLoading).toBe(true);
        // Don't check progress here since it starts immediately after restart
    });
    it("should have correct state properties", function () {
        var result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
        expect(typeof result.current.progress).toBe("number");
        expect(typeof result.current.currentStep).toBe("string");
        expect(Array.isArray(result.current.steps)).toBe(true);
    });
    it("should handle suspense loading state", function () {
        var result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
        // Initially suspense is not loading
        expect(result.current.isSuspenseLoading).toBe(false);
        expect(result.current.isOverallLoading).toBe(true); // Because initial loading is true
        // Set suspense loading to true
        (0, react_1.act)(function () {
            result.current.setSuspenseLoading(true);
        });
        expect(result.current.isSuspenseLoading).toBe(true);
        expect(result.current.isOverallLoading).toBe(true); // Should still be true
        // Set suspense loading to false
        (0, react_1.act)(function () {
            result.current.setSuspenseLoading(false);
        });
        expect(result.current.isSuspenseLoading).toBe(false);
        expect(result.current.isOverallLoading).toBe(true); // Should still be true because initial loading is true
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,