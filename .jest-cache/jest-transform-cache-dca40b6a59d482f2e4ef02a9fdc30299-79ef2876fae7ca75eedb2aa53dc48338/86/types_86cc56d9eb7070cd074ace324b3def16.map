{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/suspense/types/types.ts","mappings":";AAAA;;;;;GAKG;;;AAIH,+EAA+E;AAC/E,iBAAiB;AACjB,+EAA+E;AAE/E,iDAMyB;AALvB,4GAAA,WAAW,OAAA;AACX,6GAAA,YAAY,OAAA;AACZ,4GAAA,WAAW,OAAA;AACX,gHAAA,eAAe,OAAA;AACf,4GAAA,WAAW,OAAA","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/suspense/types/types.ts"],"sourcesContent":["/**\n * Suspense Types\n *\n * Universal types for lazy loading and suspense fallbacks.\n * Foundation-level only - no overengineering.\n */\n\nimport { ComponentType } from 'react';\n\n// ============================================================================\n// SUSPENSE ENUMS\n// ============================================================================\n\nexport {\n  RetryConfig,\n  LoadingState,\n  LoadingSize,\n  ComponentHeight,\n  Environment,\n} from './suspenseEnums';\n\n// ============================================================================\n// LAZY LOADING TYPES\n// ============================================================================\n\nexport interface LazyRetryOptions {\n  maxRetries?: number;\n  retryDelay?: number;\n  isDevelopment?: boolean;\n}\n\nexport interface LazyComponentProps {\n  [key: string]: unknown;\n}\n\nexport type LazyImportFn<T = ComponentType<unknown>> = () => Promise<{ default: T }>;\n\n// ============================================================================\n// FALLBACK TYPES\n// ============================================================================\n\nexport interface LoadingFallbackProps {\n  text?: string;\n  size?: 'small' | 'medium' | 'large';\n  height?: 'small' | 'medium' | 'large' | 'full';\n  className?: string;\n}\n\nexport interface SuspenseFallbackProps {\n  text?: string;\n  className?: string;\n}\n\n// ============================================================================\n// UTILITIES\n// ============================================================================\n\nexport type LoadingStateType = 'idle' | 'loading' | 'success' | 'error';\n\nexport interface LoadingContext {\n  state: LoadingStateType;\n  retry?: () => void;\n  error?: Error;\n}\n"],"version":3}