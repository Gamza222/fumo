{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/security/lib/rate-limiter/rate-limiter.service.test.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/security/lib/rate-limiter/rate-limiter.service.test.ts"],"sourcesContent":["/**\n * Rate Limiter Service Tests\n */\n\nimport { RateLimiterService } from './rate-limiter.service';\n\ndescribe('RateLimiterService', () => {\n  let rateLimiter: RateLimiterService;\n\n  beforeEach(() => {\n    // Use the singleton instance\n    rateLimiter = RateLimiterService.getInstance();\n    // Clear the store for test isolation\n    (rateLimiter as any).rateLimitStore.clear();\n  });\n\n  afterEach(() => {\n    // Clean up after each test\n    (rateLimiter as any).rateLimitStore.clear();\n  });\n\n  describe('checkRateLimit', () => {\n    it('should allow requests within limit', () => {\n      const key = 'test-key';\n      const result = rateLimiter.checkRateLimit(key);\n\n      expect(result.allowed).toBe(true);\n      expect(result.info.remaining).toBe(99); // 100 - 1\n    });\n\n    it('should block requests exceeding limit', () => {\n      const key = 'test-key';\n\n      // Make 100 requests (the limit)\n      for (let i = 0; i < 100; i++) {\n        rateLimiter.checkRateLimit(key);\n      }\n\n      // 101st request should be blocked\n      const result = rateLimiter.checkRateLimit(key);\n      expect(result.allowed).toBe(false);\n    });\n\n    it('should reset after window expires', (done) => {\n      const key = 'test-key';\n\n      // Make 100 requests\n      for (let i = 0; i < 100; i++) {\n        rateLimiter.checkRateLimit(key);\n      }\n\n      // Should be blocked\n      expect(rateLimiter.checkRateLimit(key).allowed).toBe(false);\n\n      // Wait for window to expire (in test, we'll manually reset)\n      rateLimiter.resetRateLimit(key);\n\n      // Should be allowed again\n      const result = rateLimiter.checkRateLimit(key);\n      expect(result.allowed).toBe(true);\n      done();\n    });\n  });\n\n  describe('getRateLimitInfo', () => {\n    it('should return correct info for new key', () => {\n      const key = 'new-key';\n      const info = rateLimiter.getRateLimitInfo(key);\n\n      expect(info.limit).toBe(100);\n      expect(info.remaining).toBe(100);\n      expect(info.reset).toBeInstanceOf(Date);\n    });\n\n    it('should return correct info after requests', () => {\n      const key = 'test-key-info';\n      rateLimiter.checkRateLimit(key);\n      rateLimiter.checkRateLimit(key);\n\n      const info = rateLimiter.getRateLimitInfo(key);\n      expect(info.remaining).toBe(98);\n    });\n  });\n\n  describe('resetRateLimit', () => {\n    it('should reset rate limit for key', () => {\n      const key = 'test-key';\n\n      // Make some requests\n      rateLimiter.checkRateLimit(key);\n      rateLimiter.checkRateLimit(key);\n\n      // Reset\n      rateLimiter.resetRateLimit(key);\n\n      // Should be back to full limit\n      const info = rateLimiter.getRateLimitInfo(key);\n      expect(info.remaining).toBe(100);\n    });\n  });\n\n  describe('generateKey', () => {\n    it('should generate key with identifier only', () => {\n      const key = rateLimiter.generateKey('user123');\n      expect(key).toBe('user123');\n    });\n\n    it('should generate key with identifier and endpoint', () => {\n      const key = rateLimiter.generateKey('user123', '/api/users');\n      expect(key).toBe('user123:/api/users');\n    });\n\n    it('should generate key with identifier, endpoint, and method', () => {\n      const key = rateLimiter.generateKey('user123', '/api/users', 'POST');\n      expect(key).toBe('user123:/api/users:POST');\n    });\n  });\n\n  describe('getAllActiveRateLimits', () => {\n    it('should return empty array when no active limits', () => {\n      const limits = rateLimiter.getAllActiveRateLimits();\n      expect(limits).toEqual([]);\n    });\n\n    it('should return active rate limits', () => {\n      const key = 'test-key-active';\n      const result = rateLimiter.checkRateLimit(key);\n\n      // Make sure the request was allowed and recorded\n      expect(result.allowed).toBe(true);\n\n      const limits = rateLimiter.getAllActiveRateLimits();\n\n      expect(limits).toHaveLength(1);\n      expect(limits[0]?.key).toBe(key);\n    });\n  });\n\n  describe('getStatistics', () => {\n    it('should return correct statistics', () => {\n      // TODO: Fix rate limiter getStatistics issue\n      const key1 = 'stats-key1';\n      const key2 = 'stats-key2';\n\n      // Make requests and verify they're recorded\n      const result1 = rateLimiter.checkRateLimit(key1);\n      const result2 = rateLimiter.checkRateLimit(key1);\n      const result3 = rateLimiter.checkRateLimit(key2);\n\n      expect(result1.allowed).toBe(true);\n      expect(result2.allowed).toBe(true);\n      expect(result3.allowed).toBe(true);\n\n      const stats = rateLimiter.getStatistics();\n      expect(stats.activeKeys).toBe(2);\n      expect(stats.totalRequests).toBe(3);\n      expect(stats.blockedKeys).toBe(0);\n    });\n  });\n});\n"],"version":3}