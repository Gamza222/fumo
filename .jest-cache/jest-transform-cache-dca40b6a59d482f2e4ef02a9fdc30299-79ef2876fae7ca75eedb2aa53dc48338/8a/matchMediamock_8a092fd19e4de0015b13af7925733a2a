4dd4c07a666ce9b9c0068422f21aab3e
"use strict";

/* istanbul ignore next */
function cov_1pa9qj0gh() {
  var path = "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/browser/lib/media/matchMedia.mock.ts";
  var hash = "59e72e7930e009ba51feedaebb92f7a928d4e963";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/browser/lib/media/matchMedia.mock.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 32
        }
      },
      "2": {
        start: {
          line: 10,
          column: 21
        },
        end: {
          line: 28,
          column: 1
        }
      },
      "3": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 48
        }
      },
      "4": {
        start: {
          line: 11,
          column: 30
        },
        end: {
          line: 11,
          column: 46
        }
      },
      "5": {
        start: {
          line: 12,
          column: 20
        },
        end: {
          line: 12,
          column: 22
        }
      },
      "6": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "7": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 18,
          column: 37
        }
      },
      "8": {
        start: {
          line: 21,
          column: 24
        },
        end: {
          line: 21,
          column: 51
        }
      },
      "9": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 24,
          column: 13
        }
      },
      "10": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 43
        }
      },
      "11": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 27,
          column: 26
        }
      },
      "12": {
        start: {
          line: 29,
          column: 0
        },
        end: {
          line: 29,
          column: 40
        }
      },
      "13": {
        start: {
          line: 31,
          column: 0
        },
        end: {
          line: 34,
          column: 3
        }
      },
      "14": {
        start: {
          line: 33,
          column: 60
        },
        end: {
          line: 33,
          column: 102
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 21
          },
          end: {
            line: 10,
            column: 22
          }
        },
        loc: {
          start: {
            line: 10,
            column: 40
          },
          end: {
            line: 28,
            column: 1
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 21
          },
          end: {
            line: 17,
            column: 22
          }
        },
        loc: {
          start: {
            line: 17,
            column: 41
          },
          end: {
            line: 19,
            column: 9
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 24
          },
          end: {
            line: 20,
            column: 25
          }
        },
        loc: {
          start: {
            line: 20,
            column: 44
          },
          end: {
            line: 25,
            column: 9
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 33,
            column: 40
          },
          end: {
            line: 33,
            column: 41
          }
        },
        loc: {
          start: {
            line: 33,
            column: 58
          },
          end: {
            line: 33,
            column: 104
          }
        },
        line: 33
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 48
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 48
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 11
      },
      "1": {
        loc: {
          start: {
            line: 22,
            column: 12
          },
          end: {
            line: 24,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 12
          },
          end: {
            line: 24,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/browser/lib/media/matchMedia.mock.ts",
      mappings: ";;;AAEA;;;;;GAKG;AACI,IAAM,cAAc,GAAG,UAAC,OAAwB;IAAxB,wBAAA,EAAA,eAAwB;IACrD,IAAM,SAAS,GAAgD,EAAE,CAAC;IAElE,IAAM,cAAc,GAA4B;QAC9C,OAAO,SAAA;QACP,KAAK,EAAE,oBAAoB;QAC3B,QAAQ,EAAE,IAAI;QAEd,WAAW,YAAC,QAA8C;YACxD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC3B,CAAC;QAED,cAAc,YAAC,QAA8C;YAC3D,IAAM,KAAK,GAAG,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC1C,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC;gBACf,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAC7B,CAAC;QACH,CAAC;KACF,CAAC;IAEF,OAAO,cAAc,CAAC;AACxB,CAAC,CAAC;AArBW,QAAA,cAAc,kBAqBzB;AAEF,sCAAsC;AACtC,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,YAAY,EAAE;IAC1C,QAAQ,EAAE,IAAI;IACd,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,UAAC,MAAc,IAAK,OAAA,IAAA,sBAAc,EAAC,KAAK,CAAC,EAArB,CAAqB,CAAC;CAC/E,CAAC,CAAC",
      names: [],
      sources: ["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/browser/lib/media/matchMedia.mock.ts"],
      sourcesContent: ["import { mockMediaQueryInterface } from '../../types/types';\n\n/**\n * Creates a mock matchMedia function for testing media queries\n *\n * @param matches - Whether the media query should match\n * @returns A mock MediaQueryList object\n */\nexport const mockMatchMedia = (matches: boolean = false): mockMediaQueryInterface => {\n  const listeners: Array<(event: MediaQueryListEvent) => void> = [];\n\n  const mediaQueryMock: mockMediaQueryInterface = {\n    matches,\n    media: '(max-width: 768px)',\n    onchange: null,\n\n    addListener(callback: (event: MediaQueryListEvent) => void): void {\n      listeners.push(callback);\n    },\n\n    removeListener(callback: (event: MediaQueryListEvent) => void): void {\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    },\n  };\n\n  return mediaQueryMock;\n};\n\n// Mock the global matchMedia function\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: jest.fn().mockImplementation((_query: string) => mockMatchMedia(false)),\n});\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "59e72e7930e009ba51feedaebb92f7a928d4e963"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1pa9qj0gh = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1pa9qj0gh();
cov_1pa9qj0gh().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1pa9qj0gh().s[1]++;
exports.mockMatchMedia = void 0;
/**
 * Creates a mock matchMedia function for testing media queries
 *
 * @param matches - Whether the media query should match
 * @returns A mock MediaQueryList object
 */
/* istanbul ignore next */
cov_1pa9qj0gh().s[2]++;
var mockMatchMedia = function (matches) {
  /* istanbul ignore next */
  cov_1pa9qj0gh().f[0]++;
  cov_1pa9qj0gh().s[3]++;
  if (matches === void 0) {
    /* istanbul ignore next */
    cov_1pa9qj0gh().b[0][0]++;
    cov_1pa9qj0gh().s[4]++;
    matches = false;
  } else
  /* istanbul ignore next */
  {
    cov_1pa9qj0gh().b[0][1]++;
  }
  var listeners =
  /* istanbul ignore next */
  (cov_1pa9qj0gh().s[5]++, []);
  var mediaQueryMock =
  /* istanbul ignore next */
  (cov_1pa9qj0gh().s[6]++, {
    matches: matches,
    media: '(max-width: 768px)',
    onchange: null,
    addListener: function (callback) {
      /* istanbul ignore next */
      cov_1pa9qj0gh().f[1]++;
      cov_1pa9qj0gh().s[7]++;
      listeners.push(callback);
    },
    removeListener: function (callback) {
      /* istanbul ignore next */
      cov_1pa9qj0gh().f[2]++;
      var index =
      /* istanbul ignore next */
      (cov_1pa9qj0gh().s[8]++, listeners.indexOf(callback));
      /* istanbul ignore next */
      cov_1pa9qj0gh().s[9]++;
      if (index > -1) {
        /* istanbul ignore next */
        cov_1pa9qj0gh().b[1][0]++;
        cov_1pa9qj0gh().s[10]++;
        listeners.splice(index, 1);
      } else
      /* istanbul ignore next */
      {
        cov_1pa9qj0gh().b[1][1]++;
      }
    }
  });
  /* istanbul ignore next */
  cov_1pa9qj0gh().s[11]++;
  return mediaQueryMock;
};
/* istanbul ignore next */
cov_1pa9qj0gh().s[12]++;
exports.mockMatchMedia = mockMatchMedia;
// Mock the global matchMedia function
/* istanbul ignore next */
cov_1pa9qj0gh().s[13]++;
Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: jest.fn().mockImplementation(function (_query) {
    /* istanbul ignore next */
    cov_1pa9qj0gh().f[3]++;
    cov_1pa9qj0gh().s[14]++;
    return (0, exports.mockMatchMedia)(false);
  })
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMXBhOXFqMGdoIiwiYWN0dWFsQ292ZXJhZ2UiLCJzIiwibW9ja01hdGNoTWVkaWEiLCJtYXRjaGVzIiwiZiIsImIiLCJsaXN0ZW5lcnMiLCJtZWRpYVF1ZXJ5TW9jayIsIm1lZGlhIiwib25jaGFuZ2UiLCJhZGRMaXN0ZW5lciIsImNhbGxiYWNrIiwicHVzaCIsInJlbW92ZUxpc3RlbmVyIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiZXhwb3J0cyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwid2luZG93Iiwid3JpdGFibGUiLCJ2YWx1ZSIsImplc3QiLCJmbiIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsIl9xdWVyeSJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9nYW16YXJhbWF6YW5vdi9EZXNrdG9wL2Z1bW8vc3JjL3NoYXJlZC90ZXN0aW5nL21vY2tzL2Jyb3dzZXIvbGliL21lZGlhL21hdGNoTWVkaWEubW9jay50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtb2NrTWVkaWFRdWVyeUludGVyZmFjZSB9IGZyb20gJy4uLy4uL3R5cGVzL3R5cGVzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbW9jayBtYXRjaE1lZGlhIGZ1bmN0aW9uIGZvciB0ZXN0aW5nIG1lZGlhIHF1ZXJpZXNcbiAqXG4gKiBAcGFyYW0gbWF0Y2hlcyAtIFdoZXRoZXIgdGhlIG1lZGlhIHF1ZXJ5IHNob3VsZCBtYXRjaFxuICogQHJldHVybnMgQSBtb2NrIE1lZGlhUXVlcnlMaXN0IG9iamVjdFxuICovXG5leHBvcnQgY29uc3QgbW9ja01hdGNoTWVkaWEgPSAobWF0Y2hlczogYm9vbGVhbiA9IGZhbHNlKTogbW9ja01lZGlhUXVlcnlJbnRlcmZhY2UgPT4ge1xuICBjb25zdCBsaXN0ZW5lcnM6IEFycmF5PChldmVudDogTWVkaWFRdWVyeUxpc3RFdmVudCkgPT4gdm9pZD4gPSBbXTtcblxuICBjb25zdCBtZWRpYVF1ZXJ5TW9jazogbW9ja01lZGlhUXVlcnlJbnRlcmZhY2UgPSB7XG4gICAgbWF0Y2hlcyxcbiAgICBtZWRpYTogJyhtYXgtd2lkdGg6IDc2OHB4KScsXG4gICAgb25jaGFuZ2U6IG51bGwsXG5cbiAgICBhZGRMaXN0ZW5lcihjYWxsYmFjazogKGV2ZW50OiBNZWRpYVF1ZXJ5TGlzdEV2ZW50KSA9PiB2b2lkKTogdm9pZCB7XG4gICAgICBsaXN0ZW5lcnMucHVzaChjYWxsYmFjayk7XG4gICAgfSxcblxuICAgIHJlbW92ZUxpc3RlbmVyKGNhbGxiYWNrOiAoZXZlbnQ6IE1lZGlhUXVlcnlMaXN0RXZlbnQpID0+IHZvaWQpOiB2b2lkIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YoY2FsbGJhY2spO1xuICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcblxuICByZXR1cm4gbWVkaWFRdWVyeU1vY2s7XG59O1xuXG4vLyBNb2NrIHRoZSBnbG9iYWwgbWF0Y2hNZWRpYSBmdW5jdGlvblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ21hdGNoTWVkaWEnLCB7XG4gIHdyaXRhYmxlOiB0cnVlLFxuICB2YWx1ZTogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoX3F1ZXJ5OiBzdHJpbmcpID0+IG1vY2tNYXRjaE1lZGlhKGZhbHNlKSksXG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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