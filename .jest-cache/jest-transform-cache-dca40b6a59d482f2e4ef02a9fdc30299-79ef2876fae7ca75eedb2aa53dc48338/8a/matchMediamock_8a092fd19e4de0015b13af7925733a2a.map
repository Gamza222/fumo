{"version":3,"names":["cov_1pa9qj0gh","actualCoverage","s","mockMatchMedia","matches","f","b","listeners","mediaQueryMock","media","onchange","addListener","callback","push","removeListener","index","indexOf","splice","exports","Object","defineProperty","window","writable","value","jest","fn","mockImplementation","_query"],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/browser/lib/media/matchMedia.mock.ts"],"sourcesContent":["import { mockMediaQueryInterface } from '../../types/types';\n\n/**\n * Creates a mock matchMedia function for testing media queries\n *\n * @param matches - Whether the media query should match\n * @returns A mock MediaQueryList object\n */\nexport const mockMatchMedia = (matches: boolean = false): mockMediaQueryInterface => {\n  const listeners: Array<(event: MediaQueryListEvent) => void> = [];\n\n  const mediaQueryMock: mockMediaQueryInterface = {\n    matches,\n    media: '(max-width: 768px)',\n    onchange: null,\n\n    addListener(callback: (event: MediaQueryListEvent) => void): void {\n      listeners.push(callback);\n    },\n\n    removeListener(callback: (event: MediaQueryListEvent) => void): void {\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    },\n  };\n\n  return mediaQueryMock;\n};\n\n// Mock the global matchMedia function\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: jest.fn().mockImplementation((_query: string) => mockMatchMedia(false)),\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAcI;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAAAA,aAAA,GAAAE,CAAA;;;;;;;AAZJ;;;;;;AAAA;AAAAF,aAAA,GAAAE,CAAA;AAMO,IAAMC,cAAc,GAAG,SAAAA,CAACC,OAAwB;EAAA;EAAAJ,aAAA,GAAAK,CAAA;EAAAL,aAAA,GAAAE,CAAA;EAAxB,IAAAE,OAAA;IAAA;IAAAJ,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAE,CAAA;IAAAE,OAAA,QAAwB;EAAA;EAAA;EAAA;IAAAJ,aAAA,GAAAM,CAAA;EAAA;EACrD,IAAMC,SAAS;EAAA;EAAA,CAAAP,aAAA,GAAAE,CAAA,OAAgD,EAAE;EAEjE,IAAMM,cAAc;EAAA;EAAA,CAAAR,aAAA,GAAAE,CAAA,OAA4B;IAC9CE,OAAO,EAAAA,OAAA;IACPK,KAAK,EAAE,oBAAoB;IAC3BC,QAAQ,EAAE,IAAI;IAEdC,WAAW,WAAAA,CAACC,QAA8C;MAAA;MAAAZ,aAAA,GAAAK,CAAA;MAAAL,aAAA,GAAAE,CAAA;MACxDK,SAAS,CAACM,IAAI,CAACD,QAAQ,CAAC;IAC1B,CAAC;IAEDE,cAAc,WAAAA,CAACF,QAA8C;MAAA;MAAAZ,aAAA,GAAAK,CAAA;MAC3D,IAAMU,KAAK;MAAA;MAAA,CAAAf,aAAA,GAAAE,CAAA,OAAGK,SAAS,CAACS,OAAO,CAACJ,QAAQ,CAAC;MAAC;MAAAZ,aAAA,GAAAE,CAAA;MAC1C,IAAIa,KAAK,GAAG,CAAC,CAAC,EAAE;QAAA;QAAAf,aAAA,GAAAM,CAAA;QAAAN,aAAA,GAAAE,CAAA;QACdK,SAAS,CAACU,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;MAC5B,CAAC;MAAA;MAAA;QAAAf,aAAA,GAAAM,CAAA;MAAA;IACH;GACD;EAAC;EAAAN,aAAA,GAAAE,CAAA;EAEF,OAAOM,cAAc;AACvB,CAAC;AAAC;AAAAR,aAAA,GAAAE,CAAA;AArBWgB,OAAA,CAAAf,cAAc,GAAAA,cAAA;AAuB3B;AAAA;AAAAH,aAAA,GAAAE,CAAA;AACAiB,MAAM,CAACC,cAAc,CAACC,MAAM,EAAE,YAAY,EAAE;EAC1CC,QAAQ,EAAE,IAAI;EACdC,KAAK,EAAEC,IAAI,CAACC,EAAE,EAAE,CAACC,kBAAkB,CAAC,UAACC,MAAc;IAAA;IAAA3B,aAAA,GAAAK,CAAA;IAAAL,aAAA,GAAAE,CAAA;IAAK,WAAAgB,OAAA,CAAAf,cAAc,EAAC,KAAK,CAAC;EAArB,CAAqB;CAC9E,CAAC","ignoreList":[]}