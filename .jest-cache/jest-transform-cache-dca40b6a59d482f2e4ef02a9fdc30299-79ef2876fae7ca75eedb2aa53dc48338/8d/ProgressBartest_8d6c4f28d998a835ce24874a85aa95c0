7124ef51153a8c7617ee303fdfd69a22
"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
// ============================================================================
// TEST SETUP
// ============================================================================
// Mock the shared Text component
jest.mock('@/shared/ui/Text', function () { return ({
    Text: function (_a) {
        var children = _a.children, className = _a.className;
        return ((0, jsx_runtime_1.jsx)("span", { className: className, "data-testid": "text-component", children: children }));
    },
}); });
// Mock the classNames utility
jest.mock('@/shared/lib/utils/classNames', function () { return ({
    classNames: function (base, mods, classes) {
        return __spreadArray([base], classes, true).filter(Boolean).join(' ');
    },
}); });
/**
 * ProgressBar Component Tests
 *
 * Comprehensive tests for the ProgressBar component.
 */
var react_1 = __importDefault(require("react"));
var react_2 = require("@testing-library/react");
var ProgressBar_1 = require("./ProgressBar");
// ============================================================================
// BASIC RENDERING TESTS
// ============================================================================
describe('ProgressBar', function () {
    describe('Basic Rendering', function () {
        it('should render with default props', function () {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 50 }));
            expect(react_2.screen.getByRole('progressbar')).toBeInTheDocument();
            expect(react_2.screen.getByText('50%')).toBeInTheDocument();
        });
        it('should render with custom className', function () {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 25, className: "custom-class" }));
            var progressBar = react_2.screen.getByRole('progressbar');
            expect(progressBar).toHaveClass('custom-class');
        });
        it('should render progress bar with correct width', function () {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 75 }));
            var progressBar = react_2.screen.getByRole('progressbar');
            var barElement = progressBar.querySelector('.bar');
            expect(barElement).toHaveStyle('width: 75%');
        });
    });
    // ============================================================================
    // PROGRESS DISPLAY TESTS
    // ============================================================================
    describe('Progress Display', function () {
        it('should show percentage when showPercentage is true', function () {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 33, showPercentage: true }));
            expect(react_2.screen.getByText('33%')).toBeInTheDocument();
        });
        it('should hide percentage when showPercentage is false', function () {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 67, showPercentage: false }));
            expect(react_2.screen.queryByText('67%')).not.toBeInTheDocument();
        });
        it('should round progress to nearest integer', function () {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 33.7 }));
            expect(react_2.screen.getByText('34%')).toBeInTheDocument();
        });
        it('should handle edge case of 0 progress', function () {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 0 }));
            expect(react_2.screen.getByText('0%')).toBeInTheDocument();
            var barElement = react_2.screen.getByRole('progressbar').querySelector('.bar');
            expect(barElement).toHaveStyle('width: 0%');
        });
        it('should handle edge case of 100 progress', function () {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 100 }));
            expect(react_2.screen.getByText('100%')).toBeInTheDocument();
            var barElement = react_2.screen.getByRole('progressbar').querySelector('.bar');
            expect(barElement).toHaveStyle('width: 100%');
        });
    });
    // ============================================================================
    // MESSAGE DISPLAY TESTS
    // ============================================================================
    describe('Message Display', function () {
        it('should show message when provided', function () {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 50, message: "Loading files..." }));
            expect(react_2.screen.getByText('Loading files...')).toBeInTheDocument();
        });
        it('should not show message when not provided', function () {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 50 }));
            expect(react_2.screen.queryByTestId('text-component')).toHaveTextContent('50%');
            expect(react_2.screen.queryByText('Loading files...')).not.toBeInTheDocument();
        });
        it('should show both percentage and message', function () {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 75, message: "Almost done...", showPercentage: true }));
            expect(react_2.screen.getByText('75%')).toBeInTheDocument();
            expect(react_2.screen.getByText('Almost done...')).toBeInTheDocument();
        });
    });
    // ============================================================================
    // PROGRESS VALIDATION TESTS
    // ============================================================================
    describe('Progress Validation', function () {
        it('should clamp progress above 100 to 100', function () {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 150 }));
            expect(react_2.screen.getByText('100%')).toBeInTheDocument();
            var barElement = react_2.screen.getByRole('progressbar').querySelector('.bar');
            expect(barElement).toHaveStyle('width: 100%');
        });
        it('should clamp progress below 0 to 0', function () {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: -25 }));
            expect(react_2.screen.getByText('0%')).toBeInTheDocument();
            var barElement = react_2.screen.getByRole('progressbar').querySelector('.bar');
            expect(barElement).toHaveStyle('width: 0%');
        });
    });
    // ============================================================================
    // ACCESSIBILITY TESTS
    // ============================================================================
    describe('Accessibility', function () {
        it('should have correct ARIA attributes', function () {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 60 }));
            var progressBar = react_2.screen.getByRole('progressbar');
            expect(progressBar).toHaveAttribute('aria-valuenow', '60');
            expect(progressBar).toHaveAttribute('aria-valuemin', '0');
            expect(progressBar).toHaveAttribute('aria-valuemax', '100');
        });
        it('should have correct ARIA attributes with custom ariaLabel', function () {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 40, ariaLabel: "File upload progress" }));
            var progressBar = react_2.screen.getByRole('progressbar');
            expect(progressBar).toHaveAttribute('aria-label', 'File upload progress');
        });
    });
    // ============================================================================
    // COMPONENT STRUCTURE TESTS
    // ============================================================================
    describe('Component Structure', function () {
        it('should render with correct DOM structure', function () {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 50, message: "Test message" }));
            var progressBar = react_2.screen.getByRole('progressbar');
            expect(progressBar).toBeInTheDocument();
            // Check container exists
            var container = progressBar.querySelector('.container');
            expect(container).toBeInTheDocument();
            // Check bar exists
            var bar = progressBar.querySelector('.bar');
            expect(bar).toBeInTheDocument();
            // Check percentage text exists
            expect(react_2.screen.getByText('50%')).toBeInTheDocument();
            // Check message text exists
            expect(react_2.screen.getByText('Test message')).toBeInTheDocument();
        });
        it('should use Text component for percentage and message', function () {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 25, message: "Test message" }));
            var textComponents = react_2.screen.getAllByTestId('text-component');
            expect(textComponents).toHaveLength(2); // percentage + message
            expect(textComponents[0]).toHaveTextContent('25%');
            expect(textComponents[1]).toHaveTextContent('Test message');
        });
    });
    // ============================================================================
    // PROPS COMBINATIONS TESTS
    // ============================================================================
    describe('Props Combinations', function () {
        it('should work with all props provided', function () {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 85, showPercentage: true, message: "Finalizing...", className: "custom-progress", ariaLabel: "Custom progress" }));
            expect(react_2.screen.getByText('85%')).toBeInTheDocument();
            expect(react_2.screen.getByText('Finalizing...')).toBeInTheDocument();
            expect(react_2.screen.getByRole('progressbar')).toHaveClass('custom-progress');
            expect(react_2.screen.getByRole('progressbar')).toHaveAttribute('aria-label', 'Custom progress');
        });
        it('should work with minimal props', function () {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 0 }));
            expect(react_2.screen.getByRole('progressbar')).toBeInTheDocument();
            expect(react_2.screen.getByText('0%')).toBeInTheDocument();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,