{"file":"/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/api/lib/websocket/webSocket.mock.ts","mappings":";;;AAEA;IAIE,uBAAY,IAAY;QAAxB,iBAMC;QATO,oBAAe,GAAsC,EAAE,CAAC;QACxD,gBAAW,GAAG,KAAK,CAAC;QAG1B,gCAAgC;QAChC,UAAU,CAAC;YACT,KAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,KAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACpB,CAAC,EAAE,CAAC,CAAC,CAAC;IACR,CAAC;IAED,wCAAgB,GAAhB,UAAiB,IAAY,EAAE,OAAsC;QACnE,IAAI,IAAI,KAAK,SAAS,EAAE,CAAC;YACvB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrC,CAAC;IACH,CAAC;IAED,2CAAmB,GAAnB,UAAoB,IAAY,EAAE,OAAsC;QACtE,IAAI,IAAI,KAAK,SAAS,EAAE,CAAC;YACvB,IAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YACpD,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE,CAAC;gBACjB,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACxC,CAAC;QACH,CAAC;IACH,CAAC;IAED,4BAAI,GAAJ,UAAK,KAAa;QAChB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YACtB,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;QAChD,CAAC;IACH,CAAC;IAED,mCAAW,GAAX,UAAY,OAAsC;QAChD,IAAM,KAAK,GAAG,IAAI,YAAY,CAAC,SAAS,EAAE;YACxC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;SAC9B,CAAC,CAAC;QACH,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,OAAO,IAAK,OAAA,OAAO,CAAC,KAAK,CAAC,EAAd,CAAc,CAAC,CAAC;IAC5D,CAAC;IAED,6BAAK,GAAL;QACE,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACrB,CAAC;IAEO,4BAAI,GAAZ,UAAa,IAAY;QACvB,IAAM,KAAK,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC;QAC9B,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;IAEO,qCAAa,GAArB,UAAsB,MAAa;QACjC,OAAO,IAAI,CAAC;IACd,CAAC;IACH,oBAAC;AAAD,CAAC,AArDD,IAqDC;AArDY,sCAAa;AAuD1B,+CAA+C;AAC/C,MAAM,CAAC,SAAS,GAAG,aAA4C,CAAC;AAEzD,IAAM,mBAAmB,GAAG,UAAC,GAAW;IAC7C,OAAA,IAAI,aAAa,CAAC,GAAG,CAAC;AAAtB,CAAsB,CAAC;AADZ,QAAA,mBAAmB,uBACP","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/api/lib/websocket/webSocket.mock.ts"],"sourcesContent":["import { mockWebSocketInstanceInterface, mockWebSocketMessageInterface } from '../../types/types';\n\nexport class WebSocketMock implements mockWebSocketInstanceInterface {\n  private messageHandlers: ((event: MessageEvent) => void)[] = [];\n  private isConnected = false;\n\n  constructor(_url: string) {\n    // Simulate immediate connection\n    setTimeout(() => {\n      this.isConnected = true;\n      this.emit('open');\n    }, 0);\n  }\n\n  addEventListener(type: string, handler: (event: MessageEvent) => void): void {\n    if (type === 'message') {\n      this.messageHandlers.push(handler);\n    }\n  }\n\n  removeEventListener(type: string, handler: (event: MessageEvent) => void): void {\n    if (type === 'message') {\n      const index = this.messageHandlers.indexOf(handler);\n      if (index !== -1) {\n        this.messageHandlers.splice(index, 1);\n      }\n    }\n  }\n\n  send(_data: string): void {\n    if (!this.isConnected) {\n      throw new Error('WebSocket is not connected');\n    }\n  }\n\n  mockMessage(message: mockWebSocketMessageInterface): void {\n    const event = new MessageEvent('message', {\n      data: JSON.stringify(message),\n    });\n    this.messageHandlers.forEach((handler) => handler(event));\n  }\n\n  close(): void {\n    this.isConnected = false;\n    this.emit('close');\n  }\n\n  private emit(type: string): void {\n    const event = new Event(type);\n    this.dispatchEvent(event);\n  }\n\n  private dispatchEvent(_event: Event): boolean {\n    return true;\n  }\n}\n\n// Type assertion to WebSocket constructor type\nglobal.WebSocket = WebSocketMock as unknown as typeof WebSocket;\n\nexport const createWebSocketMock = (url: string): mockWebSocketInstanceInterface =>\n  new WebSocketMock(url);\n"],"version":3}