a4345b6625ab2986f90f18629e4d1aa7
"use strict";
/**
 * Web Vitals Mock for Testing
 *
 * Provides mock implementations of web vitals functions for testing
 * performance monitoring functionality.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockWebVitalsWithError = exports.createMockWebVitals = exports.mockGetPerformanceRating = exports.mockCheckPerformanceBudget = exports.mockPerformanceBudgets = exports.mockInitWebVitals = void 0;
// Mock web vitals functions
exports.mockInitWebVitals = jest.fn().mockImplementation(function (_config) {
    if (_config === void 0) { _config = {}; }
    // Mock implementation that does nothing
    return;
});
// Mock performance budgets
exports.mockPerformanceBudgets = {
    CLS: 0.1,
    FID: 100,
    FCP: 1800,
    LCP: 2500,
    TTFB: 800,
    INP: 200,
};
// Mock performance budget check
exports.mockCheckPerformanceBudget = jest
    .fn()
    .mockImplementation(function (metric) {
    var budget = exports.mockPerformanceBudgets[metric.name];
    return budget ? metric.value <= budget : true;
});
// Mock performance rating
exports.mockGetPerformanceRating = jest
    .fn()
    .mockImplementation(function (metric) {
    var budget = exports.mockPerformanceBudgets[metric.name];
    if (!budget)
        return 'good';
    if (metric.value <= budget * 0.5)
        return 'good';
    if (metric.value <= budget)
        return 'needs-improvement';
    return 'poor';
});
// Create mock web vitals with custom behavior
var createMockWebVitals = function (customBehavior) {
    if (customBehavior === void 0) { customBehavior = {}; }
    return {
        initWebVitals: customBehavior.initWebVitals || exports.mockInitWebVitals,
        checkPerformanceBudget: customBehavior.checkPerformanceBudget || exports.mockCheckPerformanceBudget,
        getPerformanceRating: customBehavior.getPerformanceRating || exports.mockGetPerformanceRating,
        PERFORMANCE_BUDGETS: exports.mockPerformanceBudgets,
    };
};
exports.createMockWebVitals = createMockWebVitals;
// Mock web vitals with error
var mockWebVitalsWithError = function (error) {
    return {
        initWebVitals: jest.fn().mockImplementation(function () {
            throw error;
        }),
        checkPerformanceBudget: exports.mockCheckPerformanceBudget,
        getPerformanceRating: exports.mockGetPerformanceRating,
        PERFORMANCE_BUDGETS: exports.mockPerformanceBudgets,
    };
};
exports.mockWebVitalsWithError = mockWebVitalsWithError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2dhbXphcmFtYXphbm92L0Rlc2t0b3AvZnVtby9zcmMvc2hhcmVkL3Rlc3RpbmcvbW9ja3MvaW5mcmFzdHJ1Y3R1cmUvbGliL3BlcmZvcm1hbmNlL3dlYlZpdGFscy5tb2NrLnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7R0FLRzs7O0FBSUgsNEJBQTRCO0FBQ2YsUUFBQSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsVUFBQyxPQUE2QjtJQUE3Qix3QkFBQSxFQUFBLFlBQTZCO0lBQzFGLHdDQUF3QztJQUN4QyxPQUFPO0FBQ1QsQ0FBQyxDQUFDLENBQUM7QUFFSCwyQkFBMkI7QUFDZCxRQUFBLHNCQUFzQixHQUFHO0lBQ3BDLEdBQUcsRUFBRSxHQUFHO0lBQ1IsR0FBRyxFQUFFLEdBQUc7SUFDUixHQUFHLEVBQUUsSUFBSTtJQUNULEdBQUcsRUFBRSxJQUFJO0lBQ1QsSUFBSSxFQUFFLEdBQUc7SUFDVCxHQUFHLEVBQUUsR0FBRztDQUNULENBQUM7QUFFRixnQ0FBZ0M7QUFDbkIsUUFBQSwwQkFBMEIsR0FBRyxJQUFJO0tBQzNDLEVBQUUsRUFBRTtLQUNKLGtCQUFrQixDQUFDLFVBQUMsTUFBdUM7SUFDMUQsSUFBTSxNQUFNLEdBQUcsOEJBQXNCLENBQUMsTUFBTSxDQUFDLElBQTJDLENBQUMsQ0FBQztJQUMxRixPQUFPLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUNoRCxDQUFDLENBQUMsQ0FBQztBQUVMLDBCQUEwQjtBQUNiLFFBQUEsd0JBQXdCLEdBQUcsSUFBSTtLQUN6QyxFQUFFLEVBQUU7S0FDSixrQkFBa0IsQ0FBQyxVQUFDLE1BQXVDO0lBQzFELElBQU0sTUFBTSxHQUFHLDhCQUFzQixDQUFDLE1BQU0sQ0FBQyxJQUEyQyxDQUFDLENBQUM7SUFDMUYsSUFBSSxDQUFDLE1BQU07UUFBRSxPQUFPLE1BQU0sQ0FBQztJQUUzQixJQUFJLE1BQU0sQ0FBQyxLQUFLLElBQUksTUFBTSxHQUFHLEdBQUc7UUFBRSxPQUFPLE1BQU0sQ0FBQztJQUNoRCxJQUFJLE1BQU0sQ0FBQyxLQUFLLElBQUksTUFBTTtRQUFFLE9BQU8sbUJBQW1CLENBQUM7SUFDdkQsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyxDQUFDLENBQUM7QUFFTCw4Q0FBOEM7QUFDdkMsSUFBTSxtQkFBbUIsR0FBRyxVQUNqQyxjQUlNO0lBSk4sK0JBQUEsRUFBQSxtQkFJTTtJQUVOLE9BQU87UUFDTCxhQUFhLEVBQUUsY0FBYyxDQUFDLGFBQWEsSUFBSSx5QkFBaUI7UUFDaEUsc0JBQXNCLEVBQUUsY0FBYyxDQUFDLHNCQUFzQixJQUFJLGtDQUEwQjtRQUMzRixvQkFBb0IsRUFBRSxjQUFjLENBQUMsb0JBQW9CLElBQUksZ0NBQXdCO1FBQ3JGLG1CQUFtQixFQUFFLDhCQUFzQjtLQUM1QyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBYlcsUUFBQSxtQkFBbUIsdUJBYTlCO0FBRUYsNkJBQTZCO0FBQ3RCLElBQU0sc0JBQXNCLEdBQUcsVUFBQyxLQUFZO0lBQ2pELE9BQU87UUFDTCxhQUFhLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDO1lBQzFDLE1BQU0sS0FBSyxDQUFDO1FBQ2QsQ0FBQyxDQUFDO1FBQ0Ysc0JBQXNCLEVBQUUsa0NBQTBCO1FBQ2xELG9CQUFvQixFQUFFLGdDQUF3QjtRQUM5QyxtQkFBbUIsRUFBRSw4QkFBc0I7S0FDNUMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQVRXLFFBQUEsc0JBQXNCLDBCQVNqQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZ2FtemFyYW1hemFub3YvRGVza3RvcC9mdW1vL3NyYy9zaGFyZWQvdGVzdGluZy9tb2Nrcy9pbmZyYXN0cnVjdHVyZS9saWIvcGVyZm9ybWFuY2Uvd2ViVml0YWxzLm1vY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBXZWIgVml0YWxzIE1vY2sgZm9yIFRlc3RpbmdcbiAqXG4gKiBQcm92aWRlcyBtb2NrIGltcGxlbWVudGF0aW9ucyBvZiB3ZWIgdml0YWxzIGZ1bmN0aW9ucyBmb3IgdGVzdGluZ1xuICogcGVyZm9ybWFuY2UgbW9uaXRvcmluZyBmdW5jdGlvbmFsaXR5LlxuICovXG5cbmltcG9ydCB0eXBlIHsgV2ViVml0YWxzQ29uZmlnIH0gZnJvbSAnQC9pbmZyYXN0cnVjdHVyZS9wZXJmb3JtYW5jZS90eXBlcy9wZXJmb3JtYW5jZS50eXBlcyc7XG5cbi8vIE1vY2sgd2ViIHZpdGFscyBmdW5jdGlvbnNcbmV4cG9ydCBjb25zdCBtb2NrSW5pdFdlYlZpdGFscyA9IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKF9jb25maWc6IFdlYlZpdGFsc0NvbmZpZyA9IHt9KSA9PiB7XG4gIC8vIE1vY2sgaW1wbGVtZW50YXRpb24gdGhhdCBkb2VzIG5vdGhpbmdcbiAgcmV0dXJuO1xufSk7XG5cbi8vIE1vY2sgcGVyZm9ybWFuY2UgYnVkZ2V0c1xuZXhwb3J0IGNvbnN0IG1vY2tQZXJmb3JtYW5jZUJ1ZGdldHMgPSB7XG4gIENMUzogMC4xLFxuICBGSUQ6IDEwMCxcbiAgRkNQOiAxODAwLFxuICBMQ1A6IDI1MDAsXG4gIFRURkI6IDgwMCxcbiAgSU5QOiAyMDAsXG59O1xuXG4vLyBNb2NrIHBlcmZvcm1hbmNlIGJ1ZGdldCBjaGVja1xuZXhwb3J0IGNvbnN0IG1vY2tDaGVja1BlcmZvcm1hbmNlQnVkZ2V0ID0gamVzdFxuICAuZm4oKVxuICAubW9ja0ltcGxlbWVudGF0aW9uKChtZXRyaWM6IHsgbmFtZTogc3RyaW5nOyB2YWx1ZTogbnVtYmVyIH0pID0+IHtcbiAgICBjb25zdCBidWRnZXQgPSBtb2NrUGVyZm9ybWFuY2VCdWRnZXRzW21ldHJpYy5uYW1lIGFzIGtleW9mIHR5cGVvZiBtb2NrUGVyZm9ybWFuY2VCdWRnZXRzXTtcbiAgICByZXR1cm4gYnVkZ2V0ID8gbWV0cmljLnZhbHVlIDw9IGJ1ZGdldCA6IHRydWU7XG4gIH0pO1xuXG4vLyBNb2NrIHBlcmZvcm1hbmNlIHJhdGluZ1xuZXhwb3J0IGNvbnN0IG1vY2tHZXRQZXJmb3JtYW5jZVJhdGluZyA9IGplc3RcbiAgLmZuKClcbiAgLm1vY2tJbXBsZW1lbnRhdGlvbigobWV0cmljOiB7IG5hbWU6IHN0cmluZzsgdmFsdWU6IG51bWJlciB9KSA9PiB7XG4gICAgY29uc3QgYnVkZ2V0ID0gbW9ja1BlcmZvcm1hbmNlQnVkZ2V0c1ttZXRyaWMubmFtZSBhcyBrZXlvZiB0eXBlb2YgbW9ja1BlcmZvcm1hbmNlQnVkZ2V0c107XG4gICAgaWYgKCFidWRnZXQpIHJldHVybiAnZ29vZCc7XG5cbiAgICBpZiAobWV0cmljLnZhbHVlIDw9IGJ1ZGdldCAqIDAuNSkgcmV0dXJuICdnb29kJztcbiAgICBpZiAobWV0cmljLnZhbHVlIDw9IGJ1ZGdldCkgcmV0dXJuICduZWVkcy1pbXByb3ZlbWVudCc7XG4gICAgcmV0dXJuICdwb29yJztcbiAgfSk7XG5cbi8vIENyZWF0ZSBtb2NrIHdlYiB2aXRhbHMgd2l0aCBjdXN0b20gYmVoYXZpb3JcbmV4cG9ydCBjb25zdCBjcmVhdGVNb2NrV2ViVml0YWxzID0gKFxuICBjdXN0b21CZWhhdmlvcjoge1xuICAgIGluaXRXZWJWaXRhbHM/OiBqZXN0Lk1vY2s7XG4gICAgY2hlY2tQZXJmb3JtYW5jZUJ1ZGdldD86IGplc3QuTW9jaztcbiAgICBnZXRQZXJmb3JtYW5jZVJhdGluZz86IGplc3QuTW9jaztcbiAgfSA9IHt9XG4pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBpbml0V2ViVml0YWxzOiBjdXN0b21CZWhhdmlvci5pbml0V2ViVml0YWxzIHx8IG1vY2tJbml0V2ViVml0YWxzLFxuICAgIGNoZWNrUGVyZm9ybWFuY2VCdWRnZXQ6IGN1c3RvbUJlaGF2aW9yLmNoZWNrUGVyZm9ybWFuY2VCdWRnZXQgfHwgbW9ja0NoZWNrUGVyZm9ybWFuY2VCdWRnZXQsXG4gICAgZ2V0UGVyZm9ybWFuY2VSYXRpbmc6IGN1c3RvbUJlaGF2aW9yLmdldFBlcmZvcm1hbmNlUmF0aW5nIHx8IG1vY2tHZXRQZXJmb3JtYW5jZVJhdGluZyxcbiAgICBQRVJGT1JNQU5DRV9CVURHRVRTOiBtb2NrUGVyZm9ybWFuY2VCdWRnZXRzLFxuICB9O1xufTtcblxuLy8gTW9jayB3ZWIgdml0YWxzIHdpdGggZXJyb3JcbmV4cG9ydCBjb25zdCBtb2NrV2ViVml0YWxzV2l0aEVycm9yID0gKGVycm9yOiBFcnJvcikgPT4ge1xuICByZXR1cm4ge1xuICAgIGluaXRXZWJWaXRhbHM6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfSksXG4gICAgY2hlY2tQZXJmb3JtYW5jZUJ1ZGdldDogbW9ja0NoZWNrUGVyZm9ybWFuY2VCdWRnZXQsXG4gICAgZ2V0UGVyZm9ybWFuY2VSYXRpbmc6IG1vY2tHZXRQZXJmb3JtYW5jZVJhdGluZyxcbiAgICBQRVJGT1JNQU5DRV9CVURHRVRTOiBtb2NrUGVyZm9ybWFuY2VCdWRnZXRzLFxuICB9O1xufTtcbiJdLCJ2ZXJzaW9uIjozfQ==