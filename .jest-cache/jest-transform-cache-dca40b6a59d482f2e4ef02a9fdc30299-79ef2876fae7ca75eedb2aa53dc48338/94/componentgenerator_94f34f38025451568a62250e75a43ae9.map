{"version":3,"names":["exports","componentGenerator","fs","cov_23l4m8mbii","s","__importStar","require","path_1","__importDefault","config","f","name","layer","type","_a","description","b","includes","Error","componentDir","default","join","existsSync","mkdirSync","recursive","componentContent","generateComponentFile","writeFileSync","concat","testContent","generateTestFile","storiesContent","generateStoriesFile","indexContent","generateIndexFile","toLowerCase"],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/lib/dev-tools/generators/component-generator/component-generator.ts"],"sourcesContent":["import * as fs from 'fs';\nimport path from 'path';\n\nexport interface ComponentConfig {\n  name: string;\n  layer: 'shared' | 'widgets' | 'infrastructure';\n  type: 'ui' | 'lib' | 'model' | 'api';\n  description?: string;\n}\n\nexport function componentGenerator(config: ComponentConfig) {\n  const { name, layer, type, description = '' } = config;\n\n  // Validate layer and type combination\n  if (layer === 'shared' && !['ui', 'lib', 'model'].includes(type)) {\n    throw new Error('Shared layer only supports ui, lib, or model types');\n  }\n\n  if (layer === 'widgets' && type !== 'ui') {\n    throw new Error('Widgets layer only supports ui type');\n  }\n\n  if (layer === 'infrastructure' && !['lib', 'api'].includes(type)) {\n    throw new Error('Infrastructure layer only supports lib or api types');\n  }\n\n  const componentDir = path.join('src', layer, type, name);\n\n  // Create directory if it doesn't exist\n  if (!fs.existsSync(componentDir)) {\n    fs.mkdirSync(componentDir, { recursive: true });\n  }\n\n  // Generate component file\n  const componentContent = generateComponentFile(name, description);\n  fs.writeFileSync(path.join(componentDir, `${name}.tsx`), componentContent);\n\n  // Generate test file\n  const testContent = generateTestFile(name);\n  fs.writeFileSync(path.join(componentDir, `${name}.test.tsx`), testContent);\n\n  // Generate stories file\n  const storiesContent = generateStoriesFile(name, description);\n  fs.writeFileSync(path.join(componentDir, `${name}.stories.tsx`), storiesContent);\n\n  // Generate index file\n  const indexContent = generateIndexFile(name);\n  fs.writeFileSync(path.join(componentDir, 'index.ts'), indexContent);\n\n  // Component ${name} generated successfully in ${componentDir}\n  // Files created:\n  //   - ${name}.tsx\n  //   - ${name}.test.tsx\n  //   - ${name}.stories.tsx\n  //   - index.ts\n}\n\nfunction generateComponentFile(name: string, description: string): string {\n  return `import React from 'react';\nimport { classNames } from '@/shared/lib/utils/classNames';\n\nexport interface ${name}Props {\n  className?: string;\n  children?: React.ReactNode;\n  // Add your props here\n}\n\n/**\n * ${description || `${name} component`}\n * \n * @param props - Component props\n * @returns JSX element\n */\nexport function ${name}({ className, children, ...props }: ${name}Props) {\n  return (\n    <div \n      className={classNames('${name.toLowerCase()}', {}, [className])}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n`;\n}\n\nfunction generateTestFile(name: string): string {\n  return `import { render, screen } from '@testing-library/react';\nimport { ${name} } from './${name}';\n\ndescribe('${name}', () => {\n  it('renders without crashing', () => {\n    render(<${name}>Test content</${name}>);\n    expect(screen.getByText('Test content')).toBeInTheDocument();\n  });\n\n  it('applies custom className', () => {\n    render(<${name} className=\"custom-class\">Test</${name}>);\n    const element = screen.getByText('Test');\n    expect(element).toHaveClass('custom-class');\n    expect(element).toHaveClass('${name.toLowerCase()}');\n  });\n\n  it('renders children correctly', () => {\n    render(\n      <${name}>\n        <span>Child 1</span>\n        <span>Child 2</span>\n      </${name}>\n    );\n    expect(screen.getByText('Child 1')).toBeInTheDocument();\n    expect(screen.getByText('Child 2')).toBeInTheDocument();\n  });\n});\n`;\n}\n\nfunction generateStoriesFile(name: string, description: string): string {\n  return `import type { Meta, StoryObj } from '@storybook/react';\nimport { ${name} } from './${name}';\n\nconst meta: Meta<typeof ${name}> = {\n  title: '${name}',\n  component: ${name},\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component: '${description || `${name} component`}',\n      },\n    },\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    className: {\n      control: 'text',\n      description: 'Custom CSS class',\n    },\n    children: {\n      control: 'text',\n      description: 'Content to render inside the component',\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    children: 'Default ${name}',\n  },\n};\n\nexport const WithCustomContent: Story = {\n  args: {\n    children: (\n      <div>\n        <h3>Custom Content</h3>\n        <p>This is custom content inside ${name}</p>\n      </div>\n    ),\n  },\n};\n\nexport const WithCustomClassName: Story = {\n  args: {\n    className: 'custom-${name.toLowerCase()}-class',\n    children: 'Styled ${name}',\n  },\n};\n`;\n}\n\nfunction generateIndexFile(name: string): string {\n  return `export { ${name} } from './${name}';\nexport type { ${name}Props } from './${name}';\n`;\n}\n"],"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","ignoreList":[]}