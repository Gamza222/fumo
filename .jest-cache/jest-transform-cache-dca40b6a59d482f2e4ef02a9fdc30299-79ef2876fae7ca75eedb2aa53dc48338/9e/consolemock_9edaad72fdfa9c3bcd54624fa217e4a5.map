{"file":"/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/browser/lib/console/console.mock.ts","mappings":";AAAA;;;;;GAKG;;;;;;;;;;;;;;;;;;;;;;;AAEH,iCAAiC;AACjC,IAAM,eAAe,gBAAQ,OAAO,CAAE,CAAC;AAgBvC,sBAAsB;AACtB,IAAM,YAAY,GAA0C,EAAE,CAAC;AAElD,QAAA,WAAW,GAAgB;IACtC,GAAG,EAAE;QAAC,cAAkB;aAAlB,UAAkB,EAAlB,qBAAkB,EAAlB,IAAkB;YAAlB,yBAAkB;;QACtB,YAAY,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,MAAA,EAAE,CAAC,CAAC;IAC7C,CAAC;IACD,KAAK,EAAE;QAAC,cAAkB;aAAlB,UAAkB,EAAlB,qBAAkB,EAAlB,IAAkB;YAAlB,yBAAkB;;QACxB,YAAY,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,MAAA,EAAE,CAAC,CAAC;IAC/C,CAAC;IACD,IAAI,EAAE;QAAC,cAAkB;aAAlB,UAAkB,EAAlB,qBAAkB,EAAlB,IAAkB;YAAlB,yBAAkB;;QACvB,YAAY,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,MAAA,EAAE,CAAC,CAAC;IAC9C,CAAC;IACD,IAAI,EAAE;QAAC,cAAkB;aAAlB,UAAkB,EAAlB,qBAAkB,EAAlB,IAAkB;YAAlB,yBAAkB;;QACvB,YAAY,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,MAAA,EAAE,CAAC,CAAC;IAC9C,CAAC;IACD,KAAK,EAAE;QAAC,cAAkB;aAAlB,UAAkB,EAAlB,qBAAkB,EAAlB,IAAkB;YAAlB,yBAAkB;;QACxB,YAAY,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,MAAA,EAAE,CAAC,CAAC;IAC/C,CAAC;IACD,KAAK,EAAE;QACL,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;IAC1B,CAAC;IACD,OAAO,EAAE;QACP,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;IAC1C,CAAC;IACD,QAAQ,EAAE,cAAM,yBAAI,YAAY,SAAhB,CAAiB;CAClC,CAAC;AAEF,wBAAwB;AACxB,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,mBAAW,CAAC,CAAC","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/browser/lib/console/console.mock.ts"],"sourcesContent":["/**\n * Console Mock for Testing\n *\n * Provides a mock implementation of console methods for testing environments.\n * Captures console outputs for assertion in tests.\n */\n\n// Store original console methods\nconst originalConsole = { ...console };\n\n// Define proper types for console methods\ntype ConsoleMethod = (...args: unknown[]) => void;\n\ninterface MockConsole {\n  log: ConsoleMethod;\n  error: ConsoleMethod;\n  warn: ConsoleMethod;\n  info: ConsoleMethod;\n  debug: ConsoleMethod;\n  clear: () => void;\n  restore: () => void;\n  getCalls: () => { method: string; args: unknown[] }[];\n}\n\n// Track console calls\nconst consoleCalls: { method: string; args: unknown[] }[] = [];\n\nexport const mockConsole: MockConsole = {\n  log: (...args: unknown[]) => {\n    consoleCalls.push({ method: 'log', args });\n  },\n  error: (...args: unknown[]) => {\n    consoleCalls.push({ method: 'error', args });\n  },\n  warn: (...args: unknown[]) => {\n    consoleCalls.push({ method: 'warn', args });\n  },\n  info: (...args: unknown[]) => {\n    consoleCalls.push({ method: 'info', args });\n  },\n  debug: (...args: unknown[]) => {\n    consoleCalls.push({ method: 'debug', args });\n  },\n  clear: () => {\n    consoleCalls.length = 0;\n  },\n  restore: () => {\n    Object.assign(console, originalConsole);\n  },\n  getCalls: () => [...consoleCalls],\n};\n\n// Apply mock to console\nObject.assign(console, mockConsole);\n"],"version":3}