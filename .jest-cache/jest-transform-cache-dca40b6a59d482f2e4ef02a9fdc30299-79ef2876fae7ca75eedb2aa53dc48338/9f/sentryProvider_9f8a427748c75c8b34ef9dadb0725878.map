{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/providers/sentry/ui/sentryProvider.tsx","mappings":";AAAA,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEb,+BAAmE;AACnE,qDAAyC;AACzC,iDAAsD;AAUtD,IAAM,cAAc,GAA4B,UAAC,KAAK;IAElD,IAAA,QAAQ,GAMN,KAAK,SANC,EACR,KAKE,KAAK,IALkB,EAAzB,GAAG,mBAAG,eAAS,CAAC,SAAS,KAAA,EACzB,KAIE,KAAK,YAJuB,EAA9B,WAAW,mBAAG,eAAS,CAAC,MAAM,KAAA,EAC9B,KAGE,KAAK,iBAH8C,EAArD,gBAAgB,mBAAG,eAAS,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,KAAA,EACrD,KAEE,KAAK,MAFwB,EAA/B,KAAK,mBAAG,eAAS,CAAC,aAAa,KAAA,EAC/B,KACE,KAAK,QADoB,EAA3B,OAAO,mBAAG,CAAC,eAAS,CAAC,MAAM,KAAA,CACnB;IAEV,IAAA,iBAAS,EAAC;QACR,iDAAiD;QACjD,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO;YAAE,OAAO;QAE7B,IAAI,CAAC;YACH,MAAM,CAAC,IAAI,CAAC;gBACV,GAAG,KAAA;gBACH,WAAW,aAAA;gBACX,gBAAgB,kBAAA;gBAChB,KAAK,OAAA;gBACL,OAAO,SAAA;aACR,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,oDAAoD;YACpD,IAAI,KAAK,EAAE,CAAC;gBACV,OAAO,CAAC,IAAI,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;YACvD,CAAC;QACH,CAAC;IACH,CAAC,EAAE,CAAC,GAAG,EAAE,WAAW,EAAE,gBAAgB,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC;IAEzD,OAAO,2DAAG,QAAQ,GAAI,CAAC;AACzB,CAAC,CAAC;AAEF,kBAAe,cAAc,CAAC","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/providers/sentry/ui/sentryProvider.tsx"],"sourcesContent":["'use client';\n\nimport { type FC, type PropsWithChildren, useEffect } from 'react';\nimport * as Sentry from '@sentry/nextjs';\nimport { envConfig } from '../../../../../config/env';\n\ninterface SentryProviderProps extends PropsWithChildren {\n  dsn?: string;\n  environment?: string;\n  tracesSampleRate?: number;\n  debug?: boolean;\n  enabled?: boolean;\n}\n\nconst SentryProvider: FC<SentryProviderProps> = (props) => {\n  const {\n    children,\n    dsn = envConfig.sentryDsn,\n    environment = envConfig.appEnv,\n    tracesSampleRate = envConfig.isProduction ? 0.1 : 1.0,\n    debug = envConfig.isDevelopment,\n    enabled = !envConfig.isTest,\n  } = props;\n\n  useEffect(() => {\n    // Only initialize if DSN is provided and enabled\n    if (!dsn || !enabled) return;\n\n    try {\n      Sentry.init({\n        dsn,\n        environment,\n        tracesSampleRate,\n        debug,\n        enabled,\n      });\n    } catch (error) {\n      // Sentry initialization failed, continue without it\n      if (debug) {\n        console.warn('Sentry initialization failed:', error);\n      }\n    }\n  }, [dsn, environment, tracesSampleRate, debug, enabled]);\n\n  return <>{children}</>;\n};\n\nexport default SentryProvider;\n"],"version":3}