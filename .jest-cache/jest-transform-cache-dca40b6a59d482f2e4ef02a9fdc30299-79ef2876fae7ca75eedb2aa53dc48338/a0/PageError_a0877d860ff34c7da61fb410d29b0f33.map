{"file":"/Users/gamzaramazanov/Desktop/fumo/src/widgets/PageError/ui/PageError.tsx","mappings":";AAAA,YAAY,CAAC;;;;;;AAGb,yCAAwC;AACxC,6CAA4C;AAC5C,0DAA+E;AAC/E,gEAA4E;AAC5E,uEAAsE;AACtE,kCAA2E;AAE3E,kFAA6C;AAE7C,IAAM,SAAS,GAAuB,UAAC,KAAK;IAClC,IAAA,KAAK,GAAgB,KAAK,MAArB,EAAE,SAAS,GAAK,KAAK,UAAV,CAAW;IAEnC,IAAM,YAAY,GAAG;QACnB,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;IAC3B,CAAC,CAAC;IAEF,IAAM,YAAY,GAAG,IAAA,qBAAe,EAAC,KAAK,CAAC,CAAC;IAC5C,IAAM,OAAO,GAAG,IAAA,kBAAY,EAAC,KAAK,CAAC,CAAC;IACpC,IAAM,SAAS,GAAG,IAAA,oBAAc,EAAC,KAAK,CAAC,CAAC;IAExC,IAAM,QAAQ,GAAG;QACf,IAAI,OAAO;YAAE,OAAO,kBAAkB,CAAC;QACvC,IAAI,SAAS;YAAE,OAAO,kBAAkB,CAAC;QACzC,OAAO,sBAAsB,CAAC;IAChC,CAAC,CAAC;IAEF,IAAM,cAAc,GAAG;QACrB,IAAI,OAAO;YAAE,OAAO,sEAAsE,CAAC;QAC3F,IAAI,SAAS;YAAE,OAAO,yEAAyE,CAAC;QAChG,OAAO,YAAY,CAAC;IACtB,CAAC,CAAC;IAEF,IAAM,aAAa,GAAG;QACpB,IAAI,OAAO;YAAE,OAAO,aAAa,CAAC;QAClC,IAAI,SAAS;YAAE,OAAO,OAAO,CAAC;QAC9B,OAAO,WAAW,CAAC;IACrB,CAAC,CAAC;IAEF,OAAO,CACL,gCAAK,SAAS,EAAE,IAAA,uBAAU,EAAC,+BAAM,CAAC,SAAS,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC,SAAS,CAAC,CAAC,YACjE,iCAAK,SAAS,EAAE,+BAAM,CAAC,kBAAkB,aACvC,uBAAC,WAAI,IACH,EAAE,EAAC,IAAI,EACP,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,wBAAW,CAAC,OAAO,CAAC,CAAC,CAAC,wBAAW,CAAC,KAAK,EAC1D,IAAI,EAAE,qBAAQ,CAAC,EAAE,EACjB,KAAK,EAAE,sBAAS,CAAC,MAAM,YAEtB,QAAQ,EAAE,GACN,EAEP,uBAAC,WAAI,IAAC,EAAE,EAAC,GAAG,EAAC,OAAO,EAAE,wBAAW,CAAC,SAAS,EAAE,IAAI,EAAE,qBAAQ,CAAC,EAAE,EAAE,KAAK,EAAE,sBAAS,CAAC,MAAM,YACpF,cAAc,EAAE,GACZ,EAEP,gCAAK,SAAS,EAAE,+BAAM,CAAC,kBAAkB,YACvC,uBAAC,eAAM,IAAC,OAAO,EAAE,4BAAa,CAAC,OAAO,EAAE,IAAI,EAAE,yBAAU,CAAC,EAAE,EAAE,OAAO,EAAE,YAAY,YAC/E,aAAa,EAAE,GACT,GACL,IACF,GACF,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,kBAAe,SAAS,CAAC","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/widgets/PageError/ui/PageError.tsx"],"sourcesContent":["'use client';\n\nimport { type FC } from 'react';\nimport { Text } from '@/shared/ui/Text';\nimport { Button } from '@/shared/ui/Button';\nimport { TextAlign, TextSize, TextVariant } from '@/shared/ui/Text/Text.types';\nimport { ButtonSize, ButtonVariant } from '@/shared/ui/Button/Button.types';\nimport { classNames } from '@/shared/lib/utils/classNames/classNames';\nimport { getErrorMessage, isChunkError, isNetworkError } from '../lib/lib';\nimport type { PageErrorProps } from '../types/types';\nimport styles from './PageError.module.scss';\n\nconst PageError: FC<PageErrorProps> = (props) => {\n  const { error, className } = props;\n\n  const handleReload = () => {\n    window.location.reload();\n  };\n\n  const errorMessage = getErrorMessage(error);\n  const isChunk = isChunkError(error);\n  const isNetwork = isNetworkError(error);\n\n  const getTitle = (): string => {\n    if (isChunk) return 'Update Available';\n    if (isNetwork) return 'Connection Error';\n    return 'Something went wrong';\n  };\n\n  const getDescription = (): string => {\n    if (isChunk) return 'A new version is available. Please reload to get the latest updates.';\n    if (isNetwork) return 'Unable to connect to the server. Please check your internet connection.';\n    return errorMessage;\n  };\n\n  const getButtonText = (): string => {\n    if (isChunk) return 'Reload Page';\n    if (isNetwork) return 'Retry';\n    return 'Try again';\n  };\n\n  return (\n    <div className={classNames(styles.pageError || '', {}, [className])}>\n      <div className={styles.pageError__content}>\n        <Text\n          as=\"h1\"\n          variant={isChunk ? TextVariant.PRIMARY : TextVariant.ERROR}\n          size={TextSize.LG}\n          align={TextAlign.CENTER}\n        >\n          {getTitle()}\n        </Text>\n\n        <Text as=\"p\" variant={TextVariant.SECONDARY} size={TextSize.MD} align={TextAlign.CENTER}>\n          {getDescription()}\n        </Text>\n\n        <div className={styles.pageError__actions}>\n          <Button variant={ButtonVariant.PRIMARY} size={ButtonSize.MD} onClick={handleReload}>\n            {getButtonText()}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PageError;\n"],"version":3}