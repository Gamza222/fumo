{"version":3,"names":["api_1","cov_d359laicd","s","require","ApiClient","f","config","prototype","request","endpoint_1","Promise","endpoint","options","b","_a","method","ApiMethod","GET","data","_b","headers","_c","timeout","url","concat","baseUrl","requestOptions","__assign","body","JSON","stringify","lastError","attempt","retryAttempts","fetchWithTimeout","response","_d","sent","ok","Error","status","statusText","json","result","error_1","String","delay","createApiError","ERROR_MESSAGES","UNKNOWN_ERROR","controller","AbortController","timeoutId","setTimeout","abort","fetch","signal","clearTimeout","error","name","message","TIMEOUT_ERROR","code","statusCode","includes","NETWORK_ERROR","details","ms","resolve","get","post","POST","put","PUT","patch","PATCH","delete","DELETE","exports","apiClient","apiConfig"],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/api/base/api-client.ts"],"sourcesContent":["import { apiConfig, ApiConfig, ApiError, ApiMethod, ERROR_MESSAGES } from '../../config/api';\n\ninterface RequestOptions {\n  method: string;\n  headers?: Record<string, string>;\n  body?: string;\n}\n\n/**\n * HTTP client for making API requests\n * Handles errors, retries, and timeout logic\n */\nclass ApiClient {\n  private config: ApiConfig;\n\n  constructor(config: ApiConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Makes an HTTP request with automatic retry logic\n   */\n  async request<T>(\n    endpoint: string,\n    options: {\n      method?: ApiMethod;\n      data?: unknown;\n      headers?: Record<string, string>;\n      timeout?: number;\n    } = {}\n  ): Promise<T> {\n    const { method = ApiMethod.GET, data, headers = {}, timeout = this.config.timeout } = options;\n\n    const url = `${this.config.baseUrl}${endpoint}`;\n    const requestOptions: RequestOptions = {\n      method,\n      headers: {\n        ...this.config.headers,\n        ...headers,\n      },\n    };\n\n    if (data && method !== ApiMethod.GET) {\n      requestOptions.body = JSON.stringify(data);\n    }\n\n    let lastError: Error | null = null;\n\n    for (let attempt = 0; attempt <= this.config.retryAttempts; attempt++) {\n      try {\n        const response = await this.fetchWithTimeout(url, requestOptions, timeout);\n\n        if (!response.ok) {\n          throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n\n        const result: T = (await response.json()) as T;\n        return result;\n      } catch (error) {\n        lastError = error instanceof Error ? error : new Error(String(error));\n\n        if (attempt < this.config.retryAttempts) {\n          await this.delay(1000 * (attempt + 1)); // Exponential backoff\n        }\n      }\n    }\n\n    // If we get here, all retries failed\n    if (lastError) {\n      throw this.createApiError(lastError);\n    }\n\n    // This should never happen, but TypeScript requires it\n    throw this.createApiError(new Error(ERROR_MESSAGES.UNKNOWN_ERROR));\n  }\n\n  /**\n   * Fetch with timeout support\n   */\n  private async fetchWithTimeout(\n    url: string,\n    options: RequestOptions,\n    timeout: number\n  ): Promise<Response> {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), timeout);\n\n    try {\n      const response = await fetch(url, {\n        ...options,\n        signal: controller.signal,\n      });\n      return response;\n    } finally {\n      clearTimeout(timeoutId);\n    }\n  }\n\n  /**\n   * Creates a standardized API error\n   */\n  private createApiError(error: Error): ApiError {\n    if (error.name === 'AbortError') {\n      return {\n        message: ERROR_MESSAGES.TIMEOUT_ERROR,\n        code: 'TIMEOUT',\n        statusCode: 408,\n      };\n    }\n\n    if (error.message.includes('NetworkError') || error.message.includes('fetch')) {\n      return {\n        message: ERROR_MESSAGES.NETWORK_ERROR,\n        code: 'NETWORK_ERROR',\n        statusCode: 0,\n      };\n    }\n\n    return {\n      message: error.message || ERROR_MESSAGES.UNKNOWN_ERROR,\n      code: 'UNKNOWN_ERROR',\n      details: error,\n    };\n  }\n\n  /**\n   * Delay utility for retry backoff\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  // Convenience methods\n  async get<T>(endpoint: string, options?: { headers?: Record<string, string> }): Promise<T> {\n    return this.request<T>(endpoint, { method: ApiMethod.GET, ...options });\n  }\n\n  async post<T>(\n    endpoint: string,\n    data?: unknown,\n    options?: { headers?: Record<string, string> }\n  ): Promise<T> {\n    return this.request<T>(endpoint, { method: ApiMethod.POST, data, ...options });\n  }\n\n  async put<T>(\n    endpoint: string,\n    data?: unknown,\n    options?: { headers?: Record<string, string> }\n  ): Promise<T> {\n    return this.request<T>(endpoint, { method: ApiMethod.PUT, data, ...options });\n  }\n\n  async patch<T>(\n    endpoint: string,\n    data?: unknown,\n    options?: { headers?: Record<string, string> }\n  ): Promise<T> {\n    return this.request<T>(endpoint, { method: ApiMethod.PATCH, data, ...options });\n  }\n\n  async delete<T>(endpoint: string, options?: { headers?: Record<string, string> }): Promise<T> {\n    return this.request<T>(endpoint, { method: ApiMethod.DELETE, ...options });\n  }\n}\n\n// Create and export default instance\nexport const apiClient = new ApiClient(apiConfig);\nexport { ApiClient };\n"],"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","ignoreList":[]}