{"version":3,"names":["cov_20d9yazq9f","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","branchMap","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage"],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/providers/app-loading/model/types/types.ts"],"sourcesContent":["/**\n * App Loading Types\n *\n * Types for initial app loading system.\n * Handles loading conditions and progress tracking.\n */\n\nimport { ReactNode } from 'react';\n\n// ============================================================================\n// LOADING CONDITIONS\n// ============================================================================\n\nexport interface LoadingCondition {\n  id: string;\n  name: string;\n  check: () => Promise<boolean> | boolean;\n  timeout?: number; // ms\n  priority?: number; // 1 = highest, 5 = lowest\n}\n\nexport interface LoadingStep {\n  id: string;\n  name: string;\n  completed: boolean;\n  priority: number;\n}\n\n// ============================================================================\n// APP LOADING STATE\n// ============================================================================\n\nexport interface AppLoadingState {\n  isInitialLoading: boolean;\n  isOverallLoading: boolean;\n  isSuspenseLoading: boolean;\n  progress: number;\n  currentStep: string;\n  steps: LoadingStep[];\n}\n\n// ============================================================================\n// PROVIDER PROPS\n// ============================================================================\n\nexport interface AppLoadingProviderProps {\n  children: ReactNode;\n}\n\n// ============================================================================\n// HOOK RETURN TYPE\n// ============================================================================\n\nexport interface UseAppLoadingReturn extends AppLoadingState {\n  forceComplete: () => void;\n  restart: () => void;\n  setSuspenseLoading: (loading: boolean) => void;\n}\n"],"mappings":";;AAAA;;;;;;AAAA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;IAAA;IAAAE,KAAA;IAAAC,SAAA;IAAAC,CAAA;MAAA;IAAA;IAAAC,CAAA;IAAAC,CAAA;IAAAC,cAAA;MAAAC,IAAA;MAAAC,QAAA;MAAAC,KAAA;MAAAC,OAAA;MAAAC,cAAA;MAAAC,OAAA;IAAA;IAAAC,eAAA;IAAAtB,IAAA;EAAA;EAAA,IAAAuB,QAAA,GAAAtB,MAAA,CAAAE,GAAA,MAAAF,MAAA,CAAAE,GAAA;EAAA,KAAAoB,QAAA,CAAAxB,IAAA,KAAAwB,QAAA,CAAAxB,IAAA,EAAAC,IAAA,KAAAA,IAAA;IAAAuB,QAAA,CAAAxB,IAAA,IAAAK,YAAA;EAAA;EAAA,IAAAoB,cAAA,GAAAD,QAAA,CAAAxB,IAAA;EAAA","ignoreList":[]}