a050ed26c2eded2d0dc0494cebb3502e
"use strict";
/**
 * WebSocket Client Tests
 *
 * Real-life enterprise scenarios testing with minimal mocking.
 * Uses existing mock factory patterns and focuses on client configuration.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var websocketClient_1 = require("./websocketClient");
// Use existing mock factory patterns
var browser_1 = require("@/shared/testing/mocks/browser");
describe('WebSocket Client', function () {
    var wsClient;
    var mockLocalStorage;
    beforeEach(function () {
        // Use existing mock factory patterns
        browser_1.mockConsole.clear();
        // Create fresh localStorage mock for each test
        mockLocalStorage = (0, browser_1.mockStorage)();
        Object.defineProperty(window, 'localStorage', {
            value: mockLocalStorage,
            writable: true,
        });
    });
    afterEach(function () {
        // Cleanup
        if (wsClient) {
            wsClient.disconnect();
        }
        browser_1.mockConsole.restore();
        // Clear any pending timers
        jest.clearAllTimers();
        // Clear mock storage
        mockLocalStorage.clear();
    });
    // ============================================================================
    // REAL-LIFE ENTERPRISE SCENARIOS
    // ============================================================================
    describe('Enterprise WebSocket Operations', function () {
        it('should create WebSocket client with enterprise configuration', function () {
            // Real scenario: connecting to enterprise notification system
            wsClient = (0, websocketClient_1.createWebSocketClient)({
                url: 'wss://notifications.company.com/ws',
                reconnectInterval: 1000,
                maxReconnectAttempts: 3,
            });
            expect(wsClient).toBeDefined();
            expect(wsClient.getState()).toBe(websocketClient_1.WebSocketState.DISCONNECTED);
            expect(typeof wsClient.connect).toBe('function');
            expect(typeof wsClient.disconnect).toBe('function');
            expect(typeof wsClient.send).toBe('function');
            expect(typeof wsClient.subscribe).toBe('function');
        });
        it('should configure client for real-time chat scenarios', function () {
            // Real scenario: enterprise chat application
            wsClient = (0, websocketClient_1.createWebSocketClient)({
                url: 'wss://chat.company.com/ws',
            });
            expect(wsClient).toBeDefined();
            expect(typeof wsClient.subscribe).toBe('function');
            // Should support subscription functionality
            var unsubscribe = wsClient.subscribe('chat_message', function (_message) {
                // Message handler would process real messages
            });
            expect(typeof unsubscribe).toBe('function');
        });
        it('should configure client for system monitoring', function () {
            // Real scenario: monitoring dashboard with live system status
            wsClient = (0, websocketClient_1.createWebSocketClient)({
                url: 'wss://monitoring.company.com/ws',
            });
            expect(wsClient).toBeDefined();
            expect(typeof wsClient.onStateChanged).toBe('function');
            expect(typeof wsClient.onErrorOccurred).toBe('function');
        });
        it('should support message sending configuration', function () {
            // Real scenario: tracking user activity for collaborative features
            wsClient = (0, websocketClient_1.createWebSocketClient)({
                url: 'wss://collaboration.company.com/ws',
            });
            expect(wsClient).toBeDefined();
            expect(typeof wsClient.send).toBe('function');
            expect(wsClient.getState()).toBe(websocketClient_1.WebSocketState.DISCONNECTED);
        });
    });
    // ============================================================================
    // CONNECTION MANAGEMENT - REAL ENTERPRISE SCENARIOS
    // ============================================================================
    describe('Connection Management', function () {
        it('should provide connection control methods', function () {
            // Real scenario: user logs out, need clean disconnection
            wsClient = (0, websocketClient_1.createWebSocketClient)({
                url: 'wss://realtime.company.com/ws',
            });
            expect(typeof wsClient.connect).toBe('function');
            expect(typeof wsClient.disconnect).toBe('function');
            expect(typeof wsClient.isConnected).toBe('function');
            expect(wsClient.getState()).toBe(websocketClient_1.WebSocketState.DISCONNECTED);
        });
        it('should support message queuing configuration', function () {
            // Real scenario: network hiccup, messages should be queued
            wsClient = (0, websocketClient_1.createWebSocketClient)({
                url: 'wss://reliable.company.com/ws',
                reconnectInterval: 100,
            });
            expect(wsClient).toBeDefined();
            expect(typeof wsClient.send).toBe('function');
        });
        it('should support reconnection configuration', function () {
            // Real scenario: network drops, should support reconnection
            wsClient = (0, websocketClient_1.createWebSocketClient)({
                url: 'wss://resilient.company.com/ws',
                reconnectInterval: 50,
                maxReconnectAttempts: 2,
            });
            expect(wsClient).toBeDefined();
            expect(wsClient.getState()).toBe(websocketClient_1.WebSocketState.DISCONNECTED);
        });
        it('should provide connection state tracking', function () {
            // Real scenario: UI needs to show connection status
            wsClient = (0, websocketClient_1.createWebSocketClient)({
                url: 'wss://stateful.company.com/ws',
            });
            expect(typeof wsClient.getState).toBe('function');
            expect(typeof wsClient.onStateChanged).toBe('function');
            // Should support state change callbacks
            var stateChanges = [];
            wsClient.onStateChanged(function (state) {
                stateChanges.push(state);
            });
            expect(stateChanges).toEqual([]);
        });
    });
    // ============================================================================
    // AUTHENTICATION - REAL ENTERPRISE SCENARIOS
    // ============================================================================
    describe('Authentication Integration', function () {
        it('should work with authentication tokens', function () {
            // Real scenario: authenticated WebSocket connection
            mockLocalStorage.setItem('auth_token', 'enterprise_ws_token_123');
            wsClient = (0, websocketClient_1.createWebSocketClient)({
                url: 'wss://secure.company.com/ws',
            });
            expect(wsClient).toBeDefined();
            expect(mockLocalStorage.getItem('auth_token')).toBe('enterprise_ws_token_123');
        });
        it('should work without authentication for public channels', function () {
            // Real scenario: public announcements channel
            expect(mockLocalStorage.getItem('auth_token')).toBeNull();
            wsClient = (0, websocketClient_1.createWebSocketClient)({
                url: 'wss://public.company.com/ws',
            });
            expect(wsClient).toBeDefined();
            expect(wsClient.getState()).toBe(websocketClient_1.WebSocketState.DISCONNECTED);
        });
        it('should handle different token storage strategies', function () {
            // Real scenario: different enterprise systems store tokens differently
            var tokenStrategies = ['auth_token', 'access_token', 'websocket_token', 'bearer_token'];
            tokenStrategies.forEach(function (tokenKey) {
                mockLocalStorage.clear();
                mockLocalStorage.setItem(tokenKey, "".concat(tokenKey, "_value_123"));
                wsClient = (0, websocketClient_1.createWebSocketClient)({
                    url: 'wss://flexible-auth.company.com/ws',
                });
                // Should handle each token strategy
                expect(mockLocalStorage.getItem(tokenKey)).toBe("".concat(tokenKey, "_value_123"));
                expect(wsClient).toBeDefined();
                wsClient.disconnect();
            });
        });
    });
    // ============================================================================
    // EVENT SUBSCRIPTION - REAL ENTERPRISE SCENARIOS
    // ============================================================================
    describe('Event Subscription Management', function () {
        beforeEach(function () {
            wsClient = (0, websocketClient_1.createWebSocketClient)({
                url: 'wss://events.company.com/ws',
            });
        });
        it('should support multiple subscribers for same event', function () {
            // Real scenario: multiple UI components listening to same data
            var subscriber1Handler = jest.fn();
            var subscriber2Handler = jest.fn();
            var unsub1 = wsClient.subscribe('order_update', subscriber1Handler);
            var unsub2 = wsClient.subscribe('order_update', subscriber2Handler);
            expect(typeof unsub1).toBe('function');
            expect(typeof unsub2).toBe('function');
            unsub1();
            unsub2();
        });
        it('should handle subscription cleanup', function () {
            // Real scenario: component unmounts, need to cleanup subscriptions
            var messageHandler = jest.fn();
            var unsubscribe = wsClient.subscribe('cleanup_test', messageHandler);
            expect(typeof unsubscribe).toBe('function');
            // Unsubscribe should not throw
            expect(function () { return unsubscribe(); }).not.toThrow();
        });
        it('should handle subscription errors gracefully', function () {
            // Real scenario: subscriber callback throws error
            var errorCallback = jest.fn(function () {
                throw new Error('Subscriber error');
            });
            // Should not crash when creating subscription with error-prone callback
            expect(function () {
                wsClient.subscribe('error_test', errorCallback);
            }).not.toThrow();
        });
    });
    // ============================================================================
    // CONNECTION HEALTH MANAGEMENT
    // ============================================================================
    describe('Connection Health Management', function () {
        it('should support heartbeat configuration', function () {
            // Real scenario: enterprise firewalls drop idle connections
            wsClient = (0, websocketClient_1.createWebSocketClient)({
                url: 'wss://heartbeat.company.com/ws',
                enableHeartbeat: true,
                heartbeatInterval: 30000,
            });
            expect(wsClient).toBeDefined();
            expect(wsClient.getState()).toBe(websocketClient_1.WebSocketState.DISCONNECTED);
        });
        it('should support heartbeat responses', function () {
            // Real scenario: server responds to ping with pong
            wsClient = (0, websocketClient_1.createWebSocketClient)({
                url: 'wss://pong.company.com/ws',
                enableHeartbeat: true,
            });
            expect(wsClient).toBeDefined();
        });
        it('should allow disabling heartbeat when not needed', function () {
            // Real scenario: some servers don't need heartbeat
            wsClient = (0, websocketClient_1.createWebSocketClient)({
                url: 'wss://no-heartbeat.company.com/ws',
                enableHeartbeat: false,
            });
            expect(wsClient).toBeDefined();
        });
    });
    // ============================================================================
    // ERROR HANDLING - REAL ENTERPRISE SCENARIOS
    // ============================================================================
    describe('Error Handling', function () {
        it('should provide error handling configuration', function () {
            // Real scenario: WebSocket server is down
            wsClient = (0, websocketClient_1.createWebSocketClient)({
                url: 'wss://down-server.company.com/ws',
                maxReconnectAttempts: 1,
            });
            expect(typeof wsClient.onErrorOccurred).toBe('function');
            var errorHandler = jest.fn();
            wsClient.onErrorOccurred(errorHandler);
            expect(errorHandler).not.toHaveBeenCalled();
        });
        it('should handle malformed message configuration', function () {
            // Real scenario: server sends invalid JSON
            wsClient = (0, websocketClient_1.createWebSocketClient)({
                url: 'wss://malformed.company.com/ws',
            });
            expect(wsClient).toBeDefined();
            expect(typeof wsClient.subscribe).toBe('function');
        });
        it('should provide error context capabilities', function () {
            // Real scenario: developers need error details
            wsClient = (0, websocketClient_1.createWebSocketClient)({
                url: 'wss://debug.company.com/ws',
            });
            expect(typeof wsClient.onErrorOccurred).toBe('function');
            expect(typeof wsClient.onStateChanged).toBe('function');
        });
    });
    // ============================================================================
    // PERFORMANCE - REAL ENTERPRISE SCENARIOS
    // ============================================================================
    describe('Performance Considerations', function () {
        it('should handle high-frequency message configuration', function () {
            // Real scenario: real-time trading data with high message volume
            wsClient = (0, websocketClient_1.createWebSocketClient)({
                url: 'wss://high-frequency.company.com/ws',
            });
            expect(wsClient).toBeDefined();
            expect(typeof wsClient.subscribe).toBe('function');
        });
        it('should handle many subscriptions efficiently', function () {
            // Real scenario: complex dashboard with many data subscriptions
            wsClient = (0, websocketClient_1.createWebSocketClient)({
                url: 'wss://dashboard.company.com/ws',
            });
            var unsubscribers = [];
            // Create many subscriptions
            for (var i = 0; i < 50; i++) {
                var unsub = wsClient.subscribe("event_".concat(i), function () {
                    // Handle message
                });
                unsubscribers.push(unsub);
            }
            expect(unsubscribers).toHaveLength(50);
            // Cleanup all subscriptions
            unsubscribers.forEach(function (unsub) { return unsub(); });
        });
    });
});
describe('WebSocket Client Factory', function () {
    it('should create client with default configuration', function () {
        // Real scenario: simple client creation
        var client = (0, websocketClient_1.createWebSocketClient)({
            url: 'wss://default.company.com/ws',
        });
        expect(client).toBeInstanceOf(websocketClient_1.WebSocketClient);
        expect(client.getState()).toBe(websocketClient_1.WebSocketState.DISCONNECTED);
    });
    it('should create client with custom configuration', function () {
        // Real scenario: enterprise-specific configuration
        var client = (0, websocketClient_1.createWebSocketClient)({
            url: 'wss://custom.company.com/ws',
            protocols: ['chat', 'notifications'],
            reconnectInterval: 5000,
            maxReconnectAttempts: 10,
            timeout: 15000,
            heartbeatInterval: 60000,
            enableHeartbeat: true,
        });
        expect(client).toBeInstanceOf(websocketClient_1.WebSocketClient);
        expect(client.getState()).toBe(websocketClient_1.WebSocketState.DISCONNECTED);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,