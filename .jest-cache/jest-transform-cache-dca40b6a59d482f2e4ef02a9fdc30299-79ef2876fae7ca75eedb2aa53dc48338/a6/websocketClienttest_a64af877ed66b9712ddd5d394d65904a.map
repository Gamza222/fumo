{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/data/websocket/websocketClient.test.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/data/websocket/websocketClient.test.ts"],"sourcesContent":["/**\n * WebSocket Client Tests\n *\n * Real-life enterprise scenarios testing with minimal mocking.\n * Uses existing mock factory patterns and focuses on client configuration.\n */\n\nimport { createWebSocketClient, WebSocketClient, WebSocketState } from './websocketClient';\n\n// Use existing mock factory patterns\nimport { mockConsole, mockStorage } from '@/shared/testing/mocks/browser';\n\ndescribe('WebSocket Client', () => {\n  let wsClient: WebSocketClient;\n  let mockLocalStorage: ReturnType<typeof mockStorage>;\n\n  beforeEach(() => {\n    // Use existing mock factory patterns\n    mockConsole.clear();\n\n    // Create fresh localStorage mock for each test\n    mockLocalStorage = mockStorage();\n    Object.defineProperty(window, 'localStorage', {\n      value: mockLocalStorage,\n      writable: true,\n    });\n  });\n\n  afterEach(() => {\n    // Cleanup\n    if (wsClient) {\n      wsClient.disconnect();\n    }\n    mockConsole.restore();\n    // Clear any pending timers\n    jest.clearAllTimers();\n    // Clear mock storage\n    mockLocalStorage.clear();\n  });\n\n  // ============================================================================\n  // REAL-LIFE ENTERPRISE SCENARIOS\n  // ============================================================================\n\n  describe('Enterprise WebSocket Operations', () => {\n    it('should create WebSocket client with enterprise configuration', () => {\n      // Real scenario: connecting to enterprise notification system\n      wsClient = createWebSocketClient({\n        url: 'wss://notifications.company.com/ws',\n        reconnectInterval: 1000,\n        maxReconnectAttempts: 3,\n      });\n\n      expect(wsClient).toBeDefined();\n      expect(wsClient.getState()).toBe(WebSocketState.DISCONNECTED);\n      expect(typeof wsClient.connect).toBe('function');\n      expect(typeof wsClient.disconnect).toBe('function');\n      expect(typeof wsClient.send).toBe('function');\n      expect(typeof wsClient.subscribe).toBe('function');\n    });\n\n    it('should configure client for real-time chat scenarios', () => {\n      // Real scenario: enterprise chat application\n      wsClient = createWebSocketClient({\n        url: 'wss://chat.company.com/ws',\n      });\n\n      expect(wsClient).toBeDefined();\n      expect(typeof wsClient.subscribe).toBe('function');\n\n      // Should support subscription functionality\n      const unsubscribe = wsClient.subscribe('chat_message', (_message) => {\n        // Message handler would process real messages\n      });\n\n      expect(typeof unsubscribe).toBe('function');\n    });\n\n    it('should configure client for system monitoring', () => {\n      // Real scenario: monitoring dashboard with live system status\n      wsClient = createWebSocketClient({\n        url: 'wss://monitoring.company.com/ws',\n      });\n\n      expect(wsClient).toBeDefined();\n      expect(typeof wsClient.onStateChanged).toBe('function');\n      expect(typeof wsClient.onErrorOccurred).toBe('function');\n    });\n\n    it('should support message sending configuration', () => {\n      // Real scenario: tracking user activity for collaborative features\n      wsClient = createWebSocketClient({\n        url: 'wss://collaboration.company.com/ws',\n      });\n\n      expect(wsClient).toBeDefined();\n      expect(typeof wsClient.send).toBe('function');\n      expect(wsClient.getState()).toBe(WebSocketState.DISCONNECTED);\n    });\n  });\n\n  // ============================================================================\n  // CONNECTION MANAGEMENT - REAL ENTERPRISE SCENARIOS\n  // ============================================================================\n\n  describe('Connection Management', () => {\n    it('should provide connection control methods', () => {\n      // Real scenario: user logs out, need clean disconnection\n      wsClient = createWebSocketClient({\n        url: 'wss://realtime.company.com/ws',\n      });\n\n      expect(typeof wsClient.connect).toBe('function');\n      expect(typeof wsClient.disconnect).toBe('function');\n      expect(typeof wsClient.isConnected).toBe('function');\n      expect(wsClient.getState()).toBe(WebSocketState.DISCONNECTED);\n    });\n\n    it('should support message queuing configuration', () => {\n      // Real scenario: network hiccup, messages should be queued\n      wsClient = createWebSocketClient({\n        url: 'wss://reliable.company.com/ws',\n        reconnectInterval: 100,\n      });\n\n      expect(wsClient).toBeDefined();\n      expect(typeof wsClient.send).toBe('function');\n    });\n\n    it('should support reconnection configuration', () => {\n      // Real scenario: network drops, should support reconnection\n      wsClient = createWebSocketClient({\n        url: 'wss://resilient.company.com/ws',\n        reconnectInterval: 50,\n        maxReconnectAttempts: 2,\n      });\n\n      expect(wsClient).toBeDefined();\n      expect(wsClient.getState()).toBe(WebSocketState.DISCONNECTED);\n    });\n\n    it('should provide connection state tracking', () => {\n      // Real scenario: UI needs to show connection status\n      wsClient = createWebSocketClient({\n        url: 'wss://stateful.company.com/ws',\n      });\n\n      expect(typeof wsClient.getState).toBe('function');\n      expect(typeof wsClient.onStateChanged).toBe('function');\n\n      // Should support state change callbacks\n      const stateChanges: WebSocketState[] = [];\n      wsClient.onStateChanged((state) => {\n        stateChanges.push(state);\n      });\n\n      expect(stateChanges).toEqual([]);\n    });\n  });\n\n  // ============================================================================\n  // AUTHENTICATION - REAL ENTERPRISE SCENARIOS\n  // ============================================================================\n\n  describe('Authentication Integration', () => {\n    it('should work with authentication tokens', () => {\n      // Real scenario: authenticated WebSocket connection\n      mockLocalStorage.setItem('auth_token', 'enterprise_ws_token_123');\n\n      wsClient = createWebSocketClient({\n        url: 'wss://secure.company.com/ws',\n      });\n\n      expect(wsClient).toBeDefined();\n      expect(mockLocalStorage.getItem('auth_token')).toBe('enterprise_ws_token_123');\n    });\n\n    it('should work without authentication for public channels', () => {\n      // Real scenario: public announcements channel\n      expect(mockLocalStorage.getItem('auth_token')).toBeNull();\n\n      wsClient = createWebSocketClient({\n        url: 'wss://public.company.com/ws',\n      });\n\n      expect(wsClient).toBeDefined();\n      expect(wsClient.getState()).toBe(WebSocketState.DISCONNECTED);\n    });\n\n    it('should handle different token storage strategies', () => {\n      // Real scenario: different enterprise systems store tokens differently\n      const tokenStrategies = ['auth_token', 'access_token', 'websocket_token', 'bearer_token'];\n\n      tokenStrategies.forEach((tokenKey) => {\n        mockLocalStorage.clear();\n        mockLocalStorage.setItem(tokenKey, `${tokenKey}_value_123`);\n\n        wsClient = createWebSocketClient({\n          url: 'wss://flexible-auth.company.com/ws',\n        });\n\n        // Should handle each token strategy\n        expect(mockLocalStorage.getItem(tokenKey)).toBe(`${tokenKey}_value_123`);\n        expect(wsClient).toBeDefined();\n        wsClient.disconnect();\n      });\n    });\n  });\n\n  // ============================================================================\n  // EVENT SUBSCRIPTION - REAL ENTERPRISE SCENARIOS\n  // ============================================================================\n\n  describe('Event Subscription Management', () => {\n    beforeEach(() => {\n      wsClient = createWebSocketClient({\n        url: 'wss://events.company.com/ws',\n      });\n    });\n\n    it('should support multiple subscribers for same event', () => {\n      // Real scenario: multiple UI components listening to same data\n      const subscriber1Handler = jest.fn();\n      const subscriber2Handler = jest.fn();\n\n      const unsub1 = wsClient.subscribe('order_update', subscriber1Handler);\n      const unsub2 = wsClient.subscribe('order_update', subscriber2Handler);\n\n      expect(typeof unsub1).toBe('function');\n      expect(typeof unsub2).toBe('function');\n\n      unsub1();\n      unsub2();\n    });\n\n    it('should handle subscription cleanup', () => {\n      // Real scenario: component unmounts, need to cleanup subscriptions\n      const messageHandler = jest.fn();\n      const unsubscribe = wsClient.subscribe('cleanup_test', messageHandler);\n\n      expect(typeof unsubscribe).toBe('function');\n\n      // Unsubscribe should not throw\n      expect(() => unsubscribe()).not.toThrow();\n    });\n\n    it('should handle subscription errors gracefully', () => {\n      // Real scenario: subscriber callback throws error\n      const errorCallback = jest.fn(() => {\n        throw new Error('Subscriber error');\n      });\n\n      // Should not crash when creating subscription with error-prone callback\n      expect(() => {\n        wsClient.subscribe('error_test', errorCallback);\n      }).not.toThrow();\n    });\n  });\n\n  // ============================================================================\n  // CONNECTION HEALTH MANAGEMENT\n  // ============================================================================\n\n  describe('Connection Health Management', () => {\n    it('should support heartbeat configuration', () => {\n      // Real scenario: enterprise firewalls drop idle connections\n      wsClient = createWebSocketClient({\n        url: 'wss://heartbeat.company.com/ws',\n        enableHeartbeat: true,\n        heartbeatInterval: 30000,\n      });\n\n      expect(wsClient).toBeDefined();\n      expect(wsClient.getState()).toBe(WebSocketState.DISCONNECTED);\n    });\n\n    it('should support heartbeat responses', () => {\n      // Real scenario: server responds to ping with pong\n      wsClient = createWebSocketClient({\n        url: 'wss://pong.company.com/ws',\n        enableHeartbeat: true,\n      });\n\n      expect(wsClient).toBeDefined();\n    });\n\n    it('should allow disabling heartbeat when not needed', () => {\n      // Real scenario: some servers don't need heartbeat\n      wsClient = createWebSocketClient({\n        url: 'wss://no-heartbeat.company.com/ws',\n        enableHeartbeat: false,\n      });\n\n      expect(wsClient).toBeDefined();\n    });\n  });\n\n  // ============================================================================\n  // ERROR HANDLING - REAL ENTERPRISE SCENARIOS\n  // ============================================================================\n\n  describe('Error Handling', () => {\n    it('should provide error handling configuration', () => {\n      // Real scenario: WebSocket server is down\n      wsClient = createWebSocketClient({\n        url: 'wss://down-server.company.com/ws',\n        maxReconnectAttempts: 1,\n      });\n\n      expect(typeof wsClient.onErrorOccurred).toBe('function');\n\n      const errorHandler = jest.fn();\n      wsClient.onErrorOccurred(errorHandler);\n\n      expect(errorHandler).not.toHaveBeenCalled();\n    });\n\n    it('should handle malformed message configuration', () => {\n      // Real scenario: server sends invalid JSON\n      wsClient = createWebSocketClient({\n        url: 'wss://malformed.company.com/ws',\n      });\n\n      expect(wsClient).toBeDefined();\n      expect(typeof wsClient.subscribe).toBe('function');\n    });\n\n    it('should provide error context capabilities', () => {\n      // Real scenario: developers need error details\n      wsClient = createWebSocketClient({\n        url: 'wss://debug.company.com/ws',\n      });\n\n      expect(typeof wsClient.onErrorOccurred).toBe('function');\n      expect(typeof wsClient.onStateChanged).toBe('function');\n    });\n  });\n\n  // ============================================================================\n  // PERFORMANCE - REAL ENTERPRISE SCENARIOS\n  // ============================================================================\n\n  describe('Performance Considerations', () => {\n    it('should handle high-frequency message configuration', () => {\n      // Real scenario: real-time trading data with high message volume\n      wsClient = createWebSocketClient({\n        url: 'wss://high-frequency.company.com/ws',\n      });\n\n      expect(wsClient).toBeDefined();\n      expect(typeof wsClient.subscribe).toBe('function');\n    });\n\n    it('should handle many subscriptions efficiently', () => {\n      // Real scenario: complex dashboard with many data subscriptions\n      wsClient = createWebSocketClient({\n        url: 'wss://dashboard.company.com/ws',\n      });\n\n      const unsubscribers: (() => void)[] = [];\n\n      // Create many subscriptions\n      for (let i = 0; i < 50; i++) {\n        const unsub = wsClient.subscribe(`event_${i}`, () => {\n          // Handle message\n        });\n        unsubscribers.push(unsub);\n      }\n\n      expect(unsubscribers).toHaveLength(50);\n\n      // Cleanup all subscriptions\n      unsubscribers.forEach((unsub) => unsub());\n    });\n  });\n});\n\ndescribe('WebSocket Client Factory', () => {\n  it('should create client with default configuration', () => {\n    // Real scenario: simple client creation\n    const client = createWebSocketClient({\n      url: 'wss://default.company.com/ws',\n    });\n\n    expect(client).toBeInstanceOf(WebSocketClient);\n    expect(client.getState()).toBe(WebSocketState.DISCONNECTED);\n  });\n\n  it('should create client with custom configuration', () => {\n    // Real scenario: enterprise-specific configuration\n    const client = createWebSocketClient({\n      url: 'wss://custom.company.com/ws',\n      protocols: ['chat', 'notifications'],\n      reconnectInterval: 5000,\n      maxReconnectAttempts: 10,\n      timeout: 15000,\n      heartbeatInterval: 60000,\n      enableHeartbeat: true,\n    });\n\n    expect(client).toBeInstanceOf(WebSocketClient);\n    expect(client.getState()).toBe(WebSocketState.DISCONNECTED);\n  });\n});\n"],"version":3}