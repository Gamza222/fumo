7c5c393bce7b3a88e8d3c20a676929bb
"use strict";
/**
 * Analytics Hook Tests
 *
 * Tests for the useAnalytics hook including event tracking,
 * page view tracking, and user interaction tracking.
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Mock the monitoring service
jest.mock('../../lib/monitoring.service');
/* eslint-disable @typescript-eslint/unbound-method */
var react_1 = require("@testing-library/react");
var useAnalytics_1 = require("./useAnalytics");
var monitoring_service_1 = require("../../lib/monitoring.service");
var monitoring_types_1 = require("../../types/monitoring.types");
var infrastructure_1 = require("@/shared/testing/mocks/infrastructure");
var browser_1 = require("@/shared/testing/mocks/browser");
var MockedMonitoringService = monitoring_service_1.MonitoringService;
// Mock the static methods
MockedMonitoringService.getInstance = jest.fn();
describe('useAnalytics', function () {
    var mockInstance;
    beforeEach(function () {
        mockInstance = (0, infrastructure_1.createMockMonitoringServiceInstance)({
            trackEvent: jest.fn(),
            trackPageView: jest.fn(),
        });
        MockedMonitoringService.getInstance.mockReturnValue(mockInstance);
        // Mock window.location using mock factory
        (0, browser_1.mockLocation)('http://localhost/test-page');
    });
    afterEach(function () {
        jest.clearAllMocks();
    });
    it('should track page views automatically', function () {
        (0, react_1.renderHook)(function () { return (0, useAnalytics_1.useAnalytics)({ trackPageViews: true }); });
        expect(mockInstance.trackPageView).toHaveBeenCalledWith('/test-page', undefined);
    });
    it('should not track page views when disabled', function () {
        (0, react_1.renderHook)(function () { return (0, useAnalytics_1.useAnalytics)({ trackPageViews: false }); });
        expect(mockInstance.trackPageView).not.toHaveBeenCalled();
    });
    it('should track page views with userId', function () {
        (0, react_1.renderHook)(function () { return (0, useAnalytics_1.useAnalytics)({ userId: 'user123' }); });
        expect(mockInstance.trackPageView).toHaveBeenCalledWith('/test-page', 'user123');
    });
    it('should provide trackEvent function', function () {
        var result = (0, react_1.renderHook)(function () { return (0, useAnalytics_1.useAnalytics)(); }).result;
        (0, react_1.act)(function () {
            result.current.trackEvent(monitoring_types_1.AnalyticsEventType.CUSTOM_EVENT, 'test_event', { test: 'data' });
        });
        expect(mockInstance.trackEvent).toHaveBeenCalledWith(monitoring_types_1.AnalyticsEventType.CUSTOM_EVENT, 'test_event', { test: 'data' }, undefined);
    });
    it('should provide trackPageView function', function () {
        var result = (0, react_1.renderHook)(function () { return (0, useAnalytics_1.useAnalytics)(); }).result;
        (0, react_1.act)(function () {
            result.current.trackPageView('/custom-page');
        });
        expect(mockInstance.trackPageView).toHaveBeenCalledWith('/custom-page', undefined);
    });
    it('should provide trackUserInteraction function', function () {
        var result = (0, react_1.renderHook)(function () { return (0, useAnalytics_1.useAnalytics)({ trackUserInteractions: true }); }).result;
        (0, react_1.act)(function () {
            result.current.trackUserInteraction('click', 'button', { id: 'submit-btn' });
        });
        expect(mockInstance.trackEvent).toHaveBeenCalledWith(monitoring_types_1.AnalyticsEventType.USER_INTERACTION, 'user_interaction', {
            action: 'click',
            target: 'button',
            id: 'submit-btn',
        }, undefined);
    });
    it('should not track user interactions when disabled', function () {
        var result = (0, react_1.renderHook)(function () { return (0, useAnalytics_1.useAnalytics)({ trackUserInteractions: false }); }).result;
        (0, react_1.act)(function () {
            result.current.trackUserInteraction('click', 'button');
        });
        expect(mockInstance.trackEvent).not.toHaveBeenCalled();
    });
    it('should provide trackPerformance function', function () {
        var result = (0, react_1.renderHook)(function () { return (0, useAnalytics_1.useAnalytics)(); }).result;
        (0, react_1.act)(function () {
            result.current.trackPerformance('page_load', 1500, 'ms');
        });
        expect(mockInstance.trackEvent).toHaveBeenCalledWith(monitoring_types_1.AnalyticsEventType.PERFORMANCE_METRIC, 'performance_metric', { metric: 'page_load', value: 1500, unit: 'ms' }, undefined);
    });
    it('should use default unit for performance tracking', function () {
        var result = (0, react_1.renderHook)(function () { return (0, useAnalytics_1.useAnalytics)(); }).result;
        (0, react_1.act)(function () {
            result.current.trackPerformance('api_response', 200);
        });
        expect(mockInstance.trackEvent).toHaveBeenCalledWith(monitoring_types_1.AnalyticsEventType.PERFORMANCE_METRIC, 'performance_metric', { metric: 'api_response', value: 200, unit: 'ms' }, undefined);
    });
    it('should provide trackError function', function () {
        var result = (0, react_1.renderHook)(function () { return (0, useAnalytics_1.useAnalytics)(); }).result;
        var testError = new Error('Test error');
        testError.stack = 'Error stack trace';
        (0, react_1.act)(function () {
            result.current.trackError(testError, { component: 'test-component' });
        });
        expect(mockInstance.trackEvent).toHaveBeenCalledWith(monitoring_types_1.AnalyticsEventType.ERROR_EVENT, 'error_event', {
            error: {
                name: 'Error',
                message: 'Test error',
                stack: 'Error stack trace',
            },
            context: { component: 'test-component' },
        }, undefined);
    });
    it('should pass userId to all tracking functions', function () {
        var result = (0, react_1.renderHook)(function () { return (0, useAnalytics_1.useAnalytics)({ userId: 'user123' }); }).result;
        (0, react_1.act)(function () {
            result.current.trackEvent(monitoring_types_1.AnalyticsEventType.CUSTOM_EVENT, 'test');
            result.current.trackPageView('/test');
            result.current.trackUserInteraction('click');
            result.current.trackPerformance('test', 100);
            result.current.trackError(new Error('test'));
        });
        expect(mockInstance.trackEvent).toHaveBeenCalledWith(expect.anything(), expect.anything(), expect.anything(), 'user123');
        expect(mockInstance.trackPageView).toHaveBeenCalledWith('/test', 'user123');
    });
    it('should handle route changes', function () {
        (0, react_1.renderHook)(function () { return (0, useAnalytics_1.useAnalytics)(); });
        // Simulate route change
        (0, react_1.act)(function () {
            (0, browser_1.mockLocation)('http://localhost/new-page');
            // Trigger popstate event
            window.dispatchEvent(new PopStateEvent('popstate'));
        });
        expect(mockInstance.trackPageView).toHaveBeenCalledWith('/new-page', undefined);
    });
    it('should clean up event listeners on unmount', function () {
        var removeEventListenerSpy = jest.spyOn(window, 'removeEventListener');
        var unmount = (0, react_1.renderHook)(function () { return (0, useAnalytics_1.useAnalytics)(); }).unmount;
        unmount();
        expect(removeEventListenerSpy).toHaveBeenCalledWith('popstate', expect.any(Function));
        removeEventListenerSpy.mockRestore();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,