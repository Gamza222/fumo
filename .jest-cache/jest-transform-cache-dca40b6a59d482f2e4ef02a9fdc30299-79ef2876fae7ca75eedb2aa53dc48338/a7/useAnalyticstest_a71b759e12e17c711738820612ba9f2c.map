{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/monitoring/hooks/useAnalytics/useAnalytics.test.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/monitoring/hooks/useAnalytics/useAnalytics.test.ts"],"sourcesContent":["/**\n * Analytics Hook Tests\n *\n * Tests for the useAnalytics hook including event tracking,\n * page view tracking, and user interaction tracking.\n */\n\n/* eslint-disable @typescript-eslint/unbound-method */\n\nimport { act, renderHook } from '@testing-library/react';\nimport { useAnalytics } from './useAnalytics';\nimport { MonitoringService } from '../../lib/monitoring.service';\nimport { AnalyticsEventType } from '../../types/monitoring.types';\nimport { createMockMonitoringServiceInstance } from '@/shared/testing/mocks/infrastructure';\nimport { mockLocation } from '@/shared/testing/mocks/browser';\n\n// Mock the monitoring service\njest.mock('../../lib/monitoring.service');\nconst MockedMonitoringService = MonitoringService as any;\n\n// Mock the static methods\nMockedMonitoringService.getInstance = jest.fn();\n\ndescribe('useAnalytics', () => {\n  let mockInstance: jest.Mocked<MonitoringService>;\n\n  beforeEach(() => {\n    mockInstance = createMockMonitoringServiceInstance({\n      trackEvent: jest.fn(),\n      trackPageView: jest.fn(),\n    });\n\n    (MockedMonitoringService.getInstance as jest.Mock).mockReturnValue(mockInstance);\n\n    // Mock window.location using mock factory\n    mockLocation('http://localhost/test-page');\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should track page views automatically', () => {\n    renderHook(() => useAnalytics({ trackPageViews: true }));\n\n    expect(mockInstance.trackPageView).toHaveBeenCalledWith('/test-page', undefined);\n  });\n\n  it('should not track page views when disabled', () => {\n    renderHook(() => useAnalytics({ trackPageViews: false }));\n\n    expect(mockInstance.trackPageView).not.toHaveBeenCalled();\n  });\n\n  it('should track page views with userId', () => {\n    renderHook(() => useAnalytics({ userId: 'user123' }));\n\n    expect(mockInstance.trackPageView).toHaveBeenCalledWith('/test-page', 'user123');\n  });\n\n  it('should provide trackEvent function', () => {\n    const { result } = renderHook(() => useAnalytics());\n\n    act(() => {\n      result.current.trackEvent(AnalyticsEventType.CUSTOM_EVENT, 'test_event', { test: 'data' });\n    });\n\n    expect(mockInstance.trackEvent).toHaveBeenCalledWith(\n      AnalyticsEventType.CUSTOM_EVENT,\n      'test_event',\n      { test: 'data' },\n      undefined\n    );\n  });\n\n  it('should provide trackPageView function', () => {\n    const { result } = renderHook(() => useAnalytics());\n\n    act(() => {\n      result.current.trackPageView('/custom-page');\n    });\n\n    expect(mockInstance.trackPageView).toHaveBeenCalledWith('/custom-page', undefined);\n  });\n\n  it('should provide trackUserInteraction function', () => {\n    const { result } = renderHook(() => useAnalytics({ trackUserInteractions: true }));\n\n    act(() => {\n      result.current.trackUserInteraction('click', 'button', { id: 'submit-btn' });\n    });\n\n    expect(mockInstance.trackEvent).toHaveBeenCalledWith(\n      AnalyticsEventType.USER_INTERACTION,\n      'user_interaction',\n      {\n        action: 'click',\n        target: 'button',\n        id: 'submit-btn',\n      },\n      undefined\n    );\n  });\n\n  it('should not track user interactions when disabled', () => {\n    const { result } = renderHook(() => useAnalytics({ trackUserInteractions: false }));\n\n    act(() => {\n      result.current.trackUserInteraction('click', 'button');\n    });\n\n    expect(mockInstance.trackEvent).not.toHaveBeenCalled();\n  });\n\n  it('should provide trackPerformance function', () => {\n    const { result } = renderHook(() => useAnalytics());\n\n    act(() => {\n      result.current.trackPerformance('page_load', 1500, 'ms');\n    });\n\n    expect(mockInstance.trackEvent).toHaveBeenCalledWith(\n      AnalyticsEventType.PERFORMANCE_METRIC,\n      'performance_metric',\n      { metric: 'page_load', value: 1500, unit: 'ms' },\n      undefined\n    );\n  });\n\n  it('should use default unit for performance tracking', () => {\n    const { result } = renderHook(() => useAnalytics());\n\n    act(() => {\n      result.current.trackPerformance('api_response', 200);\n    });\n\n    expect(mockInstance.trackEvent).toHaveBeenCalledWith(\n      AnalyticsEventType.PERFORMANCE_METRIC,\n      'performance_metric',\n      { metric: 'api_response', value: 200, unit: 'ms' },\n      undefined\n    );\n  });\n\n  it('should provide trackError function', () => {\n    const { result } = renderHook(() => useAnalytics());\n\n    const testError = new Error('Test error');\n    testError.stack = 'Error stack trace';\n\n    act(() => {\n      result.current.trackError(testError, { component: 'test-component' });\n    });\n\n    expect(mockInstance.trackEvent).toHaveBeenCalledWith(\n      AnalyticsEventType.ERROR_EVENT,\n      'error_event',\n      {\n        error: {\n          name: 'Error',\n          message: 'Test error',\n          stack: 'Error stack trace',\n        },\n        context: { component: 'test-component' },\n      },\n      undefined\n    );\n  });\n\n  it('should pass userId to all tracking functions', () => {\n    const { result } = renderHook(() => useAnalytics({ userId: 'user123' }));\n\n    act(() => {\n      result.current.trackEvent(AnalyticsEventType.CUSTOM_EVENT, 'test');\n      result.current.trackPageView('/test');\n      result.current.trackUserInteraction('click');\n      result.current.trackPerformance('test', 100);\n      result.current.trackError(new Error('test'));\n    });\n\n    expect(mockInstance.trackEvent).toHaveBeenCalledWith(\n      expect.anything(),\n      expect.anything(),\n      expect.anything(),\n      'user123'\n    );\n    expect(mockInstance.trackPageView).toHaveBeenCalledWith('/test', 'user123');\n  });\n\n  it('should handle route changes', () => {\n    renderHook(() => useAnalytics());\n\n    // Simulate route change\n    act(() => {\n      mockLocation('http://localhost/new-page');\n\n      // Trigger popstate event\n      window.dispatchEvent(new PopStateEvent('popstate'));\n    });\n\n    expect(mockInstance.trackPageView).toHaveBeenCalledWith('/new-page', undefined);\n  });\n\n  it('should clean up event listeners on unmount', () => {\n    const removeEventListenerSpy = jest.spyOn(window, 'removeEventListener');\n\n    const { unmount } = renderHook(() => useAnalytics());\n\n    unmount();\n\n    expect(removeEventListenerSpy).toHaveBeenCalledWith('popstate', expect.any(Function));\n\n    removeEventListenerSpy.mockRestore();\n  });\n});\n"],"version":3}