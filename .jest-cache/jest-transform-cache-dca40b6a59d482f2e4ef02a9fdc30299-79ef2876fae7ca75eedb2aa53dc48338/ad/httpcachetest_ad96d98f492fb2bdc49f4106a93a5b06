214043c6984a057844270a5d39f4ce78
"use strict";
/**
 * HTTP Caching Tests
 *
 * Comprehensive tests for HTTP caching utilities.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock performance monitor
jest.mock('../performance-monitor', function () { return ({
    performanceMonitor: {
        addMetric: jest.fn(),
        getMetricsByName: jest.fn(),
    },
}); });
var http_cache_1 = require("./http-cache");
describe('HTTP Caching', function () {
    var performanceMonitor;
    beforeEach(function () { return __awaiter(void 0, void 0, void 0, function () {
        var mockPerformanceMonitor;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    jest.clearAllMocks();
                    jest.spyOn(performance, 'now').mockReturnValue(1000);
                    return [4 /*yield*/, Promise.resolve().then(function () { return __importStar(require('../performance-monitor')); })];
                case 1:
                    mockPerformanceMonitor = (_a.sent()).performanceMonitor;
                    performanceMonitor = mockPerformanceMonitor;
                    return [2 /*return*/];
            }
        });
    }); });
    describe('generateCacheControlHeader', function () {
        it('should generate Cache-Control header with max-age', function () {
            var config = {
                maxAge: 3600,
                directives: ['public'],
            };
            var result = (0, http_cache_1.generateCacheControlHeader)(config);
            expect(result).toContain('max-age=3600');
            expect(result).toContain('public');
            expect(performanceMonitor.addMetric).toHaveBeenCalledWith(expect.objectContaining({
                name: 'cache_control_generation',
                value: 0,
                rating: 'good',
            }));
        });
        it('should generate Cache-Control header with s-maxage', function () {
            var config = {
                maxAge: 3600,
                sMaxAge: 7200,
                directives: ['public'],
            };
            var result = (0, http_cache_1.generateCacheControlHeader)(config);
            expect(result).toContain('max-age=3600');
            expect(result).toContain('s-maxage=7200');
            expect(result).toContain('public');
        });
        it('should handle empty config', function () {
            var result = (0, http_cache_1.generateCacheControlHeader)({});
            expect(result).toBe('');
        });
    });
    describe('generateETagHeader', function () {
        it('should generate ETag header for content', function () {
            var content = 'Hello, World!';
            var result = (0, http_cache_1.generateETagHeader)(content);
            expect(result).toMatch(/^"[a-f0-9]+"$/);
            expect(performanceMonitor.addMetric).toHaveBeenCalledWith(expect.objectContaining({
                name: 'etag_generation',
                value: 0,
                rating: 'good',
            }));
        });
        it('should generate consistent ETag for same content', function () {
            var content = 'Hello, World!';
            var result1 = (0, http_cache_1.generateETagHeader)(content);
            var result2 = (0, http_cache_1.generateETagHeader)(content);
            expect(result1).toBe(result2);
        });
        it('should generate different ETag for different content', function () {
            var content1 = 'Hello, World!';
            var content2 = 'Hello, Universe!';
            var result1 = (0, http_cache_1.generateETagHeader)(content1);
            var result2 = (0, http_cache_1.generateETagHeader)(content2);
            expect(result1).not.toBe(result2);
        });
    });
    describe('generateLastModifiedHeader', function () {
        it('should generate Last-Modified header for date', function () {
            var date = new Date('2024-01-01T00:00:00Z');
            var result = (0, http_cache_1.generateLastModifiedHeader)(date);
            expect(result).toBe('Mon, 01 Jan 2024 00:00:00 GMT');
            expect(performanceMonitor.addMetric).toHaveBeenCalledWith(expect.objectContaining({
                name: 'last_modified_generation',
                value: 0,
                rating: 'good',
            }));
        });
        it('should use current date when not provided', function () {
            var result = (0, http_cache_1.generateLastModifiedHeader)();
            expect(result).toMatch(/^[A-Za-z]{3}, \d{2} [A-Za-z]{3} \d{4} \d{2}:\d{2}:\d{2} GMT$/);
        });
    });
    describe('getCacheStrategy', function () {
        it('should return static strategy for static resources', function () {
            var result = (0, http_cache_1.getCacheStrategy)('static');
            expect(result.type).toBe('static');
            expect(result.config.maxAge).toBe(31536000);
            expect(result.config.directives).toContain('immutable');
            expect(performanceMonitor.addMetric).toHaveBeenCalledWith(expect.objectContaining({
                name: 'cache_strategy_lookup',
                value: 0,
                rating: 'good',
            }));
        });
        it('should return dynamic strategy for unknown resources', function () {
            var result = (0, http_cache_1.getCacheStrategy)('unknown');
            expect(result.type).toBe('dynamic');
            expect(result.config.maxAge).toBe(3600);
        });
        it('should return api strategy for api resources', function () {
            var result = (0, http_cache_1.getCacheStrategy)('api');
            expect(result.type).toBe('api');
            expect(result.config.maxAge).toBe(300);
            expect(result.config.lastModified).toBe(false);
        });
    });
    describe('generateCacheHeaders', function () {
        it('should generate cache headers for resource', function () {
            var content = 'Hello, World!';
            var lastModified = new Date('2024-01-01T00:00:00Z');
            var result = (0, http_cache_1.generateCacheHeaders)('static', content, lastModified);
            expect(result['Cache-Control']).toContain('max-age=31536000');
            expect(result['Cache-Control']).toContain('immutable');
            expect(result['ETag']).toMatch(/^"[a-f0-9]+"$/);
            expect(result['Last-Modified']).toBe('Mon, 01 Jan 2024 00:00:00 GMT');
            expect(performanceMonitor.addMetric).toHaveBeenCalledWith(expect.objectContaining({
                name: 'cache_headers_generation',
                value: 0,
                rating: 'good',
            }));
        });
        it('should handle missing lastModified date', function () {
            var content = 'Hello, World!';
            var result = (0, http_cache_1.generateCacheHeaders)('static', content);
            expect(result['Cache-Control']).toContain('max-age=31536000');
            expect(result['ETag']).toMatch(/^"[a-f0-9]+"$/);
            expect(result['Last-Modified']).toMatch(/^[A-Za-z]{3}, \d{2} [A-Za-z]{3} \d{4} \d{2}:\d{2}:\d{2} GMT$/);
        });
    });
    describe('isCacheableRequest', function () {
        it('should return true for GET requests', function () {
            var result = (0, http_cache_1.isCacheableRequest)('GET', {});
            expect(result).toBe(true);
            expect(performanceMonitor.addMetric).toHaveBeenCalledWith(expect.objectContaining({
                name: 'cacheability_check',
                value: 0,
                rating: 'good',
            }));
        });
        it('should return false for non-GET requests', function () {
            var result = (0, http_cache_1.isCacheableRequest)('POST', {});
            expect(result).toBe(false);
        });
        it('should return false for requests with no-cache header', function () {
            var headers = {
                'cache-control': 'no-cache',
            };
            var result = (0, http_cache_1.isCacheableRequest)('GET', headers);
            expect(result).toBe(false);
        });
        it('should return false for requests with pragma no-cache', function () {
            var headers = {
                pragma: 'no-cache',
            };
            var result = (0, http_cache_1.isCacheableRequest)('GET', headers);
            expect(result).toBe(false);
        });
    });
    describe('generateCacheKey', function () {
        it('should generate cache key for resource', function () {
            var result = (0, http_cache_1.generateCacheKey)('static', '/path/to/resource');
            expect(result).toBe('static-/path/to/resource');
            expect(performanceMonitor.addMetric).toHaveBeenCalledWith(expect.objectContaining({
                name: 'cache_key_generation',
                value: 0,
                rating: 'good',
            }));
        });
        it('should include query parameters in cache key', function () {
            var queryParams = {
                param1: 'value1',
                param2: 'value2',
            };
            var result = (0, http_cache_1.generateCacheKey)('static', '/path/to/resource', queryParams);
            expect(result).toContain('static-/path/to/resource?');
            expect(result).toContain('param1=value1');
            expect(result).toContain('param2=value2');
        });
        it('should sort query parameters consistently', function () {
            var queryParams = {
                z: 'value3',
                a: 'value1',
                m: 'value2',
            };
            var result = (0, http_cache_1.generateCacheKey)('static', '/path/to/resource', queryParams);
            expect(result).toContain('a=value1');
            expect(result).toContain('m=value2');
            expect(result).toContain('z=value3');
        });
    });
    describe('getCacheMetrics', function () {
        it('should return cache metrics', function () {
            var mockMetrics = [
                { name: 'cache_control_generation', value: 10 },
                { name: 'etag_generation', value: 5 },
            ];
            performanceMonitor.getMetricsByName.mockImplementation(function (name) {
                return mockMetrics.filter(function (metric) { return metric.name === name; });
            });
            var result = (0, http_cache_1.getCacheMetrics)();
            expect(result).toHaveLength(2);
            expect(performanceMonitor.getMetricsByName).toHaveBeenCalledWith('cache_control_generation');
            expect(performanceMonitor.getMetricsByName).toHaveBeenCalledWith('etag_generation');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,