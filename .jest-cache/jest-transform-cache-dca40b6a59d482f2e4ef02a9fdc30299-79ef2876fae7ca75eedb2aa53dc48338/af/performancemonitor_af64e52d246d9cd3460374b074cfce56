4d3e8d2ebd2a196bf4bf973da419e35a
"use strict";
/**
 * Performance monitoring utilities
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.performanceMonitor = exports.PerformanceMonitor = void 0;
exports.measurePerformance = measurePerformance;
exports.measureAsyncPerformance = measureAsyncPerformance;
exports.getPerformanceTiming = getPerformanceTiming;
exports.getNavigationTiming = getNavigationTiming;
var performance_enums_1 = require("../../types/performance.enums");
/**
 * Performance monitoring class
 */
var PerformanceMonitor = /** @class */ (function () {
    function PerformanceMonitor() {
        this.metrics = [];
        this.observers = [];
    }
    /**
     * Add a performance metric
     */
    PerformanceMonitor.prototype.addMetric = function (metric) {
        this.metrics.push(metric);
        this.notifyObservers();
    };
    /**
     * Get all metrics
     */
    PerformanceMonitor.prototype.getMetrics = function () {
        return __spreadArray([], this.metrics, true);
    };
    /**
     * Get metrics by name
     */
    PerformanceMonitor.prototype.getMetricsByName = function (name) {
        return this.metrics.filter(function (metric) { return metric.name === name; });
    };
    /**
     * Clear all metrics
     */
    PerformanceMonitor.prototype.clear = function () {
        this.metrics = [];
        this.notifyObservers();
    };
    /**
     * Subscribe to performance updates
     */
    PerformanceMonitor.prototype.subscribe = function (callback) {
        var _this = this;
        this.observers.push(callback);
        return function () {
            var index = _this.observers.indexOf(callback);
            if (index > -1) {
                _this.observers.splice(index, 1);
            }
        };
    };
    /**
     * Generate performance report
     */
    PerformanceMonitor.prototype.generateReport = function () {
        var goodMetrics = this.metrics.filter(function (m) { return m.rating === performance_enums_1.PerformanceRating.GOOD; }).length;
        var needsImprovementMetrics = this.metrics.filter(function (m) { return m.rating === performance_enums_1.PerformanceRating.NEEDS_IMPROVEMENT; }).length;
        var poorMetrics = this.metrics.filter(function (m) { return m.rating === performance_enums_1.PerformanceRating.POOR; }).length;
        return {
            metrics: __spreadArray([], this.metrics, true),
            summary: {
                totalMetrics: this.metrics.length,
                goodMetrics: goodMetrics,
                needsImprovementMetrics: needsImprovementMetrics,
                poorMetrics: poorMetrics,
            },
            timestamp: Date.now(),
        };
    };
    /**
     * Notify observers of changes
     */
    PerformanceMonitor.prototype.notifyObservers = function () {
        var report = this.generateReport();
        this.observers.forEach(function (callback) { return callback(report); });
    };
    return PerformanceMonitor;
}());
exports.PerformanceMonitor = PerformanceMonitor;
// Global performance monitor instance
exports.performanceMonitor = new PerformanceMonitor();
/**
 * Measure function execution time
 */
function measurePerformance(name, fn) {
    var start = performance.now();
    var result = fn();
    var end = performance.now();
    exports.performanceMonitor.addMetric({
        name: name,
        value: end - start,
        timestamp: Date.now(),
    });
    return result;
}
/**
 * Measure async function execution time
 */
function measureAsyncPerformance(name, fn) {
    return __awaiter(this, void 0, Promise, function () {
        var start, result, end;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    start = performance.now();
                    return [4 /*yield*/, fn()];
                case 1:
                    result = _a.sent();
                    end = performance.now();
                    exports.performanceMonitor.addMetric({
                        name: name,
                        value: end - start,
                        timestamp: Date.now(),
                    });
                    return [2 /*return*/, result];
            }
        });
    });
}
/**
 * Get performance timing information
 */
function getPerformanceTiming() {
    return performance.timing;
}
/**
 * Get navigation timing information
 */
function getNavigationTiming() {
    var entries = window.performance.getEntriesByType('navigation');
    return entries && entries.length > 0 ? entries[0] : undefined;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,