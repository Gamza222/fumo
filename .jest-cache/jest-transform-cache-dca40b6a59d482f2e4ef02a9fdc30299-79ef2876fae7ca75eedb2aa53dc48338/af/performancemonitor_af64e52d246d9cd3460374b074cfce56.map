{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/performance/lib/performance-monitor/performance-monitor.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/performance/lib/performance-monitor/performance-monitor.ts"],"sourcesContent":["/**\n * Performance monitoring utilities\n */\n\nimport type { PerformanceMetric, PerformanceReport } from '../../types/performance.types';\nimport { PerformanceRating } from '../../types/performance.enums';\n\n/**\n * Performance monitoring class\n */\nexport class PerformanceMonitor {\n  private metrics: PerformanceMetric[] = [];\n  private observers: ((report: PerformanceReport) => void)[] = [];\n\n  /**\n   * Add a performance metric\n   */\n  addMetric(metric: PerformanceMetric): void {\n    this.metrics.push(metric);\n    this.notifyObservers();\n  }\n\n  /**\n   * Get all metrics\n   */\n  getMetrics(): PerformanceMetric[] {\n    return [...this.metrics];\n  }\n\n  /**\n   * Get metrics by name\n   */\n  getMetricsByName(name: string): PerformanceMetric[] {\n    return this.metrics.filter((metric) => metric.name === name);\n  }\n\n  /**\n   * Clear all metrics\n   */\n  clear(): void {\n    this.metrics = [];\n    this.notifyObservers();\n  }\n\n  /**\n   * Subscribe to performance updates\n   */\n  subscribe(callback: (report: PerformanceReport) => void): () => void {\n    this.observers.push(callback);\n    return () => {\n      const index = this.observers.indexOf(callback);\n      if (index > -1) {\n        this.observers.splice(index, 1);\n      }\n    };\n  }\n\n  /**\n   * Generate performance report\n   */\n  generateReport(): PerformanceReport {\n    const goodMetrics = this.metrics.filter((m) => m.rating === PerformanceRating.GOOD).length;\n    const needsImprovementMetrics = this.metrics.filter(\n      (m) => m.rating === PerformanceRating.NEEDS_IMPROVEMENT\n    ).length;\n    const poorMetrics = this.metrics.filter((m) => m.rating === PerformanceRating.POOR).length;\n\n    return {\n      metrics: [...this.metrics],\n      summary: {\n        totalMetrics: this.metrics.length,\n        goodMetrics,\n        needsImprovementMetrics,\n        poorMetrics,\n      },\n      timestamp: Date.now(),\n    };\n  }\n\n  /**\n   * Notify observers of changes\n   */\n  private notifyObservers(): void {\n    const report = this.generateReport();\n    this.observers.forEach((callback) => callback(report));\n  }\n}\n\n// Global performance monitor instance\nexport const performanceMonitor = new PerformanceMonitor();\n\n/**\n * Measure function execution time\n */\nexport function measurePerformance<T>(name: string, fn: () => T): T {\n  const start = performance.now();\n  const result = fn();\n  const end = performance.now();\n\n  performanceMonitor.addMetric({\n    name,\n    value: end - start,\n    timestamp: Date.now(),\n  });\n\n  return result;\n}\n\n/**\n * Measure async function execution time\n */\nexport async function measureAsyncPerformance<T>(name: string, fn: () => Promise<T>): Promise<T> {\n  const start = performance.now();\n  const result = await fn();\n  const end = performance.now();\n\n  performanceMonitor.addMetric({\n    name,\n    value: end - start,\n    timestamp: Date.now(),\n  });\n\n  return result;\n}\n\n/**\n * Get performance timing information\n */\nexport function getPerformanceTiming() {\n  return performance.timing;\n}\n\n/**\n * Get navigation timing information\n */\nexport function getNavigationTiming() {\n  const entries = window.performance.getEntriesByType('navigation');\n  return entries && entries.length > 0 ? (entries[0] as PerformanceNavigationTiming) : undefined;\n}\n"],"version":3}