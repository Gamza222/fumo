73d9a50e49ce8d7b86fa968931f6f15a
"use strict";

/* istanbul ignore next */
function cov_z8xknqpof() {
  var path = "/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/data/react-query/queryClient.ts";
  var hash = "35a4476549f12b7353c9de71c4fec5756aa7e307";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/data/react-query/queryClient.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 29
        }
      },
      "2": {
        start: {
          line: 4,
          column: 20
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "3": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 26,
          column: 3
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 16,
          column: 17
        }
      },
      "5": {
        start: {
          line: 13,
          column: 33
        },
        end: {
          line: 13,
          column: 45
        }
      },
      "6": {
        start: {
          line: 14,
          column: 20
        },
        end: {
          line: 15,
          column: 37
        }
      },
      "7": {
        start: {
          line: 15,
          column: 24
        },
        end: {
          line: 15,
          column: 37
        }
      },
      "8": {
        start: {
          line: 17,
          column: 16
        },
        end: {
          line: 17,
          column: 40
        }
      },
      "9": {
        start: {
          line: 19,
          column: 50
        },
        end: {
          line: 19,
          column: 107
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 19
          },
          end: {
            line: 10,
            column: 20
          }
        },
        loc: {
          start: {
            line: 10,
            column: 50
          },
          end: {
            line: 18,
            column: 13
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 19,
            column: 24
          },
          end: {
            line: 19,
            column: 25
          }
        },
        loc: {
          start: {
            line: 19,
            column: 48
          },
          end: {
            line: 19,
            column: 109
          }
        },
        line: 19
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 16
          },
          end: {
            line: 16,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 12,
            column: 16
          },
          end: {
            line: 16,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 12
      },
      "1": {
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 12,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 12,
            column: 25
          }
        }, {
          start: {
            line: 12,
            column: 29
          },
          end: {
            line: 12,
            column: 54
          }
        }, {
          start: {
            line: 12,
            column: 58
          },
          end: {
            line: 12,
            column: 75
          }
        }],
        line: 12
      },
      "2": {
        loc: {
          start: {
            line: 14,
            column: 20
          },
          end: {
            line: 15,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 14,
            column: 20
          },
          end: {
            line: 15,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 14
      },
      "3": {
        loc: {
          start: {
            line: 14,
            column: 24
          },
          end: {
            line: 14,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 14,
            column: 24
          },
          end: {
            line: 14,
            column: 37
          }
        }, {
          start: {
            line: 14,
            column: 41
          },
          end: {
            line: 14,
            column: 53
          }
        }],
        line: 14
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/data/react-query/queryClient.ts",
      mappings: ";;;AAAA,qDAAoD;AAEvC,QAAA,WAAW,GAAG,IAAI,yBAAW,CAAC;IACzC,cAAc,EAAE;QACd,OAAO,EAAE;YACP,0CAA0C;YAC1C,YAAY,EAAE,IAAI;YAElB,KAAK,EAAE,UAAC,YAAY,EAAE,KAAc;gBAClC,4BAA4B;gBAC5B,IAAI,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,QAAQ,IAAI,KAAK,EAAE,CAAC;oBAC5D,IAAM,MAAM,GAAI,KAA4B,CAAC,MAAM,CAAC;oBACpD,IAAI,MAAM,IAAI,GAAG,IAAI,MAAM,GAAG,GAAG;wBAAE,OAAO,KAAK,CAAC;gBAClD,CAAC;gBACD,OAAO,YAAY,GAAG,CAAC,CAAC;YAC1B,CAAC;YACD,UAAU,EAAE,UAAC,YAAY,IAAK,OAAA,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,SAAA,CAAC,EAAI,YAAY,CAAA,EAAE,KAAK,CAAC,EAAzC,CAAyC;YACvE,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI;SACzB;QACD,SAAS,EAAE;YACT,KAAK,EAAE,CAAC;SACT;KACF;CACF,CAAC,CAAC",
      names: [],
      sources: ["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/data/react-query/queryClient.ts"],
      sourcesContent: ["import { QueryClient } from '@tanstack/react-query';\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      // Enable Suspense mode for React Query v5\n      throwOnError: true,\n\n      retry: (failureCount, error: unknown) => {\n        // Don't retry on 4xx errors\n        if (error && typeof error === 'object' && 'status' in error) {\n          const status = (error as { status: number }).status;\n          if (status >= 400 && status < 500) return false;\n        }\n        return failureCount < 3;\n      },\n      retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),\n      staleTime: 5 * 60 * 1000,\n    },\n    mutations: {\n      retry: 1,\n    },\n  },\n});\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "35a4476549f12b7353c9de71c4fec5756aa7e307"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_z8xknqpof = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_z8xknqpof();
cov_z8xknqpof().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_z8xknqpof().s[1]++;
exports.queryClient = void 0;
var react_query_1 =
/* istanbul ignore next */
(cov_z8xknqpof().s[2]++, require("@tanstack/react-query"));
/* istanbul ignore next */
cov_z8xknqpof().s[3]++;
exports.queryClient = new react_query_1.QueryClient({
  defaultOptions: {
    queries: {
      // Enable Suspense mode for React Query v5
      throwOnError: true,
      retry: function (failureCount, error) {
        /* istanbul ignore next */
        cov_z8xknqpof().f[0]++;
        cov_z8xknqpof().s[4]++;
        // Don't retry on 4xx errors
        if (
        /* istanbul ignore next */
        (cov_z8xknqpof().b[1][0]++, error) &&
        /* istanbul ignore next */
        (cov_z8xknqpof().b[1][1]++, typeof error === 'object') &&
        /* istanbul ignore next */
        (cov_z8xknqpof().b[1][2]++, 'status' in error)) {
          /* istanbul ignore next */
          cov_z8xknqpof().b[0][0]++;
          var status =
          /* istanbul ignore next */
          (cov_z8xknqpof().s[5]++, error.status);
          /* istanbul ignore next */
          cov_z8xknqpof().s[6]++;
          if (
          /* istanbul ignore next */
          (cov_z8xknqpof().b[3][0]++, status >= 400) &&
          /* istanbul ignore next */
          (cov_z8xknqpof().b[3][1]++, status < 500)) {
            /* istanbul ignore next */
            cov_z8xknqpof().b[2][0]++;
            cov_z8xknqpof().s[7]++;
            return false;
          } else
          /* istanbul ignore next */
          {
            cov_z8xknqpof().b[2][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_z8xknqpof().b[0][1]++;
        }
        cov_z8xknqpof().s[8]++;
        return failureCount < 3;
      },
      retryDelay: function (attemptIndex) {
        /* istanbul ignore next */
        cov_z8xknqpof().f[1]++;
        cov_z8xknqpof().s[9]++;
        return Math.min(1000 * Math.pow(2, attemptIndex), 30000);
      },
      staleTime: 5 * 60 * 1000
    },
    mutations: {
      retry: 1
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF9xdWVyeV8xIiwiY292X3o4eGtucXBvZiIsInMiLCJyZXF1aXJlIiwiZXhwb3J0cyIsInF1ZXJ5Q2xpZW50IiwiUXVlcnlDbGllbnQiLCJkZWZhdWx0T3B0aW9ucyIsInF1ZXJpZXMiLCJ0aHJvd09uRXJyb3IiLCJyZXRyeSIsImZhaWx1cmVDb3VudCIsImVycm9yIiwiZiIsImIiLCJzdGF0dXMiLCJyZXRyeURlbGF5IiwiYXR0ZW1wdEluZGV4IiwiTWF0aCIsIm1pbiIsInBvdyIsInN0YWxlVGltZSIsIm11dGF0aW9ucyJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9nYW16YXJhbWF6YW5vdi9EZXNrdG9wL2Z1bW8vc3JjL2luZnJhc3RydWN0dXJlL2RhdGEvcmVhY3QtcXVlcnkvcXVlcnlDbGllbnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUXVlcnlDbGllbnQgfSBmcm9tICdAdGFuc3RhY2svcmVhY3QtcXVlcnknO1xuXG5leHBvcnQgY29uc3QgcXVlcnlDbGllbnQgPSBuZXcgUXVlcnlDbGllbnQoe1xuICBkZWZhdWx0T3B0aW9uczoge1xuICAgIHF1ZXJpZXM6IHtcbiAgICAgIC8vIEVuYWJsZSBTdXNwZW5zZSBtb2RlIGZvciBSZWFjdCBRdWVyeSB2NVxuICAgICAgdGhyb3dPbkVycm9yOiB0cnVlLFxuXG4gICAgICByZXRyeTogKGZhaWx1cmVDb3VudCwgZXJyb3I6IHVua25vd24pID0+IHtcbiAgICAgICAgLy8gRG9uJ3QgcmV0cnkgb24gNHh4IGVycm9yc1xuICAgICAgICBpZiAoZXJyb3IgJiYgdHlwZW9mIGVycm9yID09PSAnb2JqZWN0JyAmJiAnc3RhdHVzJyBpbiBlcnJvcikge1xuICAgICAgICAgIGNvbnN0IHN0YXR1cyA9IChlcnJvciBhcyB7IHN0YXR1czogbnVtYmVyIH0pLnN0YXR1cztcbiAgICAgICAgICBpZiAoc3RhdHVzID49IDQwMCAmJiBzdGF0dXMgPCA1MDApIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFpbHVyZUNvdW50IDwgMztcbiAgICAgIH0sXG4gICAgICByZXRyeURlbGF5OiAoYXR0ZW1wdEluZGV4KSA9PiBNYXRoLm1pbigxMDAwICogMiAqKiBhdHRlbXB0SW5kZXgsIDMwMDAwKSxcbiAgICAgIHN0YWxlVGltZTogNSAqIDYwICogMTAwMCxcbiAgICB9LFxuICAgIG11dGF0aW9uczoge1xuICAgICAgcmV0cnk6IDEsXG4gICAgfSxcbiAgfSxcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUFBLGFBQUE7QUFBQTtBQUFBLENBQUFDLGFBQUEsR0FBQUMsQ0FBQSxPQUFBQyxPQUFBO0FBQW9EO0FBQUFGLGFBQUEsR0FBQUMsQ0FBQTtBQUV2Q0UsT0FBQSxDQUFBQyxXQUFXLEdBQUcsSUFBSUwsYUFBQSxDQUFBTSxXQUFXLENBQUM7RUFDekNDLGNBQWMsRUFBRTtJQUNkQyxPQUFPLEVBQUU7TUFDUDtNQUNBQyxZQUFZLEVBQUUsSUFBSTtNQUVsQkMsS0FBSyxFQUFFLFNBQUFBLENBQUNDLFlBQVksRUFBRUMsS0FBYztRQUFBO1FBQUFYLGFBQUEsR0FBQVksQ0FBQTtRQUFBWixhQUFBLEdBQUFDLENBQUE7UUFDbEM7UUFDQTtRQUFJO1FBQUEsQ0FBQUQsYUFBQSxHQUFBYSxDQUFBLFVBQUFGLEtBQUs7UUFBQTtRQUFBLENBQUFYLGFBQUEsR0FBQWEsQ0FBQSxVQUFJLE9BQU9GLEtBQUssS0FBSyxRQUFRO1FBQUE7UUFBQSxDQUFBWCxhQUFBLEdBQUFhLENBQUEsVUFBSSxRQUFRLElBQUlGLEtBQUssR0FBRTtVQUFBO1VBQUFYLGFBQUEsR0FBQWEsQ0FBQTtVQUMzRCxJQUFNQyxNQUFNO1VBQUE7VUFBQSxDQUFBZCxhQUFBLEdBQUFDLENBQUEsT0FBSVUsS0FBNEIsQ0FBQ0csTUFBTTtVQUFDO1VBQUFkLGFBQUEsR0FBQUMsQ0FBQTtVQUNwRDtVQUFJO1VBQUEsQ0FBQUQsYUFBQSxHQUFBYSxDQUFBLFVBQUFDLE1BQU0sSUFBSSxHQUFHO1VBQUE7VUFBQSxDQUFBZCxhQUFBLEdBQUFhLENBQUEsVUFBSUMsTUFBTSxHQUFHLEdBQUcsR0FBRTtZQUFBO1lBQUFkLGFBQUEsR0FBQWEsQ0FBQTtZQUFBYixhQUFBLEdBQUFDLENBQUE7WUFBQSxPQUFPLEtBQUs7VUFBQSxDQUFDO1VBQUE7VUFBQTtZQUFBRCxhQUFBLEdBQUFhLENBQUE7VUFBQTtRQUNsRCxDQUFDO1FBQUE7UUFBQTtVQUFBYixhQUFBLEdBQUFhLENBQUE7UUFBQTtRQUFBYixhQUFBLEdBQUFDLENBQUE7UUFDRCxPQUFPUyxZQUFZLEdBQUcsQ0FBQztNQUN6QixDQUFDO01BQ0RLLFVBQVUsRUFBRSxTQUFBQSxDQUFDQyxZQUFZO1FBQUE7UUFBQWhCLGFBQUEsR0FBQVksQ0FBQTtRQUFBWixhQUFBLEdBQUFDLENBQUE7UUFBSyxPQUFBZ0IsSUFBSSxDQUFDQyxHQUFHLENBQUMsSUFBSSxHQUFHRCxJQUFBLENBQUFFLEdBQUEsRUFBQyxFQUFJSCxZQUFZLEdBQUUsS0FBSyxDQUFDO01BQXpDLENBQXlDO01BQ3ZFSSxTQUFTLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRztLQUNyQjtJQUNEQyxTQUFTLEVBQUU7TUFDVFosS0FBSyxFQUFFOzs7Q0FHWixDQUFDIiwiaWdub3JlTGlzdCI6W119