60ef8ba0599212dfe383e838a520721b
"use strict";

/**
 * Monitoring Service Mock
 *
 * Mock factory for MonitoringService with comprehensive test scenarios.
 * Follows the established mock factory pattern for enterprise testing.
 */
/* istanbul ignore next */
function cov_1pslzqezxh() {
  var path = "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/monitoring/monitoringService.mock.ts";
  var hash = "cb0550d5597a05a527446504d5274e3fb4fc8680";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/monitoring/monitoringService.mock.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 18,
          column: 1
        }
      },
      "1": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 16,
          column: 6
        }
      },
      "2": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 14,
          column: 9
        }
      },
      "3": {
        start: {
          line: 10,
          column: 24
        },
        end: {
          line: 10,
          column: 25
        }
      },
      "4": {
        start: {
          line: 10,
          column: 31
        },
        end: {
          line: 10,
          column: 47
        }
      },
      "5": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 11,
          column: 29
        }
      },
      "6": {
        start: {
          line: 12,
          column: 12
        },
        end: {
          line: 13,
          column: 28
        }
      },
      "7": {
        start: {
          line: 12,
          column: 29
        },
        end: {
          line: 13,
          column: 28
        }
      },
      "8": {
        start: {
          line: 13,
          column: 16
        },
        end: {
          line: 13,
          column: 28
        }
      },
      "9": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 17
        }
      },
      "10": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 43
        }
      },
      "11": {
        start: {
          line: 19,
          column: 0
        },
        end: {
          line: 19,
          column: 62
        }
      },
      "12": {
        start: {
          line: 20,
          column: 0
        },
        end: {
          line: 20,
          column: 346
        }
      },
      "13": {
        start: {
          line: 21,
          column: 25
        },
        end: {
          line: 21,
          column: 86
        }
      },
      "14": {
        start: {
          line: 28,
          column: 42
        },
        end: {
          line: 41,
          column: 1
        }
      },
      "15": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 29,
          column: 49
        }
      },
      "16": {
        start: {
          line: 29,
          column: 32
        },
        end: {
          line: 29,
          column: 47
        }
      },
      "17": {
        start: {
          line: 30,
          column: 22
        },
        end: {
          line: 39,
          column: 5
        }
      },
      "18": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 40,
          column: 58
        }
      },
      "19": {
        start: {
          line: 42,
          column: 0
        },
        end: {
          line: 42,
          column: 82
        }
      },
      "20": {
        start: {
          line: 46,
          column: 39
        },
        end: {
          line: 51,
          column: 1
        }
      },
      "21": {
        start: {
          line: 47,
          column: 23
        },
        end: {
          line: 47,
          column: 89
        }
      },
      "22": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 50,
          column: 6
        }
      },
      "23": {
        start: {
          line: 52,
          column: 0
        },
        end: {
          line: 52,
          column: 76
        }
      },
      "24": {
        start: {
          line: 59,
          column: 0
        },
        end: {
          line: 136,
          column: 3
        }
      },
      "25": {
        start: {
          line: 140,
          column: 0
        },
        end: {
          line: 140,
          column: 116
        }
      },
      "26": {
        start: {
          line: 147,
          column: 32
        },
        end: {
          line: 171,
          column: 1
        }
      },
      "27": {
        start: {
          line: 148,
          column: 4
        },
        end: {
          line: 170,
          column: 7
        }
      },
      "28": {
        start: {
          line: 172,
          column: 0
        },
        end: {
          line: 172,
          column: 62
        }
      },
      "29": {
        start: {
          line: 176,
          column: 31
        },
        end: {
          line: 206,
          column: 1
        }
      },
      "30": {
        start: {
          line: 177,
          column: 4
        },
        end: {
          line: 205,
          column: 7
        }
      },
      "31": {
        start: {
          line: 207,
          column: 0
        },
        end: {
          line: 207,
          column: 60
        }
      },
      "32": {
        start: {
          line: 211,
          column: 29
        },
        end: {
          line: 216,
          column: 1
        }
      },
      "33": {
        start: {
          line: 212,
          column: 4
        },
        end: {
          line: 215,
          column: 7
        }
      },
      "34": {
        start: {
          line: 217,
          column: 0
        },
        end: {
          line: 217,
          column: 56
        }
      },
      "35": {
        start: {
          line: 224,
          column: 34
        },
        end: {
          line: 230,
          column: 1
        }
      },
      "36": {
        start: {
          line: 225,
          column: 4
        },
        end: {
          line: 229,
          column: 7
        }
      },
      "37": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 228,
          column: 9
        }
      },
      "38": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 31
        }
      },
      "39": {
        start: {
          line: 231,
          column: 0
        },
        end: {
          line: 231,
          column: 66
        }
      },
      "40": {
        start: {
          line: 235,
          column: 33
        },
        end: {
          line: 251,
          column: 1
        }
      },
      "41": {
        start: {
          line: 236,
          column: 4
        },
        end: {
          line: 236,
          column: 54
        }
      },
      "42": {
        start: {
          line: 236,
          column: 31
        },
        end: {
          line: 236,
          column: 52
        }
      },
      "43": {
        start: {
          line: 237,
          column: 4
        },
        end: {
          line: 250,
          column: 5
        }
      },
      "44": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 239,
          column: 115
        }
      },
      "45": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 18
        }
      },
      "46": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 119
        }
      },
      "47": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 18
        }
      },
      "48": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 118
        }
      },
      "49": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 18
        }
      },
      "50": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 87
        }
      },
      "51": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 18
        }
      },
      "52": {
        start: {
          line: 252,
          column: 0
        },
        end: {
          line: 252,
          column: 64
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 42
          },
          end: {
            line: 8,
            column: 43
          }
        },
        loc: {
          start: {
            line: 8,
            column: 54
          },
          end: {
            line: 18,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 9,
            column: 32
          },
          end: {
            line: 9,
            column: 33
          }
        },
        loc: {
          start: {
            line: 9,
            column: 44
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 9
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 28,
            column: 42
          },
          end: {
            line: 28,
            column: 43
          }
        },
        loc: {
          start: {
            line: 28,
            column: 63
          },
          end: {
            line: 41,
            column: 1
          }
        },
        line: 28
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 46,
            column: 39
          },
          end: {
            line: 46,
            column: 40
          }
        },
        loc: {
          start: {
            line: 46,
            column: 63
          },
          end: {
            line: 51,
            column: 1
          }
        },
        line: 46
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 147,
            column: 32
          },
          end: {
            line: 147,
            column: 33
          }
        },
        loc: {
          start: {
            line: 147,
            column: 44
          },
          end: {
            line: 171,
            column: 1
          }
        },
        line: 147
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 176,
            column: 31
          },
          end: {
            line: 176,
            column: 32
          }
        },
        loc: {
          start: {
            line: 176,
            column: 43
          },
          end: {
            line: 206,
            column: 1
          }
        },
        line: 176
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 211,
            column: 29
          },
          end: {
            line: 211,
            column: 30
          }
        },
        loc: {
          start: {
            line: 211,
            column: 41
          },
          end: {
            line: 216,
            column: 1
          }
        },
        line: 211
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 224,
            column: 34
          },
          end: {
            line: 224,
            column: 35
          }
        },
        loc: {
          start: {
            line: 224,
            column: 58
          },
          end: {
            line: 230,
            column: 1
          }
        },
        line: 224
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 225,
            column: 40
          },
          end: {
            line: 225,
            column: 41
          }
        },
        loc: {
          start: {
            line: 225,
            column: 58
          },
          end: {
            line: 229,
            column: 5
          }
        },
        line: 225
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 235,
            column: 33
          },
          end: {
            line: 235,
            column: 34
          }
        },
        loc: {
          start: {
            line: 235,
            column: 67
          },
          end: {
            line: 251,
            column: 1
          }
        },
        line: 235
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 8,
            column: 15
          },
          end: {
            line: 18,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 16
          },
          end: {
            line: 8,
            column: 20
          }
        }, {
          start: {
            line: 8,
            column: 24
          },
          end: {
            line: 8,
            column: 37
          }
        }, {
          start: {
            line: 8,
            column: 42
          },
          end: {
            line: 18,
            column: 1
          }
        }],
        line: 8
      },
      "1": {
        loc: {
          start: {
            line: 9,
            column: 15
          },
          end: {
            line: 16,
            column: 5
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 9,
            column: 15
          },
          end: {
            line: 9,
            column: 28
          }
        }, {
          start: {
            line: 9,
            column: 32
          },
          end: {
            line: 16,
            column: 5
          }
        }],
        line: 9
      },
      "2": {
        loc: {
          start: {
            line: 12,
            column: 29
          },
          end: {
            line: 13,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 12,
            column: 29
          },
          end: {
            line: 13,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 12
      },
      "3": {
        loc: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "4": {
        loc: {
          start: {
            line: 47,
            column: 23
          },
          end: {
            line: 47,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 23
          },
          end: {
            line: 47,
            column: 35
          }
        }, {
          start: {
            line: 47,
            column: 39
          },
          end: {
            line: 47,
            column: 89
          }
        }],
        line: 47
      },
      "5": {
        loc: {
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 228,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 228,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 226
      },
      "6": {
        loc: {
          start: {
            line: 236,
            column: 4
          },
          end: {
            line: 236,
            column: 54
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 4
          },
          end: {
            line: 236,
            column: 54
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 236
      },
      "7": {
        loc: {
          start: {
            line: 237,
            column: 4
          },
          end: {
            line: 250,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 238,
            column: 8
          },
          end: {
            line: 240,
            column: 18
          }
        }, {
          start: {
            line: 241,
            column: 8
          },
          end: {
            line: 243,
            column: 18
          }
        }, {
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 246,
            column: 18
          }
        }, {
          start: {
            line: 247,
            column: 8
          },
          end: {
            line: 249,
            column: 18
          }
        }],
        line: 237
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0, 0, 0]
    },
    inputSourceMap: {
      file: "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/monitoring/monitoringService.mock.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/monitoring/monitoringService.mock.ts"],
      sourcesContent: ["/**\n * Monitoring Service Mock\n *\n * Mock factory for MonitoringService with comprehensive test scenarios.\n * Follows the established mock factory pattern for enterprise testing.\n */\n\nimport { MonitoringService } from '@/infrastructure/monitoring';\nimport { HealthStatus } from '@/infrastructure/monitoring/types/monitoring.types';\n\n// ============================================================================\n// MOCK FACTORY FUNCTIONS\n// ============================================================================\n\n/**\n * Create a mock MonitoringService instance with customizable methods\n */\nexport const createMockMonitoringServiceInstance = (\n  overrides: Partial<{\n    getSystemHealth: jest.Mock;\n    getDashboardData: jest.Mock;\n    trackEvent: jest.Mock;\n    trackPageView: jest.Mock;\n    addMetric: jest.Mock;\n    addAlert: jest.Mock;\n    updateConfig: jest.Mock;\n    getAnalyticsSession: jest.Mock;\n  }> = {}\n): jest.Mocked<MonitoringService> => {\n  const defaultMock = {\n    getSystemHealth: jest.fn(),\n    getDashboardData: jest.fn(),\n    trackEvent: jest.fn(),\n    trackPageView: jest.fn(),\n    addMetric: jest.fn(),\n    addAlert: jest.fn(),\n    updateConfig: jest.fn(),\n    getAnalyticsSession: jest.fn(),\n  };\n\n  return {\n    ...defaultMock,\n    ...overrides,\n  } as unknown as jest.Mocked<MonitoringService>;\n};\n\n/**\n * Create a mock MonitoringService class with getInstance method\n */\nexport const createMockMonitoringServiceClass = (instanceMock?: jest.Mocked<MonitoringService>) => {\n  const mockInstance = instanceMock || createMockMonitoringServiceInstance();\n\n  return {\n    getInstance: jest.fn().mockReturnValue(mockInstance),\n  } as unknown as typeof MonitoringService;\n};\n\n// ============================================================================\n// DEFAULT MOCK INSTANCES\n// ============================================================================\n\n/**\n * Default mock MonitoringService instance with healthy system responses\n */\nexport const defaultMonitoringServiceMock = createMockMonitoringServiceInstance({\n  getSystemHealth: jest.fn().mockResolvedValue({\n    status: HealthStatus.HEALTHY,\n    timestamp: new Date('2024-01-01T00:00:00Z'),\n    uptime: 3600000,\n    version: '1.0.0',\n    services: [\n      {\n        name: 'database',\n        status: HealthStatus.HEALTHY,\n        responseTime: 5,\n        lastCheck: new Date('2024-01-01T00:00:00Z'),\n      },\n      {\n        name: 'api',\n        status: HealthStatus.HEALTHY,\n        responseTime: 10,\n        lastCheck: new Date('2024-01-01T00:00:00Z'),\n      },\n    ],\n    summary: {\n      total: 2,\n      healthy: 2,\n      degraded: 0,\n      unhealthy: 0,\n    },\n  }),\n  getDashboardData: jest.fn().mockResolvedValue({\n    systemHealth: {\n      status: HealthStatus.HEALTHY,\n      timestamp: new Date('2024-01-01T00:00:00Z'),\n      uptime: 3600000,\n      version: '1.0.0',\n      services: [\n        {\n          name: 'database',\n          status: HealthStatus.HEALTHY,\n          responseTime: 5,\n          lastCheck: new Date('2024-01-01T00:00:00Z'),\n        },\n        {\n          name: 'api',\n          status: HealthStatus.HEALTHY,\n          responseTime: 10,\n          lastCheck: new Date('2024-01-01T00:00:00Z'),\n        },\n      ],\n      summary: {\n        total: 2,\n        healthy: 2,\n        degraded: 0,\n        unhealthy: 0,\n      },\n    },\n    recentAlerts: [],\n    metrics: [],\n    analytics: {\n      totalEvents: 100,\n      activeSessions: 5,\n      topPages: [\n        { path: '/', views: 50 },\n        { path: '/dashboard', views: 25 },\n      ],\n    },\n  }),\n  trackEvent: jest.fn(),\n  trackPageView: jest.fn(),\n  addMetric: jest.fn(),\n  addAlert: jest.fn(),\n  updateConfig: jest.fn(),\n  getAnalyticsSession: jest.fn().mockReturnValue({\n    id: 'session_123',\n    startTime: new Date('2024-01-01T00:00:00Z'),\n    lastActivity: new Date('2024-01-01T00:00:00Z'),\n    pageViews: 10,\n    events: 25,\n  }),\n});\n\n/**\n * Mock MonitoringService class with default instance\n */\nexport const mockMonitoringService = createMockMonitoringServiceClass(defaultMonitoringServiceMock);\n\n// ============================================================================\n// SPECIALIZED MOCK SCENARIOS\n// ============================================================================\n\n/**\n * Mock for unhealthy system scenario\n */\nexport const createUnhealthySystemMock = (): jest.Mocked<MonitoringService> => {\n  return createMockMonitoringServiceInstance({\n    getSystemHealth: jest.fn().mockResolvedValue({\n      status: HealthStatus.UNHEALTHY,\n      timestamp: new Date('2024-01-01T00:00:00Z'),\n      uptime: 3600000,\n      version: '1.0.0',\n      services: [\n        {\n          name: 'database',\n          status: HealthStatus.UNHEALTHY,\n          responseTime: 5000,\n          lastCheck: new Date('2024-01-01T00:00:00Z'),\n          error: 'Connection timeout',\n        },\n      ],\n      summary: {\n        total: 1,\n        healthy: 0,\n        degraded: 0,\n        unhealthy: 1,\n      },\n    }),\n  });\n};\n\n/**\n * Mock for degraded system scenario\n */\nexport const createDegradedSystemMock = (): jest.Mocked<MonitoringService> => {\n  return createMockMonitoringServiceInstance({\n    getSystemHealth: jest.fn().mockResolvedValue({\n      status: HealthStatus.DEGRADED,\n      timestamp: new Date('2024-01-01T00:00:00Z'),\n      uptime: 3600000,\n      version: '1.0.0',\n      services: [\n        {\n          name: 'database',\n          status: HealthStatus.HEALTHY,\n          responseTime: 5,\n          lastCheck: new Date('2024-01-01T00:00:00Z'),\n        },\n        {\n          name: 'cache',\n          status: HealthStatus.DEGRADED,\n          responseTime: 1000,\n          lastCheck: new Date('2024-01-01T00:00:00Z'),\n          error: 'High latency',\n        },\n      ],\n      summary: {\n        total: 2,\n        healthy: 1,\n        degraded: 1,\n        unhealthy: 0,\n      },\n    }),\n  });\n};\n\n/**\n * Mock for service error scenario\n */\nexport const createServiceErrorMock = (): jest.Mocked<MonitoringService> => {\n  return createMockMonitoringServiceInstance({\n    getSystemHealth: jest.fn().mockRejectedValue(new Error('Service unavailable')),\n    getDashboardData: jest.fn().mockRejectedValue(new Error('Dashboard data unavailable')),\n  });\n};\n\n// ============================================================================\n// MOCK UTILITIES\n// ============================================================================\n\n/**\n * Reset all mocks to default state\n */\nexport const resetMonitoringServiceMocks = (mockInstance: jest.Mocked<MonitoringService>): void => {\n  Object.values(mockInstance).forEach((mockFn) => {\n    if (jest.isMockFunction(mockFn)) {\n      mockFn.mockReset();\n    }\n  });\n};\n\n/**\n * Setup mock for specific test scenario\n */\nexport const setupMonitoringServiceMock = (\n  mockInstance: jest.Mocked<MonitoringService>,\n  scenario: 'healthy' | 'unhealthy' | 'degraded' | 'error' = 'healthy'\n): void => {\n  switch (scenario) {\n    case 'healthy':\n      mockInstance.getSystemHealth.mockResolvedValue(\n        defaultMonitoringServiceMock.getSystemHealth()\n      );\n      break;\n    case 'unhealthy':\n      mockInstance.getSystemHealth.mockResolvedValue(createUnhealthySystemMock().getSystemHealth());\n      break;\n    case 'degraded':\n      mockInstance.getSystemHealth.mockResolvedValue(createDegradedSystemMock().getSystemHealth());\n      break;\n    case 'error':\n      mockInstance.getSystemHealth.mockRejectedValue(new Error('Service error'));\n      break;\n  }\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "cb0550d5597a05a527446504d5274e3fb4fc8680"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1pslzqezxh = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1pslzqezxh();
var __assign =
/* istanbul ignore next */
(cov_1pslzqezxh().s[0]++,
/* istanbul ignore next */
(cov_1pslzqezxh().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1pslzqezxh().b[0][1]++, this.__assign) ||
/* istanbul ignore next */
(cov_1pslzqezxh().b[0][2]++, function () {
  /* istanbul ignore next */
  cov_1pslzqezxh().f[0]++;
  cov_1pslzqezxh().s[1]++;
  __assign =
  /* istanbul ignore next */
  (cov_1pslzqezxh().b[1][0]++, Object.assign) ||
  /* istanbul ignore next */
  (cov_1pslzqezxh().b[1][1]++, function (t) {
    /* istanbul ignore next */
    cov_1pslzqezxh().f[1]++;
    cov_1pslzqezxh().s[2]++;
    for (var s, i =
      /* istanbul ignore next */
      (cov_1pslzqezxh().s[3]++, 1), n =
      /* istanbul ignore next */
      (cov_1pslzqezxh().s[4]++, arguments.length); i < n; i++) {
      /* istanbul ignore next */
      cov_1pslzqezxh().s[5]++;
      s = arguments[i];
      /* istanbul ignore next */
      cov_1pslzqezxh().s[6]++;
      for (var p in s) {
        /* istanbul ignore next */
        cov_1pslzqezxh().s[7]++;
        if (Object.prototype.hasOwnProperty.call(s, p)) {
          /* istanbul ignore next */
          cov_1pslzqezxh().b[2][0]++;
          cov_1pslzqezxh().s[8]++;
          t[p] = s[p];
        } else
        /* istanbul ignore next */
        {
          cov_1pslzqezxh().b[2][1]++;
        }
      }
    }
    /* istanbul ignore next */
    cov_1pslzqezxh().s[9]++;
    return t;
  });
  /* istanbul ignore next */
  cov_1pslzqezxh().s[10]++;
  return __assign.apply(this, arguments);
}));
/* istanbul ignore next */
cov_1pslzqezxh().s[11]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1pslzqezxh().s[12]++;
exports.setupMonitoringServiceMock = exports.resetMonitoringServiceMocks = exports.createServiceErrorMock = exports.createDegradedSystemMock = exports.createUnhealthySystemMock = exports.mockMonitoringService = exports.defaultMonitoringServiceMock = exports.createMockMonitoringServiceClass = exports.createMockMonitoringServiceInstance = void 0;
var monitoring_types_1 =
/* istanbul ignore next */
(cov_1pslzqezxh().s[13]++, require("@/infrastructure/monitoring/types/monitoring.types"));
// ============================================================================
// MOCK FACTORY FUNCTIONS
// ============================================================================
/**
 * Create a mock MonitoringService instance with customizable methods
 */
/* istanbul ignore next */
cov_1pslzqezxh().s[14]++;
var createMockMonitoringServiceInstance = function (overrides) {
  /* istanbul ignore next */
  cov_1pslzqezxh().f[2]++;
  cov_1pslzqezxh().s[15]++;
  if (overrides === void 0) {
    /* istanbul ignore next */
    cov_1pslzqezxh().b[3][0]++;
    cov_1pslzqezxh().s[16]++;
    overrides = {};
  } else
  /* istanbul ignore next */
  {
    cov_1pslzqezxh().b[3][1]++;
  }
  var defaultMock =
  /* istanbul ignore next */
  (cov_1pslzqezxh().s[17]++, {
    getSystemHealth: jest.fn(),
    getDashboardData: jest.fn(),
    trackEvent: jest.fn(),
    trackPageView: jest.fn(),
    addMetric: jest.fn(),
    addAlert: jest.fn(),
    updateConfig: jest.fn(),
    getAnalyticsSession: jest.fn()
  });
  /* istanbul ignore next */
  cov_1pslzqezxh().s[18]++;
  return __assign(__assign({}, defaultMock), overrides);
};
/* istanbul ignore next */
cov_1pslzqezxh().s[19]++;
exports.createMockMonitoringServiceInstance = createMockMonitoringServiceInstance;
/**
 * Create a mock MonitoringService class with getInstance method
 */
/* istanbul ignore next */
cov_1pslzqezxh().s[20]++;
var createMockMonitoringServiceClass = function (instanceMock) {
  /* istanbul ignore next */
  cov_1pslzqezxh().f[3]++;
  var mockInstance =
  /* istanbul ignore next */
  (cov_1pslzqezxh().s[21]++,
  /* istanbul ignore next */
  (cov_1pslzqezxh().b[4][0]++, instanceMock) ||
  /* istanbul ignore next */
  (cov_1pslzqezxh().b[4][1]++, (0, exports.createMockMonitoringServiceInstance)()));
  /* istanbul ignore next */
  cov_1pslzqezxh().s[22]++;
  return {
    getInstance: jest.fn().mockReturnValue(mockInstance)
  };
};
/* istanbul ignore next */
cov_1pslzqezxh().s[23]++;
exports.createMockMonitoringServiceClass = createMockMonitoringServiceClass;
// ============================================================================
// DEFAULT MOCK INSTANCES
// ============================================================================
/**
 * Default mock MonitoringService instance with healthy system responses
 */
/* istanbul ignore next */
cov_1pslzqezxh().s[24]++;
exports.defaultMonitoringServiceMock = (0, exports.createMockMonitoringServiceInstance)({
  getSystemHealth: jest.fn().mockResolvedValue({
    status: monitoring_types_1.HealthStatus.HEALTHY,
    timestamp: new Date('2024-01-01T00:00:00Z'),
    uptime: 3600000,
    version: '1.0.0',
    services: [{
      name: 'database',
      status: monitoring_types_1.HealthStatus.HEALTHY,
      responseTime: 5,
      lastCheck: new Date('2024-01-01T00:00:00Z')
    }, {
      name: 'api',
      status: monitoring_types_1.HealthStatus.HEALTHY,
      responseTime: 10,
      lastCheck: new Date('2024-01-01T00:00:00Z')
    }],
    summary: {
      total: 2,
      healthy: 2,
      degraded: 0,
      unhealthy: 0
    }
  }),
  getDashboardData: jest.fn().mockResolvedValue({
    systemHealth: {
      status: monitoring_types_1.HealthStatus.HEALTHY,
      timestamp: new Date('2024-01-01T00:00:00Z'),
      uptime: 3600000,
      version: '1.0.0',
      services: [{
        name: 'database',
        status: monitoring_types_1.HealthStatus.HEALTHY,
        responseTime: 5,
        lastCheck: new Date('2024-01-01T00:00:00Z')
      }, {
        name: 'api',
        status: monitoring_types_1.HealthStatus.HEALTHY,
        responseTime: 10,
        lastCheck: new Date('2024-01-01T00:00:00Z')
      }],
      summary: {
        total: 2,
        healthy: 2,
        degraded: 0,
        unhealthy: 0
      }
    },
    recentAlerts: [],
    metrics: [],
    analytics: {
      totalEvents: 100,
      activeSessions: 5,
      topPages: [{
        path: '/',
        views: 50
      }, {
        path: '/dashboard',
        views: 25
      }]
    }
  }),
  trackEvent: jest.fn(),
  trackPageView: jest.fn(),
  addMetric: jest.fn(),
  addAlert: jest.fn(),
  updateConfig: jest.fn(),
  getAnalyticsSession: jest.fn().mockReturnValue({
    id: 'session_123',
    startTime: new Date('2024-01-01T00:00:00Z'),
    lastActivity: new Date('2024-01-01T00:00:00Z'),
    pageViews: 10,
    events: 25
  })
});
/**
 * Mock MonitoringService class with default instance
 */
/* istanbul ignore next */
cov_1pslzqezxh().s[25]++;
exports.mockMonitoringService = (0, exports.createMockMonitoringServiceClass)(exports.defaultMonitoringServiceMock);
// ============================================================================
// SPECIALIZED MOCK SCENARIOS
// ============================================================================
/**
 * Mock for unhealthy system scenario
 */
/* istanbul ignore next */
cov_1pslzqezxh().s[26]++;
var createUnhealthySystemMock = function () {
  /* istanbul ignore next */
  cov_1pslzqezxh().f[4]++;
  cov_1pslzqezxh().s[27]++;
  return (0, exports.createMockMonitoringServiceInstance)({
    getSystemHealth: jest.fn().mockResolvedValue({
      status: monitoring_types_1.HealthStatus.UNHEALTHY,
      timestamp: new Date('2024-01-01T00:00:00Z'),
      uptime: 3600000,
      version: '1.0.0',
      services: [{
        name: 'database',
        status: monitoring_types_1.HealthStatus.UNHEALTHY,
        responseTime: 5000,
        lastCheck: new Date('2024-01-01T00:00:00Z'),
        error: 'Connection timeout'
      }],
      summary: {
        total: 1,
        healthy: 0,
        degraded: 0,
        unhealthy: 1
      }
    })
  });
};
/* istanbul ignore next */
cov_1pslzqezxh().s[28]++;
exports.createUnhealthySystemMock = createUnhealthySystemMock;
/**
 * Mock for degraded system scenario
 */
/* istanbul ignore next */
cov_1pslzqezxh().s[29]++;
var createDegradedSystemMock = function () {
  /* istanbul ignore next */
  cov_1pslzqezxh().f[5]++;
  cov_1pslzqezxh().s[30]++;
  return (0, exports.createMockMonitoringServiceInstance)({
    getSystemHealth: jest.fn().mockResolvedValue({
      status: monitoring_types_1.HealthStatus.DEGRADED,
      timestamp: new Date('2024-01-01T00:00:00Z'),
      uptime: 3600000,
      version: '1.0.0',
      services: [{
        name: 'database',
        status: monitoring_types_1.HealthStatus.HEALTHY,
        responseTime: 5,
        lastCheck: new Date('2024-01-01T00:00:00Z')
      }, {
        name: 'cache',
        status: monitoring_types_1.HealthStatus.DEGRADED,
        responseTime: 1000,
        lastCheck: new Date('2024-01-01T00:00:00Z'),
        error: 'High latency'
      }],
      summary: {
        total: 2,
        healthy: 1,
        degraded: 1,
        unhealthy: 0
      }
    })
  });
};
/* istanbul ignore next */
cov_1pslzqezxh().s[31]++;
exports.createDegradedSystemMock = createDegradedSystemMock;
/**
 * Mock for service error scenario
 */
/* istanbul ignore next */
cov_1pslzqezxh().s[32]++;
var createServiceErrorMock = function () {
  /* istanbul ignore next */
  cov_1pslzqezxh().f[6]++;
  cov_1pslzqezxh().s[33]++;
  return (0, exports.createMockMonitoringServiceInstance)({
    getSystemHealth: jest.fn().mockRejectedValue(new Error('Service unavailable')),
    getDashboardData: jest.fn().mockRejectedValue(new Error('Dashboard data unavailable'))
  });
};
/* istanbul ignore next */
cov_1pslzqezxh().s[34]++;
exports.createServiceErrorMock = createServiceErrorMock;
// ============================================================================
// MOCK UTILITIES
// ============================================================================
/**
 * Reset all mocks to default state
 */
/* istanbul ignore next */
cov_1pslzqezxh().s[35]++;
var resetMonitoringServiceMocks = function (mockInstance) {
  /* istanbul ignore next */
  cov_1pslzqezxh().f[7]++;
  cov_1pslzqezxh().s[36]++;
  Object.values(mockInstance).forEach(function (mockFn) {
    /* istanbul ignore next */
    cov_1pslzqezxh().f[8]++;
    cov_1pslzqezxh().s[37]++;
    if (jest.isMockFunction(mockFn)) {
      /* istanbul ignore next */
      cov_1pslzqezxh().b[5][0]++;
      cov_1pslzqezxh().s[38]++;
      mockFn.mockReset();
    } else
    /* istanbul ignore next */
    {
      cov_1pslzqezxh().b[5][1]++;
    }
  });
};
/* istanbul ignore next */
cov_1pslzqezxh().s[39]++;
exports.resetMonitoringServiceMocks = resetMonitoringServiceMocks;
/**
 * Setup mock for specific test scenario
 */
/* istanbul ignore next */
cov_1pslzqezxh().s[40]++;
var setupMonitoringServiceMock = function (mockInstance, scenario) {
  /* istanbul ignore next */
  cov_1pslzqezxh().f[9]++;
  cov_1pslzqezxh().s[41]++;
  if (scenario === void 0) {
    /* istanbul ignore next */
    cov_1pslzqezxh().b[6][0]++;
    cov_1pslzqezxh().s[42]++;
    scenario = 'healthy';
  } else
  /* istanbul ignore next */
  {
    cov_1pslzqezxh().b[6][1]++;
  }
  cov_1pslzqezxh().s[43]++;
  switch (scenario) {
    case 'healthy':
      /* istanbul ignore next */
      cov_1pslzqezxh().b[7][0]++;
      cov_1pslzqezxh().s[44]++;
      mockInstance.getSystemHealth.mockResolvedValue(exports.defaultMonitoringServiceMock.getSystemHealth());
      /* istanbul ignore next */
      cov_1pslzqezxh().s[45]++;
      break;
    case 'unhealthy':
      /* istanbul ignore next */
      cov_1pslzqezxh().b[7][1]++;
      cov_1pslzqezxh().s[46]++;
      mockInstance.getSystemHealth.mockResolvedValue((0, exports.createUnhealthySystemMock)().getSystemHealth());
      /* istanbul ignore next */
      cov_1pslzqezxh().s[47]++;
      break;
    case 'degraded':
      /* istanbul ignore next */
      cov_1pslzqezxh().b[7][2]++;
      cov_1pslzqezxh().s[48]++;
      mockInstance.getSystemHealth.mockResolvedValue((0, exports.createDegradedSystemMock)().getSystemHealth());
      /* istanbul ignore next */
      cov_1pslzqezxh().s[49]++;
      break;
    case 'error':
      /* istanbul ignore next */
      cov_1pslzqezxh().b[7][3]++;
      cov_1pslzqezxh().s[50]++;
      mockInstance.getSystemHealth.mockRejectedValue(new Error('Service error'));
      /* istanbul ignore next */
      cov_1pslzqezxh().s[51]++;
      break;
  }
};
/* istanbul ignore next */
cov_1pslzqezxh().s[52]++;
exports.setupMonitoringServiceMock = setupMonitoringServiceMock;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,