b03efa2c1d073c2588eff9a3e1e21a0b
"use strict";
/**
 * useAppLoading Hook Tests
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("@testing-library/react");
var useAppLoading_1 = require("./useAppLoading");
// Mock setup for DOM APIs
var mockPerformance = {
    now: jest.fn(function () { return 1000; }),
};
var mockQuerySelectorAll = jest.fn(function () { return []; });
var mockHasAttribute = jest.fn(function () { return true; });
var mockClassListContains = jest.fn(function () { return true; });
// Setup mocks
Object.defineProperty(window, "performance", {
    value: mockPerformance,
    writable: true,
});
Object.defineProperty(document, "readyState", {
    get: function () { return "complete"; },
    configurable: true,
});
Object.defineProperty(document, "querySelectorAll", {
    value: mockQuerySelectorAll,
    writable: true,
});
Object.defineProperty(document.documentElement, "hasAttribute", {
    value: mockHasAttribute,
});
Object.defineProperty(document.documentElement, "classList", {
    value: { contains: mockClassListContains },
});
Object.defineProperty(document.body, "classList", {
    value: { contains: mockClassListContains },
});
Object.defineProperty(window, "setTimeout", {
    value: jest.fn(function (callback) {
        callback();
        return 1;
    }),
    writable: true,
});
describe("useAppLoading", function () {
    beforeEach(function () {
        jest.clearAllMocks();
        mockPerformance.now.mockReturnValue(1000);
        mockQuerySelectorAll.mockReturnValue([]);
        mockHasAttribute.mockReturnValue(true);
        mockClassListContains.mockReturnValue(true);
    });
    describe("Initial State", function () {
        it("should start with loading state", function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
                        expect(result.current.isInitialLoading).toBe(true);
                        expect(result.current.isOverallLoading).toBe(true);
                        expect(result.current.isSuspenseLoading).toBe(false);
                        expect(result.current.progress).toBe(0);
                        // Wait for the hook to initialize and set the first step
                        return [4 /*yield*/, (0, react_1.waitFor)(function () {
                                expect(result.current.currentStep).toBe("Preparing Application");
                            })];
                    case 1:
                        // Wait for the hook to initialize and set the first step
                        _a.sent();
                        expect(result.current.steps).toHaveLength(4);
                        return [2 /*return*/];
                }
            });
        }); });
        it("should have correct function types", function () {
            var result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
            expect(typeof result.current.forceComplete).toBe("function");
            expect(typeof result.current.restart).toBe("function");
            expect(typeof result.current.setSuspenseLoading).toBe("function");
        });
    });
    describe("Force Complete", function () {
        it("should force complete immediately", function () {
            var result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
            (0, react_1.act)(function () {
                result.current.forceComplete();
            });
            expect(result.current.isInitialLoading).toBe(false);
            expect(result.current.isOverallLoading).toBe(false);
            expect(result.current.progress).toBe(100);
            expect(result.current.currentStep).toBe("Ready");
        });
    });
    describe("Restart", function () {
        it("should restart loading state", function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
                        // First complete it
                        (0, react_1.act)(function () {
                            result.current.forceComplete();
                        });
                        expect(result.current.isInitialLoading).toBe(false);
                        // Then restart
                        (0, react_1.act)(function () {
                            result.current.restart();
                        });
                        expect(result.current.isInitialLoading).toBe(true);
                        expect(result.current.isOverallLoading).toBe(true);
                        expect(result.current.progress).toBe(0);
                        expect(result.current.steps).toHaveLength(4);
                        expect(result.current.isSuspenseLoading).toBe(false);
                        // Wait for the first step to be set
                        return [4 /*yield*/, (0, react_1.waitFor)(function () {
                                expect(result.current.currentStep).toBe("Preparing Application");
                            })];
                    case 1:
                        // Wait for the first step to be set
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe("Suspense Loading", function () {
        it("should handle suspense loading state", function () {
            var result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
            // Initially suspense is not loading
            expect(result.current.isSuspenseLoading).toBe(false);
            expect(result.current.isOverallLoading).toBe(true); // Because initial loading is true
            // Set suspense loading to true
            (0, react_1.act)(function () {
                result.current.setSuspenseLoading(true);
            });
            expect(result.current.isSuspenseLoading).toBe(true);
            expect(result.current.isOverallLoading).toBe(true); // Should still be true
            // Set suspense loading to false
            (0, react_1.act)(function () {
                result.current.setSuspenseLoading(false);
            });
            expect(result.current.isSuspenseLoading).toBe(false);
            expect(result.current.isOverallLoading).toBe(true); // Should still be true because initial loading is true
        });
        it("should compute isOverallLoading correctly", function () {
            var result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
            // Both initial and suspense loading
            (0, react_1.act)(function () {
                result.current.setSuspenseLoading(true);
            });
            expect(result.current.isOverallLoading).toBe(true);
            // Only initial loading
            (0, react_1.act)(function () {
                result.current.setSuspenseLoading(false);
            });
            expect(result.current.isOverallLoading).toBe(true);
            // Force complete initial loading, only suspense
            (0, react_1.act)(function () {
                result.current.forceComplete();
                result.current.setSuspenseLoading(true);
            });
            expect(result.current.isOverallLoading).toBe(true);
            // Neither loading
            (0, react_1.act)(function () {
                result.current.setSuspenseLoading(false);
            });
            expect(result.current.isOverallLoading).toBe(false);
        });
    });
    describe("Loading Steps", function () {
        it("should initialize steps correctly", function () { return __awaiter(void 0, void 0, void 0, function () {
            var result, expectedSteps;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
                        // Wait for steps to be initialized
                        return [4 /*yield*/, (0, react_1.waitFor)(function () {
                                expect(result.current.steps).toHaveLength(4);
                            })];
                    case 1:
                        // Wait for steps to be initialized
                        _a.sent();
                        expectedSteps = [
                            { id: "dom-ready", name: "Preparing Application", completed: false },
                            { id: "critical-css", name: "Loading Styles", completed: false },
                            { id: "theme-initialized", name: "Applying Theme", completed: false },
                            { id: "core-javascript", name: "Loading Core Features", completed: false },
                        ];
                        expectedSteps.forEach(function (expectedStep, index) {
                            expect(result.current.steps[index].id).toBe(expectedStep.id);
                            expect(result.current.steps[index].name).toBe(expectedStep.name);
                            expect(result.current.steps[index].completed).toBe(expectedStep.completed);
                        });
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe("DOM Condition Checks", function () {
        it("should check DOM ready state correctly", function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Mock document.readyState as complete
                        Object.defineProperty(document, "readyState", {
                            get: function () { return "complete"; },
                            configurable: true,
                        });
                        result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
                        // The hook should work without errors
                        expect(result.current.isInitialLoading).toBe(true);
                        // Wait for it to process
                        return [4 /*yield*/, (0, react_1.waitFor)(function () {
                                expect(result.current.currentStep).toBe("Preparing Application");
                            })];
                    case 1:
                        // Wait for it to process
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        it("should check critical CSS correctly", function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Mock no critical CSS sheets
                        mockQuerySelectorAll.mockReturnValue([]);
                        result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
                        expect(result.current.isInitialLoading).toBe(true);
                        return [4 /*yield*/, (0, react_1.waitFor)(function () {
                                expect(result.current.currentStep).toBe("Preparing Application");
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        it("should check theme initialization correctly", function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Mock theme attributes
                        mockHasAttribute.mockReturnValue(true);
                        mockClassListContains.mockReturnValue(true);
                        result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
                        expect(result.current.isInitialLoading).toBe(true);
                        return [4 /*yield*/, (0, react_1.waitFor)(function () {
                                expect(result.current.currentStep).toBe("Preparing Application");
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        it("should check core JavaScript correctly", function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Mock window and document ready state
                        Object.defineProperty(document, "readyState", {
                            get: function () { return "complete"; },
                            configurable: true,
                        });
                        result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
                        expect(result.current.isInitialLoading).toBe(true);
                        return [4 /*yield*/, (0, react_1.waitFor)(function () {
                                expect(result.current.currentStep).toBe("Preparing Application");
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe("Error Handling", function () {
        it("should handle DOM API errors gracefully", function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Mock querySelectorAll to throw error
                        mockQuerySelectorAll.mockImplementation(function () {
                            throw new Error("DOM error");
                        });
                        result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
                        expect(result.current.isInitialLoading).toBe(true);
                        // Should still work despite the error
                        return [4 /*yield*/, (0, react_1.waitFor)(function () {
                                expect(result.current.currentStep).toBe("Preparing Application");
                            })];
                    case 1:
                        // Should still work despite the error
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe("Performance", function () {
        it("should not recreate conditions on every render", function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a, result, rerender, initialSteps;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }), result = _a.result, rerender = _a.rerender;
                        // Wait for initial setup
                        return [4 /*yield*/, (0, react_1.waitFor)(function () {
                                expect(result.current.steps).toHaveLength(4);
                            })];
                    case 1:
                        // Wait for initial setup
                        _b.sent();
                        initialSteps = result.current.steps;
                        rerender();
                        // Steps should be the same object (memoized)
                        expect(result.current.steps).toBe(initialSteps);
                        return [2 /*return*/];
                }
            });
        }); });
        it("should handle performance.now correctly", function () { return __awaiter(void 0, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        mockPerformance.now
                            .mockReturnValueOnce(1000) // startTime
                            .mockReturnValueOnce(2200); // currentTime
                        result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
                        expect(result.current.isInitialLoading).toBe(true);
                        return [4 /*yield*/, (0, react_1.waitFor)(function () {
                                expect(result.current.currentStep).toBe("Preparing Application");
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,