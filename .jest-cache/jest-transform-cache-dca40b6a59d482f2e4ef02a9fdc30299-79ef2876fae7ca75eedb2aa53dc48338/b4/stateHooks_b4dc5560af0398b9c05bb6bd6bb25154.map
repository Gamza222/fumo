{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/state/stateHooks/stateHooks.ts","mappings":";AAAA;;;;;GAKG;;;AAEH,+BAA6C;AAG7C,+EAA+E;AAC/E,aAAa;AACb,+EAA+E;AAE/E;;GAEG;AACI,IAAM,QAAQ,GAAG,UACtB,KAA4B,EAC5B,QAAoC;IAEpC,OAAO,IAAA,4BAAoB,EACzB,KAAK,CAAC,SAAS,EACf,cAAM,OAAA,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,EAA1B,CAA0B,EAChC,cAAM,OAAA,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,EAA1B,CAA0B,CACjC,CAAC;AACJ,CAAC,CAAC;AATW,QAAA,QAAQ,YASnB;AAEF;;GAEG;AACI,IAAM,eAAe,GAAG,UAC7B,KAA4B,EAC5B,QAAoC;IAEpC,OAAO,IAAA,gBAAQ,EAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;AACnC,CAAC,CAAC;AALW,QAAA,eAAe,mBAK1B;AAEF;;GAEG;AACI,IAAM,aAAa,GAAG,UAAS,KAA4B;IAChE,OAAO,IAAA,gBAAQ,EAAC,KAAK,EAAE,UAAC,KAAK,IAAK,OAAA,KAAK,EAAL,CAAK,CAAC,CAAC;AAC3C,CAAC,CAAC;AAFW,QAAA,aAAa,iBAExB;AAEF;;GAEG;AACI,IAAM,gBAAgB,GAAG,UAC9B,KAA4B;IAE5B,OAAO,IAAA,gBAAQ,EAAC,KAAK,EAAE,UAAC,KAAK,YAAK,OAAA,MAAC,KAAiC,CAAC,SAAS,mCAAI,KAAK,CAAA,EAAA,CAAC,CAAC;AAC3F,CAAC,CAAC;AAJW,QAAA,gBAAgB,oBAI3B;AAEF;;GAEG;AACI,IAAM,eAAe,GAAG,UAAS,KAA4B;IAClE,OAAO;QACL,QAAQ,EAAE,KAAK,CAAC,QAAQ;QACxB,KAAK,EAAE,KAAK,CAAC,KAAK;QAClB,YAAY,EAAE,KAAK,CAAC,YAAY;KACjC,CAAC;AACJ,CAAC,CAAC;AANW,QAAA,eAAe,mBAM1B;AAEF,+EAA+E;AAC/E,YAAY;AACZ,+EAA+E","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/state/stateHooks/stateHooks.ts"],"sourcesContent":["/**\n * State Management Hooks\n *\n * Universal React hooks for Zustand stores that work with any application.\n * Foundation-level only - no overengineering.\n */\n\nimport { useSyncExternalStore } from 'react';\nimport type { BaseState, EnhancedStore } from '../types/types';\n\n// ============================================================================\n// CORE HOOKS\n// ============================================================================\n\n/**\n * Subscribe to store with selector\n */\nexport const useStore = <TStore, TResult>(\n  store: EnhancedStore<TStore>,\n  selector: (state: TStore) => TResult\n): TResult => {\n  return useSyncExternalStore(\n    store.subscribe,\n    () => selector(store.getState()),\n    () => selector(store.getState())\n  );\n};\n\n/**\n * Subscribe to store with shallow comparison\n */\nexport const useShallowStore = <TStore, TResult>(\n  store: EnhancedStore<TStore>,\n  selector: (state: TStore) => TResult\n): TResult => {\n  return useStore(store, selector);\n};\n\n/**\n * Subscribe to complete store state\n */\nexport const useStoreState = <TStore>(store: EnhancedStore<TStore>): TStore => {\n  return useStore(store, (state) => state);\n};\n\n/**\n * Subscribe to hydration status\n */\nexport const useStoreHydrated = <TStore extends BaseState>(\n  store: EnhancedStore<TStore>\n): boolean => {\n  return useStore(store, (state) => (state as { _hydrated?: boolean })._hydrated ?? false);\n};\n\n/**\n * Get store actions (setState, reset, clearStorage)\n */\nexport const useStoreActions = <TStore>(store: EnhancedStore<TStore>) => {\n  return {\n    setState: store.setState,\n    reset: store.reset,\n    clearStorage: store.clearStorage,\n  };\n};\n\n// ============================================================================\n// UTILITIES\n// ============================================================================\n"],"version":3}