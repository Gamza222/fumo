9ac10e018645d2edf64a41dc5156fac7
"use strict";
'use client';
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InitialLoader = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
//styles
var InitialLoader_module_scss_1 = __importDefault(require("./InitialLoader.module.scss"));
//lib
var lib_1 = require("../lib/lib");
var navigation_1 = require("next/navigation");
//external
var app_loading_1 = require("@/infrastructure/providers/app-loading");
var route_1 = require("@/shared/config/route");
var classNames_1 = require("@/shared/lib/utils/classNames");
//components
var ProgressBar_1 = require("@/widgets/ProgressBar");
exports.InitialLoader = (0, react_1.memo)(function (_a) {
    var _b;
    var className = _a.className, loadingMessage = _a.loadingMessage, _c = _a.showProgress, showProgress = _c === void 0 ? true : _c;
    var pathname = (0, navigation_1.usePathname)();
    var _d = (0, app_loading_1.useAppLoadingContext)(), isOverallLoading = _d.isOverallLoading, progress = _d.progress, currentStep = _d.currentStep;
    var _e = (0, react_1.useState)(true), isVisible = _e[0], setIsVisible = _e[1];
    var _f = (0, react_1.useState)(false), isFadingOut = _f[0], setIsFadingOut = _f[1];
    var _g = (0, react_1.useState)(false), shouldShowLoader = _g[0], setShouldShowLoader = _g[1];
    // Get route config
    var routeConfig = (0, react_1.useMemo)(function () { return (0, route_1.getCurrentRouteConfig)(pathname).config; }, [pathname]);
    // Simple cache check
    var isCached = (0, react_1.useMemo)(function () {
        if (!routeConfig.cache.enabled)
            return false;
        if (typeof window === 'undefined')
            return false; // SSR check
        var cacheKey = routeConfig.cache.key || "cache-".concat(routeConfig.route);
        var cached = localStorage.getItem(cacheKey);
        if (!cached)
            return false;
        try {
            var parsed = JSON.parse(cached);
            var timestamp = parsed.timestamp, ttl = parsed.ttl;
            return Date.now() - timestamp < ttl;
        }
        catch (_a) {
            return false;
        }
    }, [routeConfig.cache.enabled, routeConfig.cache.key, routeConfig.route]);
    (0, react_1.useEffect)(function () {
        var shouldShow = routeConfig.route === route_1.AppRoute.HOME || !isCached;
        setShouldShowLoader(shouldShow);
    }, [pathname, routeConfig.route, isCached]);
    // Save cache when done - with SSR safety
    (0, react_1.useEffect)(function () {
        if (!isOverallLoading &&
            shouldShowLoader &&
            routeConfig.cache.enabled &&
            typeof window !== 'undefined') {
            var cacheKey = routeConfig.cache.key || "cache-".concat(routeConfig.route);
            localStorage.setItem(cacheKey, JSON.stringify({
                timestamp: Date.now(),
                ttl: routeConfig.cache.ttl || 86400000, // 24 hours
            }));
        }
    }, [isOverallLoading, shouldShowLoader, routeConfig]);
    // Visibility logic
    (0, react_1.useEffect)(function () {
        if (isOverallLoading) {
            setIsVisible(true);
            setIsFadingOut(false);
            return;
        }
        setIsFadingOut(true);
        setTimeout(function () { return setIsVisible(false); }, routeConfig.loader.minDisplayTime || 2000);
    }, [isOverallLoading, routeConfig.loader.minDisplayTime]);
    if (!shouldShowLoader || !isVisible)
        return null;
    var displayMessage = loadingMessage || (progress >= 100 ? 'Ready!' : (0, lib_1.formatStepName)(currentStep));
    var mods = (_b = {},
        _b[InitialLoader_module_scss_1.default.fadeOut || ''] = isFadingOut,
        _b);
    return ((0, jsx_runtime_1.jsxs)("div", { className: (0, classNames_1.classNames)(InitialLoader_module_scss_1.default.initialLoader || '', __assign({}, mods), [className]), role: "progressbar", "aria-valuenow": progress, "aria-valuemin": 0, "aria-valuemax": 100, "aria-label": "Loading application", children: [(0, jsx_runtime_1.jsx)("div", { className: InitialLoader_module_scss_1.default.overlay }), (0, jsx_runtime_1.jsx)("div", { className: InitialLoader_module_scss_1.default.content, children: (0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: progress, message: displayMessage, showPercentage: showProgress }) })] }));
});
exports.InitialLoader.displayName = 'InitialLoader';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,