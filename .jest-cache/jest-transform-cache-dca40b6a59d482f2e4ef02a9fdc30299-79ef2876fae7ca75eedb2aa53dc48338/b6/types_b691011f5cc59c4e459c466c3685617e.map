{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/data/types/types.ts","mappings":";AAAA;;;;;GAKG;;;AA+HH;;GAEG;AACH,IAAY,eAOX;AAPD,WAAY,eAAe;IACzB,4CAAyB,CAAA;IACzB,0CAAuB,CAAA;IACvB,kDAA+B,CAAA;IAC/B,gDAA6B,CAAA;IAC7B,gDAA6B,CAAA;IAC7B,kCAAe,CAAA;AACjB,CAAC,EAPW,eAAe,+BAAf,eAAe,QAO1B;AAwBD;;GAEG;AACH,IAAY,cAOX;AAPD,WAAY,cAAc;IACxB,2CAAyB,CAAA;IACzB,yCAAuB,CAAA;IACvB,iDAA+B,CAAA;IAC/B,+CAA6B,CAAA;IAC7B,+CAA6B,CAAA;IAC7B,iCAAe,CAAA;AACjB,CAAC,EAPW,cAAc,8BAAd,cAAc,QAOzB;AAgGD,+EAA+E;AAC/E,uBAAuB;AACvB,+EAA+E;AAE/E,2CAAyF;AAAhF,0GAAA,YAAY,OAAA;AAAE,iHAAA,mBAAmB,OAAA;AAAE,oHAAA,sBAAsB,OAAA;AAElE,+EAA+E;AAC/E,mBAAmB;AACnB,+EAA+E;AAE/E,iDAAiD","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/data/types/types.ts"],"sourcesContent":["/**\n * Universal API Types\n *\n * Common interfaces and types that any enterprise application needs.\n * Foundation-level types only - no app-specific interfaces.\n */\n\n// ============================================================================\n// COMMON REQUEST/RESPONSE TYPES\n// ============================================================================\n\n/**\n * Standard API response wrapper used by most enterprise APIs\n */\nexport interface ApiResponse<T = unknown> {\n  data: T;\n  success: boolean;\n  message?: string;\n  errors?: string[];\n  meta?: {\n    total?: number;\n    page?: number;\n    limit?: number;\n    hasNext?: boolean;\n    hasPrev?: boolean;\n  };\n}\n\n/**\n * Standard error response format\n */\nexport interface ApiError {\n  message: string;\n  code?: string;\n  statusCode?: number;\n  details?: unknown;\n  timestamp: string;\n  requestId?: string;\n}\n\n/**\n * Standard pagination parameters\n */\nexport interface PaginationParams {\n  page?: number;\n  limit?: number;\n  offset?: number;\n  sort?: string;\n  order?: 'asc' | 'desc';\n}\n\n/**\n * Standard filter parameters\n */\nexport interface FilterParams {\n  search?: string;\n  status?: string;\n  dateFrom?: string;\n  dateTo?: string;\n  [key: string]: unknown;\n}\n\n// ============================================================================\n// AUTHENTICATION TYPES\n// ============================================================================\n\n/**\n * Standard token structure used by most auth systems\n */\nexport interface AuthTokens {\n  accessToken: string;\n  refreshToken?: string;\n  tokenType?: string;\n  expiresIn?: number;\n  expiresAt?: string;\n}\n\n/**\n * Standard user session info\n */\nexport interface SessionInfo {\n  userId: string;\n  email?: string;\n  roles?: string[];\n  permissions?: string[];\n  metadata?: Record<string, unknown>;\n}\n\n// ============================================================================\n// FILE UPLOAD TYPES\n// ============================================================================\n\n/**\n * Standard file upload response\n */\nexport interface FileUploadResponse {\n  id: string;\n  filename: string;\n  originalName: string;\n  mimeType: string;\n  size: number;\n  url: string;\n  uploadedAt: string;\n}\n\n/**\n * File upload progress info\n */\nexport interface UploadProgress {\n  loaded: number;\n  total: number;\n  percentage: number;\n  speed?: number;\n  timeRemaining?: number;\n}\n\n// ============================================================================\n// WEBSOCKET MESSAGE TYPES\n// ============================================================================\n\n/**\n * Standard WebSocket message structure\n */\nexport interface WebSocketMessage<T = unknown> {\n  type: string;\n  payload?: T;\n  id?: string;\n  timestamp?: string;\n  userId?: string;\n  requestId?: string;\n}\n\n/**\n * WebSocket connection state\n */\nexport enum ConnectionState {\n  CONNECTING = 'connecting',\n  CONNECTED = 'connected',\n  DISCONNECTING = 'disconnecting',\n  DISCONNECTED = 'disconnected',\n  RECONNECTING = 'reconnecting',\n  ERROR = 'error',\n}\n\n/**\n * WebSocket configuration\n */\nexport interface WebSocketConfig {\n  url: string;\n  protocols?: string | string[];\n  reconnectInterval?: number;\n  maxReconnectAttempts?: number;\n  timeout?: number;\n  heartbeatInterval?: number;\n  enableHeartbeat?: boolean;\n}\n\n/**\n * WebSocket subscription\n */\nexport interface WebSocketSubscription {\n  id: string;\n  event: string;\n  callback: (message: WebSocketMessage) => void;\n}\n\n/**\n * WebSocket state enum\n */\nexport enum WebSocketState {\n  CONNECTING = 'connecting',\n  CONNECTED = 'connected',\n  DISCONNECTING = 'disconnecting',\n  DISCONNECTED = 'disconnected',\n  RECONNECTING = 'reconnecting',\n  ERROR = 'error',\n}\n\n// ============================================================================\n// HTTP CONFIGURATION TYPES\n// ============================================================================\n\n/**\n * Standard HTTP client configuration\n */\nexport interface HttpClientConfig {\n  baseURL?: string;\n  timeout?: number;\n  retries?: number;\n  retryDelay?: number;\n  headers?: Record<string, string>;\n  withCredentials?: boolean;\n  skipAuth?: boolean;\n}\n\n/**\n * Request configuration override\n */\nexport interface RequestConfig extends HttpClientConfig {\n  skipRetry?: boolean;\n  retryAttempts?: number;\n  metadata?: Record<string, unknown>;\n}\n\n// ============================================================================\n// CACHE TYPES\n// ============================================================================\n\n/**\n * Cache configuration options\n */\nexport interface CacheConfig {\n  ttl?: number;\n  maxSize?: number;\n  strategy?: 'lru' | 'lfu' | 'fifo';\n  persistToStorage?: boolean;\n  storageKey?: string;\n}\n\n/**\n * Cache entry metadata\n */\nexport interface CacheEntry<T = unknown> {\n  data: T;\n  timestamp: number;\n  ttl?: number;\n  hits: number;\n  size?: number;\n}\n\n// ============================================================================\n// UTILITY TYPES\n// ============================================================================\n\n/**\n * Standard ID types used across applications\n */\nexport type ID = string | number;\n\n/**\n * Standard timestamp formats\n */\nexport type Timestamp = string | number | Date;\n\n/**\n * Standard sort order\n */\nexport type SortOrder = 'asc' | 'desc';\n\n/**\n * Standard status types\n */\nexport type Status = 'active' | 'inactive' | 'pending' | 'suspended' | 'deleted';\n\n/**\n * Standard loading state\n */\nexport interface LoadingState {\n  isLoading: boolean;\n  isError: boolean;\n  error?: ApiError | null;\n  isSuccess: boolean;\n}\n\n/**\n * Async operation state\n */\nexport interface AsyncState<T = unknown> extends LoadingState {\n  data?: T | null;\n  lastUpdated?: Timestamp;\n}\n\n// ============================================================================\n// AUTH TOKEN CONSTANTS\n// ============================================================================\n\nexport { AuthTokenKey, getAllAuthTokenKeys, getPrimaryAuthTokenKey } from './authTokens';\n\n// ============================================================================\n// EXPORT ALL TYPES\n// ============================================================================\n\n// Types are already exported as interfaces above\n"],"version":3}