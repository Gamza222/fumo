08288d0883d8b9131a0e1d68cacc6164
"use strict";
/**
 * Production Configuration
 *
 * Production-specific configuration and optimizations for maximum performance.
 * Built on top of existing performance monitoring infrastructure.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProductionConfig = getProductionConfig;
exports.generateNextJSConfig = generateNextJSConfig;
exports.generateWebpackConfig = generateWebpackConfig;
exports.generateEnvironmentConfig = generateEnvironmentConfig;
exports.validateProductionConfig = validateProductionConfig;
exports.getProductionMetrics = getProductionMetrics;
var performance_enums_1 = require("../../types/performance.enums");
var performance_monitor_1 = require("../performance-monitor");
// ============================================================================
// DEFAULT CONFIGURATION
// ============================================================================
var DEFAULT_PRODUCTION_CONFIG = {
    compression: true,
    minification: true,
    treeShaking: true,
    codeSplitting: true,
    bundleAnalyzer: false,
    sourceMaps: false,
};
// ============================================================================
// PRODUCTION CONFIGURATION UTILITIES
// ============================================================================
/**
 * Get production configuration based on environment
 */
function getProductionConfig() {
    var startTime = performance.now();
    try {
        var isDevelopment = process.env.NODE_ENV === 'development';
        // const isProduction = process.env.NODE_ENV === 'production';
        var config = __assign(__assign({}, DEFAULT_PRODUCTION_CONFIG), { 
            // Disable source maps in production
            sourceMaps: isDevelopment, 
            // Enable bundle analyzer in development
            bundleAnalyzer: isDevelopment });
        // Track performance metric
        var endTime = performance.now();
        performance_monitor_1.performanceMonitor.addMetric({
            name: 'production_config_generation',
            value: endTime - startTime,
            timestamp: Date.now(),
            rating: endTime - startTime < 1 ? performance_enums_1.PerformanceRating.GOOD : performance_enums_1.PerformanceRating.NEEDS_IMPROVEMENT,
        });
        return config;
    }
    catch (error) {
        performance_monitor_1.performanceMonitor.addMetric({
            name: 'production_config_generation_error',
            value: 0,
            timestamp: Date.now(),
            rating: performance_enums_1.PerformanceRating.POOR,
        });
        return DEFAULT_PRODUCTION_CONFIG;
    }
}
/**
 * Generate Next.js production configuration
 */
function generateNextJSConfig(config) {
    if (config === void 0) { config = {}; }
    var startTime = performance.now();
    try {
        var finalConfig = __assign(__assign({}, DEFAULT_PRODUCTION_CONFIG), config);
        var nextConfig = {
            // Enable React strict mode
            reactStrictMode: true,
            // Disable powered by header
            poweredByHeader: false,
            // TypeScript configuration
            typescript: {
                ignoreBuildErrors: false,
            },
            // ESLint configuration
            eslint: {
                ignoreDuringBuilds: false,
            },
            // Image optimization
            images: {
                domains: [],
                formats: ['image/webp', 'image/avif'],
                minimumCacheTTL: 60,
                dangerouslyAllowSVG: false,
                contentSecurityPolicy: "default-src 'self'; script-src 'none'; sandbox;",
            },
            // Compression
            compress: finalConfig.compression,
            // Experimental features
            experimental: {
                optimizeCss: finalConfig.minification,
                optimizePackageImports: finalConfig.treeShaking ? ['@/components', '@/lib'] : [],
            },
        };
        // Add bundle analyzer if enabled
        if (finalConfig.bundleAnalyzer) {
            nextConfig.bundleAnalyzer = {
                enabled: true,
                openAnalyzer: false,
            };
        }
        // Add source maps if enabled
        if (finalConfig.sourceMaps) {
            nextConfig.productionBrowserSourceMaps = true;
        }
        // Track performance metric
        var endTime = performance.now();
        performance_monitor_1.performanceMonitor.addMetric({
            name: 'nextjs_config_generation',
            value: endTime - startTime,
            timestamp: Date.now(),
            rating: endTime - startTime < 10 ? performance_enums_1.PerformanceRating.GOOD : performance_enums_1.PerformanceRating.NEEDS_IMPROVEMENT,
        });
        return nextConfig;
    }
    catch (error) {
        performance_monitor_1.performanceMonitor.addMetric({
            name: 'nextjs_config_generation_error',
            value: 0,
            timestamp: Date.now(),
            rating: performance_enums_1.PerformanceRating.POOR,
        });
        return {
            reactStrictMode: true,
            poweredByHeader: false,
        };
    }
}
/**
 * Generate webpack production configuration
 */
function generateWebpackConfig(config) {
    if (config === void 0) { config = {}; }
    var startTime = performance.now();
    try {
        var finalConfig = __assign(__assign({}, DEFAULT_PRODUCTION_CONFIG), config);
        var webpackConfig = {
            // Optimization
            optimization: {
                minimize: finalConfig.minification,
                splitChunks: finalConfig.codeSplitting
                    ? {
                        chunks: 'all',
                        cacheGroups: {
                            vendor: {
                                test: /[\\/]node_modules[\\/]/,
                                name: 'vendors',
                                chunks: 'all',
                            },
                            common: {
                                name: 'common',
                                minChunks: 2,
                                chunks: 'all',
                                enforce: true,
                            },
                        },
                    }
                    : false,
            },
            // Performance hints
            performance: {
                hints: 'warning',
                maxEntrypointSize: 250000,
                maxAssetSize: 250000,
            },
        };
        // Add tree shaking if enabled
        if (finalConfig.treeShaking) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access
            webpackConfig.optimization.usedExports = true;
            // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access
            webpackConfig.optimization.sideEffects = false;
        }
        // Track performance metric
        var endTime = performance.now();
        performance_monitor_1.performanceMonitor.addMetric({
            name: 'webpack_config_generation',
            value: endTime - startTime,
            timestamp: Date.now(),
            rating: endTime - startTime < 5 ? performance_enums_1.PerformanceRating.GOOD : performance_enums_1.PerformanceRating.NEEDS_IMPROVEMENT,
        });
        return webpackConfig;
    }
    catch (error) {
        performance_monitor_1.performanceMonitor.addMetric({
            name: 'webpack_config_generation_error',
            value: 0,
            timestamp: Date.now(),
            rating: performance_enums_1.PerformanceRating.POOR,
        });
        return {
            optimization: {
                minimize: true,
            },
        };
    }
}
/**
 * Generate environment-specific configuration
 */
function generateEnvironmentConfig(environment) {
    var startTime = performance.now();
    try {
        var baseConfig = {
            NODE_ENV: environment,
            NEXT_PUBLIC_APP_ENV: environment,
        };
        var environmentConfigs = {
            development: __assign(__assign({}, baseConfig), { NEXT_PUBLIC_DEBUG: 'true', NEXT_PUBLIC_ANALYTICS: 'false', NEXT_PUBLIC_SENTRY_DSN: '' }),
            production: __assign(__assign({}, baseConfig), { NEXT_PUBLIC_DEBUG: 'false', NEXT_PUBLIC_ANALYTICS: 'true', NEXT_PUBLIC_SENTRY_DSN: process.env.NEXT_PUBLIC_SENTRY_DSN || '' }),
            test: __assign(__assign({}, baseConfig), { NEXT_PUBLIC_DEBUG: 'false', NEXT_PUBLIC_ANALYTICS: 'false', NEXT_PUBLIC_SENTRY_DSN: '' }),
        };
        var config = environmentConfigs[environment] || environmentConfigs.development;
        // Track performance metric
        var endTime = performance.now();
        performance_monitor_1.performanceMonitor.addMetric({
            name: 'environment_config_generation',
            value: endTime - startTime,
            timestamp: Date.now(),
            rating: endTime - startTime < 1 ? performance_enums_1.PerformanceRating.GOOD : performance_enums_1.PerformanceRating.NEEDS_IMPROVEMENT,
        });
        return config;
    }
    catch (error) {
        performance_monitor_1.performanceMonitor.addMetric({
            name: 'environment_config_generation_error',
            value: 0,
            timestamp: Date.now(),
            rating: performance_enums_1.PerformanceRating.POOR,
        });
        return {
            NODE_ENV: environment,
            NEXT_PUBLIC_APP_ENV: environment,
        };
    }
}
/**
 * Validate production configuration
 */
function validateProductionConfig(config) {
    var startTime = performance.now();
    try {
        var errors = [];
        // Validate compression
        if (config.compression !== undefined && typeof config.compression !== 'boolean') {
            errors.push('compression must be a boolean');
        }
        // Validate minification
        if (config.minification !== undefined && typeof config.minification !== 'boolean') {
            errors.push('minification must be a boolean');
        }
        // Validate tree shaking
        if (config.treeShaking !== undefined && typeof config.treeShaking !== 'boolean') {
            errors.push('treeShaking must be a boolean');
        }
        // Validate code splitting
        if (config.codeSplitting !== undefined && typeof config.codeSplitting !== 'boolean') {
            errors.push('codeSplitting must be a boolean');
        }
        // Validate bundle analyzer
        if (config.bundleAnalyzer !== undefined && typeof config.bundleAnalyzer !== 'boolean') {
            errors.push('bundleAnalyzer must be a boolean');
        }
        // Validate source maps
        if (config.sourceMaps !== undefined && typeof config.sourceMaps !== 'boolean') {
            errors.push('sourceMaps must be a boolean');
        }
        var isValid = errors.length === 0;
        // Track performance metric
        var endTime = performance.now();
        performance_monitor_1.performanceMonitor.addMetric({
            name: 'production_config_validation',
            value: endTime - startTime,
            timestamp: Date.now(),
            rating: endTime - startTime < 5 ? performance_enums_1.PerformanceRating.GOOD : performance_enums_1.PerformanceRating.NEEDS_IMPROVEMENT,
        });
        return { isValid: isValid, errors: errors };
    }
    catch (error) {
        performance_monitor_1.performanceMonitor.addMetric({
            name: 'production_config_validation_error',
            value: 0,
            timestamp: Date.now(),
            rating: performance_enums_1.PerformanceRating.POOR,
        });
        return { isValid: false, errors: ['Validation error'] };
    }
}
/**
 * Get production performance metrics
 */
function getProductionMetrics() {
    return performance_monitor_1.performanceMonitor
        .getMetricsByName('production_config_generation')
        .concat(performance_monitor_1.performanceMonitor.getMetricsByName('nextjs_config_generation'))
        .concat(performance_monitor_1.performanceMonitor.getMetricsByName('webpack_config_generation'))
        .concat(performance_monitor_1.performanceMonitor.getMetricsByName('environment_config_generation'))
        .concat(performance_monitor_1.performanceMonitor.getMetricsByName('production_config_validation'));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,