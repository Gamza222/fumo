f87b1728681762e3608a7a2dd5ecc670
"use strict";

/**
 * API Mock Utilities
 *
 * Common API-related mocks for testing HTTP responses,
 * middleware, and API interactions.
 */
/* istanbul ignore next */
function cov_19fl64uucc() {
  var path = "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/api/api.mock.ts";
  var hash = "4e359793926b8141aa549e567dc59fcbed7d276e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/api/api.mock.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 18,
          column: 1
        }
      },
      "1": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 16,
          column: 6
        }
      },
      "2": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 14,
          column: 9
        }
      },
      "3": {
        start: {
          line: 10,
          column: 24
        },
        end: {
          line: 10,
          column: 25
        }
      },
      "4": {
        start: {
          line: 10,
          column: 31
        },
        end: {
          line: 10,
          column: 47
        }
      },
      "5": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 11,
          column: 29
        }
      },
      "6": {
        start: {
          line: 12,
          column: 12
        },
        end: {
          line: 13,
          column: 28
        }
      },
      "7": {
        start: {
          line: 12,
          column: 29
        },
        end: {
          line: 13,
          column: 28
        }
      },
      "8": {
        start: {
          line: 13,
          column: 16
        },
        end: {
          line: 13,
          column: 28
        }
      },
      "9": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 17
        }
      },
      "10": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 43
        }
      },
      "11": {
        start: {
          line: 19,
          column: 0
        },
        end: {
          line: 19,
          column: 62
        }
      },
      "12": {
        start: {
          line: 20,
          column: 0
        },
        end: {
          line: 20,
          column: 152
        }
      },
      "13": {
        start: {
          line: 24,
          column: 25
        },
        end: {
          line: 40,
          column: 1
        }
      },
      "14": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 26,
          column: 49
        }
      },
      "15": {
        start: {
          line: 26,
          column: 32
        },
        end: {
          line: 26,
          column: 47
        }
      },
      "16": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 39,
          column: 288
        }
      },
      "17": {
        start: {
          line: 41,
          column: 0
        },
        end: {
          line: 41,
          column: 48
        }
      },
      "18": {
        start: {
          line: 45,
          column: 29
        },
        end: {
          line: 61,
          column: 1
        }
      },
      "19": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 47,
          column: 49
        }
      },
      "20": {
        start: {
          line: 47,
          column: 32
        },
        end: {
          line: 47,
          column: 47
        }
      },
      "21": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 60,
          column: 288
        }
      },
      "22": {
        start: {
          line: 62,
          column: 0
        },
        end: {
          line: 62,
          column: 56
        }
      },
      "23": {
        start: {
          line: 66,
          column: 24
        },
        end: {
          line: 69,
          column: 1
        }
      },
      "24": {
        start: {
          line: 67,
          column: 4
        },
        end: {
          line: 67,
          column: 49
        }
      },
      "25": {
        start: {
          line: 67,
          column: 32
        },
        end: {
          line: 67,
          column: 47
        }
      },
      "26": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 68,
          column: 460
        }
      },
      "27": {
        start: {
          line: 70,
          column: 0
        },
        end: {
          line: 70,
          column: 46
        }
      },
      "28": {
        start: {
          line: 74,
          column: 25
        },
        end: {
          line: 107,
          column: 1
        }
      },
      "29": {
        start: {
          line: 76,
          column: 4
        },
        end: {
          line: 76,
          column: 44
        }
      },
      "30": {
        start: {
          line: 76,
          column: 29
        },
        end: {
          line: 76,
          column: 42
        }
      },
      "31": {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 77,
          column: 66
        }
      },
      "32": {
        start: {
          line: 77,
          column: 30
        },
        end: {
          line: 77,
          column: 64
        }
      },
      "33": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 106,
          column: 7
        }
      },
      "34": {
        start: {
          line: 108,
          column: 0
        },
        end: {
          line: 108,
          column: 48
        }
      },
      "35": {
        start: {
          line: 112,
          column: 22
        },
        end: {
          line: 127,
          column: 1
        }
      },
      "36": {
        start: {
          line: 113,
          column: 4
        },
        end: {
          line: 113,
          column: 49
        }
      },
      "37": {
        start: {
          line: 113,
          column: 32
        },
        end: {
          line: 113,
          column: 47
        }
      },
      "38": {
        start: {
          line: 114,
          column: 20
        },
        end: {
          line: 114,
          column: 21
        }
      },
      "39": {
        start: {
          line: 115,
          column: 20
        },
        end: {
          line: 115,
          column: 29
        }
      },
      "40": {
        start: {
          line: 116,
          column: 4
        },
        end: {
          line: 118,
          column: 7
        }
      },
      "41": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 117,
          column: 50
        }
      },
      "42": {
        start: {
          line: 120,
          column: 4
        },
        end: {
          line: 120,
          column: 67
        }
      },
      "43": {
        start: {
          line: 121,
          column: 4
        },
        end: {
          line: 126,
          column: 6
        }
      },
      "44": {
        start: {
          line: 123,
          column: 36
        },
        end: {
          line: 123,
          column: 55
        }
      },
      "45": {
        start: {
          line: 124,
          column: 32
        },
        end: {
          line: 124,
          column: 60
        }
      },
      "46": {
        start: {
          line: 125,
          column: 35
        },
        end: {
          line: 125,
          column: 96
        }
      },
      "47": {
        start: {
          line: 128,
          column: 0
        },
        end: {
          line: 128,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 42
          },
          end: {
            line: 8,
            column: 43
          }
        },
        loc: {
          start: {
            line: 8,
            column: 54
          },
          end: {
            line: 18,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 9,
            column: 32
          },
          end: {
            line: 9,
            column: 33
          }
        },
        loc: {
          start: {
            line: 9,
            column: 44
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 9
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 24,
            column: 25
          },
          end: {
            line: 24,
            column: 26
          }
        },
        loc: {
          start: {
            line: 24,
            column: 46
          },
          end: {
            line: 40,
            column: 1
          }
        },
        line: 24
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 45,
            column: 29
          },
          end: {
            line: 45,
            column: 30
          }
        },
        loc: {
          start: {
            line: 45,
            column: 50
          },
          end: {
            line: 61,
            column: 1
          }
        },
        line: 45
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 66,
            column: 24
          },
          end: {
            line: 66,
            column: 25
          }
        },
        loc: {
          start: {
            line: 66,
            column: 45
          },
          end: {
            line: 69,
            column: 1
          }
        },
        line: 66
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 74,
            column: 25
          },
          end: {
            line: 74,
            column: 26
          }
        },
        loc: {
          start: {
            line: 74,
            column: 52
          },
          end: {
            line: 107,
            column: 1
          }
        },
        line: 74
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 112,
            column: 22
          },
          end: {
            line: 112,
            column: 23
          }
        },
        loc: {
          start: {
            line: 112,
            column: 43
          },
          end: {
            line: 127,
            column: 1
          }
        },
        line: 112
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 116,
            column: 22
          },
          end: {
            line: 116,
            column: 23
          }
        },
        loc: {
          start: {
            line: 116,
            column: 42
          },
          end: {
            line: 118,
            column: 5
          }
        },
        line: 116
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 123,
            column: 22
          },
          end: {
            line: 123,
            column: 23
          }
        },
        loc: {
          start: {
            line: 123,
            column: 34
          },
          end: {
            line: 123,
            column: 57
          }
        },
        line: 123
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 124,
            column: 18
          },
          end: {
            line: 124,
            column: 19
          }
        },
        loc: {
          start: {
            line: 124,
            column: 30
          },
          end: {
            line: 124,
            column: 62
          }
        },
        line: 124
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 125,
            column: 21
          },
          end: {
            line: 125,
            column: 22
          }
        },
        loc: {
          start: {
            line: 125,
            column: 33
          },
          end: {
            line: 125,
            column: 98
          }
        },
        line: 125
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 8,
            column: 15
          },
          end: {
            line: 18,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 16
          },
          end: {
            line: 8,
            column: 20
          }
        }, {
          start: {
            line: 8,
            column: 24
          },
          end: {
            line: 8,
            column: 37
          }
        }, {
          start: {
            line: 8,
            column: 42
          },
          end: {
            line: 18,
            column: 1
          }
        }],
        line: 8
      },
      "1": {
        loc: {
          start: {
            line: 9,
            column: 15
          },
          end: {
            line: 16,
            column: 5
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 9,
            column: 15
          },
          end: {
            line: 9,
            column: 28
          }
        }, {
          start: {
            line: 9,
            column: 32
          },
          end: {
            line: 16,
            column: 5
          }
        }],
        line: 9
      },
      "2": {
        loc: {
          start: {
            line: 12,
            column: 29
          },
          end: {
            line: 13,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 12,
            column: 29
          },
          end: {
            line: 13,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 12
      },
      "3": {
        loc: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "4": {
        loc: {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 47,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 47,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "5": {
        loc: {
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 67,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 67,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "6": {
        loc: {
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 76,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 76,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "7": {
        loc: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 77,
            column: 66
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 77,
            column: 66
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "8": {
        loc: {
          start: {
            line: 113,
            column: 4
          },
          end: {
            line: 113,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 4
          },
          end: {
            line: 113,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/api/api.mock.ts",
      mappings: ";AAAA;;;;;GAKG;;;;;;;;;;;;;;AAEH;;GAEG;AACI,IAAM,kBAAkB,GAAG,UAAC,SAAiC;;IAAjC,0BAAA,EAAA,cAAiC;IAAK,OAAA,YACvE,OAAO;gBACL,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;gBACd,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;gBACd,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;gBACd,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;gBACjB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;gBAChB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;gBAClB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;gBAClB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;gBACf,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;;YACjB,GAAC,MAAM,CAAC,QAAQ,IAAG,IAAI,CAAC,EAAE,EAAE;iBAE9B,MAAM,EAAE,GAAG,EACX,UAAU,EAAE,IAAI,EAChB,EAAE,EAAE,IAAI,EACR,GAAG,EAAE,gCAAgC,EACrC,UAAU,EAAE,KAAK,EACjB,IAAI,EAAE,OAAuB,EAC7B,IAAI,EAAE,IAAI,EACV,QAAQ,EAAE,KAAK,EACf,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE,EACtB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,EACf,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE,EACnB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,EACf,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,EACf,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,IACb,SAAS,EACZ;AA5BuE,CA4BvE,CAAC;AA5BU,QAAA,kBAAkB,sBA4B5B;AAEH;;GAEG;AACI,IAAM,sBAAsB,GAAG,UAAC,SAAuC;;IAAvC,0BAAA,EAAA,cAAuC;IAAK,OAAA,YACjF,OAAO;gBACL,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;gBACd,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;gBACd,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;gBACd,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;gBACjB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;gBAChB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;gBAClB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;gBAClB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;gBACf,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;;YACjB,GAAC,MAAM,CAAC,QAAQ,IAAG,IAAI,CAAC,EAAE,EAAE;iBAE9B,MAAM,EAAE,GAAG,EACX,UAAU,EAAE,IAAI,EAChB,EAAE,EAAE,IAAI,EACR,GAAG,EAAE,gCAAgC,EACrC,UAAU,EAAE,KAAK,EACjB,IAAI,EAAE,OAAO,EACb,IAAI,EAAE,IAAI,EACV,QAAQ,EAAE,KAAK,EACf,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE,EACtB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,EACf,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE,EACnB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,EACf,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,EACf,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,IACb,SAAS,EACZ;AA5BiF,CA4BjF,CAAC;AA5BU,QAAA,sBAAsB,0BA4BhC;AAEH;;GAEG;AACI,IAAM,iBAAiB,GAAG,UAAC,SAAgC;IAAhC,0BAAA,EAAA,cAAgC;IAAK,OAAA,YACrE,MAAM,EAAE,KAAK,EACb,GAAG,EAAE,gCAAgC,EACrC,OAAO,EAAE,IAAI,OAAO,EAAE,EACtB,IAAI,EAAE,IAAI,EACV,QAAQ,EAAE,KAAK,EACf,KAAK,EAAE,SAAyB,EAChC,WAAW,EAAE,aAAmC,EAChD,WAAW,EAAE,EAAE,EACf,SAAS,EAAE,EAAE,EACb,SAAS,EAAE,KAAK,EAChB,IAAI,EAAE,MAAqB,EAC3B,QAAQ,EAAE,QAA2B,EACrC,QAAQ,EAAE,EAAE,EACZ,cAAc,EAAE,aAA+B,EAC/C,MAAM,EAAE,IAAI,WAAW,EAAE,EACzB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE,EACtB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,EACf,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE,EACnB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,EACf,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,EACf,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,IACb,SAAS,EACZ;AAvBqE,CAuBrE,CAAC;AAvBU,QAAA,iBAAiB,qBAuB3B;AAEH;;GAEG;AACI,IAAM,kBAAkB,GAAG,UAChC,MAAoB,EACpB,OAAyC;;IADzC,uBAAA,EAAA,YAAoB;IACpB,wBAAA,EAAA,iCAAyC;IACtC,OAAA,CAAC;QACJ,MAAM,QAAA;QACN,UAAU,EAAE,OAAO;QACnB,EAAE,EAAE,KAAK;QACT,OAAO;gBACL,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;gBACd,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;gBACd,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;gBACd,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;gBACjB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;gBAChB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;gBAClB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;gBAClB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;gBACf,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;;YACjB,GAAC,MAAM,CAAC,QAAQ,IAAG,IAAI,CAAC,EAAE,EAAE;eAC7B;QACD,GAAG,EAAE,iCAAiC;QACtC,UAAU,EAAE,KAAK;QACjB,IAAI,EAAE,OAAuB;QAC7B,IAAI,EAAE,IAAI;QACV,QAAQ,EAAE,KAAK;QACf,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;QACtB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;QACf,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;QACnB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;QACrD,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,OAAO,CAAC;QAC1C,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;KACjB,CAAC;AA3BG,CA2BH,CAAC;AA9BU,QAAA,kBAAkB,sBA8B5B;AAEH;;GAEG;AACI,IAAM,eAAe,GAAG,UAAC,SAA0B;IAA1B,0BAAA,EAAA,cAA0B;IACxD,IAAI,SAAS,GAAG,CAAC,CAAC;IAClB,IAAM,SAAS,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;IAE5B,SAAS,CAAC,OAAO,CAAC,UAAC,QAAQ;QACzB,SAAS,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,4CAA4C;IAC5C,SAAS,CAAC,iBAAiB,CAAC,IAAA,0BAAkB,GAAE,CAAC,CAAC;IAElD,OAAO;QACL,KAAK,EAAE,SAAS;QAChB,YAAY,EAAE,cAAM,OAAA,SAAS,EAAE,EAAX,CAAW;QAC/B,QAAQ,EAAE,cAAM,OAAA,SAAS,CAAC,IAAI,CAAC,KAAkB,EAAjC,CAAiC;QACjD,WAAW,EAAE,cAAM,OAAA,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAY,EAAhE,CAAgE;KACpF,CAAC;AACJ,CAAC,CAAC;AAjBW,QAAA,eAAe,mBAiB1B",
      names: [],
      sources: ["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/api/api.mock.ts"],
      sourcesContent: ["/**\n * API Mock Utilities\n *\n * Common API-related mocks for testing HTTP responses,\n * middleware, and API interactions.\n */\n\n/**\n * Creates a mock HTTP response object\n */\nexport const createMockResponse = (overrides: Partial<Response> = {}) => ({\n  headers: {\n    set: jest.fn(),\n    get: jest.fn(),\n    has: jest.fn(),\n    delete: jest.fn(),\n    clear: jest.fn(),\n    forEach: jest.fn(),\n    entries: jest.fn(),\n    keys: jest.fn(),\n    values: jest.fn(),\n    [Symbol.iterator]: jest.fn(),\n  },\n  status: 200,\n  statusText: 'OK',\n  ok: true,\n  url: 'http://localhost:3000/api/test',\n  redirected: false,\n  type: 'basic' as ResponseType,\n  body: null,\n  bodyUsed: false,\n  arrayBuffer: jest.fn(),\n  blob: jest.fn(),\n  formData: jest.fn(),\n  json: jest.fn(),\n  text: jest.fn(),\n  clone: jest.fn(),\n  ...overrides,\n});\n\n/**\n * Creates a mock Next.js response object\n */\nexport const createMockNextResponse = (overrides: Record<string, unknown> = {}) => ({\n  headers: {\n    set: jest.fn(),\n    get: jest.fn(),\n    has: jest.fn(),\n    delete: jest.fn(),\n    clear: jest.fn(),\n    forEach: jest.fn(),\n    entries: jest.fn(),\n    keys: jest.fn(),\n    values: jest.fn(),\n    [Symbol.iterator]: jest.fn(),\n  },\n  status: 200,\n  statusText: 'OK',\n  ok: true,\n  url: 'http://localhost:3000/api/test',\n  redirected: false,\n  type: 'basic',\n  body: null,\n  bodyUsed: false,\n  arrayBuffer: jest.fn(),\n  blob: jest.fn(),\n  formData: jest.fn(),\n  json: jest.fn(),\n  text: jest.fn(),\n  clone: jest.fn(),\n  ...overrides,\n});\n\n/**\n * Creates a mock HTTP request object\n */\nexport const createMockRequest = (overrides: Partial<Request> = {}) => ({\n  method: 'GET',\n  url: 'http://localhost:3000/api/test',\n  headers: new Headers(),\n  body: null,\n  bodyUsed: false,\n  cache: 'default' as RequestCache,\n  credentials: 'same-origin' as RequestCredentials,\n  destination: '',\n  integrity: '',\n  keepalive: false,\n  mode: 'cors' as RequestMode,\n  redirect: 'follow' as RequestRedirect,\n  referrer: '',\n  referrerPolicy: 'no-referrer' as ReferrerPolicy,\n  signal: new AbortSignal(),\n  arrayBuffer: jest.fn(),\n  blob: jest.fn(),\n  formData: jest.fn(),\n  json: jest.fn(),\n  text: jest.fn(),\n  clone: jest.fn(),\n  ...overrides,\n});\n\n/**\n * Creates a mock API error response\n */\nexport const createMockApiError = (\n  status: number = 500,\n  message: string = 'Internal Server Error'\n) => ({\n  status,\n  statusText: message,\n  ok: false,\n  headers: {\n    set: jest.fn(),\n    get: jest.fn(),\n    has: jest.fn(),\n    delete: jest.fn(),\n    clear: jest.fn(),\n    forEach: jest.fn(),\n    entries: jest.fn(),\n    keys: jest.fn(),\n    values: jest.fn(),\n    [Symbol.iterator]: jest.fn(),\n  },\n  url: 'http://localhost:3000/api/error',\n  redirected: false,\n  type: 'error' as ResponseType,\n  body: null,\n  bodyUsed: false,\n  arrayBuffer: jest.fn(),\n  blob: jest.fn(),\n  formData: jest.fn(),\n  json: jest.fn().mockResolvedValue({ error: message }),\n  text: jest.fn().mockResolvedValue(message),\n  clone: jest.fn(),\n});\n\n/**\n * Creates a mock fetch function\n */\nexport const createMockFetch = (responses: Response[] = []) => {\n  let callCount = 0;\n  const mockFetch = jest.fn();\n\n  responses.forEach((response) => {\n    mockFetch.mockResolvedValueOnce(response);\n  });\n\n  // Default response for any additional calls\n  mockFetch.mockResolvedValue(createMockResponse());\n\n  return {\n    fetch: mockFetch,\n    getCallCount: () => callCount++,\n    getCalls: () => mockFetch.mock.calls as unknown[],\n    getLastCall: () => mockFetch.mock.calls[mockFetch.mock.calls.length - 1] as unknown,\n  };\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4e359793926b8141aa549e567dc59fcbed7d276e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_19fl64uucc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_19fl64uucc();
var __assign =
/* istanbul ignore next */
(cov_19fl64uucc().s[0]++,
/* istanbul ignore next */
(cov_19fl64uucc().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_19fl64uucc().b[0][1]++, this.__assign) ||
/* istanbul ignore next */
(cov_19fl64uucc().b[0][2]++, function () {
  /* istanbul ignore next */
  cov_19fl64uucc().f[0]++;
  cov_19fl64uucc().s[1]++;
  __assign =
  /* istanbul ignore next */
  (cov_19fl64uucc().b[1][0]++, Object.assign) ||
  /* istanbul ignore next */
  (cov_19fl64uucc().b[1][1]++, function (t) {
    /* istanbul ignore next */
    cov_19fl64uucc().f[1]++;
    cov_19fl64uucc().s[2]++;
    for (var s, i =
      /* istanbul ignore next */
      (cov_19fl64uucc().s[3]++, 1), n =
      /* istanbul ignore next */
      (cov_19fl64uucc().s[4]++, arguments.length); i < n; i++) {
      /* istanbul ignore next */
      cov_19fl64uucc().s[5]++;
      s = arguments[i];
      /* istanbul ignore next */
      cov_19fl64uucc().s[6]++;
      for (var p in s) {
        /* istanbul ignore next */
        cov_19fl64uucc().s[7]++;
        if (Object.prototype.hasOwnProperty.call(s, p)) {
          /* istanbul ignore next */
          cov_19fl64uucc().b[2][0]++;
          cov_19fl64uucc().s[8]++;
          t[p] = s[p];
        } else
        /* istanbul ignore next */
        {
          cov_19fl64uucc().b[2][1]++;
        }
      }
    }
    /* istanbul ignore next */
    cov_19fl64uucc().s[9]++;
    return t;
  });
  /* istanbul ignore next */
  cov_19fl64uucc().s[10]++;
  return __assign.apply(this, arguments);
}));
/* istanbul ignore next */
cov_19fl64uucc().s[11]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_19fl64uucc().s[12]++;
exports.createMockFetch = exports.createMockApiError = exports.createMockRequest = exports.createMockNextResponse = exports.createMockResponse = void 0;
/**
 * Creates a mock HTTP response object
 */
/* istanbul ignore next */
cov_19fl64uucc().s[13]++;
var createMockResponse = function (overrides) {
  /* istanbul ignore next */
  cov_19fl64uucc().f[2]++;
  var _a;
  /* istanbul ignore next */
  cov_19fl64uucc().s[14]++;
  if (overrides === void 0) {
    /* istanbul ignore next */
    cov_19fl64uucc().b[3][0]++;
    cov_19fl64uucc().s[15]++;
    overrides = {};
  } else
  /* istanbul ignore next */
  {
    cov_19fl64uucc().b[3][1]++;
  }
  cov_19fl64uucc().s[16]++;
  return __assign({
    headers: (_a = {
      set: jest.fn(),
      get: jest.fn(),
      has: jest.fn(),
      delete: jest.fn(),
      clear: jest.fn(),
      forEach: jest.fn(),
      entries: jest.fn(),
      keys: jest.fn(),
      values: jest.fn()
    }, _a[Symbol.iterator] = jest.fn(), _a),
    status: 200,
    statusText: 'OK',
    ok: true,
    url: 'http://localhost:3000/api/test',
    redirected: false,
    type: 'basic',
    body: null,
    bodyUsed: false,
    arrayBuffer: jest.fn(),
    blob: jest.fn(),
    formData: jest.fn(),
    json: jest.fn(),
    text: jest.fn(),
    clone: jest.fn()
  }, overrides);
};
/* istanbul ignore next */
cov_19fl64uucc().s[17]++;
exports.createMockResponse = createMockResponse;
/**
 * Creates a mock Next.js response object
 */
/* istanbul ignore next */
cov_19fl64uucc().s[18]++;
var createMockNextResponse = function (overrides) {
  /* istanbul ignore next */
  cov_19fl64uucc().f[3]++;
  var _a;
  /* istanbul ignore next */
  cov_19fl64uucc().s[19]++;
  if (overrides === void 0) {
    /* istanbul ignore next */
    cov_19fl64uucc().b[4][0]++;
    cov_19fl64uucc().s[20]++;
    overrides = {};
  } else
  /* istanbul ignore next */
  {
    cov_19fl64uucc().b[4][1]++;
  }
  cov_19fl64uucc().s[21]++;
  return __assign({
    headers: (_a = {
      set: jest.fn(),
      get: jest.fn(),
      has: jest.fn(),
      delete: jest.fn(),
      clear: jest.fn(),
      forEach: jest.fn(),
      entries: jest.fn(),
      keys: jest.fn(),
      values: jest.fn()
    }, _a[Symbol.iterator] = jest.fn(), _a),
    status: 200,
    statusText: 'OK',
    ok: true,
    url: 'http://localhost:3000/api/test',
    redirected: false,
    type: 'basic',
    body: null,
    bodyUsed: false,
    arrayBuffer: jest.fn(),
    blob: jest.fn(),
    formData: jest.fn(),
    json: jest.fn(),
    text: jest.fn(),
    clone: jest.fn()
  }, overrides);
};
/* istanbul ignore next */
cov_19fl64uucc().s[22]++;
exports.createMockNextResponse = createMockNextResponse;
/**
 * Creates a mock HTTP request object
 */
/* istanbul ignore next */
cov_19fl64uucc().s[23]++;
var createMockRequest = function (overrides) {
  /* istanbul ignore next */
  cov_19fl64uucc().f[4]++;
  cov_19fl64uucc().s[24]++;
  if (overrides === void 0) {
    /* istanbul ignore next */
    cov_19fl64uucc().b[5][0]++;
    cov_19fl64uucc().s[25]++;
    overrides = {};
  } else
  /* istanbul ignore next */
  {
    cov_19fl64uucc().b[5][1]++;
  }
  cov_19fl64uucc().s[26]++;
  return __assign({
    method: 'GET',
    url: 'http://localhost:3000/api/test',
    headers: new Headers(),
    body: null,
    bodyUsed: false,
    cache: 'default',
    credentials: 'same-origin',
    destination: '',
    integrity: '',
    keepalive: false,
    mode: 'cors',
    redirect: 'follow',
    referrer: '',
    referrerPolicy: 'no-referrer',
    signal: new AbortSignal(),
    arrayBuffer: jest.fn(),
    blob: jest.fn(),
    formData: jest.fn(),
    json: jest.fn(),
    text: jest.fn(),
    clone: jest.fn()
  }, overrides);
};
/* istanbul ignore next */
cov_19fl64uucc().s[27]++;
exports.createMockRequest = createMockRequest;
/**
 * Creates a mock API error response
 */
/* istanbul ignore next */
cov_19fl64uucc().s[28]++;
var createMockApiError = function (status, message) {
  /* istanbul ignore next */
  cov_19fl64uucc().f[5]++;
  var _a;
  /* istanbul ignore next */
  cov_19fl64uucc().s[29]++;
  if (status === void 0) {
    /* istanbul ignore next */
    cov_19fl64uucc().b[6][0]++;
    cov_19fl64uucc().s[30]++;
    status = 500;
  } else
  /* istanbul ignore next */
  {
    cov_19fl64uucc().b[6][1]++;
  }
  cov_19fl64uucc().s[31]++;
  if (message === void 0) {
    /* istanbul ignore next */
    cov_19fl64uucc().b[7][0]++;
    cov_19fl64uucc().s[32]++;
    message = 'Internal Server Error';
  } else
  /* istanbul ignore next */
  {
    cov_19fl64uucc().b[7][1]++;
  }
  cov_19fl64uucc().s[33]++;
  return {
    status: status,
    statusText: message,
    ok: false,
    headers: (_a = {
      set: jest.fn(),
      get: jest.fn(),
      has: jest.fn(),
      delete: jest.fn(),
      clear: jest.fn(),
      forEach: jest.fn(),
      entries: jest.fn(),
      keys: jest.fn(),
      values: jest.fn()
    }, _a[Symbol.iterator] = jest.fn(), _a),
    url: 'http://localhost:3000/api/error',
    redirected: false,
    type: 'error',
    body: null,
    bodyUsed: false,
    arrayBuffer: jest.fn(),
    blob: jest.fn(),
    formData: jest.fn(),
    json: jest.fn().mockResolvedValue({
      error: message
    }),
    text: jest.fn().mockResolvedValue(message),
    clone: jest.fn()
  };
};
/* istanbul ignore next */
cov_19fl64uucc().s[34]++;
exports.createMockApiError = createMockApiError;
/**
 * Creates a mock fetch function
 */
/* istanbul ignore next */
cov_19fl64uucc().s[35]++;
var createMockFetch = function (responses) {
  /* istanbul ignore next */
  cov_19fl64uucc().f[6]++;
  cov_19fl64uucc().s[36]++;
  if (responses === void 0) {
    /* istanbul ignore next */
    cov_19fl64uucc().b[8][0]++;
    cov_19fl64uucc().s[37]++;
    responses = [];
  } else
  /* istanbul ignore next */
  {
    cov_19fl64uucc().b[8][1]++;
  }
  var callCount =
  /* istanbul ignore next */
  (cov_19fl64uucc().s[38]++, 0);
  var mockFetch =
  /* istanbul ignore next */
  (cov_19fl64uucc().s[39]++, jest.fn());
  /* istanbul ignore next */
  cov_19fl64uucc().s[40]++;
  responses.forEach(function (response) {
    /* istanbul ignore next */
    cov_19fl64uucc().f[7]++;
    cov_19fl64uucc().s[41]++;
    mockFetch.mockResolvedValueOnce(response);
  });
  // Default response for any additional calls
  /* istanbul ignore next */
  cov_19fl64uucc().s[42]++;
  mockFetch.mockResolvedValue((0, exports.createMockResponse)());
  /* istanbul ignore next */
  cov_19fl64uucc().s[43]++;
  return {
    fetch: mockFetch,
    getCallCount: function () {
      /* istanbul ignore next */
      cov_19fl64uucc().f[8]++;
      cov_19fl64uucc().s[44]++;
      return callCount++;
    },
    getCalls: function () {
      /* istanbul ignore next */
      cov_19fl64uucc().f[9]++;
      cov_19fl64uucc().s[45]++;
      return mockFetch.mock.calls;
    },
    getLastCall: function () {
      /* istanbul ignore next */
      cov_19fl64uucc().f[10]++;
      cov_19fl64uucc().s[46]++;
      return mockFetch.mock.calls[mockFetch.mock.calls.length - 1];
    }
  };
};
/* istanbul ignore next */
cov_19fl64uucc().s[47]++;
exports.createMockFetch = createMockFetch;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMTlmbDY0dXVjYyIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwidHlwZSIsImxvY2F0aW9ucyIsInVuZGVmaW5lZCIsInMiLCJmIiwiYiIsImlucHV0U291cmNlTWFwIiwiZmlsZSIsIm1hcHBpbmdzIiwibmFtZXMiLCJzb3VyY2VzIiwic291cmNlc0NvbnRlbnQiLCJ2ZXJzaW9uIiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsImNyZWF0ZU1vY2tSZXNwb25zZSIsIm92ZXJyaWRlcyIsIl9fYXNzaWduIiwiaGVhZGVycyIsIl9hIiwic2V0IiwiamVzdCIsImZuIiwiZ2V0IiwiaGFzIiwiZGVsZXRlIiwiY2xlYXIiLCJmb3JFYWNoIiwiZW50cmllcyIsImtleXMiLCJ2YWx1ZXMiLCJTeW1ib2wiLCJpdGVyYXRvciIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJvayIsInVybCIsInJlZGlyZWN0ZWQiLCJib2R5IiwiYm9keVVzZWQiLCJhcnJheUJ1ZmZlciIsImJsb2IiLCJmb3JtRGF0YSIsImpzb24iLCJ0ZXh0IiwiY2xvbmUiLCJleHBvcnRzIiwiY3JlYXRlTW9ja05leHRSZXNwb25zZSIsImNyZWF0ZU1vY2tSZXF1ZXN0IiwibWV0aG9kIiwiSGVhZGVycyIsImNhY2hlIiwiY3JlZGVudGlhbHMiLCJkZXN0aW5hdGlvbiIsImludGVncml0eSIsImtlZXBhbGl2ZSIsIm1vZGUiLCJyZWRpcmVjdCIsInJlZmVycmVyIiwicmVmZXJyZXJQb2xpY3kiLCJzaWduYWwiLCJBYm9ydFNpZ25hbCIsImNyZWF0ZU1vY2tBcGlFcnJvciIsIm1lc3NhZ2UiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsImVycm9yIiwiY3JlYXRlTW9ja0ZldGNoIiwicmVzcG9uc2VzIiwiY2FsbENvdW50IiwibW9ja0ZldGNoIiwicmVzcG9uc2UiLCJtb2NrUmVzb2x2ZWRWYWx1ZU9uY2UiLCJmZXRjaCIsImdldENhbGxDb3VudCIsImdldENhbGxzIiwibW9jayIsImNhbGxzIiwiZ2V0TGFzdENhbGwiLCJsZW5ndGgiXSwic291cmNlcyI6WyIvVXNlcnMvZ2FtemFyYW1hemFub3YvRGVza3RvcC9mdW1vL3NyYy9zaGFyZWQvdGVzdGluZy9tb2Nrcy9pbmZyYXN0cnVjdHVyZS9saWIvYXBpL2FwaS5tb2NrLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQVBJIE1vY2sgVXRpbGl0aWVzXG4gKlxuICogQ29tbW9uIEFQSS1yZWxhdGVkIG1vY2tzIGZvciB0ZXN0aW5nIEhUVFAgcmVzcG9uc2VzLFxuICogbWlkZGxld2FyZSwgYW5kIEFQSSBpbnRlcmFjdGlvbnMuXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIGEgbW9jayBIVFRQIHJlc3BvbnNlIG9iamVjdFxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlTW9ja1Jlc3BvbnNlID0gKG92ZXJyaWRlczogUGFydGlhbDxSZXNwb25zZT4gPSB7fSkgPT4gKHtcbiAgaGVhZGVyczoge1xuICAgIHNldDogamVzdC5mbigpLFxuICAgIGdldDogamVzdC5mbigpLFxuICAgIGhhczogamVzdC5mbigpLFxuICAgIGRlbGV0ZTogamVzdC5mbigpLFxuICAgIGNsZWFyOiBqZXN0LmZuKCksXG4gICAgZm9yRWFjaDogamVzdC5mbigpLFxuICAgIGVudHJpZXM6IGplc3QuZm4oKSxcbiAgICBrZXlzOiBqZXN0LmZuKCksXG4gICAgdmFsdWVzOiBqZXN0LmZuKCksXG4gICAgW1N5bWJvbC5pdGVyYXRvcl06IGplc3QuZm4oKSxcbiAgfSxcbiAgc3RhdHVzOiAyMDAsXG4gIHN0YXR1c1RleHQ6ICdPSycsXG4gIG9rOiB0cnVlLFxuICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjMwMDAvYXBpL3Rlc3QnLFxuICByZWRpcmVjdGVkOiBmYWxzZSxcbiAgdHlwZTogJ2Jhc2ljJyBhcyBSZXNwb25zZVR5cGUsXG4gIGJvZHk6IG51bGwsXG4gIGJvZHlVc2VkOiBmYWxzZSxcbiAgYXJyYXlCdWZmZXI6IGplc3QuZm4oKSxcbiAgYmxvYjogamVzdC5mbigpLFxuICBmb3JtRGF0YTogamVzdC5mbigpLFxuICBqc29uOiBqZXN0LmZuKCksXG4gIHRleHQ6IGplc3QuZm4oKSxcbiAgY2xvbmU6IGplc3QuZm4oKSxcbiAgLi4ub3ZlcnJpZGVzLFxufSk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1vY2sgTmV4dC5qcyByZXNwb25zZSBvYmplY3RcbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZU1vY2tOZXh0UmVzcG9uc2UgPSAob3ZlcnJpZGVzOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiA9IHt9KSA9PiAoe1xuICBoZWFkZXJzOiB7XG4gICAgc2V0OiBqZXN0LmZuKCksXG4gICAgZ2V0OiBqZXN0LmZuKCksXG4gICAgaGFzOiBqZXN0LmZuKCksXG4gICAgZGVsZXRlOiBqZXN0LmZuKCksXG4gICAgY2xlYXI6IGplc3QuZm4oKSxcbiAgICBmb3JFYWNoOiBqZXN0LmZuKCksXG4gICAgZW50cmllczogamVzdC5mbigpLFxuICAgIGtleXM6IGplc3QuZm4oKSxcbiAgICB2YWx1ZXM6IGplc3QuZm4oKSxcbiAgICBbU3ltYm9sLml0ZXJhdG9yXTogamVzdC5mbigpLFxuICB9LFxuICBzdGF0dXM6IDIwMCxcbiAgc3RhdHVzVGV4dDogJ09LJyxcbiAgb2s6IHRydWUsXG4gIHVybDogJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvdGVzdCcsXG4gIHJlZGlyZWN0ZWQ6IGZhbHNlLFxuICB0eXBlOiAnYmFzaWMnLFxuICBib2R5OiBudWxsLFxuICBib2R5VXNlZDogZmFsc2UsXG4gIGFycmF5QnVmZmVyOiBqZXN0LmZuKCksXG4gIGJsb2I6IGplc3QuZm4oKSxcbiAgZm9ybURhdGE6IGplc3QuZm4oKSxcbiAganNvbjogamVzdC5mbigpLFxuICB0ZXh0OiBqZXN0LmZuKCksXG4gIGNsb25lOiBqZXN0LmZuKCksXG4gIC4uLm92ZXJyaWRlcyxcbn0pO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtb2NrIEhUVFAgcmVxdWVzdCBvYmplY3RcbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZU1vY2tSZXF1ZXN0ID0gKG92ZXJyaWRlczogUGFydGlhbDxSZXF1ZXN0PiA9IHt9KSA9PiAoe1xuICBtZXRob2Q6ICdHRVQnLFxuICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjMwMDAvYXBpL3Rlc3QnLFxuICBoZWFkZXJzOiBuZXcgSGVhZGVycygpLFxuICBib2R5OiBudWxsLFxuICBib2R5VXNlZDogZmFsc2UsXG4gIGNhY2hlOiAnZGVmYXVsdCcgYXMgUmVxdWVzdENhY2hlLFxuICBjcmVkZW50aWFsczogJ3NhbWUtb3JpZ2luJyBhcyBSZXF1ZXN0Q3JlZGVudGlhbHMsXG4gIGRlc3RpbmF0aW9uOiAnJyxcbiAgaW50ZWdyaXR5OiAnJyxcbiAga2VlcGFsaXZlOiBmYWxzZSxcbiAgbW9kZTogJ2NvcnMnIGFzIFJlcXVlc3RNb2RlLFxuICByZWRpcmVjdDogJ2ZvbGxvdycgYXMgUmVxdWVzdFJlZGlyZWN0LFxuICByZWZlcnJlcjogJycsXG4gIHJlZmVycmVyUG9saWN5OiAnbm8tcmVmZXJyZXInIGFzIFJlZmVycmVyUG9saWN5LFxuICBzaWduYWw6IG5ldyBBYm9ydFNpZ25hbCgpLFxuICBhcnJheUJ1ZmZlcjogamVzdC5mbigpLFxuICBibG9iOiBqZXN0LmZuKCksXG4gIGZvcm1EYXRhOiBqZXN0LmZuKCksXG4gIGpzb246IGplc3QuZm4oKSxcbiAgdGV4dDogamVzdC5mbigpLFxuICBjbG9uZTogamVzdC5mbigpLFxuICAuLi5vdmVycmlkZXMsXG59KTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbW9jayBBUEkgZXJyb3IgcmVzcG9uc2VcbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZU1vY2tBcGlFcnJvciA9IChcbiAgc3RhdHVzOiBudW1iZXIgPSA1MDAsXG4gIG1lc3NhZ2U6IHN0cmluZyA9ICdJbnRlcm5hbCBTZXJ2ZXIgRXJyb3InXG4pID0+ICh7XG4gIHN0YXR1cyxcbiAgc3RhdHVzVGV4dDogbWVzc2FnZSxcbiAgb2s6IGZhbHNlLFxuICBoZWFkZXJzOiB7XG4gICAgc2V0OiBqZXN0LmZuKCksXG4gICAgZ2V0OiBqZXN0LmZuKCksXG4gICAgaGFzOiBqZXN0LmZuKCksXG4gICAgZGVsZXRlOiBqZXN0LmZuKCksXG4gICAgY2xlYXI6IGplc3QuZm4oKSxcbiAgICBmb3JFYWNoOiBqZXN0LmZuKCksXG4gICAgZW50cmllczogamVzdC5mbigpLFxuICAgIGtleXM6IGplc3QuZm4oKSxcbiAgICB2YWx1ZXM6IGplc3QuZm4oKSxcbiAgICBbU3ltYm9sLml0ZXJhdG9yXTogamVzdC5mbigpLFxuICB9LFxuICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjMwMDAvYXBpL2Vycm9yJyxcbiAgcmVkaXJlY3RlZDogZmFsc2UsXG4gIHR5cGU6ICdlcnJvcicgYXMgUmVzcG9uc2VUeXBlLFxuICBib2R5OiBudWxsLFxuICBib2R5VXNlZDogZmFsc2UsXG4gIGFycmF5QnVmZmVyOiBqZXN0LmZuKCksXG4gIGJsb2I6IGplc3QuZm4oKSxcbiAgZm9ybURhdGE6IGplc3QuZm4oKSxcbiAganNvbjogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHsgZXJyb3I6IG1lc3NhZ2UgfSksXG4gIHRleHQ6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShtZXNzYWdlKSxcbiAgY2xvbmU6IGplc3QuZm4oKSxcbn0pO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtb2NrIGZldGNoIGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVNb2NrRmV0Y2ggPSAocmVzcG9uc2VzOiBSZXNwb25zZVtdID0gW10pID0+IHtcbiAgbGV0IGNhbGxDb3VudCA9IDA7XG4gIGNvbnN0IG1vY2tGZXRjaCA9IGplc3QuZm4oKTtcblxuICByZXNwb25zZXMuZm9yRWFjaCgocmVzcG9uc2UpID0+IHtcbiAgICBtb2NrRmV0Y2gubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHJlc3BvbnNlKTtcbiAgfSk7XG5cbiAgLy8gRGVmYXVsdCByZXNwb25zZSBmb3IgYW55IGFkZGl0aW9uYWwgY2FsbHNcbiAgbW9ja0ZldGNoLm1vY2tSZXNvbHZlZFZhbHVlKGNyZWF0ZU1vY2tSZXNwb25zZSgpKTtcblxuICByZXR1cm4ge1xuICAgIGZldGNoOiBtb2NrRmV0Y2gsXG4gICAgZ2V0Q2FsbENvdW50OiAoKSA9PiBjYWxsQ291bnQrKyxcbiAgICBnZXRDYWxsczogKCkgPT4gbW9ja0ZldGNoLm1vY2suY2FsbHMgYXMgdW5rbm93bltdLFxuICAgIGdldExhc3RDYWxsOiAoKSA9PiBtb2NrRmV0Y2gubW9jay5jYWxsc1ttb2NrRmV0Y2gubW9jay5jYWxscy5sZW5ndGggLSAxXSBhcyB1bmtub3duLFxuICB9O1xufTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7O0FBQUE7QUFBQSxTQUFBQSxlQUFBO0VBQUEsSUFBQUMsSUFBQTtFQUFBLElBQUFDLElBQUE7RUFBQSxJQUFBQyxNQUFBLE9BQUFDLFFBQUE7RUFBQSxJQUFBQyxHQUFBO0VBQUEsSUFBQUMsWUFBQTtJQUFBTCxJQUFBO0lBQUFNLFlBQUE7TUFBQTtRQUFBQyxLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7SUFBQTtJQUFBRSxLQUFBO01BQUE7UUFBQUMsSUFBQTtRQUFBQyxJQUFBO1VBQUFOLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFLLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQUksSUFBQTtRQUFBQyxJQUFBO1VBQUFOLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFLLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQUksSUFBQTtRQUFBQyxJQUFBO1VBQUFOLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFLLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQUksSUFBQTtRQUFBQyxJQUFBO1VBQUFOLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFLLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQUksSUFBQTtRQUFBQyxJQUFBO1VBQUFOLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFLLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQUksSUFBQTtRQUFBQyxJQUFBO1VBQUFOLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFLLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQUksSUFBQTtRQUFBQyxJQUFBO1VBQUFOLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFLLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQUksSUFBQTtRQUFBQyxJQUFBO1VBQUFOLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFLLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQUksSUFBQTtRQUFBQyxJQUFBO1VBQUFOLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFLLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQUksSUFBQTtRQUFBQyxJQUFBO1VBQUFOLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFLLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQUksSUFBQTtRQUFBQyxJQUFBO1VBQUFOLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFLLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO0lBQUE7SUFBQU8sU0FBQTtNQUFBO1FBQUFELEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7SUFBQTtJQUFBVyxDQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO0lBQUE7SUFBQUMsQ0FBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7SUFBQTtJQUFBQyxDQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO0lBQUE7SUFBQUMsY0FBQTtNQUFBQyxJQUFBO01BQUFDLFFBQUE7TUFBQUMsS0FBQTtNQUFBQyxPQUFBO01BQUFDLGNBQUE7TUFBQUMsT0FBQTtJQUFBO0lBQUFDLGVBQUE7SUFBQTVCLElBQUE7RUFBQTtFQUFBLElBQUE2QixRQUFBLEdBQUE1QixNQUFBLENBQUFFLEdBQUEsTUFBQUYsTUFBQSxDQUFBRSxHQUFBO0VBQUEsS0FBQTBCLFFBQUEsQ0FBQTlCLElBQUEsS0FBQThCLFFBQUEsQ0FBQTlCLElBQUEsRUFBQUMsSUFBQSxLQUFBQSxJQUFBO0lBQUE2QixRQUFBLENBQUE5QixJQUFBLElBQUFLLFlBQUE7RUFBQTtFQUFBLElBQUEwQixjQUFBLEdBQUFELFFBQUEsQ0FBQTlCLElB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