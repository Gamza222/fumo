a2f861b5ba45e57a52b180706a137727
"use strict";
/**
 * HTTP Caching Utilities
 *
 * HTTP caching strategies and configuration for maximum performance.
 * Built on top of existing performance monitoring infrastructure.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateCacheControlHeader = generateCacheControlHeader;
exports.generateETagHeader = generateETagHeader;
exports.generateLastModifiedHeader = generateLastModifiedHeader;
exports.getCacheStrategy = getCacheStrategy;
exports.generateCacheHeaders = generateCacheHeaders;
exports.isCacheableRequest = isCacheableRequest;
exports.generateCacheKey = generateCacheKey;
exports.getCacheMetrics = getCacheMetrics;
var performance_enums_1 = require("../../types/performance.enums");
var performance_monitor_1 = require("../performance-monitor");
// ============================================================================
// DEFAULT CONFIGURATIONS
// ============================================================================
// const _DEFAULT_CACHE_CONFIG: HTTPCacheConfig = {
//   maxAge: 31536000, // 1 year
//   sMaxAge: 31536000, // 1 year
//   etag: true,
//   lastModified: true,
//   directives: ['public'],
// };
var CACHE_STRATEGIES = {
    static: {
        type: 'static',
        config: {
            maxAge: 31536000, // 1 year
            sMaxAge: 31536000, // 1 year
            etag: true,
            lastModified: true,
            directives: ['public', 'immutable'],
        },
        keyPattern: 'static-*',
    },
    dynamic: {
        type: 'dynamic',
        config: {
            maxAge: 3600, // 1 hour
            sMaxAge: 86400, // 1 day
            etag: true,
            lastModified: true,
            directives: ['public'],
        },
        keyPattern: 'dynamic-*',
    },
    api: {
        type: 'api',
        config: {
            maxAge: 300, // 5 minutes
            sMaxAge: 3600, // 1 hour
            etag: true,
            lastModified: false,
            directives: ['public'],
        },
        keyPattern: 'api-*',
    },
    image: {
        type: 'image',
        config: {
            maxAge: 2592000, // 30 days
            sMaxAge: 31536000, // 1 year
            etag: true,
            lastModified: true,
            directives: ['public', 'immutable'],
        },
        keyPattern: 'image-*',
    },
    font: {
        type: 'font',
        config: {
            maxAge: 31536000, // 1 year
            sMaxAge: 31536000, // 1 year
            etag: true,
            lastModified: true,
            directives: ['public', 'immutable'],
        },
        keyPattern: 'font-*',
    },
};
// ============================================================================
// HTTP CACHING UTILITIES
// ============================================================================
/**
 * Generate Cache-Control header
 */
function generateCacheControlHeader(config) {
    var startTime = performance.now();
    try {
        var directives = [];
        // Add max-age
        if (config.maxAge) {
            directives.push("max-age=".concat(config.maxAge));
        }
        // Add s-maxage
        if (config.sMaxAge) {
            directives.push("s-maxage=".concat(config.sMaxAge));
        }
        // Add custom directives
        if (config.directives) {
            directives.push.apply(directives, config.directives);
        }
        var cacheControl = directives.join(', ');
        // Track performance metric
        var endTime = performance.now();
        performance_monitor_1.performanceMonitor.addMetric({
            name: 'cache_control_generation',
            value: endTime - startTime,
            timestamp: Date.now(),
            rating: endTime - startTime < 1 ? performance_enums_1.PerformanceRating.GOOD : performance_enums_1.PerformanceRating.NEEDS_IMPROVEMENT,
        });
        return cacheControl;
    }
    catch (error) {
        performance_monitor_1.performanceMonitor.addMetric({
            name: 'cache_control_generation_error',
            value: 0,
            timestamp: Date.now(),
            rating: performance_enums_1.PerformanceRating.POOR,
        });
        return 'no-cache';
    }
}
/**
 * Generate ETag header
 */
function generateETagHeader(content) {
    var startTime = performance.now();
    try {
        // Simple ETag generation based on content hash
        var hash = 0;
        for (var i = 0; i < content.length; i++) {
            var char = content.charCodeAt(i);
            hash = (hash << 5) - hash + char;
            hash = hash & hash; // Convert to 32-bit integer
        }
        var etag = "\"".concat(Math.abs(hash).toString(16), "\"");
        // Track performance metric
        var endTime = performance.now();
        performance_monitor_1.performanceMonitor.addMetric({
            name: 'etag_generation',
            value: endTime - startTime,
            timestamp: Date.now(),
            rating: endTime - startTime < 5 ? performance_enums_1.PerformanceRating.GOOD : performance_enums_1.PerformanceRating.NEEDS_IMPROVEMENT,
        });
        return etag;
    }
    catch (error) {
        performance_monitor_1.performanceMonitor.addMetric({
            name: 'etag_generation_error',
            value: 0,
            timestamp: Date.now(),
            rating: performance_enums_1.PerformanceRating.POOR,
        });
        return "\"".concat(Date.now(), "\"");
    }
}
/**
 * Generate Last-Modified header
 */
function generateLastModifiedHeader(date) {
    if (date === void 0) { date = new Date(); }
    var startTime = performance.now();
    try {
        var lastModified = date.toUTCString();
        // Track performance metric
        var endTime = performance.now();
        performance_monitor_1.performanceMonitor.addMetric({
            name: 'last_modified_generation',
            value: endTime - startTime,
            timestamp: Date.now(),
            rating: endTime - startTime < 1 ? performance_enums_1.PerformanceRating.GOOD : performance_enums_1.PerformanceRating.NEEDS_IMPROVEMENT,
        });
        return lastModified;
    }
    catch (error) {
        performance_monitor_1.performanceMonitor.addMetric({
            name: 'last_modified_generation_error',
            value: 0,
            timestamp: Date.now(),
            rating: performance_enums_1.PerformanceRating.POOR,
        });
        return new Date().toUTCString();
    }
}
/**
 * Get cache strategy for resource type
 */
function getCacheStrategy(resourceType) {
    var startTime = performance.now();
    try {
        var strategy = CACHE_STRATEGIES[resourceType] || CACHE_STRATEGIES.dynamic;
        // Track performance metric
        var endTime = performance.now();
        performance_monitor_1.performanceMonitor.addMetric({
            name: 'cache_strategy_lookup',
            value: endTime - startTime,
            timestamp: Date.now(),
            rating: endTime - startTime < 1 ? performance_enums_1.PerformanceRating.GOOD : performance_enums_1.PerformanceRating.NEEDS_IMPROVEMENT,
        });
        return strategy;
    }
    catch (error) {
        performance_monitor_1.performanceMonitor.addMetric({
            name: 'cache_strategy_lookup_error',
            value: 0,
            timestamp: Date.now(),
            rating: performance_enums_1.PerformanceRating.POOR,
        });
        return CACHE_STRATEGIES.dynamic;
    }
}
/**
 * Generate cache headers for resource
 */
function generateCacheHeaders(resourceType, content, lastModified) {
    var startTime = performance.now();
    try {
        var strategy = getCacheStrategy(resourceType);
        var headers = {};
        // Generate Cache-Control header
        headers['Cache-Control'] = generateCacheControlHeader(strategy.config);
        // Generate ETag header
        if (strategy.config.etag) {
            headers['ETag'] = generateETagHeader(content);
        }
        // Generate Last-Modified header
        if (strategy.config.lastModified) {
            headers['Last-Modified'] = generateLastModifiedHeader(lastModified);
        }
        // Track performance metric
        var endTime = performance.now();
        performance_monitor_1.performanceMonitor.addMetric({
            name: 'cache_headers_generation',
            value: endTime - startTime,
            timestamp: Date.now(),
            rating: endTime - startTime < 10 ? performance_enums_1.PerformanceRating.GOOD : performance_enums_1.PerformanceRating.NEEDS_IMPROVEMENT,
        });
        return headers;
    }
    catch (error) {
        performance_monitor_1.performanceMonitor.addMetric({
            name: 'cache_headers_generation_error',
            value: 0,
            timestamp: Date.now(),
            rating: performance_enums_1.PerformanceRating.POOR,
        });
        return {
            'Cache-Control': 'no-cache',
        };
    }
}
/**
 * Check if request is cacheable
 */
function isCacheableRequest(method, headers) {
    var startTime = performance.now();
    try {
        // Only GET requests are cacheable
        if (method !== 'GET') {
            return false;
        }
        // Check for cache-busting headers
        var cacheBustingHeaders = ['cache-control', 'pragma', 'if-none-match', 'if-modified-since'];
        var hasCacheBusting = cacheBustingHeaders.some(function (header) { return headers[header] && headers[header].includes('no-cache'); });
        if (hasCacheBusting) {
            return false;
        }
        // Track performance metric
        var endTime = performance.now();
        performance_monitor_1.performanceMonitor.addMetric({
            name: 'cacheability_check',
            value: endTime - startTime,
            timestamp: Date.now(),
            rating: endTime - startTime < 1 ? performance_enums_1.PerformanceRating.GOOD : performance_enums_1.PerformanceRating.NEEDS_IMPROVEMENT,
        });
        return true;
    }
    catch (error) {
        performance_monitor_1.performanceMonitor.addMetric({
            name: 'cacheability_check_error',
            value: 0,
            timestamp: Date.now(),
            rating: performance_enums_1.PerformanceRating.POOR,
        });
        return false;
    }
}
/**
 * Generate cache key for resource
 */
function generateCacheKey(resourceType, resourcePath, queryParams) {
    var _a;
    var startTime = performance.now();
    try {
        var strategy = getCacheStrategy(resourceType);
        var baseKey = ((_a = strategy.keyPattern) === null || _a === void 0 ? void 0 : _a.replace('*', resourcePath)) || resourcePath;
        var cacheKey = baseKey;
        // Add query parameters to cache key
        if (queryParams && Object.keys(queryParams).length > 0) {
            var sortedParams = Object.keys(queryParams)
                .sort()
                .map(function (key) { return "".concat(key, "=").concat(queryParams[key]); })
                .join('&');
            cacheKey += "?".concat(sortedParams);
        }
        // Track performance metric
        var endTime = performance.now();
        performance_monitor_1.performanceMonitor.addMetric({
            name: 'cache_key_generation',
            value: endTime - startTime,
            timestamp: Date.now(),
            rating: endTime - startTime < 1 ? performance_enums_1.PerformanceRating.GOOD : performance_enums_1.PerformanceRating.NEEDS_IMPROVEMENT,
        });
        return cacheKey;
    }
    catch (error) {
        performance_monitor_1.performanceMonitor.addMetric({
            name: 'cache_key_generation_error',
            value: 0,
            timestamp: Date.now(),
            rating: performance_enums_1.PerformanceRating.POOR,
        });
        return resourcePath;
    }
}
/**
 * Get cache performance metrics
 */
function getCacheMetrics() {
    return performance_monitor_1.performanceMonitor
        .getMetricsByName('cache_control_generation')
        .concat(performance_monitor_1.performanceMonitor.getMetricsByName('etag_generation'))
        .concat(performance_monitor_1.performanceMonitor.getMetricsByName('last_modified_generation'))
        .concat(performance_monitor_1.performanceMonitor.getMetricsByName('cache_strategy_lookup'))
        .concat(performance_monitor_1.performanceMonitor.getMetricsByName('cache_headers_generation'))
        .concat(performance_monitor_1.performanceMonitor.getMetricsByName('cacheability_check'))
        .concat(performance_monitor_1.performanceMonitor.getMetricsByName('cache_key_generation'));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,