0e24397078c8edd0b75d33a12e4b71e0
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InitialLoader = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = __importStar(require("react"));
//styles
var InitialLoader_module_scss_1 = __importDefault(require("./InitialLoader.module.scss"));
//lib
var lib_1 = require("../lib/lib");
var navigation_1 = require("next/navigation");
//external
var app_loading_1 = require("@/infrastructure/providers/app-loading");
var route_1 = require("@/shared/config/route");
var classNames_1 = require("@/shared/lib/utils/classNames");
//components
var ProgressBar_1 = require("@/widgets/ProgressBar");
exports.InitialLoader = (0, react_1.memo)(function (_a) {
    var _b;
    var className = _a.className, _c = _a.showStepDetails, showStepDetails = _c === void 0 ? false : _c, loadingMessage = _a.loadingMessage, _d = _a.showProgress, showProgress = _d === void 0 ? true : _d;
    var pathname = (0, navigation_1.usePathname)();
    var _e = (0, app_loading_1.useAppLoadingContext)(), isOverallLoading = _e.isOverallLoading, progress = _e.progress, currentStep = _e.currentStep;
    var _f = (0, react_1.useState)(true), isVisible = _f[0], setIsVisible = _f[1];
    var _g = (0, react_1.useState)(false), isFadingOut = _g[0], setIsFadingOut = _g[1];
    var _h = (0, react_1.useState)(false), shouldShowLoader = _h[0], setShouldShowLoader = _h[1];
    // Get route config
    var routeConfig = (0, route_1.getCurrentRouteConfig)(pathname).config;
    // Simple cache check
    var isCached = function () {
        if (!routeConfig.cache.enabled)
            return false;
        var cacheKey = routeConfig.cache.key || "cache-".concat(routeConfig.route);
        var cached = localStorage.getItem(cacheKey);
        if (!cached)
            return false;
        try {
            var _a = JSON.parse(cached), timestamp = _a.timestamp, ttl = _a.ttl;
            return Date.now() - timestamp < ttl;
        }
        catch (_b) {
            return false;
        }
    };
    (0, react_1.useEffect)(function () {
        var shouldShow = routeConfig.route === route_1.AppRoute.HOME || !isCached();
        setShouldShowLoader(shouldShow);
    }, [pathname, routeConfig.route]);
    // Save cache when done
    (0, react_1.useEffect)(function () {
        if (!isOverallLoading && shouldShowLoader && routeConfig.cache.enabled) {
            var cacheKey = routeConfig.cache.key || "cache-".concat(routeConfig.route);
            localStorage.setItem(cacheKey, JSON.stringify({
                timestamp: Date.now(),
                ttl: routeConfig.cache.ttl || 86400000, // 24 hours
            }));
        }
    }, [isOverallLoading, shouldShowLoader, routeConfig]);
    // Visibility logic
    (0, react_1.useEffect)(function () {
        if (isOverallLoading) {
            setIsVisible(true);
            setIsFadingOut(false);
            return;
        }
        setIsFadingOut(true);
        setTimeout(function () { return setIsVisible(false); }, routeConfig.loader.minDisplayTime || 2000);
    }, [isOverallLoading, routeConfig.loader.minDisplayTime]);
    if (!shouldShowLoader || !isVisible)
        return null;
    var displayMessage = loadingMessage ||
        (progress >= 100 ? "Ready!" : (0, lib_1.formatStepName)(currentStep));
    var mods = (_b = {},
        _b[InitialLoader_module_scss_1.default.fadeOut || ""] = isFadingOut,
        _b);
    return ((0, jsx_runtime_1.jsxs)("div", { className: (0, classNames_1.classNames)(InitialLoader_module_scss_1.default.initialLoader || "", __assign({}, mods), [
            className,
        ]), role: "progressbar", "aria-valuenow": progress, "aria-valuemin": 0, "aria-valuemax": 100, "aria-label": "Loading application", children: [(0, jsx_runtime_1.jsx)("div", { className: InitialLoader_module_scss_1.default.overlay }), (0, jsx_runtime_1.jsx)("div", { className: InitialLoader_module_scss_1.default.content, children: (0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: progress, message: displayMessage, showPercentage: showProgress }) })] }));
});
exports.InitialLoader.displayName = "InitialLoader";
//# sourceMappingURL=data:application/json;charset=utf-8;base64,