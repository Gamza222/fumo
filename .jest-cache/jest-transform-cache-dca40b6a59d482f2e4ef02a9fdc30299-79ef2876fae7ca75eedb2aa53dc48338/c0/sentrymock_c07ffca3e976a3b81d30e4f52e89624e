097779cee9355cf8d34a7e7ea851e31c
"use strict";

/**
 * Sentry Mock
 *
 * Centralized mock for @sentry/react to avoid duplication across test files.
 * Used for testing error reporting and analytics functionality.
 */
/* istanbul ignore next */
function cov_18pgdaiudz() {
  var path = "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/external/lib/sentry.mock.ts";
  var hash = "e522a7231892e39991256fa526f35067248962b9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/external/lib/sentry.mock.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 81
        }
      },
      "2": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 36,
          column: 2
        }
      },
      "3": {
        start: {
          line: 25,
          column: 45
        },
        end: {
          line: 25,
          column: 81
        }
      },
      "4": {
        start: {
          line: 26,
          column: 41
        },
        end: {
          line: 26,
          column: 67
        }
      },
      "5": {
        start: {
          line: 28,
          column: 44
        },
        end: {
          line: 32,
          column: 7
        }
      },
      "6": {
        start: {
          line: 34,
          column: 33
        },
        end: {
          line: 34,
          column: 62
        }
      },
      "7": {
        start: {
          line: 35,
          column: 33
        },
        end: {
          line: 35,
          column: 62
        }
      },
      "8": {
        start: {
          line: 41,
          column: 23
        },
        end: {
          line: 58,
          column: 5
        }
      },
      "9": {
        start: {
          line: 41,
          column: 37
        },
        end: {
          line: 58,
          column: 3
        }
      },
      "10": {
        start: {
          line: 49,
          column: 45
        },
        end: {
          line: 49,
          column: 81
        }
      },
      "11": {
        start: {
          line: 50,
          column: 41
        },
        end: {
          line: 50,
          column: 67
        }
      },
      "12": {
        start: {
          line: 51,
          column: 44
        },
        end: {
          line: 55,
          column: 7
        }
      },
      "13": {
        start: {
          line: 56,
          column: 33
        },
        end: {
          line: 56,
          column: 62
        }
      },
      "14": {
        start: {
          line: 57,
          column: 33
        },
        end: {
          line: 57,
          column: 62
        }
      },
      "15": {
        start: {
          line: 59,
          column: 0
        },
        end: {
          line: 59,
          column: 44
        }
      },
      "16": {
        start: {
          line: 63,
          column: 0
        },
        end: {
          line: 126,
          column: 2
        }
      },
      "17": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 72,
          column: 11
        }
      },
      "18": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 71,
          column: 13
        }
      },
      "19": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 70,
          column: 33
        }
      },
      "20": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 82,
          column: 11
        }
      },
      "21": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 81,
          column: 13
        }
      },
      "22": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 80,
          column: 33
        }
      },
      "23": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 71
        }
      },
      "24": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "25": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 199
        }
      },
      "26": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 97,
          column: 100
        }
      },
      "27": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 62
        }
      },
      "28": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 106,
          column: 9
        }
      },
      "29": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 109
        }
      },
      "30": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 97
        }
      },
      "31": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 62
        }
      },
      "32": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 60
        }
      },
      "33": {
        start: {
          line: 128,
          column: 0
        },
        end: {
          line: 128,
          column: 37
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 25,
            column: 23
          },
          end: {
            line: 25,
            column: 24
          }
        },
        loc: {
          start: {
            line: 25,
            column: 43
          },
          end: {
            line: 25,
            column: 83
          }
        },
        line: 25
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 26,
            column: 27
          },
          end: {
            line: 26,
            column: 28
          }
        },
        loc: {
          start: {
            line: 26,
            column: 39
          },
          end: {
            line: 26,
            column: 69
          }
        },
        line: 26
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 28,
            column: 30
          },
          end: {
            line: 28,
            column: 31
          }
        },
        loc: {
          start: {
            line: 28,
            column: 42
          },
          end: {
            line: 32,
            column: 9
          }
        },
        line: 28
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 34,
            column: 19
          },
          end: {
            line: 34,
            column: 20
          }
        },
        loc: {
          start: {
            line: 34,
            column: 31
          },
          end: {
            line: 34,
            column: 64
          }
        },
        line: 34
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 35,
            column: 19
          },
          end: {
            line: 35,
            column: 20
          }
        },
        loc: {
          start: {
            line: 35,
            column: 31
          },
          end: {
            line: 35,
            column: 64
          }
        },
        line: 35
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 41,
            column: 23
          },
          end: {
            line: 41,
            column: 24
          }
        },
        loc: {
          start: {
            line: 41,
            column: 35
          },
          end: {
            line: 58,
            column: 5
          }
        },
        line: 41
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 49,
            column: 23
          },
          end: {
            line: 49,
            column: 24
          }
        },
        loc: {
          start: {
            line: 49,
            column: 43
          },
          end: {
            line: 49,
            column: 83
          }
        },
        line: 49
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 50,
            column: 27
          },
          end: {
            line: 50,
            column: 28
          }
        },
        loc: {
          start: {
            line: 50,
            column: 39
          },
          end: {
            line: 50,
            column: 69
          }
        },
        line: 50
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 51,
            column: 30
          },
          end: {
            line: 51,
            column: 31
          }
        },
        loc: {
          start: {
            line: 51,
            column: 42
          },
          end: {
            line: 55,
            column: 9
          }
        },
        line: 51
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 56,
            column: 19
          },
          end: {
            line: 56,
            column: 20
          }
        },
        loc: {
          start: {
            line: 56,
            column: 31
          },
          end: {
            line: 56,
            column: 64
          }
        },
        line: 56
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 57,
            column: 19
          },
          end: {
            line: 57,
            column: 20
          }
        },
        loc: {
          start: {
            line: 57,
            column: 31
          },
          end: {
            line: 57,
            column: 64
          }
        },
        line: 57
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 67,
            column: 16
          },
          end: {
            line: 67,
            column: 17
          }
        },
        loc: {
          start: {
            line: 67,
            column: 28
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 67
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 68,
            column: 50
          },
          end: {
            line: 68,
            column: 51
          }
        },
        loc: {
          start: {
            line: 68,
            column: 66
          },
          end: {
            line: 72,
            column: 9
          }
        },
        line: 68
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 77,
            column: 16
          },
          end: {
            line: 77,
            column: 17
          }
        },
        loc: {
          start: {
            line: 77,
            column: 28
          },
          end: {
            line: 83,
            column: 5
          }
        },
        line: 77
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 78,
            column: 50
          },
          end: {
            line: 78,
            column: 51
          }
        },
        loc: {
          start: {
            line: 78,
            column: 66
          },
          end: {
            line: 82,
            column: 9
          }
        },
        line: 78
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 87,
            column: 29
          },
          end: {
            line: 87,
            column: 30
          }
        },
        loc: {
          start: {
            line: 87,
            column: 46
          },
          end: {
            line: 92,
            column: 5
          }
        },
        line: 87
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 96,
            column: 27
          },
          end: {
            line: 96,
            column: 28
          }
        },
        loc: {
          start: {
            line: 96,
            column: 46
          },
          end: {
            line: 98,
            column: 5
          }
        },
        line: 96
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 102,
            column: 19
          },
          end: {
            line: 102,
            column: 20
          }
        },
        loc: {
          start: {
            line: 102,
            column: 37
          },
          end: {
            line: 107,
            column: 5
          }
        },
        line: 102
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 111,
            column: 18
          },
          end: {
            line: 111,
            column: 19
          }
        },
        loc: {
          start: {
            line: 111,
            column: 40
          },
          end: {
            line: 113,
            column: 5
          }
        },
        line: 111
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 117,
            column: 27
          },
          end: {
            line: 117,
            column: 28
          }
        },
        loc: {
          start: {
            line: 117,
            column: 39
          },
          end: {
            line: 119,
            column: 5
          }
        },
        line: 117
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 123,
            column: 25
          },
          end: {
            line: 123,
            column: 26
          }
        },
        loc: {
          start: {
            line: 123,
            column: 37
          },
          end: {
            line: 125,
            column: 5
          }
        },
        line: 123
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 71,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 71,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "1": {
        loc: {
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 81,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 81,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "2": {
        loc: {
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "3": {
        loc: {
          start: {
            line: 90,
            column: 101
          },
          end: {
            line: 90,
            column: 176
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 90,
            column: 129
          },
          end: {
            line: 90,
            column: 147
          }
        }, {
          start: {
            line: 90,
            column: 150
          },
          end: {
            line: 90,
            column: 176
          }
        }],
        line: 90
      },
      "4": {
        loc: {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 106,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 106,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "5": {
        loc: {
          start: {
            line: 112,
            column: 68
          },
          end: {
            line: 112,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 68
          },
          end: {
            line: 112,
            column: 73
          }
        }, {
          start: {
            line: 112,
            column: 77
          },
          end: {
            line: 112,
            column: 95
          }
        }],
        line: 112
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/external/lib/sentry.mock.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/external/lib/sentry.mock.ts"],
      sourcesContent: ["/**\n * Sentry Mock\n *\n * Centralized mock for @sentry/react to avoid duplication across test files.\n * Used for testing error reporting and analytics functionality.\n */\n\nimport type {\n  MockSentryInterface,\n  MockSentryTransaction,\n  SentryTestUtilsInterface,\n} from '../types/types';\n\n/**\n * Sentry API mock implementation\n * Provides all essential Sentry functions as Jest mocks\n */\nexport const mockSentry: MockSentryInterface = {\n  // Error capturing\n  captureException: jest.fn(),\n  captureMessage: jest.fn(),\n\n  // Context management\n  setUser: jest.fn(),\n  setTag: jest.fn(),\n  setExtra: jest.fn(),\n  addBreadcrumb: jest.fn(),\n  configureScope: jest.fn(),\n\n  // Scope management\n  withScope: jest.fn((callback: (scope: MockSentryInterface) => void) => callback(mockSentry)),\n  getCurrentHub: jest.fn(() => mockSentry),\n\n  // Transaction/performance monitoring\n  startTransaction: jest.fn(\n    (): MockSentryTransaction => ({\n      setTag: jest.fn(),\n      setData: jest.fn(),\n      finish: jest.fn(),\n    })\n  ),\n\n  // Integration helpers\n  flush: jest.fn(() => Promise.resolve(true)),\n  close: jest.fn(() => Promise.resolve(true)),\n};\n\n/**\n * Factory function to create fresh Sentry mock instances\n * Useful when you need isolated mocks for specific tests\n */\nexport const createSentryMock = (): MockSentryInterface => ({\n  captureException: jest.fn(),\n  captureMessage: jest.fn(),\n  setUser: jest.fn(),\n  setTag: jest.fn(),\n  setExtra: jest.fn(),\n  addBreadcrumb: jest.fn(),\n  configureScope: jest.fn(),\n  withScope: jest.fn((callback: (scope: MockSentryInterface) => void) => callback(mockSentry)),\n  getCurrentHub: jest.fn(() => mockSentry),\n  startTransaction: jest.fn(\n    (): MockSentryTransaction => ({\n      setTag: jest.fn(),\n      setData: jest.fn(),\n      finish: jest.fn(),\n    })\n  ),\n  flush: jest.fn(() => Promise.resolve(true)),\n  close: jest.fn(() => Promise.resolve(true)),\n});\n\n/**\n * Test utilities for Sentry mock assertions\n */\nexport const sentryTestUtils: SentryTestUtilsInterface = {\n  /**\n   * Clear all Sentry mock calls\n   */\n  clearMocks: () => {\n    Object.values(mockSentry).forEach((mock) => {\n      if (jest.isMockFunction(mock)) {\n        mock.mockClear();\n      }\n    });\n  },\n\n  /**\n   * Reset all Sentry mocks to their initial state\n   */\n  resetMocks: () => {\n    Object.values(mockSentry).forEach((mock) => {\n      if (jest.isMockFunction(mock)) {\n        mock.mockReset();\n      }\n    });\n  },\n\n  /**\n   * Assert that an exception was captured\n   */\n  expectExceptionCaptured: (error?: Error | string) => {\n    expect(mockSentry.captureException).toHaveBeenCalled();\n    if (error) {\n      expect(mockSentry.captureException).toHaveBeenCalledWith(\n        expect.objectContaining(\n          typeof error === 'string' ? { message: error } : { message: error.message }\n        ),\n        expect.any(Object)\n      );\n    }\n  },\n\n  /**\n   * Assert that a message was captured\n   */\n  expectMessageCaptured: (message: string) => {\n    expect(mockSentry.captureMessage).toHaveBeenCalledWith(message, expect.any(String));\n  },\n\n  /**\n   * Assert that user context was set\n   */\n  expectUserSet: (userId?: string) => {\n    expect(mockSentry.setUser).toHaveBeenCalled();\n    if (userId) {\n      expect(mockSentry.setUser).toHaveBeenCalledWith(expect.objectContaining({ id: userId }));\n    }\n  },\n\n  /**\n   * Assert that tags were set\n   */\n  expectTagSet: (key: string, value?: string) => {\n    expect(mockSentry.setTag).toHaveBeenCalledWith(key, value || expect.any(String));\n  },\n\n  /**\n   * Get all captured exceptions\n   */\n  getCapturedExceptions: (): jest.Mock['mock']['calls'] => {\n    return mockSentry.captureException.mock.calls;\n  },\n\n  /**\n   * Get all captured messages\n   */\n  getCapturedMessages: (): jest.Mock['mock']['calls'] => {\n    return mockSentry.captureMessage.mock.calls;\n  },\n};\n\n// Export the main mock for Jest module mocking\nexport default mockSentry;\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e522a7231892e39991256fa526f35067248962b9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_18pgdaiudz = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_18pgdaiudz();
cov_18pgdaiudz().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_18pgdaiudz().s[1]++;
exports.sentryTestUtils = exports.createSentryMock = exports.mockSentry = void 0;
/**
 * Sentry API mock implementation
 * Provides all essential Sentry functions as Jest mocks
 */
/* istanbul ignore next */
cov_18pgdaiudz().s[2]++;
exports.mockSentry = {
  // Error capturing
  captureException: jest.fn(),
  captureMessage: jest.fn(),
  // Context management
  setUser: jest.fn(),
  setTag: jest.fn(),
  setExtra: jest.fn(),
  addBreadcrumb: jest.fn(),
  configureScope: jest.fn(),
  // Scope management
  withScope: jest.fn(function (callback) {
    /* istanbul ignore next */
    cov_18pgdaiudz().f[0]++;
    cov_18pgdaiudz().s[3]++;
    return callback(exports.mockSentry);
  }),
  getCurrentHub: jest.fn(function () {
    /* istanbul ignore next */
    cov_18pgdaiudz().f[1]++;
    cov_18pgdaiudz().s[4]++;
    return exports.mockSentry;
  }),
  // Transaction/performance monitoring
  startTransaction: jest.fn(function () {
    /* istanbul ignore next */
    cov_18pgdaiudz().f[2]++;
    cov_18pgdaiudz().s[5]++;
    return {
      setTag: jest.fn(),
      setData: jest.fn(),
      finish: jest.fn()
    };
  }),
  // Integration helpers
  flush: jest.fn(function () {
    /* istanbul ignore next */
    cov_18pgdaiudz().f[3]++;
    cov_18pgdaiudz().s[6]++;
    return Promise.resolve(true);
  }),
  close: jest.fn(function () {
    /* istanbul ignore next */
    cov_18pgdaiudz().f[4]++;
    cov_18pgdaiudz().s[7]++;
    return Promise.resolve(true);
  })
};
/**
 * Factory function to create fresh Sentry mock instances
 * Useful when you need isolated mocks for specific tests
 */
/* istanbul ignore next */
cov_18pgdaiudz().s[8]++;
var createSentryMock = function () {
  /* istanbul ignore next */
  cov_18pgdaiudz().f[5]++;
  cov_18pgdaiudz().s[9]++;
  return {
    captureException: jest.fn(),
    captureMessage: jest.fn(),
    setUser: jest.fn(),
    setTag: jest.fn(),
    setExtra: jest.fn(),
    addBreadcrumb: jest.fn(),
    configureScope: jest.fn(),
    withScope: jest.fn(function (callback) {
      /* istanbul ignore next */
      cov_18pgdaiudz().f[6]++;
      cov_18pgdaiudz().s[10]++;
      return callback(exports.mockSentry);
    }),
    getCurrentHub: jest.fn(function () {
      /* istanbul ignore next */
      cov_18pgdaiudz().f[7]++;
      cov_18pgdaiudz().s[11]++;
      return exports.mockSentry;
    }),
    startTransaction: jest.fn(function () {
      /* istanbul ignore next */
      cov_18pgdaiudz().f[8]++;
      cov_18pgdaiudz().s[12]++;
      return {
        setTag: jest.fn(),
        setData: jest.fn(),
        finish: jest.fn()
      };
    }),
    flush: jest.fn(function () {
      /* istanbul ignore next */
      cov_18pgdaiudz().f[9]++;
      cov_18pgdaiudz().s[13]++;
      return Promise.resolve(true);
    }),
    close: jest.fn(function () {
      /* istanbul ignore next */
      cov_18pgdaiudz().f[10]++;
      cov_18pgdaiudz().s[14]++;
      return Promise.resolve(true);
    })
  };
};
/* istanbul ignore next */
cov_18pgdaiudz().s[15]++;
exports.createSentryMock = createSentryMock;
/**
 * Test utilities for Sentry mock assertions
 */
/* istanbul ignore next */
cov_18pgdaiudz().s[16]++;
exports.sentryTestUtils = {
  /**
   * Clear all Sentry mock calls
   */
  clearMocks: function () {
    /* istanbul ignore next */
    cov_18pgdaiudz().f[11]++;
    cov_18pgdaiudz().s[17]++;
    Object.values(exports.mockSentry).forEach(function (mock) {
      /* istanbul ignore next */
      cov_18pgdaiudz().f[12]++;
      cov_18pgdaiudz().s[18]++;
      if (jest.isMockFunction(mock)) {
        /* istanbul ignore next */
        cov_18pgdaiudz().b[0][0]++;
        cov_18pgdaiudz().s[19]++;
        mock.mockClear();
      } else
      /* istanbul ignore next */
      {
        cov_18pgdaiudz().b[0][1]++;
      }
    });
  },
  /**
   * Reset all Sentry mocks to their initial state
   */
  resetMocks: function () {
    /* istanbul ignore next */
    cov_18pgdaiudz().f[13]++;
    cov_18pgdaiudz().s[20]++;
    Object.values(exports.mockSentry).forEach(function (mock) {
      /* istanbul ignore next */
      cov_18pgdaiudz().f[14]++;
      cov_18pgdaiudz().s[21]++;
      if (jest.isMockFunction(mock)) {
        /* istanbul ignore next */
        cov_18pgdaiudz().b[1][0]++;
        cov_18pgdaiudz().s[22]++;
        mock.mockReset();
      } else
      /* istanbul ignore next */
      {
        cov_18pgdaiudz().b[1][1]++;
      }
    });
  },
  /**
   * Assert that an exception was captured
   */
  expectExceptionCaptured: function (error) {
    /* istanbul ignore next */
    cov_18pgdaiudz().f[15]++;
    cov_18pgdaiudz().s[23]++;
    expect(exports.mockSentry.captureException).toHaveBeenCalled();
    /* istanbul ignore next */
    cov_18pgdaiudz().s[24]++;
    if (error) {
      /* istanbul ignore next */
      cov_18pgdaiudz().b[2][0]++;
      cov_18pgdaiudz().s[25]++;
      expect(exports.mockSentry.captureException).toHaveBeenCalledWith(expect.objectContaining(typeof error === 'string' ?
      /* istanbul ignore next */
      (cov_18pgdaiudz().b[3][0]++, {
        message: error
      }) :
      /* istanbul ignore next */
      (cov_18pgdaiudz().b[3][1]++, {
        message: error.message
      })), expect.any(Object));
    } else
    /* istanbul ignore next */
    {
      cov_18pgdaiudz().b[2][1]++;
    }
  },
  /**
   * Assert that a message was captured
   */
  expectMessageCaptured: function (message) {
    /* istanbul ignore next */
    cov_18pgdaiudz().f[16]++;
    cov_18pgdaiudz().s[26]++;
    expect(exports.mockSentry.captureMessage).toHaveBeenCalledWith(message, expect.any(String));
  },
  /**
   * Assert that user context was set
   */
  expectUserSet: function (userId) {
    /* istanbul ignore next */
    cov_18pgdaiudz().f[17]++;
    cov_18pgdaiudz().s[27]++;
    expect(exports.mockSentry.setUser).toHaveBeenCalled();
    /* istanbul ignore next */
    cov_18pgdaiudz().s[28]++;
    if (userId) {
      /* istanbul ignore next */
      cov_18pgdaiudz().b[4][0]++;
      cov_18pgdaiudz().s[29]++;
      expect(exports.mockSentry.setUser).toHaveBeenCalledWith(expect.objectContaining({
        id: userId
      }));
    } else
    /* istanbul ignore next */
    {
      cov_18pgdaiudz().b[4][1]++;
    }
  },
  /**
   * Assert that tags were set
   */
  expectTagSet: function (key, value) {
    /* istanbul ignore next */
    cov_18pgdaiudz().f[18]++;
    cov_18pgdaiudz().s[30]++;
    expect(exports.mockSentry.setTag).toHaveBeenCalledWith(key,
    /* istanbul ignore next */
    (cov_18pgdaiudz().b[5][0]++, value) ||
    /* istanbul ignore next */
    (cov_18pgdaiudz().b[5][1]++, expect.any(String)));
  },
  /**
   * Get all captured exceptions
   */
  getCapturedExceptions: function () {
    /* istanbul ignore next */
    cov_18pgdaiudz().f[19]++;
    cov_18pgdaiudz().s[31]++;
    return exports.mockSentry.captureException.mock.calls;
  },
  /**
   * Get all captured messages
   */
  getCapturedMessages: function () {
    /* istanbul ignore next */
    cov_18pgdaiudz().f[20]++;
    cov_18pgdaiudz().s[32]++;
    return exports.mockSentry.captureMessage.mock.calls;
  }
};
// Export the main mock for Jest module mocking
/* istanbul ignore next */
cov_18pgdaiudz().s[33]++;
exports.default = exports.mockSentry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,