cda8a649a8a2211b22ec886a16ed49ed
"use strict";

/* istanbul ignore next */
function cov_1nxpf2afw9() {
  var path = "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/api/lib/websocket/webSocket.mock.ts";
  var hash = "c120eb6984701d7801134bcc095dd5ce410a4fff";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/api/lib/websocket/webSocket.mock.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 61
        }
      },
      "2": {
        start: {
          line: 4,
          column: 35
        },
        end: {
          line: 51,
          column: 3
        }
      },
      "3": {
        start: {
          line: 6,
          column: 20
        },
        end: {
          line: 6,
          column: 24
        }
      },
      "4": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 7,
          column: 34
        }
      },
      "5": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 33
        }
      },
      "6": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 13,
          column: 14
        }
      },
      "7": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 11,
          column: 37
        }
      },
      "8": {
        start: {
          line: 12,
          column: 12
        },
        end: {
          line: 12,
          column: 31
        }
      },
      "9": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 19,
          column: 6
        }
      },
      "10": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 18,
          column: 9
        }
      },
      "11": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 17,
          column: 47
        }
      },
      "12": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 27,
          column: 6
        }
      },
      "13": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 26,
          column: 9
        }
      },
      "14": {
        start: {
          line: 22,
          column: 24
        },
        end: {
          line: 22,
          column: 61
        }
      },
      "15": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 25,
          column: 13
        }
      },
      "16": {
        start: {
          line: 24,
          column: 16
        },
        end: {
          line: 24,
          column: 54
        }
      },
      "17": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 32,
          column: 6
        }
      },
      "18": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 31,
          column: 9
        }
      },
      "19": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 58
        }
      },
      "20": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 38,
          column: 6
        }
      },
      "21": {
        start: {
          line: 34,
          column: 20
        },
        end: {
          line: 36,
          column: 10
        }
      },
      "22": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 84
        }
      },
      "23": {
        start: {
          line: 37,
          column: 58
        },
        end: {
          line: 37,
          column: 80
        }
      },
      "24": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 42,
          column: 6
        }
      },
      "25": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 33
        }
      },
      "26": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 27
        }
      },
      "27": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 46,
          column: 6
        }
      },
      "28": {
        start: {
          line: 44,
          column: 20
        },
        end: {
          line: 44,
          column: 35
        }
      },
      "29": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 34
        }
      },
      "30": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 49,
          column: 6
        }
      },
      "31": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 20
        }
      },
      "32": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 50,
          column: 25
        }
      },
      "33": {
        start: {
          line: 52,
          column: 0
        },
        end: {
          line: 52,
          column: 38
        }
      },
      "34": {
        start: {
          line: 54,
          column: 0
        },
        end: {
          line: 54,
          column: 33
        }
      },
      "35": {
        start: {
          line: 55,
          column: 26
        },
        end: {
          line: 57,
          column: 1
        }
      },
      "36": {
        start: {
          line: 56,
          column: 4
        },
        end: {
          line: 56,
          column: 34
        }
      },
      "37": {
        start: {
          line: 58,
          column: 0
        },
        end: {
          line: 58,
          column: 50
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 4,
            column: 35
          },
          end: {
            line: 4,
            column: 36
          }
        },
        loc: {
          start: {
            line: 4,
            column: 47
          },
          end: {
            line: 51,
            column: 1
          }
        },
        line: 4
      },
      "1": {
        name: "WebSocketMock",
        decl: {
          start: {
            line: 5,
            column: 13
          },
          end: {
            line: 5,
            column: 26
          }
        },
        loc: {
          start: {
            line: 5,
            column: 33
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 5
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 10,
            column: 19
          },
          end: {
            line: 10,
            column: 20
          }
        },
        loc: {
          start: {
            line: 10,
            column: 31
          },
          end: {
            line: 13,
            column: 9
          }
        },
        line: 10
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 15,
            column: 47
          },
          end: {
            line: 15,
            column: 48
          }
        },
        loc: {
          start: {
            line: 15,
            column: 72
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 15
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 20,
            column: 50
          },
          end: {
            line: 20,
            column: 51
          }
        },
        loc: {
          start: {
            line: 20,
            column: 75
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 20
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 28,
            column: 35
          },
          end: {
            line: 28,
            column: 36
          }
        },
        loc: {
          start: {
            line: 28,
            column: 52
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 28
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 33,
            column: 42
          },
          end: {
            line: 33,
            column: 43
          }
        },
        loc: {
          start: {
            line: 33,
            column: 61
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 33
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 37,
            column: 37
          },
          end: {
            line: 37,
            column: 38
          }
        },
        loc: {
          start: {
            line: 37,
            column: 56
          },
          end: {
            line: 37,
            column: 82
          }
        },
        line: 37
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 39,
            column: 36
          },
          end: {
            line: 39,
            column: 37
          }
        },
        loc: {
          start: {
            line: 39,
            column: 48
          },
          end: {
            line: 42,
            column: 5
          }
        },
        line: 39
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 43,
            column: 35
          },
          end: {
            line: 43,
            column: 36
          }
        },
        loc: {
          start: {
            line: 43,
            column: 51
          },
          end: {
            line: 46,
            column: 5
          }
        },
        line: 43
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 47,
            column: 44
          },
          end: {
            line: 47,
            column: 45
          }
        },
        loc: {
          start: {
            line: 47,
            column: 62
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 47
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 55,
            column: 26
          },
          end: {
            line: 55,
            column: 27
          }
        },
        loc: {
          start: {
            line: 55,
            column: 41
          },
          end: {
            line: 57,
            column: 1
          }
        },
        line: 55
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 18,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 18,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 26,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 26,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "2": {
        loc: {
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 25,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 25,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "3": {
        loc: {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 31,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 31,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/api/lib/websocket/webSocket.mock.ts",
      mappings: ";;;AAEA;IAIE,uBAAY,IAAY;QAAxB,iBAMC;QATO,oBAAe,GAAsC,EAAE,CAAC;QACxD,gBAAW,GAAG,KAAK,CAAC;QAG1B,gCAAgC;QAChC,UAAU,CAAC;YACT,KAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,KAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACpB,CAAC,EAAE,CAAC,CAAC,CAAC;IACR,CAAC;IAED,wCAAgB,GAAhB,UAAiB,IAAY,EAAE,OAAsC;QACnE,IAAI,IAAI,KAAK,SAAS,EAAE,CAAC;YACvB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrC,CAAC;IACH,CAAC;IAED,2CAAmB,GAAnB,UAAoB,IAAY,EAAE,OAAsC;QACtE,IAAI,IAAI,KAAK,SAAS,EAAE,CAAC;YACvB,IAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YACpD,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE,CAAC;gBACjB,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACxC,CAAC;QACH,CAAC;IACH,CAAC;IAED,4BAAI,GAAJ,UAAK,KAAa;QAChB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YACtB,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;QAChD,CAAC;IACH,CAAC;IAED,mCAAW,GAAX,UAAY,OAAsC;QAChD,IAAM,KAAK,GAAG,IAAI,YAAY,CAAC,SAAS,EAAE;YACxC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;SAC9B,CAAC,CAAC;QACH,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,OAAO,IAAK,OAAA,OAAO,CAAC,KAAK,CAAC,EAAd,CAAc,CAAC,CAAC;IAC5D,CAAC;IAED,6BAAK,GAAL;QACE,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACrB,CAAC;IAEO,4BAAI,GAAZ,UAAa,IAAY;QACvB,IAAM,KAAK,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC;QAC9B,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;IAEO,qCAAa,GAArB,UAAsB,MAAa;QACjC,OAAO,IAAI,CAAC;IACd,CAAC;IACH,oBAAC;AAAD,CAAC,AArDD,IAqDC;AArDY,sCAAa;AAuD1B,+CAA+C;AAC/C,MAAM,CAAC,SAAS,GAAG,aAA4C,CAAC;AAEzD,IAAM,mBAAmB,GAAG,UAAC,GAAW;IAC7C,OAAA,IAAI,aAAa,CAAC,GAAG,CAAC;AAAtB,CAAsB,CAAC;AADZ,QAAA,mBAAmB,uBACP",
      names: [],
      sources: ["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/api/lib/websocket/webSocket.mock.ts"],
      sourcesContent: ["import { mockWebSocketInstanceInterface, mockWebSocketMessageInterface } from '../../types/types';\n\nexport class WebSocketMock implements mockWebSocketInstanceInterface {\n  private messageHandlers: ((event: MessageEvent) => void)[] = [];\n  private isConnected = false;\n\n  constructor(_url: string) {\n    // Simulate immediate connection\n    setTimeout(() => {\n      this.isConnected = true;\n      this.emit('open');\n    }, 0);\n  }\n\n  addEventListener(type: string, handler: (event: MessageEvent) => void): void {\n    if (type === 'message') {\n      this.messageHandlers.push(handler);\n    }\n  }\n\n  removeEventListener(type: string, handler: (event: MessageEvent) => void): void {\n    if (type === 'message') {\n      const index = this.messageHandlers.indexOf(handler);\n      if (index !== -1) {\n        this.messageHandlers.splice(index, 1);\n      }\n    }\n  }\n\n  send(_data: string): void {\n    if (!this.isConnected) {\n      throw new Error('WebSocket is not connected');\n    }\n  }\n\n  mockMessage(message: mockWebSocketMessageInterface): void {\n    const event = new MessageEvent('message', {\n      data: JSON.stringify(message),\n    });\n    this.messageHandlers.forEach((handler) => handler(event));\n  }\n\n  close(): void {\n    this.isConnected = false;\n    this.emit('close');\n  }\n\n  private emit(type: string): void {\n    const event = new Event(type);\n    this.dispatchEvent(event);\n  }\n\n  private dispatchEvent(_event: Event): boolean {\n    return true;\n  }\n}\n\n// Type assertion to WebSocket constructor type\nglobal.WebSocket = WebSocketMock as unknown as typeof WebSocket;\n\nexport const createWebSocketMock = (url: string): mockWebSocketInstanceInterface =>\n  new WebSocketMock(url);\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c120eb6984701d7801134bcc095dd5ce410a4fff"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1nxpf2afw9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1nxpf2afw9();
cov_1nxpf2afw9().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1nxpf2afw9().s[1]++;
exports.createWebSocketMock = exports.WebSocketMock = void 0;
var WebSocketMock =
/* istanbul ignore next */
(/** @class */cov_1nxpf2afw9().s[2]++, function () {
  /* istanbul ignore next */
  cov_1nxpf2afw9().f[0]++;
  function WebSocketMock(_url) {
    /* istanbul ignore next */
    cov_1nxpf2afw9().f[1]++;
    var _this =
    /* istanbul ignore next */
    (cov_1nxpf2afw9().s[3]++, this);
    /* istanbul ignore next */
    cov_1nxpf2afw9().s[4]++;
    this.messageHandlers = [];
    /* istanbul ignore next */
    cov_1nxpf2afw9().s[5]++;
    this.isConnected = false;
    // Simulate immediate connection
    /* istanbul ignore next */
    cov_1nxpf2afw9().s[6]++;
    setTimeout(function () {
      /* istanbul ignore next */
      cov_1nxpf2afw9().f[2]++;
      cov_1nxpf2afw9().s[7]++;
      _this.isConnected = true;
      /* istanbul ignore next */
      cov_1nxpf2afw9().s[8]++;
      _this.emit('open');
    }, 0);
  }
  /* istanbul ignore next */
  cov_1nxpf2afw9().s[9]++;
  WebSocketMock.prototype.addEventListener = function (type, handler) {
    /* istanbul ignore next */
    cov_1nxpf2afw9().f[3]++;
    cov_1nxpf2afw9().s[10]++;
    if (type === 'message') {
      /* istanbul ignore next */
      cov_1nxpf2afw9().b[0][0]++;
      cov_1nxpf2afw9().s[11]++;
      this.messageHandlers.push(handler);
    } else
    /* istanbul ignore next */
    {
      cov_1nxpf2afw9().b[0][1]++;
    }
  };
  /* istanbul ignore next */
  cov_1nxpf2afw9().s[12]++;
  WebSocketMock.prototype.removeEventListener = function (type, handler) {
    /* istanbul ignore next */
    cov_1nxpf2afw9().f[4]++;
    cov_1nxpf2afw9().s[13]++;
    if (type === 'message') {
      /* istanbul ignore next */
      cov_1nxpf2afw9().b[1][0]++;
      var index =
      /* istanbul ignore next */
      (cov_1nxpf2afw9().s[14]++, this.messageHandlers.indexOf(handler));
      /* istanbul ignore next */
      cov_1nxpf2afw9().s[15]++;
      if (index !== -1) {
        /* istanbul ignore next */
        cov_1nxpf2afw9().b[2][0]++;
        cov_1nxpf2afw9().s[16]++;
        this.messageHandlers.splice(index, 1);
      } else
      /* istanbul ignore next */
      {
        cov_1nxpf2afw9().b[2][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1nxpf2afw9().b[1][1]++;
    }
  };
  /* istanbul ignore next */
  cov_1nxpf2afw9().s[17]++;
  WebSocketMock.prototype.send = function (_data) {
    /* istanbul ignore next */
    cov_1nxpf2afw9().f[5]++;
    cov_1nxpf2afw9().s[18]++;
    if (!this.isConnected) {
      /* istanbul ignore next */
      cov_1nxpf2afw9().b[3][0]++;
      cov_1nxpf2afw9().s[19]++;
      throw new Error('WebSocket is not connected');
    } else
    /* istanbul ignore next */
    {
      cov_1nxpf2afw9().b[3][1]++;
    }
  };
  /* istanbul ignore next */
  cov_1nxpf2afw9().s[20]++;
  WebSocketMock.prototype.mockMessage = function (message) {
    /* istanbul ignore next */
    cov_1nxpf2afw9().f[6]++;
    var event =
    /* istanbul ignore next */
    (cov_1nxpf2afw9().s[21]++, new MessageEvent('message', {
      data: JSON.stringify(message)
    }));
    /* istanbul ignore next */
    cov_1nxpf2afw9().s[22]++;
    this.messageHandlers.forEach(function (handler) {
      /* istanbul ignore next */
      cov_1nxpf2afw9().f[7]++;
      cov_1nxpf2afw9().s[23]++;
      return handler(event);
    });
  };
  /* istanbul ignore next */
  cov_1nxpf2afw9().s[24]++;
  WebSocketMock.prototype.close = function () {
    /* istanbul ignore next */
    cov_1nxpf2afw9().f[8]++;
    cov_1nxpf2afw9().s[25]++;
    this.isConnected = false;
    /* istanbul ignore next */
    cov_1nxpf2afw9().s[26]++;
    this.emit('close');
  };
  /* istanbul ignore next */
  cov_1nxpf2afw9().s[27]++;
  WebSocketMock.prototype.emit = function (type) {
    /* istanbul ignore next */
    cov_1nxpf2afw9().f[9]++;
    var event =
    /* istanbul ignore next */
    (cov_1nxpf2afw9().s[28]++, new Event(type));
    /* istanbul ignore next */
    cov_1nxpf2afw9().s[29]++;
    this.dispatchEvent(event);
  };
  /* istanbul ignore next */
  cov_1nxpf2afw9().s[30]++;
  WebSocketMock.prototype.dispatchEvent = function (_event) {
    /* istanbul ignore next */
    cov_1nxpf2afw9().f[10]++;
    cov_1nxpf2afw9().s[31]++;
    return true;
  };
  /* istanbul ignore next */
  cov_1nxpf2afw9().s[32]++;
  return WebSocketMock;
}());
/* istanbul ignore next */
cov_1nxpf2afw9().s[33]++;
exports.WebSocketMock = WebSocketMock;
// Type assertion to WebSocket constructor type
/* istanbul ignore next */
cov_1nxpf2afw9().s[34]++;
global.WebSocket = WebSocketMock;
/* istanbul ignore next */
cov_1nxpf2afw9().s[35]++;
var createWebSocketMock = function (url) {
  /* istanbul ignore next */
  cov_1nxpf2afw9().f[11]++;
  cov_1nxpf2afw9().s[36]++;
  return new WebSocketMock(url);
};
/* istanbul ignore next */
cov_1nxpf2afw9().s[37]++;
exports.createWebSocketMock = createWebSocketMock;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,