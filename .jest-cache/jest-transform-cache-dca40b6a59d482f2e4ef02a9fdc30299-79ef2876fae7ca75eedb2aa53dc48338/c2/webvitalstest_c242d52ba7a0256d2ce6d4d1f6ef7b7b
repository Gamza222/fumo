9f85292715d633949416591588c8c0c0
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock web-vitals before importing
jest.mock('web-vitals', function () { return ({
    onCLS: jest.fn(function (callback) { return callback({ name: 'CLS', value: 0.05, rating: 'good' }); }),
    onINP: jest.fn(function (callback) { return callback({ name: 'INP', value: 100, rating: 'good' }); }),
    onFCP: jest.fn(function (callback) { return callback({ name: 'FCP', value: 1200, rating: 'good' }); }),
    onLCP: jest.fn(function (callback) { return callback({ name: 'LCP', value: 2000, rating: 'good' }); }),
    onTTFB: jest.fn(function (callback) { return callback({ name: 'TTFB', value: 600, rating: 'good' }); }),
}); });
// Mock Sentry
jest.mock('@sentry/nextjs', function () { return ({
    captureException: jest.fn(),
}); });
var web_vitals_1 = require("./web-vitals");
describe('Web Vitals', function () {
    beforeEach(function () {
        jest.clearAllMocks();
    });
    describe('initWebVitals', function () {
        it('should initialize web vitals monitoring', function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a, onCLS, onINP, onFCP, onLCP, onTTFB;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, Promise.resolve().then(function () { return __importStar(require('web-vitals')); })];
                    case 1:
                        _a = _b.sent(), onCLS = _a.onCLS, onINP = _a.onINP, onFCP = _a.onFCP, onLCP = _a.onLCP, onTTFB = _a.onTTFB;
                        (0, web_vitals_1.initWebVitals)({
                            debug: true,
                            reportToSentry: false,
                        });
                        // Check that the web-vitals functions are called
                        expect(onCLS).toHaveBeenCalled();
                        expect(onINP).toHaveBeenCalled();
                        expect(onFCP).toHaveBeenCalled();
                        expect(onLCP).toHaveBeenCalled();
                        expect(onTTFB).toHaveBeenCalled();
                        return [2 /*return*/];
                }
            });
        }); });
        it('should not log in production', function () {
            var consoleSpy = jest.spyOn(console, 'log').mockImplementation();
            (0, web_vitals_1.initWebVitals)({
                debug: false,
                reportToSentry: false,
            });
            expect(consoleSpy).not.toHaveBeenCalled();
            consoleSpy.mockRestore();
        });
    });
    describe('PERFORMANCE_BUDGETS', function () {
        it('should have correct budget values', function () {
            expect(web_vitals_1.PERFORMANCE_BUDGETS.LCP).toBe(2500);
            expect(web_vitals_1.PERFORMANCE_BUDGETS.INP).toBe(200);
            expect(web_vitals_1.PERFORMANCE_BUDGETS.CLS).toBe(0.1);
            expect(web_vitals_1.PERFORMANCE_BUDGETS.FCP).toBe(1800);
            expect(web_vitals_1.PERFORMANCE_BUDGETS.TTFB).toBe(800);
        });
    });
    describe('checkPerformanceBudget', function () {
        it('should return true for good metrics', function () {
            expect((0, web_vitals_1.checkPerformanceBudget)({ name: 'LCP', value: 2000 })).toBe(true);
            expect((0, web_vitals_1.checkPerformanceBudget)({ name: 'INP', value: 100 })).toBe(true);
            expect((0, web_vitals_1.checkPerformanceBudget)({ name: 'CLS', value: 0.05 })).toBe(true);
        });
        it('should return false for poor metrics', function () {
            expect((0, web_vitals_1.checkPerformanceBudget)({ name: 'LCP', value: 3000 })).toBe(false);
            expect((0, web_vitals_1.checkPerformanceBudget)({ name: 'INP', value: 300 })).toBe(false);
            expect((0, web_vitals_1.checkPerformanceBudget)({ name: 'CLS', value: 0.2 })).toBe(false);
        });
    });
    describe('getPerformanceRating', function () {
        it('should return good for excellent metrics', function () {
            expect((0, web_vitals_1.getPerformanceRating)({ name: 'LCP', value: 1000 })).toBe('good');
            expect((0, web_vitals_1.getPerformanceRating)({ name: 'INP', value: 50 })).toBe('good');
        });
        it('should return needs-improvement for borderline metrics', function () {
            expect((0, web_vitals_1.getPerformanceRating)({ name: 'LCP', value: 2000 })).toBe('needs-improvement');
            expect((0, web_vitals_1.getPerformanceRating)({ name: 'INP', value: 180 })).toBe('needs-improvement');
        });
        it('should return poor for bad metrics', function () {
            expect((0, web_vitals_1.getPerformanceRating)({ name: 'LCP', value: 3000 })).toBe('poor');
            expect((0, web_vitals_1.getPerformanceRating)({ name: 'INP', value: 300 })).toBe('poor');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,