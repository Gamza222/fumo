d32d894722654548d43deff07a67e875
"use strict";
/**
 * Monitoring Service
 *
 * Centralized service for health checks, analytics, and monitoring functionality.
 * Provides enterprise-level monitoring capabilities with privacy compliance.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonitoringService = void 0;
var monitoring_types_1 = require("../types/monitoring.types");
var env_1 = require("../../../../config/env");
// Version info is only available on server side
// import { getVersionDisplay, getVersionInfo } from '../../../../config/version';
/**
 * Monitoring Service Class
 *
 * Handles health checks, analytics tracking, and monitoring data collection.
 * Follows singleton pattern for consistent state across the application.
 */
var MonitoringService = /** @class */ (function () {
    function MonitoringService(config) {
        this.analyticsSession = null;
        this.metrics = [];
        this.alerts = [];
        this.config = config;
        this.startTime = new Date();
        this.initializeAnalytics();
    }
    /**
     * Get singleton instance of MonitoringService
     */
    MonitoringService.getInstance = function (config) {
        if (!MonitoringService.instance) {
            if (!config) {
                throw new Error('MonitoringService requires configuration on first initialization');
            }
            MonitoringService.instance = new MonitoringService(config);
        }
        return MonitoringService.instance;
    };
    /**
     * Initialize analytics session
     */
    MonitoringService.prototype.initializeAnalytics = function () {
        if (this.config.analytics.enabled) {
            this.analyticsSession = {
                id: this.generateSessionId(),
                startTime: new Date(),
                lastActivity: new Date(),
                pageViews: 0,
                events: 0,
            };
        }
    };
    /**
     * Generate unique session ID
     */
    MonitoringService.prototype.generateSessionId = function () {
        return "session_".concat(Date.now(), "_").concat(Math.random().toString(36).substr(2, 9));
    };
    /**
     * Get system health status
     */
    MonitoringService.prototype.getSystemHealth = function () {
        return __awaiter(this, void 0, Promise, function () {
            var services, summary, overallStatus, versionInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.checkServicesHealth()];
                    case 1:
                        services = _a.sent();
                        summary = this.calculateHealthSummary(services);
                        overallStatus = this.determineOverallStatus(summary);
                        versionInfo = {
                            major: 1,
                            minor: 0,
                            patch: 0,
                            prerelease: '',
                            versionCode: 1,
                            commitHash: 'unknown',
                            branch: 'unknown',
                        };
                        return [2 /*return*/, {
                                status: overallStatus,
                                timestamp: new Date(),
                                uptime: Date.now() - this.startTime.getTime(),
                                version: env_1.envConfig.appVersion,
                                versionDisplay: '1.0.0',
                                versionInfo: {
                                    major: versionInfo.major,
                                    minor: versionInfo.minor,
                                    patch: versionInfo.patch,
                                    prerelease: versionInfo.prerelease,
                                    versionCode: versionInfo.versionCode,
                                    commitHash: versionInfo.commitHash,
                                    branch: versionInfo.branch,
                                },
                                environment: env_1.envConfig.appEnv,
                                services: services,
                                summary: summary,
                            }];
                }
            });
        });
    };
    /**
     * Check health of individual services
     */
    MonitoringService.prototype.checkServicesHealth = function () {
        return __awaiter(this, void 0, Promise, function () {
            var services, _i, _a, serviceName, startTime, health, responseTime, error_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        services = [];
                        _i = 0, _a = this.config.healthCheck.services;
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 6];
                        serviceName = _a[_i];
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 4, , 5]);
                        startTime = Date.now();
                        return [4 /*yield*/, this.checkServiceHealth(serviceName)];
                    case 3:
                        health = _b.sent();
                        responseTime = Date.now() - startTime;
                        services.push({
                            name: serviceName,
                            status: health.status,
                            responseTime: responseTime,
                            lastCheck: new Date(),
                            error: health.error,
                            metadata: health.metadata,
                        });
                        return [3 /*break*/, 5];
                    case 4:
                        error_1 = _b.sent();
                        services.push({
                            name: serviceName,
                            status: monitoring_types_1.HealthStatus.UNHEALTHY,
                            lastCheck: new Date(),
                            error: error_1 instanceof Error ? error_1.message : 'Unknown error',
                        });
                        return [3 /*break*/, 5];
                    case 5:
                        _i++;
                        return [3 /*break*/, 1];
                    case 6: return [2 /*return*/, services];
                }
            });
        });
    };
    /**
     * Check health of a specific service
     */
    MonitoringService.prototype.checkServiceHealth = function (serviceName) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                switch (serviceName) {
                    case 'database':
                        return [2 /*return*/, this.checkDatabaseHealth()];
                    case 'api':
                        return [2 /*return*/, this.checkApiHealth()];
                    case 'cache':
                        return [2 /*return*/, this.checkCacheHealth()];
                    case 'storage':
                        return [2 /*return*/, this.checkStorageHealth()];
                    default:
                        return [2 /*return*/, { status: monitoring_types_1.HealthStatus.UNKNOWN }];
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Check database health
     */
    MonitoringService.prototype.checkDatabaseHealth = function () {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: 
                    // In a real implementation, this would check actual database connectivity
                    return [4 /*yield*/, Promise.resolve()];
                    case 1:
                        // In a real implementation, this would check actual database connectivity
                        _a.sent(); // Simulate async operation
                        // For now, we'll simulate a healthy database
                        return [2 /*return*/, {
                                status: monitoring_types_1.HealthStatus.HEALTHY,
                                metadata: {
                                    connectionPool: 'active',
                                    queryTime: '< 10ms',
                                },
                            }];
                }
            });
        });
    };
    /**
     * Check API health
     */
    MonitoringService.prototype.checkApiHealth = function () {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: 
                    // In a real implementation, this would check API endpoints
                    return [4 /*yield*/, Promise.resolve()];
                    case 1:
                        // In a real implementation, this would check API endpoints
                        _a.sent(); // Simulate async operation
                        return [2 /*return*/, {
                                status: monitoring_types_1.HealthStatus.HEALTHY,
                                metadata: {
                                    responseTime: '< 100ms',
                                    endpoints: 'all_operational',
                                },
                            }];
                }
            });
        });
    };
    /**
     * Check cache health
     */
    MonitoringService.prototype.checkCacheHealth = function () {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: 
                    // In a real implementation, this would check cache connectivity
                    return [4 /*yield*/, Promise.resolve()];
                    case 1:
                        // In a real implementation, this would check cache connectivity
                        _a.sent(); // Simulate async operation
                        return [2 /*return*/, {
                                status: monitoring_types_1.HealthStatus.HEALTHY,
                                metadata: {
                                    hitRate: '95%',
                                    memoryUsage: '60%',
                                },
                            }];
                }
            });
        });
    };
    /**
     * Check storage health
     */
    MonitoringService.prototype.checkStorageHealth = function () {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: 
                    // In a real implementation, this would check storage connectivity
                    return [4 /*yield*/, Promise.resolve()];
                    case 1:
                        // In a real implementation, this would check storage connectivity
                        _a.sent(); // Simulate async operation
                        return [2 /*return*/, {
                                status: monitoring_types_1.HealthStatus.HEALTHY,
                                metadata: {
                                    availableSpace: '80%',
                                    readWrite: 'operational',
                                },
                            }];
                }
            });
        });
    };
    /**
     * Calculate health summary from services
     */
    MonitoringService.prototype.calculateHealthSummary = function (services) {
        var summary = {
            total: services.length,
            healthy: 0,
            degraded: 0,
            unhealthy: 0,
        };
        services.forEach(function (service) {
            switch (service.status) {
                case monitoring_types_1.HealthStatus.HEALTHY:
                    summary.healthy++;
                    break;
                case monitoring_types_1.HealthStatus.DEGRADED:
                    summary.degraded++;
                    break;
                case monitoring_types_1.HealthStatus.UNHEALTHY:
                    summary.unhealthy++;
                    break;
            }
        });
        return summary;
    };
    /**
     * Determine overall system status
     */
    MonitoringService.prototype.determineOverallStatus = function (summary) {
        if (summary.unhealthy > 0) {
            return monitoring_types_1.HealthStatus.UNHEALTHY;
        }
        if (summary.degraded > 0) {
            return monitoring_types_1.HealthStatus.DEGRADED;
        }
        if (summary.healthy === summary.total) {
            return monitoring_types_1.HealthStatus.HEALTHY;
        }
        return monitoring_types_1.HealthStatus.UNKNOWN;
    };
    /**
     * Track analytics event
     */
    MonitoringService.prototype.trackEvent = function (type, name, properties, userId) {
        if (!this.config.analytics.enabled || !this.analyticsSession) {
            return;
        }
        var event = {
            id: "event_".concat(Date.now(), "_").concat(Math.random().toString(36).substr(2, 9)),
            type: type,
            name: name,
            timestamp: new Date(),
            userId: userId,
            sessionId: this.analyticsSession.id,
            properties: properties,
        };
        // Update session
        this.analyticsSession.events++;
        this.analyticsSession.lastActivity = new Date();
        // In a real implementation, this would send to analytics service
        if (this.config.analytics.debug) {
            // eslint-disable-next-line no-console
            console.log('Analytics Event:', event);
        }
    };
    /**
     * Track page view
     */
    MonitoringService.prototype.trackPageView = function (path, userId) {
        if (!this.analyticsSession) {
            return;
        }
        this.analyticsSession.pageViews++;
        this.trackEvent(monitoring_types_1.AnalyticsEventType.PAGE_VIEW, 'page_view', { path: path }, userId);
    };
    /**
     * Add monitoring metric
     */
    MonitoringService.prototype.addMetric = function (name, value, unit, tags) {
        var metric = {
            name: name,
            value: value,
            unit: unit,
            timestamp: new Date(),
            tags: tags,
        };
        this.metrics.push(metric);
        // Keep only recent metrics
        var maxMetrics = this.config.dashboard.maxMetrics;
        if (this.metrics.length > maxMetrics) {
            this.metrics = this.metrics.slice(-maxMetrics);
        }
    };
    /**
     * Add monitoring alert
     */
    MonitoringService.prototype.addAlert = function (level, message, metadata) {
        var alert = {
            id: "alert_".concat(Date.now(), "_").concat(Math.random().toString(36).substr(2, 9)),
            level: level,
            message: message,
            timestamp: new Date(),
            resolved: false,
            metadata: metadata,
        };
        this.alerts.push(alert);
        // Keep only recent alerts
        var maxAlerts = this.config.dashboard.maxAlerts;
        if (this.alerts.length > maxAlerts) {
            this.alerts = this.alerts.slice(-maxAlerts);
        }
        // In a real implementation, this would send alerts via webhook/email
        if (this.config.alerts.enabled) {
            // eslint-disable-next-line no-console
            console.log('Monitoring Alert:', alert);
        }
    };
    /**
     * Get monitoring dashboard data
     */
    MonitoringService.prototype.getDashboardData = function () {
        return __awaiter(this, void 0, Promise, function () {
            var systemHealth, recentAlerts, recentMetrics;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getSystemHealth()];
                    case 1:
                        systemHealth = _b.sent();
                        recentAlerts = this.alerts.slice(-10);
                        recentMetrics = this.metrics.slice(-20);
                        return [2 /*return*/, {
                                systemHealth: systemHealth,
                                recentAlerts: recentAlerts,
                                metrics: recentMetrics,
                                analytics: {
                                    totalEvents: ((_a = this.analyticsSession) === null || _a === void 0 ? void 0 : _a.events) || 0,
                                    activeSessions: this.analyticsSession ? 1 : 0,
                                    topPages: this.getTopPages(),
                                },
                            }];
                }
            });
        });
    };
    /**
     * Get top pages (simplified implementation)
     */
    MonitoringService.prototype.getTopPages = function () {
        // In a real implementation, this would aggregate page view data
        return [
            { path: '/', views: 100 },
            { path: '/dashboard', views: 50 },
            { path: '/settings', views: 25 },
        ];
    };
    /**
     * Get current analytics session
     */
    MonitoringService.prototype.getAnalyticsSession = function () {
        return this.analyticsSession;
    };
    /**
     * Update configuration
     */
    MonitoringService.prototype.updateConfig = function (newConfig) {
        this.config = __assign(__assign({}, this.config), newConfig);
    };
    return MonitoringService;
}());
exports.MonitoringService = MonitoringService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,