{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/monitoring/lib/monitoring.service.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/monitoring/lib/monitoring.service.ts"],"sourcesContent":["/**\n * Monitoring Service\n *\n * Centralized service for health checks, analytics, and monitoring functionality.\n * Provides enterprise-level monitoring capabilities with privacy compliance.\n */\n\nimport {\n  AlertLevel,\n  AnalyticsEvent,\n  AnalyticsEventType,\n  AnalyticsSession,\n  HealthStatus,\n  MonitoringAlert,\n  MonitoringConfig,\n  MonitoringDashboardData,\n  MonitoringMetric,\n  ServiceHealth,\n  SystemHealth,\n} from '../types/monitoring.types';\nimport { envConfig } from '../../../../config/env';\n// Version info is only available on server side\n// import { getVersionDisplay, getVersionInfo } from '../../../../config/version';\n\n/**\n * Monitoring Service Class\n *\n * Handles health checks, analytics tracking, and monitoring data collection.\n * Follows singleton pattern for consistent state across the application.\n */\nexport class MonitoringService {\n  private static instance: MonitoringService;\n  private config: MonitoringConfig;\n  private analyticsSession: AnalyticsSession | null = null;\n  private metrics: MonitoringMetric[] = [];\n  private alerts: MonitoringAlert[] = [];\n  private startTime: Date;\n\n  private constructor(config: MonitoringConfig) {\n    this.config = config;\n    this.startTime = new Date();\n    this.initializeAnalytics();\n  }\n\n  /**\n   * Get singleton instance of MonitoringService\n   */\n  public static getInstance(config?: MonitoringConfig): MonitoringService {\n    if (!MonitoringService.instance) {\n      if (!config) {\n        throw new Error('MonitoringService requires configuration on first initialization');\n      }\n      MonitoringService.instance = new MonitoringService(config);\n    }\n    return MonitoringService.instance;\n  }\n\n  /**\n   * Initialize analytics session\n   */\n  private initializeAnalytics(): void {\n    if (this.config.analytics.enabled) {\n      this.analyticsSession = {\n        id: this.generateSessionId(),\n        startTime: new Date(),\n        lastActivity: new Date(),\n        pageViews: 0,\n        events: 0,\n      };\n    }\n  }\n\n  /**\n   * Generate unique session ID\n   */\n  private generateSessionId(): string {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Get system health status\n   */\n  public async getSystemHealth(): Promise<SystemHealth> {\n    const services = await this.checkServicesHealth();\n    const summary = this.calculateHealthSummary(services);\n    const overallStatus = this.determineOverallStatus(summary);\n\n    // Version info not available on client side\n    const versionInfo = {\n      major: 1,\n      minor: 0,\n      patch: 0,\n      prerelease: '',\n      versionCode: 1,\n      commitHash: 'unknown',\n      branch: 'unknown',\n    };\n\n    return {\n      status: overallStatus,\n      timestamp: new Date(),\n      uptime: Date.now() - this.startTime.getTime(),\n      version: envConfig.appVersion,\n      versionDisplay: '1.0.0',\n      versionInfo: {\n        major: versionInfo.major,\n        minor: versionInfo.minor,\n        patch: versionInfo.patch,\n        prerelease: versionInfo.prerelease,\n        versionCode: versionInfo.versionCode,\n        commitHash: versionInfo.commitHash,\n        branch: versionInfo.branch,\n      },\n      environment: envConfig.appEnv,\n      services,\n      summary,\n    };\n  }\n\n  /**\n   * Check health of individual services\n   */\n  private async checkServicesHealth(): Promise<ServiceHealth[]> {\n    const services: ServiceHealth[] = [];\n\n    for (const serviceName of this.config.healthCheck.services) {\n      try {\n        const startTime = Date.now();\n        const health = await this.checkServiceHealth(serviceName);\n        const responseTime = Date.now() - startTime;\n\n        services.push({\n          name: serviceName,\n          status: health.status,\n          responseTime,\n          lastCheck: new Date(),\n          error: health.error,\n          metadata: health.metadata,\n        });\n      } catch (error) {\n        services.push({\n          name: serviceName,\n          status: HealthStatus.UNHEALTHY,\n          lastCheck: new Date(),\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n      }\n    }\n\n    return services;\n  }\n\n  /**\n   * Check health of a specific service\n   */\n  private async checkServiceHealth(serviceName: string): Promise<{\n    status: HealthStatus;\n    error?: string;\n    metadata?: Record<string, unknown>;\n  }> {\n    switch (serviceName) {\n      case 'database':\n        return this.checkDatabaseHealth();\n      case 'api':\n        return this.checkApiHealth();\n      case 'cache':\n        return this.checkCacheHealth();\n      case 'storage':\n        return this.checkStorageHealth();\n      default:\n        return { status: HealthStatus.UNKNOWN };\n    }\n  }\n\n  /**\n   * Check database health\n   */\n  private async checkDatabaseHealth(): Promise<{\n    status: HealthStatus;\n    error?: string;\n    metadata?: Record<string, unknown>;\n  }> {\n    // In a real implementation, this would check actual database connectivity\n    await Promise.resolve(); // Simulate async operation\n    // For now, we'll simulate a healthy database\n    return {\n      status: HealthStatus.HEALTHY,\n      metadata: {\n        connectionPool: 'active',\n        queryTime: '< 10ms',\n      },\n    };\n  }\n\n  /**\n   * Check API health\n   */\n  private async checkApiHealth(): Promise<{\n    status: HealthStatus;\n    error?: string;\n    metadata?: Record<string, unknown>;\n  }> {\n    // In a real implementation, this would check API endpoints\n    await Promise.resolve(); // Simulate async operation\n    return {\n      status: HealthStatus.HEALTHY,\n      metadata: {\n        responseTime: '< 100ms',\n        endpoints: 'all_operational',\n      },\n    };\n  }\n\n  /**\n   * Check cache health\n   */\n  private async checkCacheHealth(): Promise<{\n    status: HealthStatus;\n    error?: string;\n    metadata?: Record<string, unknown>;\n  }> {\n    // In a real implementation, this would check cache connectivity\n    await Promise.resolve(); // Simulate async operation\n    return {\n      status: HealthStatus.HEALTHY,\n      metadata: {\n        hitRate: '95%',\n        memoryUsage: '60%',\n      },\n    };\n  }\n\n  /**\n   * Check storage health\n   */\n  private async checkStorageHealth(): Promise<{\n    status: HealthStatus;\n    error?: string;\n    metadata?: Record<string, unknown>;\n  }> {\n    // In a real implementation, this would check storage connectivity\n    await Promise.resolve(); // Simulate async operation\n    return {\n      status: HealthStatus.HEALTHY,\n      metadata: {\n        availableSpace: '80%',\n        readWrite: 'operational',\n      },\n    };\n  }\n\n  /**\n   * Calculate health summary from services\n   */\n  private calculateHealthSummary(services: ServiceHealth[]): {\n    total: number;\n    healthy: number;\n    degraded: number;\n    unhealthy: number;\n  } {\n    const summary = {\n      total: services.length,\n      healthy: 0,\n      degraded: 0,\n      unhealthy: 0,\n    };\n\n    services.forEach((service) => {\n      switch (service.status) {\n        case HealthStatus.HEALTHY:\n          summary.healthy++;\n          break;\n        case HealthStatus.DEGRADED:\n          summary.degraded++;\n          break;\n        case HealthStatus.UNHEALTHY:\n          summary.unhealthy++;\n          break;\n      }\n    });\n\n    return summary;\n  }\n\n  /**\n   * Determine overall system status\n   */\n  private determineOverallStatus(summary: {\n    total: number;\n    healthy: number;\n    degraded: number;\n    unhealthy: number;\n  }): HealthStatus {\n    if (summary.unhealthy > 0) {\n      return HealthStatus.UNHEALTHY;\n    }\n    if (summary.degraded > 0) {\n      return HealthStatus.DEGRADED;\n    }\n    if (summary.healthy === summary.total) {\n      return HealthStatus.HEALTHY;\n    }\n    return HealthStatus.UNKNOWN;\n  }\n\n  /**\n   * Track analytics event\n   */\n  public trackEvent(\n    type: AnalyticsEventType,\n    name: string,\n    properties?: Record<string, unknown>,\n    userId?: string\n  ): void {\n    if (!this.config.analytics.enabled || !this.analyticsSession) {\n      return;\n    }\n\n    const event: AnalyticsEvent = {\n      id: `event_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      type,\n      name,\n      timestamp: new Date(),\n      userId,\n      sessionId: this.analyticsSession.id,\n      properties,\n    };\n\n    // Update session\n    this.analyticsSession.events++;\n    this.analyticsSession.lastActivity = new Date();\n\n    // In a real implementation, this would send to analytics service\n    if (this.config.analytics.debug) {\n      // eslint-disable-next-line no-console\n      console.log('Analytics Event:', event);\n    }\n  }\n\n  /**\n   * Track page view\n   */\n  public trackPageView(path: string, userId?: string): void {\n    if (!this.analyticsSession) {\n      return;\n    }\n\n    this.analyticsSession.pageViews++;\n    this.trackEvent(AnalyticsEventType.PAGE_VIEW, 'page_view', { path }, userId);\n  }\n\n  /**\n   * Add monitoring metric\n   */\n  public addMetric(name: string, value: number, unit: string, tags?: Record<string, string>): void {\n    const metric: MonitoringMetric = {\n      name,\n      value,\n      unit,\n      timestamp: new Date(),\n      tags,\n    };\n\n    this.metrics.push(metric);\n\n    // Keep only recent metrics\n    const maxMetrics = this.config.dashboard.maxMetrics;\n    if (this.metrics.length > maxMetrics) {\n      this.metrics = this.metrics.slice(-maxMetrics);\n    }\n  }\n\n  /**\n   * Add monitoring alert\n   */\n  public addAlert(level: AlertLevel, message: string, metadata?: Record<string, unknown>): void {\n    const alert: MonitoringAlert = {\n      id: `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      level,\n      message,\n      timestamp: new Date(),\n      resolved: false,\n      metadata,\n    };\n\n    this.alerts.push(alert);\n\n    // Keep only recent alerts\n    const maxAlerts = this.config.dashboard.maxAlerts;\n    if (this.alerts.length > maxAlerts) {\n      this.alerts = this.alerts.slice(-maxAlerts);\n    }\n\n    // In a real implementation, this would send alerts via webhook/email\n    if (this.config.alerts.enabled) {\n      // eslint-disable-next-line no-console\n      console.log('Monitoring Alert:', alert);\n    }\n  }\n\n  /**\n   * Get monitoring dashboard data\n   */\n  public async getDashboardData(): Promise<MonitoringDashboardData> {\n    const systemHealth = await this.getSystemHealth();\n    const recentAlerts = this.alerts.slice(-10);\n    const recentMetrics = this.metrics.slice(-20);\n\n    return {\n      systemHealth,\n      recentAlerts,\n      metrics: recentMetrics,\n      analytics: {\n        totalEvents: this.analyticsSession?.events || 0,\n        activeSessions: this.analyticsSession ? 1 : 0,\n        topPages: this.getTopPages(),\n      },\n    };\n  }\n\n  /**\n   * Get top pages (simplified implementation)\n   */\n  private getTopPages(): Array<{ path: string; views: number }> {\n    // In a real implementation, this would aggregate page view data\n    return [\n      { path: '/', views: 100 },\n      { path: '/dashboard', views: 50 },\n      { path: '/settings', views: 25 },\n    ];\n  }\n\n  /**\n   * Get current analytics session\n   */\n  public getAnalyticsSession(): AnalyticsSession | null {\n    return this.analyticsSession;\n  }\n\n  /**\n   * Update configuration\n   */\n  public updateConfig(newConfig: Partial<MonitoringConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n  }\n}\n"],"version":3}