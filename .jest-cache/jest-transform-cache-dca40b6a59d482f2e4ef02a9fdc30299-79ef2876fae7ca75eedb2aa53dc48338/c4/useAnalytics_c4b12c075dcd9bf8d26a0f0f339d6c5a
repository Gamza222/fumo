1e17f6b17bb75f1ae9bd0f7008f848a1
"use strict";
/**
 * Analytics Hook
 *
 * React hook for tracking user interactions and analytics events.
 * Provides a simple interface for analytics tracking with privacy compliance.
 */
'use client';
/**
 * Analytics Hook
 *
 * React hook for tracking user interactions and analytics events.
 * Provides a simple interface for analytics tracking with privacy compliance.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAnalytics = void 0;
var react_1 = require("react");
var monitoring_service_1 = require("../../lib/monitoring.service");
var monitoring_types_1 = require("../../types/monitoring.types");
/**
 * Analytics hook for tracking user behavior and events
 *
 * @param options - Analytics configuration options
 * @returns Analytics tracking functions
 */
var useAnalytics = function (options) {
    if (options === void 0) { options = {}; }
    var userId = options.userId, _a = options.trackPageViews, trackPageViews = _a === void 0 ? true : _a, _b = options.trackUserInteractions, trackUserInteractions = _b === void 0 ? true : _b;
    // Get monitoring service instance
    var monitoringService = monitoring_service_1.MonitoringService.getInstance();
    // Track page views automatically
    (0, react_1.useEffect)(function () {
        if (trackPageViews && typeof window !== 'undefined') {
            var currentPath = window.location.pathname;
            monitoringService.trackPageView(currentPath, userId);
            // Track page views on route changes (for SPA)
            var handleRouteChange_1 = function () {
                var newPath = window.location.pathname;
                monitoringService.trackPageView(newPath, userId);
            };
            // Listen for popstate events (back/forward navigation)
            window.addEventListener('popstate', handleRouteChange_1);
            return function () {
                window.removeEventListener('popstate', handleRouteChange_1);
            };
        }
        // Return undefined for the else case
        return undefined;
    }, [trackPageViews, userId, monitoringService]);
    // Track generic events
    var trackEvent = (0, react_1.useCallback)(function (type, name, properties) {
        monitoringService.trackEvent(type, name, properties, userId);
    }, [monitoringService, userId]);
    // Track page views
    var trackPageView = (0, react_1.useCallback)(function (path) {
        monitoringService.trackPageView(path, userId);
    }, [monitoringService, userId]);
    // Track user interactions
    var trackUserInteraction = (0, react_1.useCallback)(function (action, target, properties) {
        if (trackUserInteractions) {
            var interactionProperties = __assign({ action: action, target: target }, properties);
            monitoringService.trackEvent(monitoring_types_1.AnalyticsEventType.USER_INTERACTION, 'user_interaction', interactionProperties, userId);
        }
    }, [trackUserInteractions, monitoringService, userId]);
    // Track performance metrics
    var trackPerformance = (0, react_1.useCallback)(function (metric, value, unit) {
        if (unit === void 0) { unit = 'ms'; }
        monitoringService.trackEvent(monitoring_types_1.AnalyticsEventType.PERFORMANCE_METRIC, 'performance_metric', { metric: metric, value: value, unit: unit }, userId);
    }, [monitoringService, userId]);
    // Track errors
    var trackError = (0, react_1.useCallback)(function (error, context) {
        monitoringService.trackEvent(monitoring_types_1.AnalyticsEventType.ERROR_EVENT, 'error_event', {
            error: {
                name: error.name,
                message: error.message,
                stack: error.stack,
            },
            context: context,
        }, userId);
    }, [monitoringService, userId]);
    return {
        trackEvent: trackEvent,
        trackPageView: trackPageView,
        trackUserInteraction: trackUserInteraction,
        trackPerformance: trackPerformance,
        trackError: trackError,
    };
};
exports.useAnalytics = useAnalytics;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,