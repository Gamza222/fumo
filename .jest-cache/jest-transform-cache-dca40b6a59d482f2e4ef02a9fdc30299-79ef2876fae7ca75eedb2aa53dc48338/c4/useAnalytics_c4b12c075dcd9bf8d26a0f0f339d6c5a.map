{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/monitoring/hooks/useAnalytics/useAnalytics.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/monitoring/hooks/useAnalytics/useAnalytics.ts"],"sourcesContent":["/**\n * Analytics Hook\n *\n * React hook for tracking user interactions and analytics events.\n * Provides a simple interface for analytics tracking with privacy compliance.\n */\n\n'use client';\n\nimport { useCallback, useEffect } from 'react';\nimport { MonitoringService } from '../../lib/monitoring.service';\nimport { AnalyticsEventType } from '../../types/monitoring.types';\n\ninterface UseAnalyticsOptions {\n  userId?: string;\n  trackPageViews?: boolean;\n  trackUserInteractions?: boolean;\n}\n\ninterface UseAnalyticsReturn {\n  trackEvent: (\n    type: AnalyticsEventType,\n    name: string,\n    properties?: Record<string, unknown>\n  ) => void;\n  trackPageView: (path: string) => void;\n  trackUserInteraction: (\n    action: string,\n    target?: string,\n    properties?: Record<string, unknown>\n  ) => void;\n  trackPerformance: (metric: string, value: number, unit?: string) => void;\n  trackError: (error: Error, context?: Record<string, unknown>) => void;\n}\n\n/**\n * Analytics hook for tracking user behavior and events\n *\n * @param options - Analytics configuration options\n * @returns Analytics tracking functions\n */\nexport const useAnalytics = (options: UseAnalyticsOptions = {}): UseAnalyticsReturn => {\n  const { userId, trackPageViews = true, trackUserInteractions = true } = options;\n\n  // Get monitoring service instance\n  const monitoringService = MonitoringService.getInstance();\n\n  // Track page views automatically\n  useEffect(() => {\n    if (trackPageViews && typeof window !== 'undefined') {\n      const currentPath = window.location.pathname;\n      monitoringService.trackPageView(currentPath, userId);\n\n      // Track page views on route changes (for SPA)\n      const handleRouteChange = () => {\n        const newPath = window.location.pathname;\n        monitoringService.trackPageView(newPath, userId);\n      };\n\n      // Listen for popstate events (back/forward navigation)\n      window.addEventListener('popstate', handleRouteChange);\n\n      return () => {\n        window.removeEventListener('popstate', handleRouteChange);\n      };\n    }\n    // Return undefined for the else case\n    return undefined;\n  }, [trackPageViews, userId, monitoringService]);\n\n  // Track generic events\n  const trackEvent = useCallback(\n    (type: AnalyticsEventType, name: string, properties?: Record<string, unknown>) => {\n      monitoringService.trackEvent(type, name, properties, userId);\n    },\n    [monitoringService, userId]\n  );\n\n  // Track page views\n  const trackPageView = useCallback(\n    (path: string) => {\n      monitoringService.trackPageView(path, userId);\n    },\n    [monitoringService, userId]\n  );\n\n  // Track user interactions\n  const trackUserInteraction = useCallback(\n    (action: string, target?: string, properties?: Record<string, unknown>) => {\n      if (trackUserInteractions) {\n        const interactionProperties = {\n          action,\n          target,\n          ...properties,\n        };\n        monitoringService.trackEvent(\n          AnalyticsEventType.USER_INTERACTION,\n          'user_interaction',\n          interactionProperties,\n          userId\n        );\n      }\n    },\n    [trackUserInteractions, monitoringService, userId]\n  );\n\n  // Track performance metrics\n  const trackPerformance = useCallback(\n    (metric: string, value: number, unit: string = 'ms') => {\n      monitoringService.trackEvent(\n        AnalyticsEventType.PERFORMANCE_METRIC,\n        'performance_metric',\n        { metric, value, unit },\n        userId\n      );\n    },\n    [monitoringService, userId]\n  );\n\n  // Track errors\n  const trackError = useCallback(\n    (error: Error, context?: Record<string, unknown>) => {\n      monitoringService.trackEvent(\n        AnalyticsEventType.ERROR_EVENT,\n        'error_event',\n        {\n          error: {\n            name: error.name,\n            message: error.message,\n            stack: error.stack,\n          },\n          context,\n        },\n        userId\n      );\n    },\n    [monitoringService, userId]\n  );\n\n  return {\n    trackEvent,\n    trackPageView,\n    trackUserInteraction,\n    trackPerformance,\n    trackError,\n  };\n};\n"],"version":3}