54438856c55ab0cd488d8327c67fcb25
"use strict";
/**
 * useAppLoading Hook Tests
 */
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("@testing-library/react");
var useAppLoading_1 = require("./useAppLoading");
// Mock setup for DOM APIs
var mockPerformance = {
    now: jest.fn(function () { return 1000; }),
};
var mockQuerySelectorAll = jest.fn(function () { return []; });
var mockHasAttribute = jest.fn(function () { return true; });
var mockClassListContains = jest.fn(function () { return true; });
// Setup mocks
Object.defineProperty(window, 'performance', {
    value: mockPerformance,
    writable: true,
});
Object.defineProperty(document, 'readyState', {
    get: function () { return 'complete'; },
    configurable: true,
});
Object.defineProperty(document, 'querySelectorAll', {
    value: mockQuerySelectorAll,
    writable: true,
});
Object.defineProperty(document.documentElement, 'hasAttribute', {
    value: mockHasAttribute,
});
Object.defineProperty(document.documentElement, 'classList', {
    value: { contains: mockClassListContains },
});
Object.defineProperty(document.body, 'classList', {
    value: { contains: mockClassListContains },
});
Object.defineProperty(window, 'setTimeout', {
    value: jest.fn(function (callback) {
        callback();
        return 1;
    }),
    writable: true,
});
describe('useAppLoading', function () {
    beforeEach(function () {
        jest.clearAllMocks();
        mockPerformance.now.mockReturnValue(1000);
        mockQuerySelectorAll.mockReturnValue([]);
        mockHasAttribute.mockReturnValue(true);
        mockClassListContains.mockReturnValue(true);
    });
    describe('Initial State', function () {
        it('should start with loading state', function () {
            var result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
            expect(result.current.isInitialLoading).toBe(true);
            expect(result.current.isOverallLoading).toBe(true);
            expect(result.current.isSuspenseLoading).toBe(false);
            expect(result.current.progress).toBe(0);
            expect(result.current.steps).toHaveLength(4);
        });
        it('should have correct function types', function () {
            var result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
            expect(typeof result.current.forceComplete).toBe('function');
            expect(typeof result.current.restart).toBe('function');
            expect(typeof result.current.setSuspenseLoading).toBe('function');
        });
    });
    describe('Force Complete', function () {
        it('should force complete immediately', function () {
            var result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
            (0, react_1.act)(function () {
                result.current.forceComplete();
            });
            expect(result.current.isInitialLoading).toBe(false);
            expect(result.current.isOverallLoading).toBe(false);
            expect(result.current.progress).toBe(100);
            expect(result.current.currentStep).toBe('Ready');
        });
    });
    describe('Restart', function () {
        it('should restart loading state', function () {
            var result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
            // First complete it
            (0, react_1.act)(function () {
                result.current.forceComplete();
            });
            expect(result.current.isInitialLoading).toBe(false);
            // Then restart
            (0, react_1.act)(function () {
                result.current.restart();
            });
            expect(result.current.isInitialLoading).toBe(true);
            expect(result.current.isOverallLoading).toBe(true);
            expect(result.current.progress).toBe(0);
            expect(result.current.steps).toHaveLength(4);
            expect(result.current.isSuspenseLoading).toBe(false);
        });
    });
    describe('Suspense Loading', function () {
        it('should handle suspense loading state', function () {
            var result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
            // Initially suspense is not loading
            expect(result.current.isSuspenseLoading).toBe(false);
            expect(result.current.isOverallLoading).toBe(true); // Because initial loading is true
            // Set suspense loading to true
            (0, react_1.act)(function () {
                result.current.setSuspenseLoading(true);
            });
            expect(result.current.isSuspenseLoading).toBe(true);
            expect(result.current.isOverallLoading).toBe(true); // Should still be true
            // Set suspense loading to false
            (0, react_1.act)(function () {
                result.current.setSuspenseLoading(false);
            });
            expect(result.current.isSuspenseLoading).toBe(false);
            expect(result.current.isOverallLoading).toBe(true); // Should still be true because initial loading is true
        });
        it('should compute isOverallLoading correctly', function () {
            var result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
            // Both initial and suspense loading
            (0, react_1.act)(function () {
                result.current.setSuspenseLoading(true);
            });
            expect(result.current.isOverallLoading).toBe(true);
            // Only initial loading
            (0, react_1.act)(function () {
                result.current.setSuspenseLoading(false);
            });
            expect(result.current.isOverallLoading).toBe(true);
            // Force complete initial loading, only suspense
            (0, react_1.act)(function () {
                result.current.forceComplete();
                result.current.setSuspenseLoading(true);
            });
            expect(result.current.isOverallLoading).toBe(true);
            // Neither loading
            (0, react_1.act)(function () {
                result.current.setSuspenseLoading(false);
            });
            expect(result.current.isOverallLoading).toBe(false);
        });
    });
    describe('Loading Steps', function () {
        it('should initialize steps correctly', function () {
            var result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
            expect(result.current.steps).toHaveLength(4);
            var expectedSteps = [
                { id: 'dom-ready', name: 'Preparing Application' },
                { id: 'critical-css', name: 'Loading Styles' },
                { id: 'theme-initialized', name: 'Applying Theme' },
                { id: 'core-javascript', name: 'Loading Core Features' },
            ];
            expectedSteps.forEach(function (expectedStep, index) {
                var _a, _b, _c, _d, _e, _f;
                expect((_b = (_a = result === null || result === void 0 ? void 0 : result.current) === null || _a === void 0 ? void 0 : _a.steps[index]) === null || _b === void 0 ? void 0 : _b.id).toBe(expectedStep.id);
                expect((_d = (_c = result === null || result === void 0 ? void 0 : result.current) === null || _c === void 0 ? void 0 : _c.steps[index]) === null || _d === void 0 ? void 0 : _d.name).toBe(expectedStep.name);
                expect((_f = (_e = result === null || result === void 0 ? void 0 : result.current) === null || _e === void 0 ? void 0 : _e.steps[index]) === null || _f === void 0 ? void 0 : _f.completed).toBe(false);
            });
        });
    });
    describe('DOM Condition Checks', function () {
        it('should check DOM ready state correctly', function () {
            // Mock document.readyState as complete
            Object.defineProperty(document, 'readyState', {
                get: function () { return 'complete'; },
                configurable: true,
            });
            var result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
            // The hook should work without errors
            expect(result.current.isInitialLoading).toBe(true);
        });
        it('should check critical CSS correctly', function () {
            // Mock no critical CSS sheets
            mockQuerySelectorAll.mockReturnValue([]);
            var result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
            expect(result.current.isInitialLoading).toBe(true);
        });
        it('should check theme initialization correctly', function () {
            // Mock theme attributes
            mockHasAttribute.mockReturnValue(true);
            mockClassListContains.mockReturnValue(true);
            var result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
            expect(result.current.isInitialLoading).toBe(true);
        });
        it('should check core JavaScript correctly', function () {
            // Mock window and document ready state
            Object.defineProperty(document, 'readyState', {
                get: function () { return 'complete'; },
                configurable: true,
            });
            var result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
            expect(result.current.isInitialLoading).toBe(true);
        });
    });
    describe('Error Handling', function () {
        it('should handle DOM API errors gracefully', function () {
            // Mock querySelectorAll to throw error
            mockQuerySelectorAll.mockImplementation(function () {
                throw new Error('DOM error');
            });
            var result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
            expect(result.current.isInitialLoading).toBe(true);
        });
    });
    describe('Performance', function () {
        it('should not recreate conditions on every render', function () {
            var _a = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }), result = _a.result, rerender = _a.rerender;
            var initialSteps = result.current.steps;
            rerender();
            // Steps should be the same object (memoized)
            expect(result.current.steps).toBe(initialSteps);
        });
        it('should handle performance.now correctly', function () {
            mockPerformance.now
                .mockReturnValueOnce(1000) // startTime
                .mockReturnValueOnce(2200); // currentTime
            var result = (0, react_1.renderHook)(function () { return (0, useAppLoading_1.useAppLoading)(); }).result;
            expect(result.current.isInitialLoading).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,