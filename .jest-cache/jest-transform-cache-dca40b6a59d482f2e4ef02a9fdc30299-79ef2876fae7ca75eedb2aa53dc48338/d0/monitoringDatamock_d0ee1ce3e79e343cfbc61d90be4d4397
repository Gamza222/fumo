683d4b94997bfbcab27c698a1f679d06
"use strict";

/**
 * Monitoring Data Mock
 *
 * Mock data factory for monitoring-related data structures.
 * Provides consistent test data across all monitoring tests.
 */
/* istanbul ignore next */
function cov_141cetvu5p() {
  var path = "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/monitoring/monitoringData.mock.ts";
  var hash = "a14700097a2c4e45e194819e26724f754c6ce8da";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/monitoring/monitoringData.mock.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 18,
          column: 1
        }
      },
      "1": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 16,
          column: 6
        }
      },
      "2": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 14,
          column: 9
        }
      },
      "3": {
        start: {
          line: 10,
          column: 24
        },
        end: {
          line: 10,
          column: 25
        }
      },
      "4": {
        start: {
          line: 10,
          column: 31
        },
        end: {
          line: 10,
          column: 47
        }
      },
      "5": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 11,
          column: 29
        }
      },
      "6": {
        start: {
          line: 12,
          column: 12
        },
        end: {
          line: 13,
          column: 28
        }
      },
      "7": {
        start: {
          line: 12,
          column: 29
        },
        end: {
          line: 13,
          column: 28
        }
      },
      "8": {
        start: {
          line: 13,
          column: 16
        },
        end: {
          line: 13,
          column: 28
        }
      },
      "9": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 17
        }
      },
      "10": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 43
        }
      },
      "11": {
        start: {
          line: 19,
          column: 0
        },
        end: {
          line: 19,
          column: 62
        }
      },
      "12": {
        start: {
          line: 20,
          column: 0
        },
        end: {
          line: 20,
          column: 482
        }
      },
      "13": {
        start: {
          line: 21,
          column: 25
        },
        end: {
          line: 21,
          column: 86
        }
      },
      "14": {
        start: {
          line: 28,
          column: 26
        },
        end: {
          line: 31,
          column: 1
        }
      },
      "15": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 29,
          column: 49
        }
      },
      "16": {
        start: {
          line: 29,
          column: 32
        },
        end: {
          line: 29,
          column: 47
        }
      },
      "17": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 30,
          column: 164
        }
      },
      "18": {
        start: {
          line: 32,
          column: 0
        },
        end: {
          line: 32,
          column: 50
        }
      },
      "19": {
        start: {
          line: 36,
          column: 28
        },
        end: {
          line: 39,
          column: 1
        }
      },
      "20": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 37,
          column: 49
        }
      },
      "21": {
        start: {
          line: 37,
          column: 32
        },
        end: {
          line: 37,
          column: 47
        }
      },
      "22": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 38,
          column: 188
        }
      },
      "23": {
        start: {
          line: 40,
          column: 0
        },
        end: {
          line: 40,
          column: 54
        }
      },
      "24": {
        start: {
          line: 47,
          column: 0
        },
        end: {
          line: 90,
          column: 2
        }
      },
      "25": {
        start: {
          line: 94,
          column: 0
        },
        end: {
          line: 128,
          column: 2
        }
      },
      "26": {
        start: {
          line: 132,
          column: 0
        },
        end: {
          line: 166,
          column: 2
        }
      },
      "27": {
        start: {
          line: 173,
          column: 0
        },
        end: {
          line: 208,
          column: 2
        }
      },
      "28": {
        start: {
          line: 212,
          column: 0
        },
        end: {
          line: 231,
          column: 9
        }
      },
      "29": {
        start: {
          line: 235,
          column: 0
        },
        end: {
          line: 235,
          column: 108
        }
      },
      "30": {
        start: {
          line: 242,
          column: 0
        },
        end: {
          line: 249,
          column: 2
        }
      },
      "31": {
        start: {
          line: 253,
          column: 0
        },
        end: {
          line: 268,
          column: 2
        }
      },
      "32": {
        start: {
          line: 275,
          column: 0
        },
        end: {
          line: 292,
          column: 2
        }
      },
      "33": {
        start: {
          line: 299,
          column: 0
        },
        end: {
          line: 321,
          column: 2
        }
      },
      "34": {
        start: {
          line: 328,
          column: 33
        },
        end: {
          line: 337,
          column: 1
        }
      },
      "35": {
        start: {
          line: 329,
          column: 4
        },
        end: {
          line: 329,
          column: 88
        }
      },
      "36": {
        start: {
          line: 329,
          column: 33
        },
        end: {
          line: 329,
          column: 86
        }
      },
      "37": {
        start: {
          line: 330,
          column: 4
        },
        end: {
          line: 336,
          column: 7
        }
      },
      "38": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 335,
          column: 11
        }
      },
      "39": {
        start: {
          line: 338,
          column: 0
        },
        end: {
          line: 338,
          column: 64
        }
      },
      "40": {
        start: {
          line: 342,
          column: 26
        },
        end: {
          line: 351,
          column: 1
        }
      },
      "41": {
        start: {
          line: 343,
          column: 4
        },
        end: {
          line: 343,
          column: 73
        }
      },
      "42": {
        start: {
          line: 343,
          column: 28
        },
        end: {
          line: 343,
          column: 71
        }
      },
      "43": {
        start: {
          line: 344,
          column: 4
        },
        end: {
          line: 350,
          column: 7
        }
      },
      "44": {
        start: {
          line: 345,
          column: 8
        },
        end: {
          line: 349,
          column: 11
        }
      },
      "45": {
        start: {
          line: 352,
          column: 0
        },
        end: {
          line: 352,
          column: 50
        }
      },
      "46": {
        start: {
          line: 356,
          column: 32
        },
        end: {
          line: 359,
          column: 1
        }
      },
      "47": {
        start: {
          line: 357,
          column: 4
        },
        end: {
          line: 357,
          column: 49
        }
      },
      "48": {
        start: {
          line: 357,
          column: 32
        },
        end: {
          line: 357,
          column: 47
        }
      },
      "49": {
        start: {
          line: 358,
          column: 4
        },
        end: {
          line: 358,
          column: 72
        }
      },
      "50": {
        start: {
          line: 360,
          column: 0
        },
        end: {
          line: 360,
          column: 62
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 42
          },
          end: {
            line: 8,
            column: 43
          }
        },
        loc: {
          start: {
            line: 8,
            column: 54
          },
          end: {
            line: 18,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 9,
            column: 32
          },
          end: {
            line: 9,
            column: 33
          }
        },
        loc: {
          start: {
            line: 9,
            column: 44
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 9
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 28,
            column: 26
          },
          end: {
            line: 28,
            column: 27
          }
        },
        loc: {
          start: {
            line: 28,
            column: 47
          },
          end: {
            line: 31,
            column: 1
          }
        },
        line: 28
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 36,
            column: 28
          },
          end: {
            line: 36,
            column: 29
          }
        },
        loc: {
          start: {
            line: 36,
            column: 49
          },
          end: {
            line: 39,
            column: 1
          }
        },
        line: 36
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 328,
            column: 33
          },
          end: {
            line: 328,
            column: 34
          }
        },
        loc: {
          start: {
            line: 328,
            column: 62
          },
          end: {
            line: 337,
            column: 1
          }
        },
        line: 328
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 330,
            column: 41
          },
          end: {
            line: 330,
            column: 42
          }
        },
        loc: {
          start: {
            line: 330,
            column: 61
          },
          end: {
            line: 336,
            column: 5
          }
        },
        line: 330
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 342,
            column: 26
          },
          end: {
            line: 342,
            column: 27
          }
        },
        loc: {
          start: {
            line: 342,
            column: 50
          },
          end: {
            line: 351,
            column: 1
          }
        },
        line: 342
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 344,
            column: 41
          },
          end: {
            line: 344,
            column: 42
          }
        },
        loc: {
          start: {
            line: 344,
            column: 61
          },
          end: {
            line: 350,
            column: 5
          }
        },
        line: 344
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 356,
            column: 32
          },
          end: {
            line: 356,
            column: 33
          }
        },
        loc: {
          start: {
            line: 356,
            column: 53
          },
          end: {
            line: 359,
            column: 1
          }
        },
        line: 356
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 8,
            column: 15
          },
          end: {
            line: 18,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 16
          },
          end: {
            line: 8,
            column: 20
          }
        }, {
          start: {
            line: 8,
            column: 24
          },
          end: {
            line: 8,
            column: 37
          }
        }, {
          start: {
            line: 8,
            column: 42
          },
          end: {
            line: 18,
            column: 1
          }
        }],
        line: 8
      },
      "1": {
        loc: {
          start: {
            line: 9,
            column: 15
          },
          end: {
            line: 16,
            column: 5
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 9,
            column: 15
          },
          end: {
            line: 9,
            column: 28
          }
        }, {
          start: {
            line: 9,
            column: 32
          },
          end: {
            line: 16,
            column: 5
          }
        }],
        line: 9
      },
      "2": {
        loc: {
          start: {
            line: 12,
            column: 29
          },
          end: {
            line: 13,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 12,
            column: 29
          },
          end: {
            line: 13,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 12
      },
      "3": {
        loc: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "4": {
        loc: {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 37,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 37,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "5": {
        loc: {
          start: {
            line: 329,
            column: 4
          },
          end: {
            line: 329,
            column: 88
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 329,
            column: 4
          },
          end: {
            line: 329,
            column: 88
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 329
      },
      "6": {
        loc: {
          start: {
            line: 343,
            column: 4
          },
          end: {
            line: 343,
            column: 73
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 343,
            column: 4
          },
          end: {
            line: 343,
            column: 73
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 343
      },
      "7": {
        loc: {
          start: {
            line: 357,
            column: 4
          },
          end: {
            line: 357,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 357,
            column: 4
          },
          end: {
            line: 357,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 357
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/monitoring/monitoringData.mock.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/monitoring/monitoringData.mock.ts"],
      sourcesContent: ["/**\n * Monitoring Data Mock\n *\n * Mock data factory for monitoring-related data structures.\n * Provides consistent test data across all monitoring tests.\n */\n\nimport {\n  AlertLevel,\n  AnalyticsEventType,\n  HealthStatus,\n  MonitoringAlert,\n  MonitoringDashboardData,\n  ServiceHealth,\n  SystemHealth,\n} from '@/infrastructure/monitoring/types/monitoring.types';\n\n// ============================================================================\n// BASE DATA GENERATORS\n// ============================================================================\n\n/**\n * Create a service health object\n */\nexport const createServiceHealth = (overrides: Partial<ServiceHealth> = {}): ServiceHealth => {\n  return {\n    name: 'database',\n    status: HealthStatus.HEALTHY,\n    responseTime: 5,\n    lastCheck: new Date('2024-01-01T00:00:00Z'),\n    ...overrides,\n  };\n};\n\n/**\n * Create a monitoring alert object\n */\nexport const createMonitoringAlert = (\n  overrides: Partial<MonitoringAlert> = {}\n): MonitoringAlert => {\n  return {\n    id: 'alert_123',\n    level: AlertLevel.INFO,\n    message: 'Test alert message',\n    timestamp: new Date('2024-01-01T00:00:00Z'),\n    resolved: false,\n    ...overrides,\n  };\n};\n\n// ============================================================================\n// SYSTEM HEALTH MOCKS\n// ============================================================================\n\n/**\n * Default healthy system health data\n */\nexport const mockHealthySystemHealth: SystemHealth = {\n  status: HealthStatus.HEALTHY,\n  timestamp: new Date('2024-01-01T00:00:00Z'),\n  uptime: 3600000, // 1 hour\n  version: '1.0.0',\n  versionDisplay: '1.0.0-dev',\n  versionInfo: {\n    major: 1,\n    minor: 0,\n    patch: 0,\n    versionCode: 10000,\n    commitHash: 'abc123',\n    branch: 'main',\n  },\n  environment: 'development',\n  services: [\n    createServiceHealth({\n      name: 'database',\n      status: HealthStatus.HEALTHY,\n      responseTime: 5,\n    }),\n    createServiceHealth({\n      name: 'api',\n      status: HealthStatus.HEALTHY,\n      responseTime: 10,\n    }),\n    createServiceHealth({\n      name: 'cache',\n      status: HealthStatus.HEALTHY,\n      responseTime: 2,\n    }),\n    createServiceHealth({\n      name: 'storage',\n      status: HealthStatus.HEALTHY,\n      responseTime: 8,\n    }),\n  ],\n  summary: {\n    total: 4,\n    healthy: 4,\n    degraded: 0,\n    unhealthy: 0,\n  },\n};\n\n/**\n * Unhealthy system health data\n */\nexport const mockUnhealthySystemHealth: SystemHealth = {\n  status: HealthStatus.UNHEALTHY,\n  timestamp: new Date('2024-01-01T00:00:00Z'),\n  uptime: 3600000,\n  version: '1.0.0',\n  versionDisplay: '1.0.0-dev',\n  versionInfo: {\n    major: 1,\n    minor: 0,\n    patch: 0,\n    versionCode: 10000,\n    commitHash: 'abc123',\n    branch: 'main',\n  },\n  environment: 'development',\n  services: [\n    createServiceHealth({\n      name: 'database',\n      status: HealthStatus.UNHEALTHY,\n      responseTime: 5000,\n      error: 'Connection timeout',\n    }),\n    createServiceHealth({\n      name: 'api',\n      status: HealthStatus.HEALTHY,\n      responseTime: 10,\n    }),\n  ],\n  summary: {\n    total: 2,\n    healthy: 1,\n    degraded: 0,\n    unhealthy: 1,\n  },\n};\n\n/**\n * Degraded system health data\n */\nexport const mockDegradedSystemHealth: SystemHealth = {\n  status: HealthStatus.DEGRADED,\n  timestamp: new Date('2024-01-01T00:00:00Z'),\n  uptime: 3600000,\n  version: '1.0.0',\n  versionDisplay: '1.0.0-dev',\n  versionInfo: {\n    major: 1,\n    minor: 0,\n    patch: 0,\n    versionCode: 10000,\n    commitHash: 'abc123',\n    branch: 'main',\n  },\n  environment: 'development',\n  services: [\n    createServiceHealth({\n      name: 'database',\n      status: HealthStatus.HEALTHY,\n      responseTime: 5,\n    }),\n    createServiceHealth({\n      name: 'cache',\n      status: HealthStatus.DEGRADED,\n      responseTime: 1000,\n      error: 'High latency',\n    }),\n  ],\n  summary: {\n    total: 2,\n    healthy: 1,\n    degraded: 1,\n    unhealthy: 0,\n  },\n};\n\n// ============================================================================\n// DASHBOARD DATA MOCKS\n// ============================================================================\n\n/**\n * Default dashboard data with healthy system\n */\nexport const mockDashboardData: MonitoringDashboardData = {\n  systemHealth: mockHealthySystemHealth,\n  recentAlerts: [\n    createMonitoringAlert({\n      id: 'alert_1',\n      level: AlertLevel.INFO,\n      message: 'System started successfully',\n      timestamp: new Date('2024-01-01T00:00:00Z'),\n    }),\n  ],\n  metrics: [\n    {\n      name: 'cpu_usage',\n      value: 45.5,\n      unit: 'percent',\n      timestamp: new Date('2024-01-01T00:00:00Z'),\n      tags: { server: 'web-01' },\n    },\n    {\n      name: 'memory_usage',\n      value: 67.2,\n      unit: 'percent',\n      timestamp: new Date('2024-01-01T00:00:00Z'),\n      tags: { server: 'web-01' },\n    },\n  ],\n  analytics: {\n    totalEvents: 100,\n    activeSessions: 5,\n    topPages: [\n      { path: '/', views: 50 },\n      { path: '/dashboard', views: 25 },\n      { path: '/settings', views: 15 },\n    ],\n  },\n};\n\n/**\n * Dashboard data with alerts\n */\nexport const mockDashboardDataWithAlerts: MonitoringDashboardData = {\n  ...mockDashboardData,\n  recentAlerts: [\n    createMonitoringAlert({\n      id: 'alert_1',\n      level: AlertLevel.WARNING,\n      message: 'High memory usage detected',\n      timestamp: new Date('2024-01-01T00:00:00Z'),\n    }),\n    createMonitoringAlert({\n      id: 'alert_2',\n      level: AlertLevel.ERROR,\n      message: 'Database connection failed',\n      timestamp: new Date('2024-01-01T00:00:00Z'),\n    }),\n    createMonitoringAlert({\n      id: 'alert_3',\n      level: AlertLevel.CRITICAL,\n      message: 'Service unavailable',\n      timestamp: new Date('2024-01-01T00:00:00Z'),\n    }),\n  ],\n};\n\n/**\n * Dashboard data with no alerts\n */\nexport const mockDashboardDataNoAlerts: MonitoringDashboardData = {\n  ...mockDashboardData,\n  recentAlerts: [],\n};\n\n// ============================================================================\n// ANALYTICS DATA MOCKS\n// ============================================================================\n\n/**\n * Default analytics session data\n */\nexport const mockAnalyticsSession = {\n  id: 'session_123456',\n  startTime: new Date('2024-01-01T00:00:00Z'),\n  lastActivity: new Date('2024-01-01T00:30:00Z'),\n  pageViews: 10,\n  events: 25,\n  userId: 'user_123',\n};\n\n/**\n * Analytics event data\n */\nexport const mockAnalyticsEvent = {\n  id: 'event_123',\n  type: AnalyticsEventType.PAGE_VIEW,\n  name: 'page_view',\n  timestamp: new Date('2024-01-01T00:00:00Z'),\n  userId: 'user_123',\n  sessionId: 'session_123456',\n  properties: {\n    path: '/dashboard',\n    referrer: 'https://google.com',\n  },\n  metadata: {\n    userAgent: 'Mozilla/5.0...',\n    screenResolution: '1920x1080',\n  },\n};\n\n// ============================================================================\n// ALERT DATA MOCKS\n// ============================================================================\n\n/**\n * Various alert types for testing\n */\nexport const mockAlerts = {\n  info: createMonitoringAlert({\n    level: AlertLevel.INFO,\n    message: 'Information alert',\n  }),\n  warning: createMonitoringAlert({\n    level: AlertLevel.WARNING,\n    message: 'Warning alert',\n  }),\n  error: createMonitoringAlert({\n    level: AlertLevel.ERROR,\n    message: 'Error alert',\n  }),\n  critical: createMonitoringAlert({\n    level: AlertLevel.CRITICAL,\n    message: 'Critical alert',\n  }),\n};\n\n// ============================================================================\n// METRIC DATA MOCKS\n// ============================================================================\n\n/**\n * Performance metrics for testing\n */\nexport const mockMetrics = {\n  cpu: {\n    name: 'cpu_usage',\n    value: 45.5,\n    unit: 'percent',\n    timestamp: new Date('2024-01-01T00:00:00Z'),\n    tags: { server: 'web-01' },\n  },\n  memory: {\n    name: 'memory_usage',\n    value: 67.2,\n    unit: 'percent',\n    timestamp: new Date('2024-01-01T00:00:00Z'),\n    tags: { server: 'web-01' },\n  },\n  responseTime: {\n    name: 'api_response_time',\n    value: 150,\n    unit: 'ms',\n    timestamp: new Date('2024-01-01T00:00:00Z'),\n    tags: { endpoint: '/api/users' },\n  },\n};\n\n// ============================================================================\n// DATA GENERATORS\n// ============================================================================\n\n/**\n * Generate multiple service health objects\n */\nexport const generateServiceHealthArray = (\n  count: number,\n  baseStatus: HealthStatus = HealthStatus.HEALTHY\n): ServiceHealth[] => {\n  return Array.from({ length: count }, (_, index) =>\n    createServiceHealth({\n      name: `service_${index + 1}`,\n      status: baseStatus,\n      responseTime: Math.random() * 100,\n    })\n  );\n};\n\n/**\n * Generate multiple alerts\n */\nexport const generateAlertsArray = (\n  count: number,\n  level: AlertLevel = AlertLevel.INFO\n): MonitoringAlert[] => {\n  return Array.from({ length: count }, (_, index) =>\n    createMonitoringAlert({\n      id: `alert_${index + 1}`,\n      level,\n      message: `Test alert ${index + 1}`,\n    })\n  );\n};\n\n/**\n * Create custom dashboard data\n */\nexport const createCustomDashboardData = (\n  overrides: Partial<MonitoringDashboardData> = {}\n): MonitoringDashboardData => {\n  return {\n    ...mockDashboardData,\n    ...overrides,\n  };\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a14700097a2c4e45e194819e26724f754c6ce8da"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_141cetvu5p = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_141cetvu5p();
var __assign =
/* istanbul ignore next */
(cov_141cetvu5p().s[0]++,
/* istanbul ignore next */
(cov_141cetvu5p().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_141cetvu5p().b[0][1]++, this.__assign) ||
/* istanbul ignore next */
(cov_141cetvu5p().b[0][2]++, function () {
  /* istanbul ignore next */
  cov_141cetvu5p().f[0]++;
  cov_141cetvu5p().s[1]++;
  __assign =
  /* istanbul ignore next */
  (cov_141cetvu5p().b[1][0]++, Object.assign) ||
  /* istanbul ignore next */
  (cov_141cetvu5p().b[1][1]++, function (t) {
    /* istanbul ignore next */
    cov_141cetvu5p().f[1]++;
    cov_141cetvu5p().s[2]++;
    for (var s, i =
      /* istanbul ignore next */
      (cov_141cetvu5p().s[3]++, 1), n =
      /* istanbul ignore next */
      (cov_141cetvu5p().s[4]++, arguments.length); i < n; i++) {
      /* istanbul ignore next */
      cov_141cetvu5p().s[5]++;
      s = arguments[i];
      /* istanbul ignore next */
      cov_141cetvu5p().s[6]++;
      for (var p in s) {
        /* istanbul ignore next */
        cov_141cetvu5p().s[7]++;
        if (Object.prototype.hasOwnProperty.call(s, p)) {
          /* istanbul ignore next */
          cov_141cetvu5p().b[2][0]++;
          cov_141cetvu5p().s[8]++;
          t[p] = s[p];
        } else
        /* istanbul ignore next */
        {
          cov_141cetvu5p().b[2][1]++;
        }
      }
    }
    /* istanbul ignore next */
    cov_141cetvu5p().s[9]++;
    return t;
  });
  /* istanbul ignore next */
  cov_141cetvu5p().s[10]++;
  return __assign.apply(this, arguments);
}));
/* istanbul ignore next */
cov_141cetvu5p().s[11]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_141cetvu5p().s[12]++;
exports.createCustomDashboardData = exports.generateAlertsArray = exports.generateServiceHealthArray = exports.mockMetrics = exports.mockAlerts = exports.mockAnalyticsEvent = exports.mockAnalyticsSession = exports.mockDashboardDataNoAlerts = exports.mockDashboardDataWithAlerts = exports.mockDashboardData = exports.mockDegradedSystemHealth = exports.mockUnhealthySystemHealth = exports.mockHealthySystemHealth = exports.createMonitoringAlert = exports.createServiceHealth = void 0;
var monitoring_types_1 =
/* istanbul ignore next */
(cov_141cetvu5p().s[13]++, require("@/infrastructure/monitoring/types/monitoring.types"));
// ============================================================================
// BASE DATA GENERATORS
// ============================================================================
/**
 * Create a service health object
 */
/* istanbul ignore next */
cov_141cetvu5p().s[14]++;
var createServiceHealth = function (overrides) {
  /* istanbul ignore next */
  cov_141cetvu5p().f[2]++;
  cov_141cetvu5p().s[15]++;
  if (overrides === void 0) {
    /* istanbul ignore next */
    cov_141cetvu5p().b[3][0]++;
    cov_141cetvu5p().s[16]++;
    overrides = {};
  } else
  /* istanbul ignore next */
  {
    cov_141cetvu5p().b[3][1]++;
  }
  cov_141cetvu5p().s[17]++;
  return __assign({
    name: 'database',
    status: monitoring_types_1.HealthStatus.HEALTHY,
    responseTime: 5,
    lastCheck: new Date('2024-01-01T00:00:00Z')
  }, overrides);
};
/* istanbul ignore next */
cov_141cetvu5p().s[18]++;
exports.createServiceHealth = createServiceHealth;
/**
 * Create a monitoring alert object
 */
/* istanbul ignore next */
cov_141cetvu5p().s[19]++;
var createMonitoringAlert = function (overrides) {
  /* istanbul ignore next */
  cov_141cetvu5p().f[3]++;
  cov_141cetvu5p().s[20]++;
  if (overrides === void 0) {
    /* istanbul ignore next */
    cov_141cetvu5p().b[4][0]++;
    cov_141cetvu5p().s[21]++;
    overrides = {};
  } else
  /* istanbul ignore next */
  {
    cov_141cetvu5p().b[4][1]++;
  }
  cov_141cetvu5p().s[22]++;
  return __assign({
    id: 'alert_123',
    level: monitoring_types_1.AlertLevel.INFO,
    message: 'Test alert message',
    timestamp: new Date('2024-01-01T00:00:00Z'),
    resolved: false
  }, overrides);
};
/* istanbul ignore next */
cov_141cetvu5p().s[23]++;
exports.createMonitoringAlert = createMonitoringAlert;
// ============================================================================
// SYSTEM HEALTH MOCKS
// ============================================================================
/**
 * Default healthy system health data
 */
/* istanbul ignore next */
cov_141cetvu5p().s[24]++;
exports.mockHealthySystemHealth = {
  status: monitoring_types_1.HealthStatus.HEALTHY,
  timestamp: new Date('2024-01-01T00:00:00Z'),
  uptime: 3600000,
  // 1 hour
  version: '1.0.0',
  versionDisplay: '1.0.0-dev',
  versionInfo: {
    major: 1,
    minor: 0,
    patch: 0,
    versionCode: 10000,
    commitHash: 'abc123',
    branch: 'main'
  },
  environment: 'development',
  services: [(0, exports.createServiceHealth)({
    name: 'database',
    status: monitoring_types_1.HealthStatus.HEALTHY,
    responseTime: 5
  }), (0, exports.createServiceHealth)({
    name: 'api',
    status: monitoring_types_1.HealthStatus.HEALTHY,
    responseTime: 10
  }), (0, exports.createServiceHealth)({
    name: 'cache',
    status: monitoring_types_1.HealthStatus.HEALTHY,
    responseTime: 2
  }), (0, exports.createServiceHealth)({
    name: 'storage',
    status: monitoring_types_1.HealthStatus.HEALTHY,
    responseTime: 8
  })],
  summary: {
    total: 4,
    healthy: 4,
    degraded: 0,
    unhealthy: 0
  }
};
/**
 * Unhealthy system health data
 */
/* istanbul ignore next */
cov_141cetvu5p().s[25]++;
exports.mockUnhealthySystemHealth = {
  status: monitoring_types_1.HealthStatus.UNHEALTHY,
  timestamp: new Date('2024-01-01T00:00:00Z'),
  uptime: 3600000,
  version: '1.0.0',
  versionDisplay: '1.0.0-dev',
  versionInfo: {
    major: 1,
    minor: 0,
    patch: 0,
    versionCode: 10000,
    commitHash: 'abc123',
    branch: 'main'
  },
  environment: 'development',
  services: [(0, exports.createServiceHealth)({
    name: 'database',
    status: monitoring_types_1.HealthStatus.UNHEALTHY,
    responseTime: 5000,
    error: 'Connection timeout'
  }), (0, exports.createServiceHealth)({
    name: 'api',
    status: monitoring_types_1.HealthStatus.HEALTHY,
    responseTime: 10
  })],
  summary: {
    total: 2,
    healthy: 1,
    degraded: 0,
    unhealthy: 1
  }
};
/**
 * Degraded system health data
 */
/* istanbul ignore next */
cov_141cetvu5p().s[26]++;
exports.mockDegradedSystemHealth = {
  status: monitoring_types_1.HealthStatus.DEGRADED,
  timestamp: new Date('2024-01-01T00:00:00Z'),
  uptime: 3600000,
  version: '1.0.0',
  versionDisplay: '1.0.0-dev',
  versionInfo: {
    major: 1,
    minor: 0,
    patch: 0,
    versionCode: 10000,
    commitHash: 'abc123',
    branch: 'main'
  },
  environment: 'development',
  services: [(0, exports.createServiceHealth)({
    name: 'database',
    status: monitoring_types_1.HealthStatus.HEALTHY,
    responseTime: 5
  }), (0, exports.createServiceHealth)({
    name: 'cache',
    status: monitoring_types_1.HealthStatus.DEGRADED,
    responseTime: 1000,
    error: 'High latency'
  })],
  summary: {
    total: 2,
    healthy: 1,
    degraded: 1,
    unhealthy: 0
  }
};
// ============================================================================
// DASHBOARD DATA MOCKS
// ============================================================================
/**
 * Default dashboard data with healthy system
 */
/* istanbul ignore next */
cov_141cetvu5p().s[27]++;
exports.mockDashboardData = {
  systemHealth: exports.mockHealthySystemHealth,
  recentAlerts: [(0, exports.createMonitoringAlert)({
    id: 'alert_1',
    level: monitoring_types_1.AlertLevel.INFO,
    message: 'System started successfully',
    timestamp: new Date('2024-01-01T00:00:00Z')
  })],
  metrics: [{
    name: 'cpu_usage',
    value: 45.5,
    unit: 'percent',
    timestamp: new Date('2024-01-01T00:00:00Z'),
    tags: {
      server: 'web-01'
    }
  }, {
    name: 'memory_usage',
    value: 67.2,
    unit: 'percent',
    timestamp: new Date('2024-01-01T00:00:00Z'),
    tags: {
      server: 'web-01'
    }
  }],
  analytics: {
    totalEvents: 100,
    activeSessions: 5,
    topPages: [{
      path: '/',
      views: 50
    }, {
      path: '/dashboard',
      views: 25
    }, {
      path: '/settings',
      views: 15
    }]
  }
};
/**
 * Dashboard data with alerts
 */
/* istanbul ignore next */
cov_141cetvu5p().s[28]++;
exports.mockDashboardDataWithAlerts = __assign(__assign({}, exports.mockDashboardData), {
  recentAlerts: [(0, exports.createMonitoringAlert)({
    id: 'alert_1',
    level: monitoring_types_1.AlertLevel.WARNING,
    message: 'High memory usage detected',
    timestamp: new Date('2024-01-01T00:00:00Z')
  }), (0, exports.createMonitoringAlert)({
    id: 'alert_2',
    level: monitoring_types_1.AlertLevel.ERROR,
    message: 'Database connection failed',
    timestamp: new Date('2024-01-01T00:00:00Z')
  }), (0, exports.createMonitoringAlert)({
    id: 'alert_3',
    level: monitoring_types_1.AlertLevel.CRITICAL,
    message: 'Service unavailable',
    timestamp: new Date('2024-01-01T00:00:00Z')
  })]
});
/**
 * Dashboard data with no alerts
 */
/* istanbul ignore next */
cov_141cetvu5p().s[29]++;
exports.mockDashboardDataNoAlerts = __assign(__assign({}, exports.mockDashboardData), {
  recentAlerts: []
});
// ============================================================================
// ANALYTICS DATA MOCKS
// ============================================================================
/**
 * Default analytics session data
 */
/* istanbul ignore next */
cov_141cetvu5p().s[30]++;
exports.mockAnalyticsSession = {
  id: 'session_123456',
  startTime: new Date('2024-01-01T00:00:00Z'),
  lastActivity: new Date('2024-01-01T00:30:00Z'),
  pageViews: 10,
  events: 25,
  userId: 'user_123'
};
/**
 * Analytics event data
 */
/* istanbul ignore next */
cov_141cetvu5p().s[31]++;
exports.mockAnalyticsEvent = {
  id: 'event_123',
  type: monitoring_types_1.AnalyticsEventType.PAGE_VIEW,
  name: 'page_view',
  timestamp: new Date('2024-01-01T00:00:00Z'),
  userId: 'user_123',
  sessionId: 'session_123456',
  properties: {
    path: '/dashboard',
    referrer: 'https://google.com'
  },
  metadata: {
    userAgent: 'Mozilla/5.0...',
    screenResolution: '1920x1080'
  }
};
// ============================================================================
// ALERT DATA MOCKS
// ============================================================================
/**
 * Various alert types for testing
 */
/* istanbul ignore next */
cov_141cetvu5p().s[32]++;
exports.mockAlerts = {
  info: (0, exports.createMonitoringAlert)({
    level: monitoring_types_1.AlertLevel.INFO,
    message: 'Information alert'
  }),
  warning: (0, exports.createMonitoringAlert)({
    level: monitoring_types_1.AlertLevel.WARNING,
    message: 'Warning alert'
  }),
  error: (0, exports.createMonitoringAlert)({
    level: monitoring_types_1.AlertLevel.ERROR,
    message: 'Error alert'
  }),
  critical: (0, exports.createMonitoringAlert)({
    level: monitoring_types_1.AlertLevel.CRITICAL,
    message: 'Critical alert'
  })
};
// ============================================================================
// METRIC DATA MOCKS
// ============================================================================
/**
 * Performance metrics for testing
 */
/* istanbul ignore next */
cov_141cetvu5p().s[33]++;
exports.mockMetrics = {
  cpu: {
    name: 'cpu_usage',
    value: 45.5,
    unit: 'percent',
    timestamp: new Date('2024-01-01T00:00:00Z'),
    tags: {
      server: 'web-01'
    }
  },
  memory: {
    name: 'memory_usage',
    value: 67.2,
    unit: 'percent',
    timestamp: new Date('2024-01-01T00:00:00Z'),
    tags: {
      server: 'web-01'
    }
  },
  responseTime: {
    name: 'api_response_time',
    value: 150,
    unit: 'ms',
    timestamp: new Date('2024-01-01T00:00:00Z'),
    tags: {
      endpoint: '/api/users'
    }
  }
};
// ============================================================================
// DATA GENERATORS
// ============================================================================
/**
 * Generate multiple service health objects
 */
/* istanbul ignore next */
cov_141cetvu5p().s[34]++;
var generateServiceHealthArray = function (count, baseStatus) {
  /* istanbul ignore next */
  cov_141cetvu5p().f[4]++;
  cov_141cetvu5p().s[35]++;
  if (baseStatus === void 0) {
    /* istanbul ignore next */
    cov_141cetvu5p().b[5][0]++;
    cov_141cetvu5p().s[36]++;
    baseStatus = monitoring_types_1.HealthStatus.HEALTHY;
  } else
  /* istanbul ignore next */
  {
    cov_141cetvu5p().b[5][1]++;
  }
  cov_141cetvu5p().s[37]++;
  return Array.from({
    length: count
  }, function (_, index) {
    /* istanbul ignore next */
    cov_141cetvu5p().f[5]++;
    cov_141cetvu5p().s[38]++;
    return (0, exports.createServiceHealth)({
      name: "service_".concat(index + 1),
      status: baseStatus,
      responseTime: Math.random() * 100
    });
  });
};
/* istanbul ignore next */
cov_141cetvu5p().s[39]++;
exports.generateServiceHealthArray = generateServiceHealthArray;
/**
 * Generate multiple alerts
 */
/* istanbul ignore next */
cov_141cetvu5p().s[40]++;
var generateAlertsArray = function (count, level) {
  /* istanbul ignore next */
  cov_141cetvu5p().f[6]++;
  cov_141cetvu5p().s[41]++;
  if (level === void 0) {
    /* istanbul ignore next */
    cov_141cetvu5p().b[6][0]++;
    cov_141cetvu5p().s[42]++;
    level = monitoring_types_1.AlertLevel.INFO;
  } else
  /* istanbul ignore next */
  {
    cov_141cetvu5p().b[6][1]++;
  }
  cov_141cetvu5p().s[43]++;
  return Array.from({
    length: count
  }, function (_, index) {
    /* istanbul ignore next */
    cov_141cetvu5p().f[7]++;
    cov_141cetvu5p().s[44]++;
    return (0, exports.createMonitoringAlert)({
      id: "alert_".concat(index + 1),
      level: level,
      message: "Test alert ".concat(index + 1)
    });
  });
};
/* istanbul ignore next */
cov_141cetvu5p().s[45]++;
exports.generateAlertsArray = generateAlertsArray;
/**
 * Create custom dashboard data
 */
/* istanbul ignore next */
cov_141cetvu5p().s[46]++;
var createCustomDashboardData = function (overrides) {
  /* istanbul ignore next */
  cov_141cetvu5p().f[8]++;
  cov_141cetvu5p().s[47]++;
  if (overrides === void 0) {
    /* istanbul ignore next */
    cov_141cetvu5p().b[7][0]++;
    cov_141cetvu5p().s[48]++;
    overrides = {};
  } else
  /* istanbul ignore next */
  {
    cov_141cetvu5p().b[7][1]++;
  }
  cov_141cetvu5p().s[49]++;
  return __assign(__assign({}, exports.mockDashboardData), overrides);
};
/* istanbul ignore next */
cov_141cetvu5p().s[50]++;
exports.createCustomDashboardData = createCustomDashboardData;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,