60c7920414207e6a2f3b9173fd869ea7
"use strict";
/**
 * WebSocket Client Configuration
 *
 * Universal WebSocket client foundation that can be used by any enterprise application.
 * Provides automatic reconnection, message queuing, and robust error handling.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocketState = exports.createWebSocketClient = exports.WebSocketClient = void 0;
var types_1 = require("../types/types");
// ============================================================================
// ENVIRONMENT CONFIGURATION
// ============================================================================
// Import centralized environment configuration
var env_1 = require("../../../../config/env");
var DEFAULT_WS_URL = env_1.envConfig.wsUrl;
var DEFAULT_RECONNECT_INTERVAL = 1000;
var DEFAULT_MAX_RECONNECT_ATTEMPTS = 5;
var DEFAULT_TIMEOUT = 10000;
var DEFAULT_HEARTBEAT_INTERVAL = 30000;
// ============================================================================
// WEBSOCKET CLIENT CLASS
// ============================================================================
/**
 * Universal WebSocket client that can handle any real-time communication needs
 */
var WebSocketClient = /** @class */ (function () {
    function WebSocketClient(config) {
        var _a;
        this.ws = null;
        this.state = types_1.WebSocketState.DISCONNECTED;
        this.reconnectAttempts = 0;
        this.messageQueue = [];
        this.subscriptions = new Map();
        this.connectionPromise = null;
        this.heartbeatTimer = null;
        // Event handlers
        this.onStateChange = null;
        this.onError = null;
        this.onMessage = null;
        this.config = {
            url: config.url || DEFAULT_WS_URL,
            reconnectInterval: config.reconnectInterval || DEFAULT_RECONNECT_INTERVAL,
            maxReconnectAttempts: config.maxReconnectAttempts || DEFAULT_MAX_RECONNECT_ATTEMPTS,
            timeout: config.timeout || DEFAULT_TIMEOUT,
            heartbeatInterval: config.heartbeatInterval || DEFAULT_HEARTBEAT_INTERVAL,
            enableHeartbeat: (_a = config.enableHeartbeat) !== null && _a !== void 0 ? _a : true,
        };
        // Set protocols only if provided
        if (config.protocols) {
            this.config.protocols = config.protocols;
        }
    }
    // ============================================================================
    // PUBLIC METHODS
    // ============================================================================
    /**
     * Connect to WebSocket server
     */
    WebSocketClient.prototype.connect = function () {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                if (this.state === types_1.WebSocketState.CONNECTED || this.state === types_1.WebSocketState.CONNECTING) {
                    return [2 /*return*/, this.connectionPromise || Promise.resolve()];
                }
                this.connectionPromise = this._connect();
                return [2 /*return*/, this.connectionPromise];
            });
        });
    };
    /**
     * Disconnect from WebSocket server
     */
    WebSocketClient.prototype.disconnect = function () {
        this._setState(types_1.WebSocketState.DISCONNECTING);
        this._clearHeartbeat();
        if (this.ws) {
            this.ws.close(1000, 'Client disconnect');
            this.ws = null;
        }
        this._setState(types_1.WebSocketState.DISCONNECTED);
        this.connectionPromise = null;
    };
    /**
     * Send message to server
     */
    WebSocketClient.prototype.send = function (message) {
        var messageWithId = __assign(__assign({}, message), { id: message.id || this._generateId(), timestamp: message.timestamp || new Date().toISOString() });
        if (this.state === types_1.WebSocketState.CONNECTED && this.ws) {
            try {
                this.ws.send(JSON.stringify(messageWithId));
                // Only log in non-test environments
                if (!env_1.envConfig.isTest && !process.env.JEST_WORKER_ID) {
                    // console.debug('[WebSocket] Message sent:', messageWithId);
                }
            }
            catch (error) {
                // console.error('[WebSocket] Failed to send message:', error);
                this._handleError(new Error("Failed to send message: ".concat(String(error))));
            }
        }
        else {
            // Queue message for later delivery
            this.messageQueue.push(messageWithId);
            // Only log in non-test environments
            if (!env_1.envConfig.isTest && !process.env.JEST_WORKER_ID) {
                // console.debug('[WebSocket] Message queued:', messageWithId);
            }
        }
    };
    /**
     * Subscribe to specific event type
     */
    WebSocketClient.prototype.subscribe = function (event, callback) {
        var _this = this;
        var subscription = {
            id: this._generateId(),
            event: event,
            callback: callback,
        };
        if (!this.subscriptions.has(event)) {
            this.subscriptions.set(event, new Set());
        }
        this.subscriptions.get(event).add(subscription);
        // Only log in non-test environments
        if (!env_1.envConfig.isTest && !process.env.JEST_WORKER_ID) {
            // console.debug('[WebSocket] Subscribed to event:', event);
        }
        // Return unsubscribe function
        return function () {
            var eventSubscriptions = _this.subscriptions.get(event);
            if (eventSubscriptions) {
                eventSubscriptions.delete(subscription);
                if (eventSubscriptions.size === 0) {
                    _this.subscriptions.delete(event);
                }
            }
            // Only log in non-test environments
            if (!env_1.envConfig.isTest && !process.env.JEST_WORKER_ID) {
                // console.debug('[WebSocket] Unsubscribed from event:', event);
            }
        };
    };
    /**
     * Get current connection state
     */
    WebSocketClient.prototype.getState = function () {
        return this.state;
    };
    /**
     * Check if WebSocket is connected
     */
    WebSocketClient.prototype.isConnected = function () {
        return this.state === types_1.WebSocketState.CONNECTED;
    };
    // ============================================================================
    // EVENT HANDLERS
    // ============================================================================
    /**
     * Set state change handler
     */
    WebSocketClient.prototype.onStateChanged = function (handler) {
        this.onStateChange = handler;
    };
    /**
     * Set error handler
     */
    WebSocketClient.prototype.onErrorOccurred = function (handler) {
        this.onError = handler;
    };
    /**
     * Set message handler (for all messages)
     */
    WebSocketClient.prototype.onMessageReceived = function (handler) {
        this.onMessage = handler;
    };
    // ============================================================================
    // PRIVATE METHODS
    // ============================================================================
    /**
     * Internal connect method
     */
    WebSocketClient.prototype._connect = function () {
        return __awaiter(this, void 0, Promise, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        try {
                            _this._setState(types_1.WebSocketState.CONNECTING);
                            // Add authentication token if available
                            var token = _this._getAuthToken();
                            var url = token ? "".concat(_this.config.url, "?token=").concat(token) : _this.config.url;
                            _this.ws = new WebSocket(url, _this.config.protocols);
                            // Connection timeout
                            var timeout_1 = setTimeout(function () {
                                if (_this.ws && _this.ws.readyState === WebSocket.CONNECTING) {
                                    _this.ws.close();
                                    reject(new Error('WebSocket connection timeout'));
                                }
                            }, _this.config.timeout);
                            _this.ws.onopen = function () {
                                clearTimeout(timeout_1);
                                _this._setState(types_1.WebSocketState.CONNECTED);
                                _this.reconnectAttempts = 0;
                                _this._processMessageQueue();
                                _this._startHeartbeat();
                                resolve();
                            };
                            _this.ws.onmessage = function (event) {
                                try {
                                    var message = JSON.parse(event.data);
                                    _this._handleMessage(message);
                                }
                                catch (error) {
                                    console.error('[WebSocket] Failed to parse message:', error, event.data);
                                }
                            };
                            _this.ws.onclose = function (event) {
                                clearTimeout(timeout_1);
                                _this._clearHeartbeat();
                                if (_this.state === types_1.WebSocketState.DISCONNECTING) {
                                    _this._setState(types_1.WebSocketState.DISCONNECTED);
                                    resolve();
                                }
                                else {
                                    console.warn('[WebSocket] Connection closed unexpectedly:', event);
                                    _this._handleReconnect();
                                }
                            };
                            _this.ws.onerror = function (error) {
                                clearTimeout(timeout_1);
                                console.error('[WebSocket] Connection error:', error);
                                _this._handleError(new Error('WebSocket connection error'));
                                reject(new Error('WebSocket connection failed'));
                            };
                        }
                        catch (error) {
                            _this._handleError(error);
                            reject(error);
                        }
                    })];
            });
        });
    };
    /**
     * Handle incoming messages
     */
    WebSocketClient.prototype._handleMessage = function (message) {
        // Only log in non-test environments
        if (!env_1.envConfig.isTest && !process.env.JEST_WORKER_ID) {
            // console.debug('[WebSocket] Message received:', message);
        }
        // Call global message handler
        if (this.onMessage) {
            this.onMessage(message);
        }
        // Handle heartbeat responses
        if (message.type === 'pong') {
            return;
        }
        // Notify event subscribers
        var eventSubscriptions = this.subscriptions.get(message.type);
        if (eventSubscriptions) {
            eventSubscriptions.forEach(function (subscription) {
                try {
                    subscription.callback(message);
                }
                catch (error) {
                    console.error('[WebSocket] Subscription callback error:', error);
                }
            });
        }
    };
    /**
     * Handle reconnection logic
     */
    WebSocketClient.prototype._handleReconnect = function () {
        var _this = this;
        if (this.reconnectAttempts >= this.config.maxReconnectAttempts) {
            this._setState(types_1.WebSocketState.ERROR);
            this._handleError(new Error('Max reconnection attempts reached'));
            return;
        }
        this._setState(types_1.WebSocketState.RECONNECTING);
        this.reconnectAttempts++;
        var delay = this._calculateReconnectDelay();
        // Only log in non-test environments
        if (!env_1.envConfig.isTest && !process.env.JEST_WORKER_ID) {
            // console.debug(`[WebSocket] Reconnecting in ${delay}ms (attempt ${this.reconnectAttempts})`);
        }
        setTimeout(function () {
            _this._connect().catch(function (error) {
                console.error('[WebSocket] Reconnection failed:', error);
                _this._handleReconnect();
            });
        }, delay);
    };
    /**
     * Calculate reconnection delay with exponential backoff
     */
    WebSocketClient.prototype._calculateReconnectDelay = function () {
        var baseDelay = this.config.reconnectInterval;
        var delay = Math.min(baseDelay * Math.pow(2, this.reconnectAttempts - 1), 30000);
        var jitter = Math.random() * 0.1 * delay;
        return delay + jitter;
    };
    /**
     * Process queued messages
     */
    WebSocketClient.prototype._processMessageQueue = function () {
        while (this.messageQueue.length > 0) {
            var message = this.messageQueue.shift();
            this.send(message);
        }
    };
    /**
     * Start heartbeat mechanism
     */
    WebSocketClient.prototype._startHeartbeat = function () {
        var _this = this;
        if (!this.config.enableHeartbeat)
            return;
        this.heartbeatTimer = setInterval(function () {
            if (_this.isConnected()) {
                _this.send({ type: 'ping' });
            }
        }, this.config.heartbeatInterval);
    };
    /**
     * Clear heartbeat timer
     */
    WebSocketClient.prototype._clearHeartbeat = function () {
        if (this.heartbeatTimer) {
            clearInterval(this.heartbeatTimer);
            this.heartbeatTimer = null;
        }
    };
    /**
     * Set connection state
     */
    WebSocketClient.prototype._setState = function (state) {
        this.state = state;
        // Only log in non-test environments
        if (!env_1.envConfig.isTest && !process.env.JEST_WORKER_ID) {
            // console.debug('[WebSocket] State changed:', state);
        }
        if (this.onStateChange) {
            this.onStateChange(state);
        }
    };
    /**
     * Handle errors
     */
    WebSocketClient.prototype._handleError = function (error) {
        console.error('[WebSocket] Error:', error);
        if (this.onError) {
            this.onError(error);
        }
    };
    /**
     * Get authentication token
     */
    WebSocketClient.prototype._getAuthToken = function () {
        if (typeof window === 'undefined')
            return null;
        return (localStorage.getItem(types_1.AuthTokenKey.AUTH_TOKEN) ||
            localStorage.getItem(types_1.AuthTokenKey.ACCESS_TOKEN) ||
            sessionStorage.getItem(types_1.AuthTokenKey.AUTH_TOKEN) ||
            sessionStorage.getItem(types_1.AuthTokenKey.ACCESS_TOKEN) ||
            null);
    };
    /**
     * Generate unique ID
     */
    WebSocketClient.prototype._generateId = function () {
        return "ws_".concat(Date.now(), "_").concat(Math.random().toString(36).substr(2, 9));
    };
    return WebSocketClient;
}());
exports.WebSocketClient = WebSocketClient;
// ============================================================================
// FACTORY FUNCTION
// ============================================================================
/**
 * Create a WebSocket client instance
 */
var createWebSocketClient = function (config) {
    return new WebSocketClient(config);
};
exports.createWebSocketClient = createWebSocketClient;
// Re-export types for convenience
var types_2 = require("../types/types");
Object.defineProperty(exports, "WebSocketState", { enumerable: true, get: function () { return types_2.WebSocketState; } });
// ============================================================================
// DEFAULT EXPORT
// ============================================================================
exports.default = WebSocketClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,