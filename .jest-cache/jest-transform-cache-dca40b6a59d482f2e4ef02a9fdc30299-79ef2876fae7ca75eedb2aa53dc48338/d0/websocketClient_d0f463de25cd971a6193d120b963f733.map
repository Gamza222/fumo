{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/data/websocket/websocketClient.ts","mappings":";AAAA;;;;;GAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,wCAMwB;AAExB,+EAA+E;AAC/E,4BAA4B;AAC5B,+EAA+E;AAE/E,+CAA+C;AAC/C,8CAAmD;AAEnD,IAAM,cAAc,GAAG,eAAS,CAAC,KAAK,CAAC;AACvC,IAAM,0BAA0B,GAAG,IAAI,CAAC;AACxC,IAAM,8BAA8B,GAAG,CAAC,CAAC;AACzC,IAAM,eAAe,GAAG,KAAK,CAAC;AAC9B,IAAM,0BAA0B,GAAG,KAAK,CAAC;AAEzC,+EAA+E;AAC/E,yBAAyB;AACzB,+EAA+E;AAE/E;;GAEG;AACH;IAsBE,yBAAY,MAAuB;;QArB3B,OAAE,GAAqB,IAAI,CAAC;QAS5B,UAAK,GAAmB,sBAAc,CAAC,YAAY,CAAC;QACpD,sBAAiB,GAAG,CAAC,CAAC;QACtB,iBAAY,GAAuB,EAAE,CAAC;QACtC,kBAAa,GAAG,IAAI,GAAG,EAAsC,CAAC;QAC9D,sBAAiB,GAAyB,IAAI,CAAC;QAC/C,mBAAc,GAA0B,IAAI,CAAC;QAErD,iBAAiB;QACT,kBAAa,GAA6C,IAAI,CAAC;QAC/D,YAAO,GAAoC,IAAI,CAAC;QAChD,cAAS,GAAiD,IAAI,CAAC;QAGrE,IAAI,CAAC,MAAM,GAAG;YACZ,GAAG,EAAE,MAAM,CAAC,GAAG,IAAI,cAAc;YACjC,iBAAiB,EAAE,MAAM,CAAC,iBAAiB,IAAI,0BAA0B;YACzE,oBAAoB,EAAE,MAAM,CAAC,oBAAoB,IAAI,8BAA8B;YACnF,OAAO,EAAE,MAAM,CAAC,OAAO,IAAI,eAAe;YAC1C,iBAAiB,EAAE,MAAM,CAAC,iBAAiB,IAAI,0BAA0B;YACzE,eAAe,EAAE,MAAA,MAAM,CAAC,eAAe,mCAAI,IAAI;SAChD,CAAC;QAEF,iCAAiC;QACjC,IAAI,MAAM,CAAC,SAAS,EAAE,CAAC;YACrB,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;QAC3C,CAAC;IACH,CAAC;IAED,+EAA+E;IAC/E,iBAAiB;IACjB,+EAA+E;IAE/E;;OAEG;IACG,iCAAO,GAAb;uCAAiB,OAAO;;gBACtB,IAAI,IAAI,CAAC,KAAK,KAAK,sBAAc,CAAC,SAAS,IAAI,IAAI,CAAC,KAAK,KAAK,sBAAc,CAAC,UAAU,EAAE,CAAC;oBACxF,sBAAO,IAAI,CAAC,iBAAiB,IAAI,OAAO,CAAC,OAAO,EAAE,EAAC;gBACrD,CAAC;gBAED,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACzC,sBAAO,IAAI,CAAC,iBAAiB,EAAC;;;KAC/B;IAED;;OAEG;IACH,oCAAU,GAAV;QACE,IAAI,CAAC,SAAS,CAAC,sBAAc,CAAC,aAAa,CAAC,CAAC;QAC7C,IAAI,CAAC,eAAe,EAAE,CAAC;QAEvB,IAAI,IAAI,CAAC,EAAE,EAAE,CAAC;YACZ,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;YACzC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC;QACjB,CAAC;QAED,IAAI,CAAC,SAAS,CAAC,sBAAc,CAAC,YAAY,CAAC,CAAC;QAC5C,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,8BAAI,GAAJ,UAAK,OAAyB;QAC5B,IAAM,aAAa,yBACd,OAAO,KACV,EAAE,EAAE,OAAO,CAAC,EAAE,IAAI,IAAI,CAAC,WAAW,EAAE,EACpC,SAAS,EAAE,OAAO,CAAC,SAAS,IAAI,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,GACzD,CAAC;QAEF,IAAI,IAAI,CAAC,KAAK,KAAK,sBAAc,CAAC,SAAS,IAAI,IAAI,CAAC,EAAE,EAAE,CAAC;YACvD,IAAI,CAAC;gBACH,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC;gBAC5C,oCAAoC;gBACpC,IAAI,CAAC,eAAS,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC;oBACrD,6DAA6D;gBAC/D,CAAC;YACH,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,+DAA+D;gBAC/D,IAAI,CAAC,YAAY,CAAC,IAAI,KAAK,CAAC,kCAA2B,MAAM,CAAC,KAAK,CAAC,CAAE,CAAC,CAAC,CAAC;YAC3E,CAAC;QACH,CAAC;aAAM,CAAC;YACN,mCAAmC;YACnC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACtC,oCAAoC;YACpC,IAAI,CAAC,eAAS,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC;gBACrD,+DAA+D;YACjE,CAAC;QACH,CAAC;IACH,CAAC;IAED;;OAEG;IACH,mCAAS,GAAT,UAAU,KAAa,EAAE,QAA6C;QAAtE,iBAgCC;QA/BC,IAAM,YAAY,GAA0B;YAC1C,EAAE,EAAE,IAAI,CAAC,WAAW,EAAE;YACtB,KAAK,OAAA;YACL,QAAQ,UAAA;SACT,CAAC;QAEF,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;YACnC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC;QAC3C,CAAC;QAED,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAE,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAEjD,oCAAoC;QACpC,IAAI,CAAC,eAAS,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC;YACrD,4DAA4D;QAC9D,CAAC;QAED,8BAA8B;QAC9B,OAAO;YACL,IAAM,kBAAkB,GAAG,KAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACzD,IAAI,kBAAkB,EAAE,CAAC;gBACvB,kBAAkB,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;gBACxC,IAAI,kBAAkB,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC;oBAClC,KAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACnC,CAAC;YACH,CAAC;YACD,oCAAoC;YACpC,IAAI,CAAC,eAAS,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC;gBACrD,gEAAgE;YAClE,CAAC;QACH,CAAC,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,kCAAQ,GAAR;QACE,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED;;OAEG;IACH,qCAAW,GAAX;QACE,OAAO,IAAI,CAAC,KAAK,KAAK,sBAAc,CAAC,SAAS,CAAC;IACjD,CAAC;IAED,+EAA+E;IAC/E,iBAAiB;IACjB,+EAA+E;IAE/E;;OAEG;IACH,wCAAc,GAAd,UAAe,OAAwC;QACrD,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;IAC/B,CAAC;IAED;;OAEG;IACH,yCAAe,GAAf,UAAgB,OAA+B;QAC7C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAED;;OAEG;IACH,2CAAiB,GAAjB,UAAkB,OAA4C;QAC5D,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC;IAC3B,CAAC;IAED,+EAA+E;IAC/E,kBAAkB;IAClB,+EAA+E;IAE/E;;OAEG;IACW,kCAAQ,GAAtB;uCAA0B,OAAO;;;gBAC/B,sBAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;wBACjC,IAAI,CAAC;4BACH,KAAI,CAAC,SAAS,CAAC,sBAAc,CAAC,UAAU,CAAC,CAAC;4BAE1C,wCAAwC;4BACxC,IAAM,KAAK,GAAG,KAAI,CAAC,aAAa,EAAE,CAAC;4BACnC,IAAM,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,UAAG,KAAI,CAAC,MAAM,CAAC,GAAG,oBAAU,KAAK,CAAE,CAAC,CAAC,CAAC,KAAI,CAAC,MAAM,CAAC,GAAG,CAAC;4BAE1E,KAAI,CAAC,EAAE,GAAG,IAAI,SAAS,CAAC,GAAG,EAAE,KAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;4BAEpD,qBAAqB;4BACrB,IAAM,SAAO,GAAG,UAAU,CAAC;gCACzB,IAAI,KAAI,CAAC,EAAE,IAAI,KAAI,CAAC,EAAE,CAAC,UAAU,KAAK,SAAS,CAAC,UAAU,EAAE,CAAC;oCAC3D,KAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC;oCAChB,MAAM,CAAC,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC,CAAC;gCACpD,CAAC;4BACH,CAAC,EAAE,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;4BAExB,KAAI,CAAC,EAAE,CAAC,MAAM,GAAG;gCACf,YAAY,CAAC,SAAO,CAAC,CAAC;gCACtB,KAAI,CAAC,SAAS,CAAC,sBAAc,CAAC,SAAS,CAAC,CAAC;gCACzC,KAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;gCAC3B,KAAI,CAAC,oBAAoB,EAAE,CAAC;gCAC5B,KAAI,CAAC,eAAe,EAAE,CAAC;gCACvB,OAAO,EAAE,CAAC;4BACZ,CAAC,CAAC;4BAEF,KAAI,CAAC,EAAE,CAAC,SAAS,GAAG,UAAC,KAAK;gCACxB,IAAI,CAAC;oCACH,IAAM,OAAO,GAAqB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAc,CAAqB,CAAC;oCACvF,KAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;gCAC/B,CAAC;gCAAC,OAAO,KAAK,EAAE,CAAC;oCACf,OAAO,CAAC,KAAK,CAAC,sCAAsC,EAAE,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;gCAC3E,CAAC;4BACH,CAAC,CAAC;4BAEF,KAAI,CAAC,EAAE,CAAC,OAAO,GAAG,UAAC,KAAK;gCACtB,YAAY,CAAC,SAAO,CAAC,CAAC;gCACtB,KAAI,CAAC,eAAe,EAAE,CAAC;gCAEvB,IAAI,KAAI,CAAC,KAAK,KAAK,sBAAc,CAAC,aAAa,EAAE,CAAC;oCAChD,KAAI,CAAC,SAAS,CAAC,sBAAc,CAAC,YAAY,CAAC,CAAC;oCAC5C,OAAO,EAAE,CAAC;gCACZ,CAAC;qCAAM,CAAC;oCACN,OAAO,CAAC,IAAI,CAAC,6CAA6C,EAAE,KAAK,CAAC,CAAC;oCACnE,KAAI,CAAC,gBAAgB,EAAE,CAAC;gCAC1B,CAAC;4BACH,CAAC,CAAC;4BAEF,KAAI,CAAC,EAAE,CAAC,OAAO,GAAG,UAAC,KAAK;gCACtB,YAAY,CAAC,SAAO,CAAC,CAAC;gCACtB,OAAO,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;gCACtD,KAAI,CAAC,YAAY,CAAC,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC,CAAC;gCAC3D,MAAM,CAAC,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC,CAAC;4BACnD,CAAC,CAAC;wBACJ,CAAC;wBAAC,OAAO,KAAK,EAAE,CAAC;4BACf,KAAI,CAAC,YAAY,CAAC,KAAc,CAAC,CAAC;4BAClC,MAAM,CAAC,KAAK,CAAC,CAAC;wBAChB,CAAC;oBACH,CAAC,CAAC,EAAC;;;KACJ;IAED;;OAEG;IACK,wCAAc,GAAtB,UAAuB,OAAyB;QAC9C,oCAAoC;QACpC,IAAI,CAAC,eAAS,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC;YACrD,2DAA2D;QAC7D,CAAC;QAED,8BAA8B;QAC9B,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACnB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAC1B,CAAC;QAED,6BAA6B;QAC7B,IAAI,OAAO,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YAC5B,OAAO;QACT,CAAC;QAED,2BAA2B;QAC3B,IAAM,kBAAkB,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAChE,IAAI,kBAAkB,EAAE,CAAC;YACvB,kBAAkB,CAAC,OAAO,CAAC,UAAC,YAAY;gBACtC,IAAI,CAAC;oBACH,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;gBACjC,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,OAAO,CAAC,KAAK,CAAC,0CAA0C,EAAE,KAAK,CAAC,CAAC;gBACnE,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;OAEG;IACK,0CAAgB,GAAxB;QAAA,iBAsBC;QArBC,IAAI,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,MAAM,CAAC,oBAAoB,EAAE,CAAC;YAC/D,IAAI,CAAC,SAAS,CAAC,sBAAc,CAAC,KAAK,CAAC,CAAC;YACrC,IAAI,CAAC,YAAY,CAAC,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC,CAAC;YAClE,OAAO;QACT,CAAC;QAED,IAAI,CAAC,SAAS,CAAC,sBAAc,CAAC,YAAY,CAAC,CAAC;QAC5C,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAEzB,IAAM,KAAK,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;QAC9C,oCAAoC;QACpC,IAAI,CAAC,eAAS,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC;YACrD,+FAA+F;QACjG,CAAC;QAED,UAAU,CAAC;YACT,KAAI,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,UAAC,KAAK;gBAC1B,OAAO,CAAC,KAAK,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAC;gBACzD,KAAI,CAAC,gBAAgB,EAAE,CAAC;YAC1B,CAAC,CAAC,CAAC;QACL,CAAC,EAAE,KAAK,CAAC,CAAC;IACZ,CAAC;IAED;;OAEG;IACK,kDAAwB,GAAhC;QACE,IAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;QAChD,IAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QACnF,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,KAAK,CAAC;QAC3C,OAAO,KAAK,GAAG,MAAM,CAAC;IACxB,CAAC;IAED;;OAEG;IACK,8CAAoB,GAA5B;QACE,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACpC,IAAM,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,EAAG,CAAC;YAC3C,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrB,CAAC;IACH,CAAC;IAED;;OAEG;IACK,yCAAe,GAAvB;QAAA,iBAQC;QAPC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe;YAAE,OAAO;QAEzC,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC;YAChC,IAAI,KAAI,CAAC,WAAW,EAAE,EAAE,CAAC;gBACvB,KAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;YAC9B,CAAC;QACH,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;IACpC,CAAC;IAED;;OAEG;IACK,yCAAe,GAAvB;QACE,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC;YACxB,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YACnC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC7B,CAAC;IACH,CAAC;IAED;;OAEG;IACK,mCAAS,GAAjB,UAAkB,KAAqB;QACrC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,oCAAoC;QACpC,IAAI,CAAC,eAAS,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC;YACrD,sDAAsD;QACxD,CAAC;QAED,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;YACvB,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC5B,CAAC;IACH,CAAC;IAED;;OAEG;IACK,sCAAY,GAApB,UAAqB,KAAY;QAC/B,OAAO,CAAC,KAAK,CAAC,oBAAoB,EAAE,KAAK,CAAC,CAAC;QAE3C,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACtB,CAAC;IACH,CAAC;IAED;;OAEG;IACK,uCAAa,GAArB;QACE,IAAI,OAAO,MAAM,KAAK,WAAW;YAAE,OAAO,IAAI,CAAC;QAE/C,OAAO,CACL,YAAY,CAAC,OAAO,CAAC,oBAAY,CAAC,UAAU,CAAC;YAC7C,YAAY,CAAC,OAAO,CAAC,oBAAY,CAAC,YAAY,CAAC;YAC/C,cAAc,CAAC,OAAO,CAAC,oBAAY,CAAC,UAAU,CAAC;YAC/C,cAAc,CAAC,OAAO,CAAC,oBAAY,CAAC,YAAY,CAAC;YACjD,IAAI,CACL,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,qCAAW,GAAnB;QACE,OAAO,aAAM,IAAI,CAAC,GAAG,EAAE,cAAI,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE,CAAC;IACvE,CAAC;IACH,sBAAC;AAAD,CAAC,AA5YD,IA4YC;AA5YY,0CAAe;AA8Y5B,+EAA+E;AAC/E,mBAAmB;AACnB,+EAA+E;AAE/E;;GAEG;AACI,IAAM,qBAAqB,GAAG,UAAC,MAAuB;IAC3D,OAAO,IAAI,eAAe,CAAC,MAAM,CAAC,CAAC;AACrC,CAAC,CAAC;AAFW,QAAA,qBAAqB,yBAEhC;AAEF,kCAAkC;AAClC,wCAAgD;AAAvC,uGAAA,cAAc,OAAA;AAEvB,+EAA+E;AAC/E,iBAAiB;AACjB,+EAA+E;AAE/E,kBAAe,eAAe,CAAC","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/data/websocket/websocketClient.ts"],"sourcesContent":["/**\n * WebSocket Client Configuration\n *\n * Universal WebSocket client foundation that can be used by any enterprise application.\n * Provides automatic reconnection, message queuing, and robust error handling.\n */\n\nimport {\n  AuthTokenKey,\n  type WebSocketConfig,\n  type WebSocketMessage,\n  WebSocketState,\n  type WebSocketSubscription,\n} from '../types/types';\n\n// ============================================================================\n// ENVIRONMENT CONFIGURATION\n// ============================================================================\n\n// Import centralized environment configuration\nimport { envConfig } from '../../../../config/env';\n\nconst DEFAULT_WS_URL = envConfig.wsUrl;\nconst DEFAULT_RECONNECT_INTERVAL = 1000;\nconst DEFAULT_MAX_RECONNECT_ATTEMPTS = 5;\nconst DEFAULT_TIMEOUT = 10000;\nconst DEFAULT_HEARTBEAT_INTERVAL = 30000;\n\n// ============================================================================\n// WEBSOCKET CLIENT CLASS\n// ============================================================================\n\n/**\n * Universal WebSocket client that can handle any real-time communication needs\n */\nexport class WebSocketClient {\n  private ws: WebSocket | null = null;\n  private config: WebSocketConfig & {\n    url: string;\n    reconnectInterval: number;\n    maxReconnectAttempts: number;\n    timeout: number;\n    heartbeatInterval: number;\n    enableHeartbeat: boolean;\n  };\n  private state: WebSocketState = WebSocketState.DISCONNECTED;\n  private reconnectAttempts = 0;\n  private messageQueue: WebSocketMessage[] = [];\n  private subscriptions = new Map<string, Set<WebSocketSubscription>>();\n  private connectionPromise: Promise<void> | null = null;\n  private heartbeatTimer: NodeJS.Timeout | null = null;\n\n  // Event handlers\n  private onStateChange: ((state: WebSocketState) => void) | null = null;\n  private onError: ((error: Error) => void) | null = null;\n  private onMessage: ((message: WebSocketMessage) => void) | null = null;\n\n  constructor(config: WebSocketConfig) {\n    this.config = {\n      url: config.url || DEFAULT_WS_URL,\n      reconnectInterval: config.reconnectInterval || DEFAULT_RECONNECT_INTERVAL,\n      maxReconnectAttempts: config.maxReconnectAttempts || DEFAULT_MAX_RECONNECT_ATTEMPTS,\n      timeout: config.timeout || DEFAULT_TIMEOUT,\n      heartbeatInterval: config.heartbeatInterval || DEFAULT_HEARTBEAT_INTERVAL,\n      enableHeartbeat: config.enableHeartbeat ?? true,\n    };\n\n    // Set protocols only if provided\n    if (config.protocols) {\n      this.config.protocols = config.protocols;\n    }\n  }\n\n  // ============================================================================\n  // PUBLIC METHODS\n  // ============================================================================\n\n  /**\n   * Connect to WebSocket server\n   */\n  async connect(): Promise<void> {\n    if (this.state === WebSocketState.CONNECTED || this.state === WebSocketState.CONNECTING) {\n      return this.connectionPromise || Promise.resolve();\n    }\n\n    this.connectionPromise = this._connect();\n    return this.connectionPromise;\n  }\n\n  /**\n   * Disconnect from WebSocket server\n   */\n  disconnect(): void {\n    this._setState(WebSocketState.DISCONNECTING);\n    this._clearHeartbeat();\n\n    if (this.ws) {\n      this.ws.close(1000, 'Client disconnect');\n      this.ws = null;\n    }\n\n    this._setState(WebSocketState.DISCONNECTED);\n    this.connectionPromise = null;\n  }\n\n  /**\n   * Send message to server\n   */\n  send(message: WebSocketMessage): void {\n    const messageWithId = {\n      ...message,\n      id: message.id || this._generateId(),\n      timestamp: message.timestamp || new Date().toISOString(),\n    };\n\n    if (this.state === WebSocketState.CONNECTED && this.ws) {\n      try {\n        this.ws.send(JSON.stringify(messageWithId));\n        // Only log in non-test environments\n        if (!envConfig.isTest && !process.env.JEST_WORKER_ID) {\n          // console.debug('[WebSocket] Message sent:', messageWithId);\n        }\n      } catch (error) {\n        // console.error('[WebSocket] Failed to send message:', error);\n        this._handleError(new Error(`Failed to send message: ${String(error)}`));\n      }\n    } else {\n      // Queue message for later delivery\n      this.messageQueue.push(messageWithId);\n      // Only log in non-test environments\n      if (!envConfig.isTest && !process.env.JEST_WORKER_ID) {\n        // console.debug('[WebSocket] Message queued:', messageWithId);\n      }\n    }\n  }\n\n  /**\n   * Subscribe to specific event type\n   */\n  subscribe(event: string, callback: (message: WebSocketMessage) => void): () => void {\n    const subscription: WebSocketSubscription = {\n      id: this._generateId(),\n      event,\n      callback,\n    };\n\n    if (!this.subscriptions.has(event)) {\n      this.subscriptions.set(event, new Set());\n    }\n\n    this.subscriptions.get(event)!.add(subscription);\n\n    // Only log in non-test environments\n    if (!envConfig.isTest && !process.env.JEST_WORKER_ID) {\n      // console.debug('[WebSocket] Subscribed to event:', event);\n    }\n\n    // Return unsubscribe function\n    return () => {\n      const eventSubscriptions = this.subscriptions.get(event);\n      if (eventSubscriptions) {\n        eventSubscriptions.delete(subscription);\n        if (eventSubscriptions.size === 0) {\n          this.subscriptions.delete(event);\n        }\n      }\n      // Only log in non-test environments\n      if (!envConfig.isTest && !process.env.JEST_WORKER_ID) {\n        // console.debug('[WebSocket] Unsubscribed from event:', event);\n      }\n    };\n  }\n\n  /**\n   * Get current connection state\n   */\n  getState(): WebSocketState {\n    return this.state;\n  }\n\n  /**\n   * Check if WebSocket is connected\n   */\n  isConnected(): boolean {\n    return this.state === WebSocketState.CONNECTED;\n  }\n\n  // ============================================================================\n  // EVENT HANDLERS\n  // ============================================================================\n\n  /**\n   * Set state change handler\n   */\n  onStateChanged(handler: (state: WebSocketState) => void): void {\n    this.onStateChange = handler;\n  }\n\n  /**\n   * Set error handler\n   */\n  onErrorOccurred(handler: (error: Error) => void): void {\n    this.onError = handler;\n  }\n\n  /**\n   * Set message handler (for all messages)\n   */\n  onMessageReceived(handler: (message: WebSocketMessage) => void): void {\n    this.onMessage = handler;\n  }\n\n  // ============================================================================\n  // PRIVATE METHODS\n  // ============================================================================\n\n  /**\n   * Internal connect method\n   */\n  private async _connect(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        this._setState(WebSocketState.CONNECTING);\n\n        // Add authentication token if available\n        const token = this._getAuthToken();\n        const url = token ? `${this.config.url}?token=${token}` : this.config.url;\n\n        this.ws = new WebSocket(url, this.config.protocols);\n\n        // Connection timeout\n        const timeout = setTimeout(() => {\n          if (this.ws && this.ws.readyState === WebSocket.CONNECTING) {\n            this.ws.close();\n            reject(new Error('WebSocket connection timeout'));\n          }\n        }, this.config.timeout);\n\n        this.ws.onopen = () => {\n          clearTimeout(timeout);\n          this._setState(WebSocketState.CONNECTED);\n          this.reconnectAttempts = 0;\n          this._processMessageQueue();\n          this._startHeartbeat();\n          resolve();\n        };\n\n        this.ws.onmessage = (event) => {\n          try {\n            const message: WebSocketMessage = JSON.parse(event.data as string) as WebSocketMessage;\n            this._handleMessage(message);\n          } catch (error) {\n            console.error('[WebSocket] Failed to parse message:', error, event.data);\n          }\n        };\n\n        this.ws.onclose = (event) => {\n          clearTimeout(timeout);\n          this._clearHeartbeat();\n\n          if (this.state === WebSocketState.DISCONNECTING) {\n            this._setState(WebSocketState.DISCONNECTED);\n            resolve();\n          } else {\n            console.warn('[WebSocket] Connection closed unexpectedly:', event);\n            this._handleReconnect();\n          }\n        };\n\n        this.ws.onerror = (error) => {\n          clearTimeout(timeout);\n          console.error('[WebSocket] Connection error:', error);\n          this._handleError(new Error('WebSocket connection error'));\n          reject(new Error('WebSocket connection failed'));\n        };\n      } catch (error) {\n        this._handleError(error as Error);\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Handle incoming messages\n   */\n  private _handleMessage(message: WebSocketMessage): void {\n    // Only log in non-test environments\n    if (!envConfig.isTest && !process.env.JEST_WORKER_ID) {\n      // console.debug('[WebSocket] Message received:', message);\n    }\n\n    // Call global message handler\n    if (this.onMessage) {\n      this.onMessage(message);\n    }\n\n    // Handle heartbeat responses\n    if (message.type === 'pong') {\n      return;\n    }\n\n    // Notify event subscribers\n    const eventSubscriptions = this.subscriptions.get(message.type);\n    if (eventSubscriptions) {\n      eventSubscriptions.forEach((subscription) => {\n        try {\n          subscription.callback(message);\n        } catch (error) {\n          console.error('[WebSocket] Subscription callback error:', error);\n        }\n      });\n    }\n  }\n\n  /**\n   * Handle reconnection logic\n   */\n  private _handleReconnect(): void {\n    if (this.reconnectAttempts >= this.config.maxReconnectAttempts) {\n      this._setState(WebSocketState.ERROR);\n      this._handleError(new Error('Max reconnection attempts reached'));\n      return;\n    }\n\n    this._setState(WebSocketState.RECONNECTING);\n    this.reconnectAttempts++;\n\n    const delay = this._calculateReconnectDelay();\n    // Only log in non-test environments\n    if (!envConfig.isTest && !process.env.JEST_WORKER_ID) {\n      // console.debug(`[WebSocket] Reconnecting in ${delay}ms (attempt ${this.reconnectAttempts})`);\n    }\n\n    setTimeout(() => {\n      this._connect().catch((error) => {\n        console.error('[WebSocket] Reconnection failed:', error);\n        this._handleReconnect();\n      });\n    }, delay);\n  }\n\n  /**\n   * Calculate reconnection delay with exponential backoff\n   */\n  private _calculateReconnectDelay(): number {\n    const baseDelay = this.config.reconnectInterval;\n    const delay = Math.min(baseDelay * Math.pow(2, this.reconnectAttempts - 1), 30000);\n    const jitter = Math.random() * 0.1 * delay;\n    return delay + jitter;\n  }\n\n  /**\n   * Process queued messages\n   */\n  private _processMessageQueue(): void {\n    while (this.messageQueue.length > 0) {\n      const message = this.messageQueue.shift()!;\n      this.send(message);\n    }\n  }\n\n  /**\n   * Start heartbeat mechanism\n   */\n  private _startHeartbeat(): void {\n    if (!this.config.enableHeartbeat) return;\n\n    this.heartbeatTimer = setInterval(() => {\n      if (this.isConnected()) {\n        this.send({ type: 'ping' });\n      }\n    }, this.config.heartbeatInterval);\n  }\n\n  /**\n   * Clear heartbeat timer\n   */\n  private _clearHeartbeat(): void {\n    if (this.heartbeatTimer) {\n      clearInterval(this.heartbeatTimer);\n      this.heartbeatTimer = null;\n    }\n  }\n\n  /**\n   * Set connection state\n   */\n  private _setState(state: WebSocketState): void {\n    this.state = state;\n    // Only log in non-test environments\n    if (!envConfig.isTest && !process.env.JEST_WORKER_ID) {\n      // console.debug('[WebSocket] State changed:', state);\n    }\n\n    if (this.onStateChange) {\n      this.onStateChange(state);\n    }\n  }\n\n  /**\n   * Handle errors\n   */\n  private _handleError(error: Error): void {\n    console.error('[WebSocket] Error:', error);\n\n    if (this.onError) {\n      this.onError(error);\n    }\n  }\n\n  /**\n   * Get authentication token\n   */\n  private _getAuthToken(): string | null {\n    if (typeof window === 'undefined') return null;\n\n    return (\n      localStorage.getItem(AuthTokenKey.AUTH_TOKEN) ||\n      localStorage.getItem(AuthTokenKey.ACCESS_TOKEN) ||\n      sessionStorage.getItem(AuthTokenKey.AUTH_TOKEN) ||\n      sessionStorage.getItem(AuthTokenKey.ACCESS_TOKEN) ||\n      null\n    );\n  }\n\n  /**\n   * Generate unique ID\n   */\n  private _generateId(): string {\n    return `ws_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n\n// ============================================================================\n// FACTORY FUNCTION\n// ============================================================================\n\n/**\n * Create a WebSocket client instance\n */\nexport const createWebSocketClient = (config: WebSocketConfig): WebSocketClient => {\n  return new WebSocketClient(config);\n};\n\n// Re-export types for convenience\nexport { WebSocketState } from '../types/types';\n\n// ============================================================================\n// DEFAULT EXPORT\n// ============================================================================\n\nexport default WebSocketClient;\n"],"version":3}