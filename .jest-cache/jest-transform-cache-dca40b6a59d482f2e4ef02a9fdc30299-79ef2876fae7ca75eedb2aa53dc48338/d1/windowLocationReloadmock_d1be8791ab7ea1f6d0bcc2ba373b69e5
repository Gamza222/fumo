9347fbd54bb2ba0aee312aa0d1277052
"use strict";

/* istanbul ignore next */
function cov_rzeddw5m4() {
  var path = "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/browser/lib/location/windowLocationReload.mock.ts";
  var hash = "9d99477bcbfb1fdbb4df455c895575dae03d028c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/browser/lib/location/windowLocationReload.mock.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 15
        },
        end: {
          line: 12,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 10,
          column: 6
        }
      },
      "2": {
        start: {
          line: 4,
          column: 8
        },
        end: {
          line: 8,
          column: 9
        }
      },
      "3": {
        start: {
          line: 4,
          column: 24
        },
        end: {
          line: 4,
          column: 25
        }
      },
      "4": {
        start: {
          line: 4,
          column: 31
        },
        end: {
          line: 4,
          column: 47
        }
      },
      "5": {
        start: {
          line: 5,
          column: 12
        },
        end: {
          line: 5,
          column: 29
        }
      },
      "6": {
        start: {
          line: 6,
          column: 12
        },
        end: {
          line: 7,
          column: 28
        }
      },
      "7": {
        start: {
          line: 6,
          column: 29
        },
        end: {
          line: 7,
          column: 28
        }
      },
      "8": {
        start: {
          line: 7,
          column: 16
        },
        end: {
          line: 7,
          column: 28
        }
      },
      "9": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 17
        }
      },
      "10": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 43
        }
      },
      "11": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 13,
          column: 62
        }
      },
      "12": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 14,
          column: 42
        }
      },
      "13": {
        start: {
          line: 41,
          column: 31
        },
        end: {
          line: 49,
          column: 1
        }
      },
      "14": {
        start: {
          line: 42,
          column: 21
        },
        end: {
          line: 42,
          column: 30
        }
      },
      "15": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 47,
          column: 7
        }
      },
      "16": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 48,
          column: 22
        }
      },
      "17": {
        start: {
          line: 50,
          column: 0
        },
        end: {
          line: 50,
          column: 60
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 42
          },
          end: {
            line: 2,
            column: 43
          }
        },
        loc: {
          start: {
            line: 2,
            column: 54
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 3,
            column: 32
          },
          end: {
            line: 3,
            column: 33
          }
        },
        loc: {
          start: {
            line: 3,
            column: 44
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 3
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 41,
            column: 31
          },
          end: {
            line: 41,
            column: 32
          }
        },
        loc: {
          start: {
            line: 41,
            column: 43
          },
          end: {
            line: 49,
            column: 1
          }
        },
        line: 41
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 15
          },
          end: {
            line: 12,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 16
          },
          end: {
            line: 2,
            column: 20
          }
        }, {
          start: {
            line: 2,
            column: 24
          },
          end: {
            line: 2,
            column: 37
          }
        }, {
          start: {
            line: 2,
            column: 42
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 15
          },
          end: {
            line: 10,
            column: 5
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 15
          },
          end: {
            line: 3,
            column: 28
          }
        }, {
          start: {
            line: 3,
            column: 32
          },
          end: {
            line: 10,
            column: 5
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 6,
            column: 29
          },
          end: {
            line: 7,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 6,
            column: 29
          },
          end: {
            line: 7,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 6
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/browser/lib/location/windowLocationReload.mock.ts",
      mappings: ";;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;GAoBG;AAEH;;;;GAIG;AACI,IAAM,wBAAwB,GAAyB;IAC5D,IAAM,UAAU,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;IAE7B,iDAAiD;IACjD,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,UAAU,EAAE;QACxC,KAAK,wBACA,MAAM,CAAC,QAAQ,KAClB,MAAM,EAAE,UAAU,GACnB;QACD,QAAQ,EAAE,IAAI;KACf,CAAC,CAAC;IAEH,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC;AAbW,QAAA,wBAAwB,4BAanC",
      names: [],
      sources: ["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/browser/lib/location/windowLocationReload.mock.ts"],
      sourcesContent: ["// Local type definition (moved from error types that was cleaned up)\ntype mockWindowReloadType = () => jest.Mock;\n\n/**\n * WindowLocationReload.mock.ts\n *\n * This provides mock implementation for window.location.reload to prevent actual page reloads in tests.\n *\n * @usage\n * - Use mockWindowLocationReload when you need to test reload behavior without triggering a real page reload.\n * - Returns a Jest mock function that can be spied on to verify reload calls.\n *\n * @safety\n * This mock prevents accidental page reloads during testing that would interrupt the test suite.\n *\n * @example\n * ```typescript\n * import { mockWindowLocationReload } from '@jestmocks/browser';\n *\n * const mockReload = mockWindowLocationReload();\n * // ... trigger action that should reload\n * expect(mockReload).toHaveBeenCalled();\n * ```\n */\n\n/**\n * Creates a mock for window.location.reload\n *\n * @returns Mock function that replaces window.location.reload\n */\nexport const mockWindowLocationReload: mockWindowReloadType = () => {\n  const mockReload = jest.fn();\n\n  // Replace the actual reload method with our mock\n  Object.defineProperty(window, 'location', {\n    value: {\n      ...window.location,\n      reload: mockReload,\n    },\n    writable: true,\n  });\n\n  return mockReload;\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9d99477bcbfb1fdbb4df455c895575dae03d028c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_rzeddw5m4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_rzeddw5m4();
var __assign =
/* istanbul ignore next */
(cov_rzeddw5m4().s[0]++,
/* istanbul ignore next */
(cov_rzeddw5m4().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_rzeddw5m4().b[0][1]++, this.__assign) ||
/* istanbul ignore next */
(cov_rzeddw5m4().b[0][2]++, function () {
  /* istanbul ignore next */
  cov_rzeddw5m4().f[0]++;
  cov_rzeddw5m4().s[1]++;
  __assign =
  /* istanbul ignore next */
  (cov_rzeddw5m4().b[1][0]++, Object.assign) ||
  /* istanbul ignore next */
  (cov_rzeddw5m4().b[1][1]++, function (t) {
    /* istanbul ignore next */
    cov_rzeddw5m4().f[1]++;
    cov_rzeddw5m4().s[2]++;
    for (var s, i =
      /* istanbul ignore next */
      (cov_rzeddw5m4().s[3]++, 1), n =
      /* istanbul ignore next */
      (cov_rzeddw5m4().s[4]++, arguments.length); i < n; i++) {
      /* istanbul ignore next */
      cov_rzeddw5m4().s[5]++;
      s = arguments[i];
      /* istanbul ignore next */
      cov_rzeddw5m4().s[6]++;
      for (var p in s) {
        /* istanbul ignore next */
        cov_rzeddw5m4().s[7]++;
        if (Object.prototype.hasOwnProperty.call(s, p)) {
          /* istanbul ignore next */
          cov_rzeddw5m4().b[2][0]++;
          cov_rzeddw5m4().s[8]++;
          t[p] = s[p];
        } else
        /* istanbul ignore next */
        {
          cov_rzeddw5m4().b[2][1]++;
        }
      }
    }
    /* istanbul ignore next */
    cov_rzeddw5m4().s[9]++;
    return t;
  });
  /* istanbul ignore next */
  cov_rzeddw5m4().s[10]++;
  return __assign.apply(this, arguments);
}));
/* istanbul ignore next */
cov_rzeddw5m4().s[11]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_rzeddw5m4().s[12]++;
exports.mockWindowLocationReload = void 0;
/**
 * WindowLocationReload.mock.ts
 *
 * This provides mock implementation for window.location.reload to prevent actual page reloads in tests.
 *
 * @usage
 * - Use mockWindowLocationReload when you need to test reload behavior without triggering a real page reload.
 * - Returns a Jest mock function that can be spied on to verify reload calls.
 *
 * @safety
 * This mock prevents accidental page reloads during testing that would interrupt the test suite.
 *
 * @example
 * ```typescript
 * import { mockWindowLocationReload } from '@jestmocks/browser';
 *
 * const mockReload = mockWindowLocationReload();
 * // ... trigger action that should reload
 * expect(mockReload).toHaveBeenCalled();
 * ```
 */
/**
 * Creates a mock for window.location.reload
 *
 * @returns Mock function that replaces window.location.reload
 */
/* istanbul ignore next */
cov_rzeddw5m4().s[13]++;
var mockWindowLocationReload = function () {
  /* istanbul ignore next */
  cov_rzeddw5m4().f[2]++;
  var mockReload =
  /* istanbul ignore next */
  (cov_rzeddw5m4().s[14]++, jest.fn());
  // Replace the actual reload method with our mock
  /* istanbul ignore next */
  cov_rzeddw5m4().s[15]++;
  Object.defineProperty(window, 'location', {
    value: __assign(__assign({}, window.location), {
      reload: mockReload
    }),
    writable: true
  });
  /* istanbul ignore next */
  cov_rzeddw5m4().s[16]++;
  return mockReload;
};
/* istanbul ignore next */
cov_rzeddw5m4().s[17]++;
exports.mockWindowLocationReload = mockWindowLocationReload;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfcnplZGR3NW00IiwicyIsIm1vY2tXaW5kb3dMb2NhdGlvblJlbG9hZCIsImYiLCJtb2NrUmVsb2FkIiwiamVzdCIsImZuIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ3aW5kb3ciLCJ2YWx1ZSIsIl9fYXNzaWduIiwibG9jYXRpb24iLCJyZWxvYWQiLCJ3cml0YWJsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyIvVXNlcnMvZ2FtemFyYW1hemFub3YvRGVza3RvcC9mdW1vL3NyYy9zaGFyZWQvdGVzdGluZy9tb2Nrcy9icm93c2VyL2xpYi9sb2NhdGlvbi93aW5kb3dMb2NhdGlvblJlbG9hZC5tb2NrLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIExvY2FsIHR5cGUgZGVmaW5pdGlvbiAobW92ZWQgZnJvbSBlcnJvciB0eXBlcyB0aGF0IHdhcyBjbGVhbmVkIHVwKVxudHlwZSBtb2NrV2luZG93UmVsb2FkVHlwZSA9ICgpID0+IGplc3QuTW9jaztcblxuLyoqXG4gKiBXaW5kb3dMb2NhdGlvblJlbG9hZC5tb2NrLnRzXG4gKlxuICogVGhpcyBwcm92aWRlcyBtb2NrIGltcGxlbWVudGF0aW9uIGZvciB3aW5kb3cubG9jYXRpb24ucmVsb2FkIHRvIHByZXZlbnQgYWN0dWFsIHBhZ2UgcmVsb2FkcyBpbiB0ZXN0cy5cbiAqXG4gKiBAdXNhZ2VcbiAqIC0gVXNlIG1vY2tXaW5kb3dMb2NhdGlvblJlbG9hZCB3aGVuIHlvdSBuZWVkIHRvIHRlc3QgcmVsb2FkIGJlaGF2aW9yIHdpdGhvdXQgdHJpZ2dlcmluZyBhIHJlYWwgcGFnZSByZWxvYWQuXG4gKiAtIFJldHVybnMgYSBKZXN0IG1vY2sgZnVuY3Rpb24gdGhhdCBjYW4gYmUgc3BpZWQgb24gdG8gdmVyaWZ5IHJlbG9hZCBjYWxscy5cbiAqXG4gKiBAc2FmZXR5XG4gKiBUaGlzIG1vY2sgcHJldmVudHMgYWNjaWRlbnRhbCBwYWdlIHJlbG9hZHMgZHVyaW5nIHRlc3RpbmcgdGhhdCB3b3VsZCBpbnRlcnJ1cHQgdGhlIHRlc3Qgc3VpdGUuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IG1vY2tXaW5kb3dMb2NhdGlvblJlbG9hZCB9IGZyb20gJ0BqZXN0bW9ja3MvYnJvd3Nlcic7XG4gKlxuICogY29uc3QgbW9ja1JlbG9hZCA9IG1vY2tXaW5kb3dMb2NhdGlvblJlbG9hZCgpO1xuICogLy8gLi4uIHRyaWdnZXIgYWN0aW9uIHRoYXQgc2hvdWxkIHJlbG9hZFxuICogZXhwZWN0KG1vY2tSZWxvYWQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAqIGBgYFxuICovXG5cbi8qKlxuICogQ3JlYXRlcyBhIG1vY2sgZm9yIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWRcbiAqXG4gKiBAcmV0dXJucyBNb2NrIGZ1bmN0aW9uIHRoYXQgcmVwbGFjZXMgd2luZG93LmxvY2F0aW9uLnJlbG9hZFxuICovXG5leHBvcnQgY29uc3QgbW9ja1dpbmRvd0xvY2F0aW9uUmVsb2FkOiBtb2NrV2luZG93UmVsb2FkVHlwZSA9ICgpID0+IHtcbiAgY29uc3QgbW9ja1JlbG9hZCA9IGplc3QuZm4oKTtcblxuICAvLyBSZXBsYWNlIHRoZSBhY3R1YWwgcmVsb2FkIG1ldGhvZCB3aXRoIG91ciBtb2NrXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdsb2NhdGlvbicsIHtcbiAgICB2YWx1ZToge1xuICAgICAgLi4ud2luZG93LmxvY2F0aW9uLFxuICAgICAgcmVsb2FkOiBtb2NrUmVsb2FkLFxuICAgIH0sXG4gICAgd3JpdGFibGU6IHRydWUsXG4gIH0pO1xuXG4gIHJldHVybiBtb2NrUmVsb2FkO1xufTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNCQTs7Ozs7QUFBQTtBQUFBQSxhQUFBLEdBQUFDLENBQUE7QUFLTyxJQUFNQyx3QkFBd0IsR0FBeUIsU0FBQUEsQ0FBQTtFQUFBO0VBQUFGLGFBQUEsR0FBQUcsQ0FBQTtFQUM1RCxJQUFNQyxVQUFVO0VBQUE7RUFBQSxDQUFBSixhQUFBLEdBQUFDLENBQUEsUUFBR0ksSUFBSSxDQUFDQyxFQUFFLEVBQUU7RUFFNUI7RUFBQTtFQUFBTixhQUFBLEdBQUFDLENBQUE7RUFDQU0sTUFBTSxDQUFDQyxjQUFjLENBQUNDLE1BQU0sRUFBRSxVQUFVLEVBQUU7SUFDeENDLEtBQUssRUFBQUMsUUFBQSxDQUFBQSxRQUFBLEtBQ0FGLE1BQU0sQ0FBQ0csUUFBUTtNQUNsQkMsTUFBTSxFQUFFVDtJQUFVLEVBQ25CO0lBQ0RVLFFBQVEsRUFBRTtHQUNYLENBQUM7RUFBQztFQUFBZCxhQUFBLEdBQUFDLENBQUE7RUFFSCxPQUFPRyxVQUFVO0FBQ25CLENBQUM7QUFBQztBQUFBSixhQUFBLEdBQUFDLENBQUE7QUFiV2MsT0FBQSxDQUFBYix3QkFBd0IsR0FBQUEsd0JBQUEiLCJpZ25vcmVMaXN0IjpbXX0=