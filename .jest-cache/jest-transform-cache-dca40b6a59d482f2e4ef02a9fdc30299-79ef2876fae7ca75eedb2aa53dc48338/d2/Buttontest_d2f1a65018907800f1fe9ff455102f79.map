{"file":"/Users/gamzaramazanov/Desktop/fumo/src/shared/ui/Button/Button.test.tsx","mappings":";;;AAAA,8BAA8B;AAC9B,gDAAwD;AACxD,mCAAkC;AAClC,+CAA2D;AAE3D,QAAQ,CAAC,QAAQ,EAAE;IACjB,IAAI,CAAC,4BAA4B,EAAE;QACjC,IAAA,cAAM,EAAC,uBAAC,eAAM,2BAAkB,CAAC,CAAC;QAClC,IAAM,MAAM,GAAG,cAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;QACjE,MAAM,CAAC,MAAM,CAAC,CAAC,iBAAiB,EAAE,CAAC;QACnC,uEAAuE;QACvE,mDAAmD;IACrD,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,kCAAkC,EAAE;QACvC,IAAA,cAAM,EACJ,uBAAC,eAAM,IAAC,OAAO,EAAE,4BAAa,CAAC,SAAS,EAAE,IAAI,EAAE,yBAAU,CAAC,EAAE,6BAEpD,CACV,CAAC;QACF,IAAM,MAAM,GAAG,cAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,eAAe,EAAE,CAAC,CAAC;QACrE,MAAM,CAAC,MAAM,CAAC,CAAC,iBAAiB,EAAE,CAAC;QACnC,2DAA2D;IAC7D,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,kCAAkC,EAAE;QACvC,IAAA,cAAM,EAAC,uBAAC,eAAM,IAAC,OAAO,iCAAoB,CAAC,CAAC;QAC5C,IAAM,MAAM,GAAG,cAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;QAChE,MAAM,CAAC,MAAM,CAAC,CAAC,YAAY,EAAE,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,gDAAgD,EAAE;QACrD,IAAA,cAAM,EAAC,uBAAC,eAAM,IAAC,QAAQ,+BAAkB,CAAC,CAAC;QAC3C,IAAM,MAAM,GAAG,cAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;QACjE,MAAM,CAAC,MAAM,CAAC,CAAC,YAAY,EAAE,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,0BAA0B,EAAE;QAC/B,IAAA,cAAM,EAAC,uBAAC,eAAM,IAAC,SAAS,iCAAoB,CAAC,CAAC;QAC9C,IAAM,MAAM,GAAG,cAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC,CAAC;QACnE,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,iBAAiB,EAAE;QACtB,IAAA,cAAM,EAAC,uBAAC,eAAM,IAAC,IAAI,EAAE,oDAAiB,0BAAoB,CAAC,CAAC;QAC5D,MAAM,CAAC,cAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;IACvD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/ui/Button/Button.test.tsx"],"sourcesContent":["// Removed unused React import\nimport { render, screen } from '@testing-library/react';\nimport { Button } from './Button';\nimport { ButtonSize, ButtonVariant } from './Button.types';\n\ndescribe('Button', () => {\n  test('renders with default props', () => {\n    render(<Button>Click me</Button>);\n    const button = screen.getByRole('button', { name: /click me/i });\n    expect(button).toBeInTheDocument();\n    // Check for default variant and size classes (implementation-specific)\n    // e.g., expect(button).toHaveClass('bg-blue-600');\n  });\n\n  test('applies variant and size classes', () => {\n    render(\n      <Button variant={ButtonVariant.SECONDARY} size={ButtonSize.LG}>\n        Large Button\n      </Button>\n    );\n    const button = screen.getByRole('button', { name: /large button/i });\n    expect(button).toBeInTheDocument();\n    // e.g., expect(button).toHaveClass('bg-white', 'text-lg');\n  });\n\n  test('disables the button when loading', () => {\n    render(<Button loading>Loading...</Button>);\n    const button = screen.getByRole('button', { name: /loading/i });\n    expect(button).toBeDisabled();\n  });\n\n  test('disables the button when disabled prop is true', () => {\n    render(<Button disabled>Disabled</Button>);\n    const button = screen.getByRole('button', { name: /disabled/i });\n    expect(button).toBeDisabled();\n  });\n\n  test('applies fullWidth styles', () => {\n    render(<Button fullWidth>Full Width</Button>);\n    const button = screen.getByRole('button', { name: /full width/i });\n    expect(button).toHaveClass('fullWidth');\n  });\n\n  test('renders an icon', () => {\n    render(<Button icon={<span>ICON</span>}>With Icon</Button>);\n    expect(screen.getByText('ICON')).toBeInTheDocument();\n  });\n});\n"],"version":3}