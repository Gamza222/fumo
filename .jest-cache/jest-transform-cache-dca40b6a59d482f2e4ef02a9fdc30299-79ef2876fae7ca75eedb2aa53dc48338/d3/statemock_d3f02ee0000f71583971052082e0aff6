3434b1eaaa522328ac085e99b7e71d8e
"use strict";
/**
 * State Management Mock Utilities
 *
 * Common state-related mocks for testing Zustand stores,
 * subscriptions, and state management patterns.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMockStoreMiddleware = exports.createMockStoreAction = exports.createMockStoreSelector = exports.createMockZustandStore = exports.createMockStoreListenerWithExpectations = exports.createMockStoreListener = void 0;
/**
 * Creates a mock store listener
 */
var createMockStoreListener = function () {
    var listener = jest.fn();
    return {
        listener: listener,
        getCallCount: function () { return listener.mock.calls.length; },
        getLastCall: function () { return listener.mock.calls[listener.mock.calls.length - 1]; },
        getCalls: function () { return listener.mock.calls; },
        reset: function () { return listener.mockClear(); },
    };
};
exports.createMockStoreListener = createMockStoreListener;
/**
 * Creates a mock store listener with expectations
 */
var createMockStoreListenerWithExpectations = function (expectedCalls) {
    if (expectedCalls === void 0) { expectedCalls = 1; }
    var listener = jest.fn();
    listener.mockImplementation(function () {
        expect(listener).toHaveBeenCalledTimes(expectedCalls);
    });
    return {
        listener: listener,
        getCallCount: function () { return listener.mock.calls.length; },
        getLastCall: function () { return listener.mock.calls[listener.mock.calls.length - 1]; },
        getCalls: function () { return listener.mock.calls; },
        reset: function () { return listener.mockClear(); },
    };
};
exports.createMockStoreListenerWithExpectations = createMockStoreListenerWithExpectations;
/**
 * Creates a mock Zustand store
 */
var createMockZustandStore = function (initialState) {
    var state = initialState;
    var listeners = new Set();
    var store = {
        getState: jest.fn(function () { return state; }),
        setState: jest.fn(function (newState) {
            if (typeof newState === 'function') {
                state = newState(state);
            }
            else {
                state = newState;
            }
            listeners.forEach(function (listener) { return listener(); });
        }),
        subscribe: jest.fn(function (listener) {
            listeners.add(listener);
            return function () { return listeners.delete(listener); };
        }),
        destroy: jest.fn(function () {
            listeners.clear();
        }),
    };
    return {
        store: store,
        getCurrentState: function () { return state; },
        getListenerCount: function () { return listeners.size; },
        hasListener: function (listener) { return listeners.has(listener); },
    };
};
exports.createMockZustandStore = createMockZustandStore;
/**
 * Creates a mock store selector
 */
var createMockStoreSelector = function (selector) {
    var mockSelector = jest.fn(selector);
    return {
        selector: mockSelector,
        getCallCount: function () { return mockSelector.mock.calls.length; },
        getLastCall: function () { return mockSelector.mock.calls[mockSelector.mock.calls.length - 1]; },
        getCalls: function () { return mockSelector.mock.calls; },
        reset: function () { return mockSelector.mockClear(); },
    };
};
exports.createMockStoreSelector = createMockStoreSelector;
/**
 * Creates a mock store action
 */
var createMockStoreAction = function (action) {
    var mockAction = jest.fn(action);
    return {
        action: mockAction,
        getCallCount: function () { return mockAction.mock.calls.length; },
        getLastCall: function () { return mockAction.mock.calls[mockAction.mock.calls.length - 1]; },
        getCalls: function () { return mockAction.mock.calls; },
        reset: function () { return mockAction.mockClear(); },
    };
};
exports.createMockStoreAction = createMockStoreAction;
/**
 * Creates a mock store middleware
 */
var createMockStoreMiddleware = function () {
    var middleware = jest.fn(function (config) {
        return function (set, get, api) {
            return config(function (args) { return set(args); }, get, api);
        };
    });
    return {
        middleware: middleware,
        getCallCount: function () { return middleware.mock.calls.length; },
        getLastCall: function () { return middleware.mock.calls[middleware.mock.calls.length - 1]; },
        getCalls: function () { return middleware.mock.calls; },
        reset: function () { return middleware.mockClear(); },
    };
};
exports.createMockStoreMiddleware = createMockStoreMiddleware;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,