{"file":"/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/state/state.mock.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/infrastructure/lib/state/state.mock.ts"],"sourcesContent":["/**\n * State Management Mock Utilities\n *\n * Common state-related mocks for testing Zustand stores,\n * subscriptions, and state management patterns.\n */\n\n/**\n * Creates a mock store listener\n */\nexport const createMockStoreListener = () => {\n  const listener = jest.fn();\n  return {\n    listener,\n    getCallCount: () => listener.mock.calls.length,\n    getLastCall: () => listener.mock.calls[listener.mock.calls.length - 1] as unknown,\n    getCalls: () => listener.mock.calls as unknown[],\n    reset: () => listener.mockClear(),\n  };\n};\n\n/**\n * Creates a mock store listener with expectations\n */\nexport const createMockStoreListenerWithExpectations = (expectedCalls: number = 1) => {\n  const listener = jest.fn();\n  listener.mockImplementation(() => {\n    expect(listener).toHaveBeenCalledTimes(expectedCalls);\n  });\n  return {\n    listener,\n    getCallCount: () => listener.mock.calls.length,\n    getLastCall: () => listener.mock.calls[listener.mock.calls.length - 1] as unknown,\n    getCalls: () => listener.mock.calls as unknown[],\n    reset: () => listener.mockClear(),\n  };\n};\n\n/**\n * Creates a mock Zustand store\n */\nexport const createMockZustandStore = <T = unknown>(initialState: T) => {\n  let state = initialState;\n  const listeners = new Set<() => void>();\n\n  const store = {\n    getState: jest.fn(() => state),\n    setState: jest.fn((newState: T | ((prev: T) => T)) => {\n      if (typeof newState === 'function') {\n        state = (newState as (prev: T) => T)(state);\n      } else {\n        state = newState;\n      }\n      listeners.forEach((listener) => listener());\n    }),\n    subscribe: jest.fn((listener: () => void) => {\n      listeners.add(listener);\n      return () => listeners.delete(listener);\n    }),\n    destroy: jest.fn(() => {\n      listeners.clear();\n    }),\n  };\n\n  return {\n    store,\n    getCurrentState: () => state,\n    getListenerCount: () => listeners.size,\n    hasListener: (listener: () => void) => listeners.has(listener),\n  };\n};\n\n/**\n * Creates a mock store selector\n */\nexport const createMockStoreSelector = <T = unknown, R = unknown>(selector: (state: T) => R) => {\n  const mockSelector = jest.fn(selector);\n  return {\n    selector: mockSelector,\n    getCallCount: () => mockSelector.mock.calls.length,\n    getLastCall: () => mockSelector.mock.calls[mockSelector.mock.calls.length - 1],\n    getCalls: () => mockSelector.mock.calls,\n    reset: () => mockSelector.mockClear(),\n  };\n};\n\n/**\n * Creates a mock store action\n */\nexport const createMockStoreAction = <T = unknown, R = unknown>(action: (state: T) => R) => {\n  const mockAction = jest.fn(action);\n  return {\n    action: mockAction,\n    getCallCount: () => mockAction.mock.calls.length,\n    getLastCall: () => mockAction.mock.calls[mockAction.mock.calls.length - 1],\n    getCalls: () => mockAction.mock.calls,\n    reset: () => mockAction.mockClear(),\n  };\n};\n\n/**\n * Creates a mock store middleware\n */\nexport const createMockStoreMiddleware = () => {\n  const middleware = jest.fn(\n    (config: (set: (args: unknown) => void, get: () => unknown, api: unknown) => unknown) =>\n      (set: (args: unknown) => void, get: () => unknown, api: unknown) => {\n        return config((args: unknown) => set(args), get, api);\n      }\n  );\n\n  return {\n    middleware,\n    getCallCount: () => middleware.mock.calls.length,\n    getLastCall: () => middleware.mock.calls[middleware.mock.calls.length - 1],\n    getCalls: () => middleware.mock.calls,\n    reset: () => middleware.mockClear(),\n  };\n};\n"],"version":3}