def89b7f8d8f4bdcc6da0f0fa5efb50f
"use strict";
/**
 * Authorization Service Tests
 */
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var authorization_service_1 = require("./authorization.service");
var security_types_1 = require("../../types/security.types");
describe('AuthorizationService', function () {
    var authService;
    var mockUser = {
        id: 'user_1',
        email: 'test@example.com',
        username: 'testuser',
        password: 'hashedpassword',
        role: security_types_1.UserRole.USER,
        permissions: [], // User permissions are empty, role permissions will be used
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date(),
    };
    var mockAdminUser = {
        id: 'admin_1',
        email: 'admin@example.com',
        username: 'admin',
        password: 'hashedpassword',
        role: security_types_1.UserRole.ADMIN,
        permissions: [],
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date(),
    };
    beforeEach(function () {
        // Use the singleton instance
        authService = authorization_service_1.AuthorizationService.getInstance();
    });
    // Debug test to check enum values
    it('should have correct enum values', function () {
        expect(security_types_1.UserRole.USER).toBe('user');
        expect(security_types_1.Permission.READ_CONTENT).toBe('read:content');
        expect(security_types_1.Permission.WRITE_CONTENT).toBe('write:content');
    });
    // Debug test to check getEffectivePermissions
    it('should return correct permissions for USER role', function () {
        // Debug the issue
        // console.log('mockUser:', mockUser);
        // console.log('mockUser.isActive:', mockUser.isActive);
        // console.log('mockUser.role:', mockUser.role);
        var permissions = authService.getEffectivePermissions(mockUser);
        // console.log('permissions:', permissions);
        expect(permissions).toContain(security_types_1.Permission.READ_CONTENT);
        expect(permissions).toContain(security_types_1.Permission.WRITE_CONTENT);
        expect(permissions).not.toContain(security_types_1.Permission.READ_USERS);
    });
    // Debug test to check role permissions directly
    it('should return correct role permissions', function () {
        // Access the private method through any casting
        var getRolePermissions = authService.getRolePermissions;
        var userPermissions = getRolePermissions(security_types_1.UserRole.USER);
        expect(userPermissions).toContain(security_types_1.Permission.READ_CONTENT);
        expect(userPermissions).toContain(security_types_1.Permission.WRITE_CONTENT);
    });
    // Debug test to check user object
    it('should have correct user object', function () {
        expect(mockUser.isActive).toBe(true);
        expect(mockUser.role).toBe(security_types_1.UserRole.USER);
        expect(mockUser.permissions).toEqual([]);
    });
    // Debug test to step through getEffectivePermissions
    it('should debug getEffectivePermissions step by step', function () {
        // Check if user is active
        expect(mockUser.isActive).toBe(true);
        // Check role permissions with mockUser.role
        var getRolePermissions = authService.getRolePermissions;
        var rolePermissions = getRolePermissions(mockUser.role);
        // Debug: Check what mockUser.role actually is
        expect(mockUser.role).toBe(security_types_1.UserRole.USER);
        expect(typeof mockUser.role).toBe('string');
        expect(mockUser.role).toBe('user');
        // Check if rolePermissions is empty
        if (rolePermissions.length === 0) {
            // This means the role lookup failed
            expect(rolePermissions).toContain(security_types_1.Permission.READ_CONTENT);
        }
        else {
            expect(rolePermissions).toContain(security_types_1.Permission.READ_CONTENT);
        }
    });
    // Direct test of getEffectivePermissions
    it('should return permissions from getEffectivePermissions directly', function () {
        // TODO: Fix authorization service getEffectivePermissions issue
        var permissions = authService.getEffectivePermissions(mockUser);
        expect(permissions.length).toBeGreaterThan(0);
        expect(permissions).toContain(security_types_1.Permission.READ_CONTENT);
    });
    // Debug test to check what's happening in getEffectivePermissions
    it('should debug getEffectivePermissions method', function () {
        // TODO: Fix authorization service getEffectivePermissions issue
        // Check if user is active
        expect(mockUser.isActive).toBe(true);
        // Check role permissions directly with UserRole.USER
        var getRolePermissions = authService.getRolePermissions;
        var rolePermissionsDirect = getRolePermissions(security_types_1.UserRole.USER);
        expect(rolePermissionsDirect.length).toBeGreaterThan(0);
        // Check role permissions with mockUser.role
        var rolePermissionsFromUser = getRolePermissions(mockUser.role);
        // Debug: Check if they're the same
        expect(mockUser.role).toBe(security_types_1.UserRole.USER);
        expect(rolePermissionsFromUser.length).toBe(rolePermissionsDirect.length);
        expect(rolePermissionsFromUser).toEqual(rolePermissionsDirect);
        // Check user permissions
        var userPermissions = mockUser.permissions || [];
        expect(userPermissions).toEqual([]);
        // Check combined permissions
        var allPermissions = __spreadArray(__spreadArray([], rolePermissionsFromUser, true), userPermissions, true);
        expect(allPermissions.length).toBeGreaterThan(0);
        // Check final result
        var finalPermissions = Array.from(new Set(allPermissions));
        expect(finalPermissions.length).toBeGreaterThan(0);
        // Now test the actual method
        var result = authService.getEffectivePermissions(mockUser);
        expect(result.length).toBeGreaterThan(0);
    });
    var mockInactiveUser = {
        id: 'inactive_1',
        email: 'inactive@example.com',
        username: 'inactive',
        password: 'hashedpassword',
        role: security_types_1.UserRole.USER,
        permissions: [security_types_1.Permission.READ_CONTENT],
        isActive: false,
        createdAt: new Date(),
        updatedAt: new Date(),
    };
    describe('hasPermission', function () {
        it('should return true if user has permission', function () {
            // TODO: Fix authorization service getEffectivePermissions issue
            var result = authService.hasPermission(mockUser, security_types_1.Permission.READ_CONTENT);
            expect(result.hasPermission).toBe(true);
            expect(result.reason).toBeUndefined();
        });
        it('should return false if user lacks permission', function () {
            var result = authService.hasPermission(mockUser, security_types_1.Permission.READ_USERS);
            expect(result.hasPermission).toBe(false);
            expect(result.reason).toContain('User lacks permission');
        });
        it('should return false for inactive user', function () {
            var result = authService.hasPermission(mockInactiveUser, security_types_1.Permission.READ_CONTENT);
            expect(result.hasPermission).toBe(false);
            expect(result.reason).toBe('User account is inactive');
        });
    });
    describe('hasAnyPermission', function () {
        it('should return true if user has any of the permissions', function () {
            // TODO: Fix authorization service getEffectivePermissions issue
            var result = authService.hasAnyPermission(mockUser, [
                security_types_1.Permission.READ_CONTENT,
                security_types_1.Permission.READ_USERS,
            ]);
            expect(result.hasPermission).toBe(true);
            expect(result.reason).toBeUndefined();
        });
        it('should return false if user has none of the permissions', function () {
            var result = authService.hasAnyPermission(mockUser, [
                security_types_1.Permission.READ_USERS,
                security_types_1.Permission.WRITE_USERS,
            ]);
            expect(result.hasPermission).toBe(false);
            expect(result.reason).toContain('User lacks any of the required permissions');
        });
    });
    describe('hasAllPermissions', function () {
        it('should return true if user has all permissions', function () {
            // TODO: Fix authorization service getEffectivePermissions issue
            var result = authService.hasAllPermissions(mockUser, [
                security_types_1.Permission.READ_CONTENT,
                security_types_1.Permission.WRITE_CONTENT,
            ]);
            expect(result.hasPermission).toBe(true);
            expect(result.reason).toBeUndefined();
        });
        it('should return false if user lacks some permissions', function () {
            var result = authService.hasAllPermissions(mockUser, [
                security_types_1.Permission.READ_CONTENT,
                security_types_1.Permission.READ_USERS,
            ]);
            expect(result.hasPermission).toBe(false);
            expect(result.reason).toContain('User lacks required permissions');
        });
    });
    describe('hasRole', function () {
        it('should return true if user has the role', function () {
            var result = authService.hasRole(mockUser, security_types_1.UserRole.USER);
            expect(result.hasPermission).toBe(true);
            expect(result.reason).toBeUndefined();
        });
        it('should return false if user has different role', function () {
            var result = authService.hasRole(mockUser, security_types_1.UserRole.ADMIN);
            expect(result.hasPermission).toBe(false);
            expect(result.reason).toContain('User role');
        });
    });
    describe('hasAnyRole', function () {
        it('should return true if user has any of the roles', function () {
            var result = authService.hasAnyRole(mockUser, [security_types_1.UserRole.USER, security_types_1.UserRole.ADMIN]);
            expect(result.hasPermission).toBe(true);
            expect(result.reason).toBeUndefined();
        });
        it('should return false if user has none of the roles', function () {
            var result = authService.hasAnyRole(mockUser, [security_types_1.UserRole.ADMIN, security_types_1.UserRole.MODERATOR]);
            expect(result.hasPermission).toBe(false);
            expect(result.reason).toContain('User role');
        });
    });
    describe('canAccessResource', function () {
        it('should allow admin users to access any resource', function () {
            var result = authService.canAccessResource({
                user: mockAdminUser,
                resource: 'users',
                action: 'delete',
            });
            expect(result.hasPermission).toBe(true);
        });
        it('should deny access to inactive users', function () {
            var result = authService.canAccessResource({
                user: mockInactiveUser,
                resource: 'content',
                action: 'read',
            });
            expect(result.hasPermission).toBe(false);
            expect(result.reason).toBe('User account is inactive');
        });
        it('should allow access based on permissions', function () {
            // TODO: Fix authorization service getEffectivePermissions issue
            var result = authService.canAccessResource({
                user: mockUser,
                resource: 'content',
                action: 'read',
            });
            expect(result.hasPermission).toBe(true);
        });
        it('should deny access if user lacks required permission', function () {
            var result = authService.canAccessResource({
                user: mockUser,
                resource: 'users',
                action: 'read',
            });
            expect(result.hasPermission).toBe(false);
            expect(result.reason).toContain('User lacks permission');
        });
    });
    describe('getEffectivePermissions', function () {
        it('should return empty array for inactive users', function () {
            var result = authService.getEffectivePermissions(mockInactiveUser);
            expect(result).toEqual([]);
        });
        it('should return combined role and user permissions', function () {
            // TODO: Fix this test - there's an issue with the getRolePermissions method
            var result = authService.getEffectivePermissions(mockUser);
            expect(result).toContain(security_types_1.Permission.READ_CONTENT);
            expect(result).toContain(security_types_1.Permission.WRITE_CONTENT);
        });
        it('should return all permissions for admin users', function () {
            // TODO: Fix this test - there's an issue with the getRolePermissions method
            var result = authService.getEffectivePermissions(mockAdminUser);
            expect(result).toContain(security_types_1.Permission.READ_USERS);
            expect(result).toContain(security_types_1.Permission.WRITE_USERS);
            expect(result).toContain(security_types_1.Permission.DELETE_USERS);
        });
    });
    describe('canPerformAction', function () {
        it('should allow action if user has permission', function () {
            // TODO: Fix authorization service getEffectivePermissions issue
            var result = authService.canPerformAction(mockUser, 'content', 'read');
            expect(result.hasPermission).toBe(true);
        });
        it('should deny action if user lacks permission', function () {
            var result = authService.canPerformAction(mockUser, 'users', 'delete');
            expect(result.hasPermission).toBe(false);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,