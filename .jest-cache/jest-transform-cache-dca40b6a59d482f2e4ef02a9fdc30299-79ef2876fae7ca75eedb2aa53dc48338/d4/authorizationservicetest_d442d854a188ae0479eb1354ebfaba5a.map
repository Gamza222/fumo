{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/security/lib/authorization/authorization.service.test.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/security/lib/authorization/authorization.service.test.ts"],"sourcesContent":["/**\n * Authorization Service Tests\n */\n\nimport { AuthorizationService } from './authorization.service';\nimport { Permission, User, UserRole } from '../../types/security.types';\n\ndescribe('AuthorizationService', () => {\n  let authService: AuthorizationService;\n\n  const mockUser: User = {\n    id: 'user_1',\n    email: 'test@example.com',\n    username: 'testuser',\n    password: 'hashedpassword',\n    role: UserRole.USER,\n    permissions: [], // User permissions are empty, role permissions will be used\n    isActive: true,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  };\n\n  const mockAdminUser: User = {\n    id: 'admin_1',\n    email: 'admin@example.com',\n    username: 'admin',\n    password: 'hashedpassword',\n    role: UserRole.ADMIN,\n    permissions: [],\n    isActive: true,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  };\n\n  beforeEach(() => {\n    // Use the singleton instance\n    authService = AuthorizationService.getInstance();\n  });\n\n  // Debug test to check enum values\n  it('should have correct enum values', () => {\n    expect(UserRole.USER).toBe('user');\n    expect(Permission.READ_CONTENT).toBe('read:content');\n    expect(Permission.WRITE_CONTENT).toBe('write:content');\n  });\n\n  // Debug test to check getEffectivePermissions\n  it('should return correct permissions for USER role', () => {\n    // Debug the issue\n    // console.log('mockUser:', mockUser);\n    // console.log('mockUser.isActive:', mockUser.isActive);\n    // console.log('mockUser.role:', mockUser.role);\n\n    const permissions = authService.getEffectivePermissions(mockUser);\n    // console.log('permissions:', permissions);\n\n    expect(permissions).toContain(Permission.READ_CONTENT);\n    expect(permissions).toContain(Permission.WRITE_CONTENT);\n    expect(permissions).not.toContain(Permission.READ_USERS);\n  });\n\n  // Debug test to check role permissions directly\n  it('should return correct role permissions', () => {\n    // Access the private method through any casting\n    const getRolePermissions = (authService as any).getRolePermissions;\n    const userPermissions = getRolePermissions(UserRole.USER);\n    expect(userPermissions).toContain(Permission.READ_CONTENT);\n    expect(userPermissions).toContain(Permission.WRITE_CONTENT);\n  });\n\n  // Debug test to check user object\n  it('should have correct user object', () => {\n    expect(mockUser.isActive).toBe(true);\n    expect(mockUser.role).toBe(UserRole.USER);\n    expect(mockUser.permissions).toEqual([]);\n  });\n\n  // Debug test to step through getEffectivePermissions\n  it('should debug getEffectivePermissions step by step', () => {\n    // Check if user is active\n    expect(mockUser.isActive).toBe(true);\n\n    // Check role permissions with mockUser.role\n    const getRolePermissions = (authService as any).getRolePermissions;\n    const rolePermissions = getRolePermissions(mockUser.role);\n\n    // Debug: Check what mockUser.role actually is\n    expect(mockUser.role).toBe(UserRole.USER);\n    expect(typeof mockUser.role).toBe('string');\n    expect(mockUser.role).toBe('user');\n\n    // Check if rolePermissions is empty\n    if (rolePermissions.length === 0) {\n      // This means the role lookup failed\n      expect(rolePermissions).toContain(Permission.READ_CONTENT);\n    } else {\n      expect(rolePermissions).toContain(Permission.READ_CONTENT);\n    }\n  });\n\n  // Direct test of getEffectivePermissions\n  it('should return permissions from getEffectivePermissions directly', () => {\n    // TODO: Fix authorization service getEffectivePermissions issue\n    const permissions = authService.getEffectivePermissions(mockUser);\n    expect(permissions.length).toBeGreaterThan(0);\n    expect(permissions).toContain(Permission.READ_CONTENT);\n  });\n\n  // Debug test to check what's happening in getEffectivePermissions\n  it('should debug getEffectivePermissions method', () => {\n    // TODO: Fix authorization service getEffectivePermissions issue\n    // Check if user is active\n    expect(mockUser.isActive).toBe(true);\n\n    // Check role permissions directly with UserRole.USER\n    const getRolePermissions = (authService as any).getRolePermissions;\n    const rolePermissionsDirect = getRolePermissions(UserRole.USER);\n    expect(rolePermissionsDirect.length).toBeGreaterThan(0);\n\n    // Check role permissions with mockUser.role\n    const rolePermissionsFromUser = getRolePermissions(mockUser.role);\n\n    // Debug: Check if they're the same\n    expect(mockUser.role).toBe(UserRole.USER);\n    expect(rolePermissionsFromUser.length).toBe(rolePermissionsDirect.length);\n    expect(rolePermissionsFromUser).toEqual(rolePermissionsDirect);\n\n    // Check user permissions\n    const userPermissions = mockUser.permissions || [];\n    expect(userPermissions).toEqual([]);\n\n    // Check combined permissions\n    const allPermissions = [...rolePermissionsFromUser, ...userPermissions];\n    expect(allPermissions.length).toBeGreaterThan(0);\n\n    // Check final result\n    const finalPermissions = Array.from(new Set(allPermissions));\n    expect(finalPermissions.length).toBeGreaterThan(0);\n\n    // Now test the actual method\n    const result = authService.getEffectivePermissions(mockUser);\n    expect(result.length).toBeGreaterThan(0);\n  });\n\n  const mockInactiveUser: User = {\n    id: 'inactive_1',\n    email: 'inactive@example.com',\n    username: 'inactive',\n    password: 'hashedpassword',\n    role: UserRole.USER,\n    permissions: [Permission.READ_CONTENT],\n    isActive: false,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  };\n\n  describe('hasPermission', () => {\n    it('should return true if user has permission', () => {\n      // TODO: Fix authorization service getEffectivePermissions issue\n      const result = authService.hasPermission(mockUser, Permission.READ_CONTENT);\n      expect(result.hasPermission).toBe(true);\n      expect(result.reason).toBeUndefined();\n    });\n\n    it('should return false if user lacks permission', () => {\n      const result = authService.hasPermission(mockUser, Permission.READ_USERS);\n      expect(result.hasPermission).toBe(false);\n      expect(result.reason).toContain('User lacks permission');\n    });\n\n    it('should return false for inactive user', () => {\n      const result = authService.hasPermission(mockInactiveUser, Permission.READ_CONTENT);\n      expect(result.hasPermission).toBe(false);\n      expect(result.reason).toBe('User account is inactive');\n    });\n  });\n\n  describe('hasAnyPermission', () => {\n    it('should return true if user has any of the permissions', () => {\n      // TODO: Fix authorization service getEffectivePermissions issue\n      const result = authService.hasAnyPermission(mockUser, [\n        Permission.READ_CONTENT,\n        Permission.READ_USERS,\n      ]);\n      expect(result.hasPermission).toBe(true);\n      expect(result.reason).toBeUndefined();\n    });\n\n    it('should return false if user has none of the permissions', () => {\n      const result = authService.hasAnyPermission(mockUser, [\n        Permission.READ_USERS,\n        Permission.WRITE_USERS,\n      ]);\n      expect(result.hasPermission).toBe(false);\n      expect(result.reason).toContain('User lacks any of the required permissions');\n    });\n  });\n\n  describe('hasAllPermissions', () => {\n    it('should return true if user has all permissions', () => {\n      // TODO: Fix authorization service getEffectivePermissions issue\n      const result = authService.hasAllPermissions(mockUser, [\n        Permission.READ_CONTENT,\n        Permission.WRITE_CONTENT,\n      ]);\n      expect(result.hasPermission).toBe(true);\n      expect(result.reason).toBeUndefined();\n    });\n\n    it('should return false if user lacks some permissions', () => {\n      const result = authService.hasAllPermissions(mockUser, [\n        Permission.READ_CONTENT,\n        Permission.READ_USERS,\n      ]);\n      expect(result.hasPermission).toBe(false);\n      expect(result.reason).toContain('User lacks required permissions');\n    });\n  });\n\n  describe('hasRole', () => {\n    it('should return true if user has the role', () => {\n      const result = authService.hasRole(mockUser, UserRole.USER);\n      expect(result.hasPermission).toBe(true);\n      expect(result.reason).toBeUndefined();\n    });\n\n    it('should return false if user has different role', () => {\n      const result = authService.hasRole(mockUser, UserRole.ADMIN);\n      expect(result.hasPermission).toBe(false);\n      expect(result.reason).toContain('User role');\n    });\n  });\n\n  describe('hasAnyRole', () => {\n    it('should return true if user has any of the roles', () => {\n      const result = authService.hasAnyRole(mockUser, [UserRole.USER, UserRole.ADMIN]);\n      expect(result.hasPermission).toBe(true);\n      expect(result.reason).toBeUndefined();\n    });\n\n    it('should return false if user has none of the roles', () => {\n      const result = authService.hasAnyRole(mockUser, [UserRole.ADMIN, UserRole.MODERATOR]);\n      expect(result.hasPermission).toBe(false);\n      expect(result.reason).toContain('User role');\n    });\n  });\n\n  describe('canAccessResource', () => {\n    it('should allow admin users to access any resource', () => {\n      const result = authService.canAccessResource({\n        user: mockAdminUser,\n        resource: 'users',\n        action: 'delete',\n      });\n      expect(result.hasPermission).toBe(true);\n    });\n\n    it('should deny access to inactive users', () => {\n      const result = authService.canAccessResource({\n        user: mockInactiveUser,\n        resource: 'content',\n        action: 'read',\n      });\n      expect(result.hasPermission).toBe(false);\n      expect(result.reason).toBe('User account is inactive');\n    });\n\n    it('should allow access based on permissions', () => {\n      // TODO: Fix authorization service getEffectivePermissions issue\n      const result = authService.canAccessResource({\n        user: mockUser,\n        resource: 'content',\n        action: 'read',\n      });\n      expect(result.hasPermission).toBe(true);\n    });\n\n    it('should deny access if user lacks required permission', () => {\n      const result = authService.canAccessResource({\n        user: mockUser,\n        resource: 'users',\n        action: 'read',\n      });\n      expect(result.hasPermission).toBe(false);\n      expect(result.reason).toContain('User lacks permission');\n    });\n  });\n\n  describe('getEffectivePermissions', () => {\n    it('should return empty array for inactive users', () => {\n      const result = authService.getEffectivePermissions(mockInactiveUser);\n      expect(result).toEqual([]);\n    });\n\n    it('should return combined role and user permissions', () => {\n      // TODO: Fix this test - there's an issue with the getRolePermissions method\n      const result = authService.getEffectivePermissions(mockUser);\n      expect(result).toContain(Permission.READ_CONTENT);\n      expect(result).toContain(Permission.WRITE_CONTENT);\n    });\n\n    it('should return all permissions for admin users', () => {\n      // TODO: Fix this test - there's an issue with the getRolePermissions method\n      const result = authService.getEffectivePermissions(mockAdminUser);\n      expect(result).toContain(Permission.READ_USERS);\n      expect(result).toContain(Permission.WRITE_USERS);\n      expect(result).toContain(Permission.DELETE_USERS);\n    });\n  });\n\n  describe('canPerformAction', () => {\n    it('should allow action if user has permission', () => {\n      // TODO: Fix authorization service getEffectivePermissions issue\n      const result = authService.canPerformAction(mockUser, 'content', 'read');\n      expect(result.hasPermission).toBe(true);\n    });\n\n    it('should deny action if user lacks permission', () => {\n      const result = authService.canPerformAction(mockUser, 'users', 'delete');\n      expect(result.hasPermission).toBe(false);\n    });\n  });\n});\n"],"version":3}