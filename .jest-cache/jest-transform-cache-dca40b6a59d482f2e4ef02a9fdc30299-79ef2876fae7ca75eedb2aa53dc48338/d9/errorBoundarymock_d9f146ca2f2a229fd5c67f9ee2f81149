bbd7d4ba753f6a002d1a768435b540aa
"use strict";

/**
 * ErrorBoundary.mock.ts
 *
 * Single Responsibility: Provides factory function for creating mock reset functions
 * specifically for ErrorBoundary testing.
 *
 * Usage:
 * - Use createMockResetFunction to generate mock reset functions for testing error boundary recovery
 * - This is the only mock currently used in the ErrorBoundary test suite
 */
/* istanbul ignore next */
function cov_1kvfux3k3v() {
  var path = "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/errors/lib/errorBoundary.mock.ts";
  var hash = "c1c7a42d9336db93eddb131bf5f23b11ce55e1d0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/errors/lib/errorBoundary.mock.ts",
    statementMap: {
      "0": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 62
        }
      },
      "1": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 13,
          column: 41
        }
      },
      "2": {
        start: {
          line: 27,
          column: 30
        },
        end: {
          line: 29,
          column: 1
        }
      },
      "3": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 28,
          column: 21
        }
      },
      "4": {
        start: {
          line: 30,
          column: 0
        },
        end: {
          line: 30,
          column: 58
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 27,
            column: 30
          },
          end: {
            line: 27,
            column: 31
          }
        },
        loc: {
          start: {
            line: 27,
            column: 42
          },
          end: {
            line: 29,
            column: 1
          }
        },
        line: 27
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    f: {
      "0": 0
    },
    b: {},
    inputSourceMap: {
      file: "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/errors/lib/errorBoundary.mock.ts",
      mappings: ";AAAA;;;;;;;;;GASG;;;AAMH,+EAA+E;AAC/E,0BAA0B;AAC1B,+EAA+E;AAE/E;;;;;;;;;GASG;AACI,IAAM,uBAAuB,GAAG;IACrC,OAAO,IAAI,CAAC,EAAE,EAAE,CAAC;AACnB,CAAC,CAAC;AAFW,QAAA,uBAAuB,2BAElC",
      names: [],
      sources: ["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/errors/lib/errorBoundary.mock.ts"],
      sourcesContent: ["/**\n * ErrorBoundary.mock.ts\n *\n * Single Responsibility: Provides factory function for creating mock reset functions\n * specifically for ErrorBoundary testing.\n *\n * Usage:\n * - Use createMockResetFunction to generate mock reset functions for testing error boundary recovery\n * - This is the only mock currently used in the ErrorBoundary test suite\n */\n\n// External dependencies\n// Reset handler function type\ntype ResetHandlerFunction = () => void;\n\n// ============================================================================\n// MOCK FUNCTION FACTORIES\n// ============================================================================\n\n/**\n * Creates a mock reset function with default implementation\n *\n * @usage\n * Use this when testing reset functionality, recovery flows,\n * or when you need to verify that reset functions are called correctly.\n *\n * PREFER real reset functions when testing integration scenarios.\n * Use this mock when you need to control the reset behavior or verify calls.\n */\nexport const createMockResetFunction = (): jest.MockedFunction<ResetHandlerFunction> => {\n  return jest.fn();\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c1c7a42d9336db93eddb131bf5f23b11ce55e1d0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1kvfux3k3v = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1kvfux3k3v();
cov_1kvfux3k3v().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1kvfux3k3v().s[1]++;
exports.createMockResetFunction = void 0;
// ============================================================================
// MOCK FUNCTION FACTORIES
// ============================================================================
/**
 * Creates a mock reset function with default implementation
 *
 * @usage
 * Use this when testing reset functionality, recovery flows,
 * or when you need to verify that reset functions are called correctly.
 *
 * PREFER real reset functions when testing integration scenarios.
 * Use this mock when you need to control the reset behavior or verify calls.
 */
/* istanbul ignore next */
cov_1kvfux3k3v().s[2]++;
var createMockResetFunction = function () {
  /* istanbul ignore next */
  cov_1kvfux3k3v().f[0]++;
  cov_1kvfux3k3v().s[3]++;
  return jest.fn();
};
/* istanbul ignore next */
cov_1kvfux3k3v().s[4]++;
exports.createMockResetFunction = createMockResetFunction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMWt2ZnV4M2szdiIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwicyIsImYiLCJiIiwiaW5wdXRTb3VyY2VNYXAiLCJmaWxlIiwibWFwcGluZ3MiLCJuYW1lcyIsInNvdXJjZXMiLCJzb3VyY2VzQ29udGVudCIsInZlcnNpb24iLCJfY292ZXJhZ2VTY2hlbWEiLCJjb3ZlcmFnZSIsImFjdHVhbENvdmVyYWdlIiwiY3JlYXRlTW9ja1Jlc2V0RnVuY3Rpb24iLCJqZXN0IiwiZm4iLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiL1VzZXJzL2dhbXphcmFtYXphbm92L0Rlc2t0b3AvZnVtby9zcmMvc2hhcmVkL3Rlc3RpbmcvbW9ja3MvZXJyb3JzL2xpYi9lcnJvckJvdW5kYXJ5Lm1vY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFcnJvckJvdW5kYXJ5Lm1vY2sudHNcbiAqXG4gKiBTaW5nbGUgUmVzcG9uc2liaWxpdHk6IFByb3ZpZGVzIGZhY3RvcnkgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIG1vY2sgcmVzZXQgZnVuY3Rpb25zXG4gKiBzcGVjaWZpY2FsbHkgZm9yIEVycm9yQm91bmRhcnkgdGVzdGluZy5cbiAqXG4gKiBVc2FnZTpcbiAqIC0gVXNlIGNyZWF0ZU1vY2tSZXNldEZ1bmN0aW9uIHRvIGdlbmVyYXRlIG1vY2sgcmVzZXQgZnVuY3Rpb25zIGZvciB0ZXN0aW5nIGVycm9yIGJvdW5kYXJ5IHJlY292ZXJ5XG4gKiAtIFRoaXMgaXMgdGhlIG9ubHkgbW9jayBjdXJyZW50bHkgdXNlZCBpbiB0aGUgRXJyb3JCb3VuZGFyeSB0ZXN0IHN1aXRlXG4gKi9cblxuLy8gRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4vLyBSZXNldCBoYW5kbGVyIGZ1bmN0aW9uIHR5cGVcbnR5cGUgUmVzZXRIYW5kbGVyRnVuY3Rpb24gPSAoKSA9PiB2b2lkO1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBNT0NLIEZVTkNUSU9OIEZBQ1RPUklFU1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vKipcbiAqIENyZWF0ZXMgYSBtb2NrIHJlc2V0IGZ1bmN0aW9uIHdpdGggZGVmYXVsdCBpbXBsZW1lbnRhdGlvblxuICpcbiAqIEB1c2FnZVxuICogVXNlIHRoaXMgd2hlbiB0ZXN0aW5nIHJlc2V0IGZ1bmN0aW9uYWxpdHksIHJlY292ZXJ5IGZsb3dzLFxuICogb3Igd2hlbiB5b3UgbmVlZCB0byB2ZXJpZnkgdGhhdCByZXNldCBmdW5jdGlvbnMgYXJlIGNhbGxlZCBjb3JyZWN0bHkuXG4gKlxuICogUFJFRkVSIHJlYWwgcmVzZXQgZnVuY3Rpb25zIHdoZW4gdGVzdGluZyBpbnRlZ3JhdGlvbiBzY2VuYXJpb3MuXG4gKiBVc2UgdGhpcyBtb2NrIHdoZW4geW91IG5lZWQgdG8gY29udHJvbCB0aGUgcmVzZXQgYmVoYXZpb3Igb3IgdmVyaWZ5IGNhbGxzLlxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlTW9ja1Jlc2V0RnVuY3Rpb24gPSAoKTogamVzdC5Nb2NrZWRGdW5jdGlvbjxSZXNldEhhbmRsZXJGdW5jdGlvbj4gPT4ge1xuICByZXR1cm4gamVzdC5mbigpO1xufTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7Ozs7OztBQUFBO0FBQUEsU0FBQUEsZUFBQTtFQUFBLElBQUFDLElBQUE7RUFBQSxJQUFBQyxJQUFBO0VBQUEsSUFBQUMsTUFBQSxPQUFBQyxRQUFBO0VBQUEsSUFBQUMsR0FBQTtFQUFBLElBQUFDLFlBQUE7SUFBQUwsSUFBQTtJQUFBTSxZQUFBO01BQUE7UUFBQUMsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtJQUFBO0lBQUFFLEtBQUE7TUFBQTtRQUFBQyxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7SUFBQTtJQUFBTyxTQUFBO0lBQUFDLENBQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO0lBQUE7SUFBQUMsQ0FBQTtNQUFBO0lBQUE7SUFBQUMsQ0FBQTtJQUFBQyxjQUFBO01BQUFDLElBQUE7TUFBQUMsUUFBQTtNQUFBQyxLQUFBO01BQUFDLE9BQUE7TUFBQUMsY0FBQTtNQUFBQyxPQUFBO0lBQUE7SUFBQUMsZUFBQTtJQUFBekIsSUFBQTtFQUFBO0VBQUEsSUFBQTBCLFFBQUEsR0FBQXpCLE1BQUEsQ0FBQUUsR0FBQSxNQUFBRixNQUFBLENBQUFFLEdBQUE7RUFBQSxLQUFBdUIsUUFBQSxDQUFBM0IsSUFBQSxLQUFBMkIsUUFBQSxDQUFBM0IsSUFBQSxFQUFBQyxJQUFBLEtBQUFBLElBQUE7SUFBQTBCLFFBQUEsQ0FBQTNCLElBQUEsSUFBQUssWUFBQTtFQUFBO0VBQUEsSUFBQXVCLGNBQUEsR0FBQUQsUUFBQSxDQUFBM0IsSUFBQTtFQUFBO0lBaUJBO0lBQUFELGNBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUE2QixjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBN0IsY0FBQTtBQUFBQSxjQUFBLEdBQUFpQixDQUFBOzs7Ozs7O0FBRkE7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7Ozs7QUFBQTtBQUFBakIsY0FBQSxHQUFBaUIsQ0FBQTtBQVVPLElBQU1hLHVCQUF1QixHQUFHLFNBQUFBLENBQUE7RUFBQTtFQUFBOUIsY0FBQSxHQUFBa0IsQ0FBQTtFQUFBbEIsY0FBQSxHQUFBaUIsQ0FBQTtFQUNyQyxPQUFPYyxJQUFJLENBQUNDLEVBQUUsRUFBRTtBQUNsQixDQUFDO0FBQUM7QUFBQWhDLGNBQUEsR0FBQWlCLENBQUE7QUFGV2dCLE9BQUEsQ0FBQUgsdUJBQXVCLEdBQUFBLHVCQUFBIiwiaWdub3JlTGlzdCI6W119