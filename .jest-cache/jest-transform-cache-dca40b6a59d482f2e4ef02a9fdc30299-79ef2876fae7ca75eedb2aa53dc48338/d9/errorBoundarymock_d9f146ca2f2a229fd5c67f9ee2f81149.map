{"version":3,"names":["cov_1kvfux3k3v","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","createMockResetFunction","jest","fn","exports"],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/errors/lib/errorBoundary.mock.ts"],"sourcesContent":["/**\n * ErrorBoundary.mock.ts\n *\n * Single Responsibility: Provides factory function for creating mock reset functions\n * specifically for ErrorBoundary testing.\n *\n * Usage:\n * - Use createMockResetFunction to generate mock reset functions for testing error boundary recovery\n * - This is the only mock currently used in the ErrorBoundary test suite\n */\n\n// External dependencies\n// Reset handler function type\ntype ResetHandlerFunction = () => void;\n\n// ============================================================================\n// MOCK FUNCTION FACTORIES\n// ============================================================================\n\n/**\n * Creates a mock reset function with default implementation\n *\n * @usage\n * Use this when testing reset functionality, recovery flows,\n * or when you need to verify that reset functions are called correctly.\n *\n * PREFER real reset functions when testing integration scenarios.\n * Use this mock when you need to control the reset behavior or verify calls.\n */\nexport const createMockResetFunction = (): jest.MockedFunction<ResetHandlerFunction> => {\n  return jest.fn();\n};\n"],"mappings":";;AAAA;;;;;;;;;;AAAA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;IAAA;IAAAE,KAAA;MAAA;QAAAC,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;IAAA;IAAAO,SAAA;IAAAC,CAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;IAAAC,CAAA;MAAA;IAAA;IAAAC,CAAA;IAAAC,cAAA;MAAAC,IAAA;MAAAC,QAAA;MAAAC,KAAA;MAAAC,OAAA;MAAAC,cAAA;MAAAC,OAAA;IAAA;IAAAC,eAAA;IAAAzB,IAAA;EAAA;EAAA,IAAA0B,QAAA,GAAAzB,MAAA,CAAAE,GAAA,MAAAF,MAAA,CAAAE,GAAA;EAAA,KAAAuB,QAAA,CAAA3B,IAAA,KAAA2B,QAAA,CAAA3B,IAAA,EAAAC,IAAA,KAAAA,IAAA;IAAA0B,QAAA,CAAA3B,IAAA,IAAAK,YAAA;EAAA;EAAA,IAAAuB,cAAA,GAAAD,QAAA,CAAA3B,IAAA;EAAA;IAiBA;IAAAD,cAAA,YAAAA,CAAA;MAAA,OAAA6B,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAA7B,cAAA;AAAAA,cAAA,GAAAiB,CAAA;;;;;;;AAFA;AACA;AACA;AAEA;;;;;;;;;;AAAA;AAAAjB,cAAA,GAAAiB,CAAA;AAUO,IAAMa,uBAAuB,GAAG,SAAAA,CAAA;EAAA;EAAA9B,cAAA,GAAAkB,CAAA;EAAAlB,cAAA,GAAAiB,CAAA;EACrC,OAAOc,IAAI,CAACC,EAAE,EAAE;AAClB,CAAC;AAAC;AAAAhC,cAAA,GAAAiB,CAAA;AAFWgB,OAAA,CAAAH,uBAAuB,GAAAA,uBAAA","ignoreList":[]}