02abf769d2ccfb540036468b31151c02
"use strict";
/**
 * Rate Limiting Service
 *
 * Handles rate limiting for API endpoints and user actions.
 * Universal rate limiting service for enterprise applications.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.rateLimiterService = exports.RateLimiterService = void 0;
var security_config_1 = require("../security-config");
var RateLimiterService = /** @class */ (function () {
    function RateLimiterService() {
        var _this = this;
        this.rateLimitStore = new Map();
        // Clean up expired entries every 5 minutes
        this.cleanupInterval = setInterval(function () {
            _this.cleanupExpiredEntries();
        }, 5 * 60 * 1000);
    }
    RateLimiterService.getInstance = function () {
        if (!RateLimiterService.instance) {
            RateLimiterService.instance = new RateLimiterService();
        }
        return RateLimiterService.instance;
    };
    /**
     * Check rate limit for a key
     */
    RateLimiterService.prototype.checkRateLimit = function (key, config) {
        var now = Date.now();
        var finalConfig = __assign(__assign({}, security_config_1.securityConfig.rateLimit), config);
        // Get or create rate limit entry
        var entry = this.rateLimitStore.get(key);
        if (!entry || entry.resetTime <= now) {
            // Create new entry or reset expired entry
            entry = {
                count: 0,
                resetTime: now + finalConfig.windowMs,
                blocked: false,
            };
            this.rateLimitStore.set(key, entry);
        }
        // Check if already blocked
        if (entry.blocked && entry.resetTime > now) {
            return {
                allowed: false,
                info: this.getRateLimitInfo(key),
            };
        }
        // Increment count
        entry.count++;
        // Check if limit exceeded
        if (entry.count > finalConfig.maxRequests) {
            entry.blocked = true;
            return {
                allowed: false,
                info: this.getRateLimitInfo(key),
            };
        }
        return {
            allowed: true,
            info: this.getRateLimitInfo(key),
        };
    };
    /**
     * Get rate limit information for a key
     */
    RateLimiterService.prototype.getRateLimitInfo = function (key) {
        var entry = this.rateLimitStore.get(key);
        var config = security_config_1.securityConfig.rateLimit;
        if (!entry) {
            return {
                limit: config.maxRequests,
                remaining: config.maxRequests,
                reset: new Date(Date.now() + config.windowMs),
            };
        }
        var now = Date.now();
        var remaining = Math.max(0, config.maxRequests - entry.count);
        var resetTime = entry.resetTime > now ? entry.resetTime : now + config.windowMs;
        return {
            limit: config.maxRequests,
            remaining: remaining,
            reset: new Date(resetTime),
            retryAfter: entry.blocked && entry.resetTime > now
                ? Math.ceil((entry.resetTime - now) / 1000)
                : undefined,
        };
    };
    /**
     * Reset rate limit for a key
     */
    RateLimiterService.prototype.resetRateLimit = function (key) {
        this.rateLimitStore.delete(key);
    };
    /**
     * Generate rate limit key from request
     */
    RateLimiterService.prototype.generateKey = function (identifier, endpoint, method) {
        var parts = [identifier];
        if (endpoint) {
            parts.push(endpoint);
        }
        if (method) {
            parts.push(method);
        }
        return parts.join(':');
    };
    /**
     * Get all active rate limits
     */
    RateLimiterService.prototype.getAllActiveRateLimits = function () {
        var activeLimits = [];
        var entries = Array.from(this.rateLimitStore.entries());
        for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
            var _a = entries_1[_i], key = _a[0], entry = _a[1];
            var info = this.getRateLimitInfo(key);
            if (entry.count > 0 || entry.blocked) {
                activeLimits.push({ key: key, info: info });
            }
        }
        return activeLimits;
    };
    /**
     * Get rate limit statistics
     */
    RateLimiterService.prototype.getStatistics = function () {
        var now = Date.now();
        var activeKeys = 0;
        var blockedKeys = 0;
        var totalRequests = 0;
        var entries = Array.from(this.rateLimitStore.entries());
        for (var _i = 0, entries_2 = entries; _i < entries_2.length; _i++) {
            var _a = entries_2[_i], entry = _a[1];
            if (entry.resetTime > now) {
                activeKeys++;
                totalRequests += entry.count;
                if (entry.blocked) {
                    blockedKeys++;
                }
            }
        }
        return {
            totalKeys: this.rateLimitStore.size,
            activeKeys: activeKeys,
            blockedKeys: blockedKeys,
            totalRequests: totalRequests,
        };
    };
    /**
     * Clean up expired entries
     */
    RateLimiterService.prototype.cleanupExpiredEntries = function () {
        var now = Date.now();
        for (var _i = 0, _a = Array.from(this.rateLimitStore.entries()); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], entry = _b[1];
            if (entry.resetTime <= now) {
                this.rateLimitStore.delete(key);
            }
        }
    };
    /**
     * Destroy the service and clean up resources
     */
    RateLimiterService.prototype.destroy = function () {
        if (this.cleanupInterval) {
            clearInterval(this.cleanupInterval);
        }
        this.rateLimitStore.clear();
    };
    return RateLimiterService;
}());
exports.RateLimiterService = RateLimiterService;
// Export singleton instance
exports.rateLimiterService = RateLimiterService.getInstance();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,