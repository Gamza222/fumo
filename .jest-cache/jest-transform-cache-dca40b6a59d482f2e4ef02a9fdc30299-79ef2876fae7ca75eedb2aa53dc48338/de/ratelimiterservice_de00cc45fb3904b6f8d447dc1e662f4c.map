{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/security/lib/rate-limiter/rate-limiter.service.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/security/lib/rate-limiter/rate-limiter.service.ts"],"sourcesContent":["/**\n * Rate Limiting Service\n *\n * Handles rate limiting for API endpoints and user actions.\n * Universal rate limiting service for enterprise applications.\n */\n\nimport { RateLimitConfig, RateLimitInfo } from '../../types/security.types';\nimport { securityConfig } from '../security-config';\n\n// ============================================================================\n// RATE LIMITER SERVICE\n// ============================================================================\n\ninterface RateLimitEntry {\n  count: number;\n  resetTime: number;\n  blocked: boolean;\n}\n\nexport class RateLimiterService {\n  private static instance: RateLimiterService;\n  private rateLimitStore: Map<string, RateLimitEntry> = new Map();\n  private cleanupInterval: NodeJS.Timeout;\n\n  public constructor() {\n    // Clean up expired entries every 5 minutes\n    this.cleanupInterval = setInterval(\n      () => {\n        this.cleanupExpiredEntries();\n      },\n      5 * 60 * 1000\n    );\n  }\n\n  public static getInstance(): RateLimiterService {\n    if (!RateLimiterService.instance) {\n      RateLimiterService.instance = new RateLimiterService();\n    }\n    return RateLimiterService.instance;\n  }\n\n  /**\n   * Check rate limit for a key\n   */\n  public checkRateLimit(\n    key: string,\n    config?: Partial<RateLimitConfig>\n  ): { allowed: boolean; info: RateLimitInfo } {\n    const now = Date.now();\n    const finalConfig = { ...securityConfig.rateLimit, ...config };\n\n    // Get or create rate limit entry\n    let entry = this.rateLimitStore.get(key);\n\n    if (!entry || entry.resetTime <= now) {\n      // Create new entry or reset expired entry\n      entry = {\n        count: 0,\n        resetTime: now + finalConfig.windowMs,\n        blocked: false,\n      };\n      this.rateLimitStore.set(key, entry);\n    }\n\n    // Check if already blocked\n    if (entry.blocked && entry.resetTime > now) {\n      return {\n        allowed: false,\n        info: this.getRateLimitInfo(key),\n      };\n    }\n\n    // Increment count\n    entry.count++;\n\n    // Check if limit exceeded\n    if (entry.count > finalConfig.maxRequests) {\n      entry.blocked = true;\n      return {\n        allowed: false,\n        info: this.getRateLimitInfo(key),\n      };\n    }\n\n    return {\n      allowed: true,\n      info: this.getRateLimitInfo(key),\n    };\n  }\n\n  /**\n   * Get rate limit information for a key\n   */\n  public getRateLimitInfo(key: string): RateLimitInfo {\n    const entry = this.rateLimitStore.get(key);\n    const config = securityConfig.rateLimit;\n\n    if (!entry) {\n      return {\n        limit: config.maxRequests,\n        remaining: config.maxRequests,\n        reset: new Date(Date.now() + config.windowMs),\n      };\n    }\n\n    const now = Date.now();\n    const remaining = Math.max(0, config.maxRequests - entry.count);\n    const resetTime = entry.resetTime > now ? entry.resetTime : now + config.windowMs;\n\n    return {\n      limit: config.maxRequests,\n      remaining,\n      reset: new Date(resetTime),\n      retryAfter:\n        entry.blocked && entry.resetTime > now\n          ? Math.ceil((entry.resetTime - now) / 1000)\n          : undefined,\n    };\n  }\n\n  /**\n   * Reset rate limit for a key\n   */\n  public resetRateLimit(key: string): void {\n    this.rateLimitStore.delete(key);\n  }\n\n  /**\n   * Generate rate limit key from request\n   */\n  public generateKey(identifier: string, endpoint?: string, method?: string): string {\n    const parts = [identifier];\n\n    if (endpoint) {\n      parts.push(endpoint);\n    }\n\n    if (method) {\n      parts.push(method);\n    }\n\n    return parts.join(':');\n  }\n\n  /**\n   * Get all active rate limits\n   */\n  public getAllActiveRateLimits(): Array<{ key: string; info: RateLimitInfo }> {\n    const activeLimits: Array<{ key: string; info: RateLimitInfo }> = [];\n    const entries = Array.from(this.rateLimitStore.entries());\n\n    for (const [key, entry] of entries) {\n      const info = this.getRateLimitInfo(key);\n      if (entry.count > 0 || entry.blocked) {\n        activeLimits.push({ key, info });\n      }\n    }\n\n    return activeLimits;\n  }\n\n  /**\n   * Get rate limit statistics\n   */\n  public getStatistics(): {\n    totalKeys: number;\n    activeKeys: number;\n    blockedKeys: number;\n    totalRequests: number;\n  } {\n    const now = Date.now();\n    let activeKeys = 0;\n    let blockedKeys = 0;\n    let totalRequests = 0;\n\n    const entries = Array.from(this.rateLimitStore.entries());\n    for (const [, entry] of entries) {\n      if (entry.resetTime > now) {\n        activeKeys++;\n        totalRequests += entry.count;\n\n        if (entry.blocked) {\n          blockedKeys++;\n        }\n      }\n    }\n\n    return {\n      totalKeys: this.rateLimitStore.size,\n      activeKeys,\n      blockedKeys,\n      totalRequests,\n    };\n  }\n\n  /**\n   * Clean up expired entries\n   */\n  private cleanupExpiredEntries(): void {\n    const now = Date.now();\n\n    for (const [key, entry] of Array.from(this.rateLimitStore.entries())) {\n      if (entry.resetTime <= now) {\n        this.rateLimitStore.delete(key);\n      }\n    }\n  }\n\n  /**\n   * Destroy the service and clean up resources\n   */\n  public destroy(): void {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n    }\n    this.rateLimitStore.clear();\n  }\n}\n\n// Export singleton instance\nexport const rateLimiterService = RateLimiterService.getInstance();\n"],"version":3}