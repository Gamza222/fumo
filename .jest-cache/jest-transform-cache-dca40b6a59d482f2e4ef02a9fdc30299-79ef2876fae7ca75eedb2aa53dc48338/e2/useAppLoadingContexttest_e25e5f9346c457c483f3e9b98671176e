e0c375e8fa8c3f90a8db94f5233d48b9
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
/**
 * useAppLoadingContext Hook Tests
 */
var react_1 = require("@testing-library/react");
var react_2 = __importDefault(require("react"));
var useAppLoadingContext_1 = require("./useAppLoadingContext");
var AppLoadingProvider_1 = require("../../ui/AppLoadingProvider");
// ============================================================================
// TEST UTILITIES
// ============================================================================
var mockContextValue = {
    isInitialLoading: true,
    progress: 50,
    currentStep: "Loading",
    steps: [],
    isSuspenseLoading: false,
    forceComplete: jest.fn(),
    restart: jest.fn(),
    setSuspenseLoading: jest.fn(),
};
var ProviderWrapper = function (_a) {
    var children = _a.children;
    return ((0, jsx_runtime_1.jsx)(AppLoadingProvider_1.AppLoadingContext.Provider, { value: mockContextValue, children: children }));
};
var NoProviderWrapper = function (_a) {
    var children = _a.children;
    return ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: children }));
};
// ============================================================================
// TESTS
// ============================================================================
describe("useAppLoadingContext", function () {
    beforeEach(function () {
        jest.clearAllMocks();
    });
    it("should return context value when used within provider", function () {
        var result = (0, react_1.renderHook)(function () { return (0, useAppLoadingContext_1.useAppLoadingContext)(); }, {
            wrapper: ProviderWrapper,
        }).result;
        expect(result.current).toBe(mockContextValue);
        expect(result.current.isInitialLoading).toBe(true);
        expect(result.current.progress).toBe(50);
    });
    it("should throw error when used outside provider", function () {
        var consoleSpy = jest
            .spyOn(console, "error")
            .mockImplementation(function () { });
        expect(function () {
            (0, react_1.renderHook)(function () { return (0, useAppLoadingContext_1.useAppLoadingContext)(); }, {
                wrapper: NoProviderWrapper,
            });
        }).toThrow("useAppLoadingContext must be used within an AppLoadingProvider");
        consoleSpy.mockRestore();
    });
    it("should throw error when context is null", function () {
        var consoleSpy = jest
            .spyOn(console, "error")
            .mockImplementation(function () { });
        var NullProviderWrapper = function (_a) {
            var children = _a.children;
            return ((0, jsx_runtime_1.jsx)(AppLoadingProvider_1.AppLoadingContext.Provider, { value: null, children: children }));
        };
        expect(function () {
            (0, react_1.renderHook)(function () { return (0, useAppLoadingContext_1.useAppLoadingContext)(); }, {
                wrapper: NullProviderWrapper,
            });
        }).toThrow("useAppLoadingContext must be used within an AppLoadingProvider");
        consoleSpy.mockRestore();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2dhbXphcmFtYXphbm92L0Rlc2t0b3AvZnVtby9zcmMvaW5mcmFzdHJ1Y3R1cmUvcHJvdmlkZXJzL2FwcC1sb2FkaW5nL2hvb2tzL3VzZUFwcExvYWRpbmdDb250ZXh0L3VzZUFwcExvYWRpbmdDb250ZXh0LnRlc3QudHN4IiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztHQUVHO0FBRUgsZ0RBQW9EO0FBQ3BELGdEQUEwQjtBQUMxQiwrREFBOEQ7QUFDOUQsa0VBQWdFO0FBR2hFLCtFQUErRTtBQUMvRSxpQkFBaUI7QUFDakIsK0VBQStFO0FBRS9FLElBQU0sZ0JBQWdCLEdBQXdCO0lBQzVDLGdCQUFnQixFQUFFLElBQUk7SUFDdEIsUUFBUSxFQUFFLEVBQUU7SUFDWixXQUFXLEVBQUUsU0FBUztJQUN0QixLQUFLLEVBQUUsRUFBRTtJQUNULGlCQUFpQixFQUFFLEtBQUs7SUFDeEIsYUFBYSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7SUFDeEIsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7SUFDbEIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtDQUM5QixDQUFDO0FBRUYsSUFBTSxlQUFlLEdBQUcsVUFBQyxFQUEyQztRQUF6QyxRQUFRLGNBQUE7SUFBc0MsT0FBQSxDQUN2RSx1QkFBQyxzQ0FBaUIsQ0FBQyxRQUFRLElBQUMsS0FBSyxFQUFFLGdCQUFnQixZQUNoRCxRQUFRLEdBQ2tCLENBQzlCO0FBSndFLENBSXhFLENBQUM7QUFFRixJQUFNLGlCQUFpQixHQUFHLFVBQUMsRUFBMkM7UUFBekMsUUFBUSxjQUFBO0lBQXNDLE9BQUEsQ0FDekUsMkRBQUcsUUFBUSxHQUFJLENBQ2hCO0FBRjBFLENBRTFFLENBQUM7QUFFRiwrRUFBK0U7QUFDL0UsUUFBUTtBQUNSLCtFQUErRTtBQUUvRSxRQUFRLENBQUMsc0JBQXNCLEVBQUU7SUFDL0IsVUFBVSxDQUFDO1FBQ1QsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHVEQUF1RCxFQUFFO1FBQ2xELElBQUEsTUFBTSxHQUFLLElBQUEsa0JBQVUsRUFBQyxjQUFNLE9BQUEsSUFBQSwyQ0FBb0IsR0FBRSxFQUF0QixDQUFzQixFQUFFO1lBQzFELE9BQU8sRUFBRSxlQUFlO1NBQ3pCLENBQUMsT0FGWSxDQUVYO1FBRUgsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUM5QyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuRCxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDM0MsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsK0NBQStDLEVBQUU7UUFDbEQsSUFBTSxVQUFVLEdBQUcsSUFBSTthQUNwQixLQUFLLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQzthQUN2QixrQkFBa0IsQ0FBQyxjQUFPLENBQUMsQ0FBQyxDQUFDO1FBRWhDLE1BQU0sQ0FBQztZQUNMLElBQUEsa0JBQVUsRUFBQyxjQUFNLE9BQUEsSUFBQSwyQ0FBb0IsR0FBRSxFQUF0QixDQUFzQixFQUFFO2dCQUN2QyxPQUFPLEVBQUUsaUJBQWlCO2FBQzNCLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FDUixnRUFBZ0UsQ0FDakUsQ0FBQztRQUVGLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMzQixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx5Q0FBeUMsRUFBRTtRQUM1QyxJQUFNLFVBQVUsR0FBRyxJQUFJO2FBQ3BCLEtBQUssQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDO2FBQ3ZCLGtCQUFrQixDQUFDLGNBQU8sQ0FBQyxDQUFDLENBQUM7UUFFaEMsSUFBTSxtQkFBbUIsR0FBRyxVQUFDLEVBSTVCO2dCQUhDLFFBQVEsY0FBQTtZQUdKLE9BQUEsQ0FDSix1QkFBQyxzQ0FBaUIsQ0FBQyxRQUFRLElBQUMsS0FBSyxFQUFFLElBQUksWUFDcEMsUUFBUSxHQUNrQixDQUM5QjtRQUpLLENBSUwsQ0FBQztRQUVGLE1BQU0sQ0FBQztZQUNMLElBQUEsa0JBQVUsRUFBQyxjQUFNLE9BQUEsSUFBQSwyQ0FBb0IsR0FBRSxFQUF0QixDQUFzQixFQUFFO2dCQUN2QyxPQUFPLEVBQUUsbUJBQW1CO2FBQzdCLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FDUixnRUFBZ0UsQ0FDakUsQ0FBQztRQUVGLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMzQixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9nYW16YXJhbWF6YW5vdi9EZXNrdG9wL2Z1bW8vc3JjL2luZnJhc3RydWN0dXJlL3Byb3ZpZGVycy9hcHAtbG9hZGluZy9ob29rcy91c2VBcHBMb2FkaW5nQ29udGV4dC91c2VBcHBMb2FkaW5nQ29udGV4dC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIHVzZUFwcExvYWRpbmdDb250ZXh0IEhvb2sgVGVzdHNcbiAqL1xuXG5pbXBvcnQgeyByZW5kZXJIb29rIH0gZnJvbSBcIkB0ZXN0aW5nLWxpYnJhcnkvcmVhY3RcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZUFwcExvYWRpbmdDb250ZXh0IH0gZnJvbSBcIi4vdXNlQXBwTG9hZGluZ0NvbnRleHRcIjtcbmltcG9ydCB7IEFwcExvYWRpbmdDb250ZXh0IH0gZnJvbSBcIi4uLy4uL3VpL0FwcExvYWRpbmdQcm92aWRlclwiO1xuaW1wb3J0IHsgVXNlQXBwTG9hZGluZ1JldHVybiB9IGZyb20gXCIuLi8uLi9tb2RlbC90eXBlcy90eXBlc1wiO1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBURVNUIFVUSUxJVElFU1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5jb25zdCBtb2NrQ29udGV4dFZhbHVlOiBVc2VBcHBMb2FkaW5nUmV0dXJuID0ge1xuICBpc0luaXRpYWxMb2FkaW5nOiB0cnVlLFxuICBwcm9ncmVzczogNTAsXG4gIGN1cnJlbnRTdGVwOiBcIkxvYWRpbmdcIixcbiAgc3RlcHM6IFtdLFxuICBpc1N1c3BlbnNlTG9hZGluZzogZmFsc2UsXG4gIGZvcmNlQ29tcGxldGU6IGplc3QuZm4oKSxcbiAgcmVzdGFydDogamVzdC5mbigpLFxuICBzZXRTdXNwZW5zZUxvYWRpbmc6IGplc3QuZm4oKSxcbn07XG5cbmNvbnN0IFByb3ZpZGVyV3JhcHBlciA9ICh7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZSB9KSA9PiAoXG4gIDxBcHBMb2FkaW5nQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17bW9ja0NvbnRleHRWYWx1ZX0+XG4gICAge2NoaWxkcmVufVxuICA8L0FwcExvYWRpbmdDb250ZXh0LlByb3ZpZGVyPlxuKTtcblxuY29uc3QgTm9Qcm92aWRlcldyYXBwZXIgPSAoeyBjaGlsZHJlbiB9OiB7IGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUgfSkgPT4gKFxuICA8PntjaGlsZHJlbn08Lz5cbik7XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIFRFU1RTXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmRlc2NyaWJlKFwidXNlQXBwTG9hZGluZ0NvbnRleHRcIiwgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgcmV0dXJuIGNvbnRleHQgdmFsdWUgd2hlbiB1c2VkIHdpdGhpbiBwcm92aWRlclwiLCAoKSA9PiB7XG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQXBwTG9hZGluZ0NvbnRleHQoKSwge1xuICAgICAgd3JhcHBlcjogUHJvdmlkZXJXcmFwcGVyLFxuICAgIH0pO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50KS50b0JlKG1vY2tDb250ZXh0VmFsdWUpO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0luaXRpYWxMb2FkaW5nKS50b0JlKHRydWUpO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5wcm9ncmVzcykudG9CZSg1MCk7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIHRocm93IGVycm9yIHdoZW4gdXNlZCBvdXRzaWRlIHByb3ZpZGVyXCIsICgpID0+IHtcbiAgICBjb25zdCBjb25zb2xlU3B5ID0gamVzdFxuICAgICAgLnNweU9uKGNvbnNvbGUsIFwiZXJyb3JcIilcbiAgICAgIC5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge30pO1xuXG4gICAgZXhwZWN0KCgpID0+IHtcbiAgICAgIHJlbmRlckhvb2soKCkgPT4gdXNlQXBwTG9hZGluZ0NvbnRleHQoKSwge1xuICAgICAgICB3cmFwcGVyOiBOb1Byb3ZpZGVyV3JhcHBlcixcbiAgICAgIH0pO1xuICAgIH0pLnRvVGhyb3coXG4gICAgICBcInVzZUFwcExvYWRpbmdDb250ZXh0IG11c3QgYmUgdXNlZCB3aXRoaW4gYW4gQXBwTG9hZGluZ1Byb3ZpZGVyXCJcbiAgICApO1xuXG4gICAgY29uc29sZVNweS5tb2NrUmVzdG9yZSgpO1xuICB9KTtcblxuICBpdChcInNob3VsZCB0aHJvdyBlcnJvciB3aGVuIGNvbnRleHQgaXMgbnVsbFwiLCAoKSA9PiB7XG4gICAgY29uc3QgY29uc29sZVNweSA9IGplc3RcbiAgICAgIC5zcHlPbihjb25zb2xlLCBcImVycm9yXCIpXG4gICAgICAubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHt9KTtcblxuICAgIGNvbnN0IE51bGxQcm92aWRlcldyYXBwZXIgPSAoe1xuICAgICAgY2hpbGRyZW4sXG4gICAgfToge1xuICAgICAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTtcbiAgICB9KSA9PiAoXG4gICAgICA8QXBwTG9hZGluZ0NvbnRleHQuUHJvdmlkZXIgdmFsdWU9e251bGx9PlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L0FwcExvYWRpbmdDb250ZXh0LlByb3ZpZGVyPlxuICAgICk7XG5cbiAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgcmVuZGVySG9vaygoKSA9PiB1c2VBcHBMb2FkaW5nQ29udGV4dCgpLCB7XG4gICAgICAgIHdyYXBwZXI6IE51bGxQcm92aWRlcldyYXBwZXIsXG4gICAgICB9KTtcbiAgICB9KS50b1Rocm93KFxuICAgICAgXCJ1c2VBcHBMb2FkaW5nQ29udGV4dCBtdXN0IGJlIHVzZWQgd2l0aGluIGFuIEFwcExvYWRpbmdQcm92aWRlclwiXG4gICAgKTtcblxuICAgIGNvbnNvbGVTcHkubW9ja1Jlc3RvcmUoKTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==