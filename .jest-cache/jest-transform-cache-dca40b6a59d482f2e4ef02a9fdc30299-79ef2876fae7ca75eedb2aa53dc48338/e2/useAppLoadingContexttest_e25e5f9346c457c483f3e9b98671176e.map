{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/providers/app-loading/hooks/useAppLoadingContext/useAppLoadingContext.test.tsx","mappings":";;;;;;AAAA;;GAEG;AAEH,gDAAoD;AACpD,gDAA0B;AAC1B,+DAA8D;AAC9D,kEAAgE;AAGhE,+EAA+E;AAC/E,iBAAiB;AACjB,+EAA+E;AAE/E,IAAM,gBAAgB,GAAwB;IAC5C,gBAAgB,EAAE,IAAI;IACtB,QAAQ,EAAE,EAAE;IACZ,WAAW,EAAE,SAAS;IACtB,KAAK,EAAE,EAAE;IACT,iBAAiB,EAAE,KAAK;IACxB,aAAa,EAAE,IAAI,CAAC,EAAE,EAAE;IACxB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;IAClB,kBAAkB,EAAE,IAAI,CAAC,EAAE,EAAE;CAC9B,CAAC;AAEF,IAAM,eAAe,GAAG,UAAC,EAA2C;QAAzC,QAAQ,cAAA;IAAsC,OAAA,CACvE,uBAAC,sCAAiB,CAAC,QAAQ,IAAC,KAAK,EAAE,gBAAgB,YAChD,QAAQ,GACkB,CAC9B;AAJwE,CAIxE,CAAC;AAEF,IAAM,iBAAiB,GAAG,UAAC,EAA2C;QAAzC,QAAQ,cAAA;IAAsC,OAAA,CACzE,2DAAG,QAAQ,GAAI,CAChB;AAF0E,CAE1E,CAAC;AAEF,+EAA+E;AAC/E,QAAQ;AACR,+EAA+E;AAE/E,QAAQ,CAAC,sBAAsB,EAAE;IAC/B,UAAU,CAAC;QACT,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uDAAuD,EAAE;QAClD,IAAA,MAAM,GAAK,IAAA,kBAAU,EAAC,cAAM,OAAA,IAAA,2CAAoB,GAAE,EAAtB,CAAsB,EAAE;YAC1D,OAAO,EAAE,eAAe;SACzB,CAAC,OAFY,CAEX;QAEH,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAC9C,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE;QAClD,IAAM,UAAU,GAAG,IAAI;aACpB,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC;aACvB,kBAAkB,CAAC,cAAO,CAAC,CAAC,CAAC;QAEhC,MAAM,CAAC;YACL,IAAA,kBAAU,EAAC,cAAM,OAAA,IAAA,2CAAoB,GAAE,EAAtB,CAAsB,EAAE;gBACvC,OAAO,EAAE,iBAAiB;aAC3B,CAAC,CAAC;QACL,CAAC,CAAC,CAAC,OAAO,CACR,gEAAgE,CACjE,CAAC;QAEF,UAAU,CAAC,WAAW,EAAE,CAAC;IAC3B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE;QAC5C,IAAM,UAAU,GAAG,IAAI;aACpB,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC;aACvB,kBAAkB,CAAC,cAAO,CAAC,CAAC,CAAC;QAEhC,IAAM,mBAAmB,GAAG,UAAC,EAI5B;gBAHC,QAAQ,cAAA;YAGJ,OAAA,CACJ,uBAAC,sCAAiB,CAAC,QAAQ,IAAC,KAAK,EAAE,IAAI,YACpC,QAAQ,GACkB,CAC9B;QAJK,CAIL,CAAC;QAEF,MAAM,CAAC;YACL,IAAA,kBAAU,EAAC,cAAM,OAAA,IAAA,2CAAoB,GAAE,EAAtB,CAAsB,EAAE;gBACvC,OAAO,EAAE,mBAAmB;aAC7B,CAAC,CAAC;QACL,CAAC,CAAC,CAAC,OAAO,CACR,gEAAgE,CACjE,CAAC;QAEF,UAAU,CAAC,WAAW,EAAE,CAAC;IAC3B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/providers/app-loading/hooks/useAppLoadingContext/useAppLoadingContext.test.tsx"],"sourcesContent":["/**\n * useAppLoadingContext Hook Tests\n */\n\nimport { renderHook } from \"@testing-library/react\";\nimport React from \"react\";\nimport { useAppLoadingContext } from \"./useAppLoadingContext\";\nimport { AppLoadingContext } from \"../../ui/AppLoadingProvider\";\nimport { UseAppLoadingReturn } from \"../../model/types/types\";\n\n// ============================================================================\n// TEST UTILITIES\n// ============================================================================\n\nconst mockContextValue: UseAppLoadingReturn = {\n  isInitialLoading: true,\n  progress: 50,\n  currentStep: \"Loading\",\n  steps: [],\n  isSuspenseLoading: false,\n  forceComplete: jest.fn(),\n  restart: jest.fn(),\n  setSuspenseLoading: jest.fn(),\n};\n\nconst ProviderWrapper = ({ children }: { children: React.ReactNode }) => (\n  <AppLoadingContext.Provider value={mockContextValue}>\n    {children}\n  </AppLoadingContext.Provider>\n);\n\nconst NoProviderWrapper = ({ children }: { children: React.ReactNode }) => (\n  <>{children}</>\n);\n\n// ============================================================================\n// TESTS\n// ============================================================================\n\ndescribe(\"useAppLoadingContext\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it(\"should return context value when used within provider\", () => {\n    const { result } = renderHook(() => useAppLoadingContext(), {\n      wrapper: ProviderWrapper,\n    });\n\n    expect(result.current).toBe(mockContextValue);\n    expect(result.current.isInitialLoading).toBe(true);\n    expect(result.current.progress).toBe(50);\n  });\n\n  it(\"should throw error when used outside provider\", () => {\n    const consoleSpy = jest\n      .spyOn(console, \"error\")\n      .mockImplementation(() => {});\n\n    expect(() => {\n      renderHook(() => useAppLoadingContext(), {\n        wrapper: NoProviderWrapper,\n      });\n    }).toThrow(\n      \"useAppLoadingContext must be used within an AppLoadingProvider\"\n    );\n\n    consoleSpy.mockRestore();\n  });\n\n  it(\"should throw error when context is null\", () => {\n    const consoleSpy = jest\n      .spyOn(console, \"error\")\n      .mockImplementation(() => {});\n\n    const NullProviderWrapper = ({\n      children,\n    }: {\n      children: React.ReactNode;\n    }) => (\n      <AppLoadingContext.Provider value={null}>\n        {children}\n      </AppLoadingContext.Provider>\n    );\n\n    expect(() => {\n      renderHook(() => useAppLoadingContext(), {\n        wrapper: NullProviderWrapper,\n      });\n    }).toThrow(\n      \"useAppLoadingContext must be used within an AppLoadingProvider\"\n    );\n\n    consoleSpy.mockRestore();\n  });\n});\n"],"version":3}