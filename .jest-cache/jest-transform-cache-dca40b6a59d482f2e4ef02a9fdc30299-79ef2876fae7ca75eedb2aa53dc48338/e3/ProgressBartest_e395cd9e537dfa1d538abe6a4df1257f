1ec76b3e7390c052c1913b2e975eecee
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
/**
 * ProgressBar Component Tests
 */
var react_1 = require("@testing-library/react");
var ProgressBar_1 = require("./ProgressBar");
// ============================================================================
// TESTS
// ============================================================================
describe('ProgressBar', function () {
    it('should render with default props', function () {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 50 }));
        expect(react_1.screen.getByText('50%')).toBeInTheDocument();
    });
    it('should render with custom className', function () {
        var container = (0, react_1.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 25, className: "custom-class" })).container;
        var progressBar = container.firstChild;
        expect(progressBar).toHaveClass('custom-class');
    });
    it('should render progress bar with correct width', function () {
        var container = (0, react_1.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 75 })).container;
        // Find the div with inline style (the bar)
        var barElement = container.querySelector('div[style*="width: 75%"]');
        expect(barElement).toBeInTheDocument();
    });
    it('should show percentage when showPercentage is true', function () {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 33, showPercentage: true }));
        expect(react_1.screen.getByText('33%')).toBeInTheDocument();
    });
    it('should hide percentage when showPercentage is false', function () {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 67, showPercentage: false }));
        expect(react_1.screen.queryByText('67%')).not.toBeInTheDocument();
    });
    it('should round progress to nearest integer', function () {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 33.7 }));
        expect(react_1.screen.getByText('34%')).toBeInTheDocument();
    });
    it('should handle edge case of 0 progress', function () {
        var container = (0, react_1.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 0 })).container;
        expect(react_1.screen.getByText('0%')).toBeInTheDocument();
        var barElement = container.querySelector('div[style*="width: 0%"]');
        expect(barElement).toBeInTheDocument();
    });
    it('should handle edge case of 100 progress', function () {
        var container = (0, react_1.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 100 })).container;
        expect(react_1.screen.getByText('100%')).toBeInTheDocument();
        var barElement = container.querySelector('div[style*="width: 100%"]');
        expect(barElement).toBeInTheDocument();
    });
    it('should show message when provided', function () {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 50, message: "Loading files..." }));
        expect(react_1.screen.getByText('Loading files...')).toBeInTheDocument();
    });
    it('should not show message when not provided', function () {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 50 }));
        expect(react_1.screen.getByText('50%')).toBeInTheDocument();
        expect(react_1.screen.queryByText('Loading files...')).not.toBeInTheDocument();
    });
    it('should show both percentage and message', function () {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 75, message: "Almost done...", showPercentage: true }));
        expect(react_1.screen.getByText('75%')).toBeInTheDocument();
        expect(react_1.screen.getByText('Almost done...')).toBeInTheDocument();
    });
    it('should show actual progress above 100 (no clamping in display)', function () {
        var container = (0, react_1.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 150 })).container;
        expect(react_1.screen.getByText('150%')).toBeInTheDocument();
        var barElement = container.querySelector('div[style*="width: 100%"]');
        expect(barElement).toBeInTheDocument(); // Width is clamped
    });
    it('should show actual progress below 0 (no clamping in display)', function () {
        var container = (0, react_1.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: -25 })).container;
        expect(react_1.screen.getByText('-25%')).toBeInTheDocument();
        var barElement = container.querySelector('div[style*="width: 0%"]');
        expect(barElement).toBeInTheDocument(); // Width is clamped
    });
    it('should render with correct DOM structure', function () {
        var container = (0, react_1.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 50, message: "Test message" })).container;
        // Check percentage text exists
        expect(react_1.screen.getByText('50%')).toBeInTheDocument();
        // Check message text exists
        expect(react_1.screen.getByText('Test message')).toBeInTheDocument();
        // Check structure has the right elements
        var divs = container.querySelectorAll('div');
        expect(divs.length).toBeGreaterThan(0); // Should have div elements
    });
    it('should work with all props provided', function () {
        var container = (0, react_1.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 85, showPercentage: true, message: "Finalizing...", className: "custom-progress" })).container;
        expect(react_1.screen.getByText('85%')).toBeInTheDocument();
        expect(react_1.screen.getByText('Finalizing...')).toBeInTheDocument();
        var progressBar = container.firstChild;
        expect(progressBar).toHaveClass('custom-progress');
    });
    it('should work with minimal props', function () {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 0 }));
        expect(react_1.screen.getByText('0%')).toBeInTheDocument();
    });
    it('should handle empty message gracefully', function () {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(ProgressBar_1.ProgressBar, { progress: 50, message: "" }));
        expect(react_1.screen.getByText('50%')).toBeInTheDocument();
        // Empty message should not render anything
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2dhbXphcmFtYXphbm92L0Rlc2t0b3AvZnVtby9zcmMvd2lkZ2V0cy9Qcm9ncmVzc0Jhci91aS9Qcm9ncmVzc0Jhci50ZXN0LnRzeCIsIm1hcHBpbmdzIjoiOzs7QUFBQTs7R0FFRztBQUVILGdEQUF3RDtBQUN4RCw2Q0FBNEM7QUFFNUMsK0VBQStFO0FBQy9FLFFBQVE7QUFDUiwrRUFBK0U7QUFFL0UsUUFBUSxDQUFDLGFBQWEsRUFBRTtJQUN0QixFQUFFLENBQUMsa0NBQWtDLEVBQUU7UUFDckMsSUFBQSxjQUFNLEVBQUMsdUJBQUMseUJBQVcsSUFBQyxRQUFRLEVBQUUsRUFBRSxHQUFJLENBQUMsQ0FBQztRQUV0QyxNQUFNLENBQUMsY0FBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDdEQsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMscUNBQXFDLEVBQUU7UUFDaEMsSUFBQSxTQUFTLEdBQUssSUFBQSxjQUFNLEVBQUMsdUJBQUMseUJBQVcsSUFBQyxRQUFRLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBQyxjQUFjLEdBQUcsQ0FBQyxVQUFuRSxDQUFvRTtRQUVyRixJQUFNLFdBQVcsR0FBRyxTQUFTLENBQUMsVUFBeUIsQ0FBQztRQUN4RCxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ2xELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLCtDQUErQyxFQUFFO1FBQzFDLElBQUEsU0FBUyxHQUFLLElBQUEsY0FBTSxFQUFDLHVCQUFDLHlCQUFXLElBQUMsUUFBUSxFQUFFLEVBQUUsR0FBSSxDQUFDLFVBQTFDLENBQTJDO1FBRTVELDJDQUEyQztRQUMzQyxJQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsYUFBYSxDQUFDLDBCQUEwQixDQUFDLENBQUM7UUFDdkUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDekMsQ0FBQyxD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Q0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3JELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGdDQUFnQyxFQUFFO1FBQ25DLElBQUEsY0FBTSxFQUFDLHVCQUFDLHlCQUFXLElBQUMsUUFBUSxFQUFFLENBQUMsR0FBSSxDQUFDLENBQUM7UUFFckMsTUFBTSxDQUFDLGNBQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQ3JELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHdDQUF3QyxFQUFFO1FBQzNDLElBQUEsY0FBTSxFQUFDLHVCQUFDLHlCQUFXLElBQUMsUUFBUSxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUVqRCxNQUFNLENBQUMsY0FBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDcEQsMkNBQTJDO0lBQzdDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2dhbXphcmFtYXphbm92L0Rlc2t0b3AvZnVtby9zcmMvd2lkZ2V0cy9Qcm9ncmVzc0Jhci91aS9Qcm9ncmVzc0Jhci50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFByb2dyZXNzQmFyIENvbXBvbmVudCBUZXN0c1xuICovXG5cbmltcG9ydCB7IHJlbmRlciwgc2NyZWVuIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XG5pbXBvcnQgeyBQcm9ncmVzc0JhciB9IGZyb20gJy4vUHJvZ3Jlc3NCYXInO1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBURVNUU1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5kZXNjcmliZSgnUHJvZ3Jlc3NCYXInLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgcmVuZGVyIHdpdGggZGVmYXVsdCBwcm9wcycsICgpID0+IHtcbiAgICByZW5kZXIoPFByb2dyZXNzQmFyIHByb2dyZXNzPXs1MH0gLz4pO1xuXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJzUwJScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlbmRlciB3aXRoIGN1c3RvbSBjbGFzc05hbWUnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBjb250YWluZXIgfSA9IHJlbmRlcig8UHJvZ3Jlc3NCYXIgcHJvZ3Jlc3M9ezI1fSBjbGFzc05hbWU9XCJjdXN0b20tY2xhc3NcIiAvPik7XG5cbiAgICBjb25zdCBwcm9ncmVzc0JhciA9IGNvbnRhaW5lci5maXJzdENoaWxkIGFzIEhUTUxFbGVtZW50O1xuICAgIGV4cGVjdChwcm9ncmVzc0JhcikudG9IYXZlQ2xhc3MoJ2N1c3RvbS1jbGFzcycpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlbmRlciBwcm9ncmVzcyBiYXIgd2l0aCBjb3JyZWN0IHdpZHRoJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgY29udGFpbmVyIH0gPSByZW5kZXIoPFByb2dyZXNzQmFyIHByb2dyZXNzPXs3NX0gLz4pO1xuXG4gICAgLy8gRmluZCB0aGUgZGl2IHdpdGggaW5saW5lIHN0eWxlICh0aGUgYmFyKVxuICAgIGNvbnN0IGJhckVsZW1lbnQgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignZGl2W3N0eWxlKj1cIndpZHRoOiA3NSVcIl0nKTtcbiAgICBleHBlY3QoYmFyRWxlbWVudCkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBzaG93IHBlcmNlbnRhZ2Ugd2hlbiBzaG93UGVyY2VudGFnZSBpcyB0cnVlJywgKCkgPT4ge1xuICAgIHJlbmRlcig8UHJvZ3Jlc3NCYXIgcHJvZ3Jlc3M9ezMzfSBzaG93UGVyY2VudGFnZT17dHJ1ZX0gLz4pO1xuXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJzMzJScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGhpZGUgcGVyY2VudGFnZSB3aGVuIHNob3dQZXJjZW50YWdlIGlzIGZhbHNlJywgKCkgPT4ge1xuICAgIHJlbmRlcig8UHJvZ3Jlc3NCYXIgcHJvZ3Jlc3M9ezY3fSBzaG93UGVyY2VudGFnZT17ZmFsc2V9IC8+KTtcblxuICAgIGV4cGVjdChzY3JlZW4ucXVlcnlCeVRleHQoJzY3JScpKS5ub3QudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByb3VuZCBwcm9ncmVzcyB0byBuZWFyZXN0IGludGVnZXInLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxQcm9ncmVzc0JhciBwcm9ncmVzcz17MzMuN30gLz4pO1xuXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJzM0JScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGhhbmRsZSBlZGdlIGNhc2Ugb2YgMCBwcm9ncmVzcycsICgpID0+IHtcbiAgICBjb25zdCB7IGNvbnRhaW5lciB9ID0gcmVuZGVyKDxQcm9ncmVzc0JhciBwcm9ncmVzcz17MH0gLz4pO1xuXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJzAlJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgY29uc3QgYmFyRWxlbWVudCA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdkaXZbc3R5bGUqPVwid2lkdGg6IDAlXCJdJyk7XG4gICAgZXhwZWN0KGJhckVsZW1lbnQpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgaGFuZGxlIGVkZ2UgY2FzZSBvZiAxMDAgcHJvZ3Jlc3MnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBjb250YWluZXIgfSA9IHJlbmRlcig8UHJvZ3Jlc3NCYXIgcHJvZ3Jlc3M9ezEwMH0gLz4pO1xuXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJzEwMCUnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBjb25zdCBiYXJFbGVtZW50ID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ2RpdltzdHlsZSo9XCJ3aWR0aDogMTAwJVwiXScpO1xuICAgIGV4cGVjdChiYXJFbGVtZW50KS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHNob3cgbWVzc2FnZSB3aGVuIHByb3ZpZGVkJywgKCkgPT4ge1xuICAgIHJlbmRlcig8UHJvZ3Jlc3NCYXIgcHJvZ3Jlc3M9ezUwfSBtZXNzYWdlPVwiTG9hZGluZyBmaWxlcy4uLlwiIC8+KTtcblxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdMb2FkaW5nIGZpbGVzLi4uJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgbm90IHNob3cgbWVzc2FnZSB3aGVuIG5vdCBwcm92aWRlZCcsICgpID0+IHtcbiAgICByZW5kZXIoPFByb2dyZXNzQmFyIHByb2dyZXNzPXs1MH0gLz4pO1xuXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJzUwJScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIGV4cGVjdChzY3JlZW4ucXVlcnlCeVRleHQoJ0xvYWRpbmcgZmlsZXMuLi4nKSkubm90LnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgc2hvdyBib3RoIHBlcmNlbnRhZ2UgYW5kIG1lc3NhZ2UnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxQcm9ncmVzc0JhciBwcm9ncmVzcz17NzV9IG1lc3NhZ2U9XCJBbG1vc3QgZG9uZS4uLlwiIHNob3dQZXJjZW50YWdlPXt0cnVlfSAvPik7XG5cbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnNzUlJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0FsbW9zdCBkb25lLi4uJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgc2hvdyBhY3R1YWwgcHJvZ3Jlc3MgYWJvdmUgMTAwIChubyBjbGFtcGluZyBpbiBkaXNwbGF5KScsICgpID0+IHtcbiAgICBjb25zdCB7IGNvbnRhaW5lciB9ID0gcmVuZGVyKDxQcm9ncmVzc0JhciBwcm9ncmVzcz17MTUwfSAvPik7XG5cbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnMTUwJScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIGNvbnN0IGJhckVsZW1lbnQgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignZGl2W3N0eWxlKj1cIndpZHRoOiAxMDAlXCJdJyk7XG4gICAgZXhwZWN0KGJhckVsZW1lbnQpLnRvQmVJblRoZURvY3VtZW50KCk7IC8vIFdpZHRoIGlzIGNsYW1wZWRcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBzaG93IGFjdHVhbCBwcm9ncmVzcyBiZWxvdyAwIChubyBjbGFtcGluZyBpbiBkaXNwbGF5KScsICgpID0+IHtcbiAgICBjb25zdCB7IGNvbnRhaW5lciB9ID0gcmVuZGVyKDxQcm9ncmVzc0JhciBwcm9ncmVzcz17LTI1fSAvPik7XG5cbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnLTI1JScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIGNvbnN0IGJhckVsZW1lbnQgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignZGl2W3N0eWxlKj1cIndpZHRoOiAwJVwiXScpO1xuICAgIGV4cGVjdChiYXJFbGVtZW50KS50b0JlSW5UaGVEb2N1bWVudCgpOyAvLyBXaWR0aCBpcyBjbGFtcGVkXG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmVuZGVyIHdpdGggY29ycmVjdCBET00gc3RydWN0dXJlJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgY29udGFpbmVyIH0gPSByZW5kZXIoPFByb2dyZXNzQmFyIHByb2dyZXNzPXs1MH0gbWVzc2FnZT1cIlRlc3QgbWVzc2FnZVwiIC8+KTtcblxuICAgIC8vIENoZWNrIHBlcmNlbnRhZ2UgdGV4dCBleGlzdHNcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnNTAlJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG5cbiAgICAvLyBDaGVjayBtZXNzYWdlIHRleHQgZXhpc3RzXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ1Rlc3QgbWVzc2FnZScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuXG4gICAgLy8gQ2hlY2sgc3RydWN0dXJlIGhhcyB0aGUgcmlnaHQgZWxlbWVudHNcbiAgICBjb25zdCBkaXZzID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ2RpdicpO1xuICAgIGV4cGVjdChkaXZzLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApOyAvLyBTaG91bGQgaGF2ZSBkaXYgZWxlbWVudHNcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCB3b3JrIHdpdGggYWxsIHByb3BzIHByb3ZpZGVkJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgY29udGFpbmVyIH0gPSByZW5kZXIoXG4gICAgICA8UHJvZ3Jlc3NCYXJcbiAgICAgICAgcHJvZ3Jlc3M9ezg1fVxuICAgICAgICBzaG93UGVyY2VudGFnZT17dHJ1ZX1cbiAgICAgICAgbWVzc2FnZT1cIkZpbmFsaXppbmcuLi5cIlxuICAgICAgICBjbGFzc05hbWU9XCJjdXN0b20tcHJvZ3Jlc3NcIlxuICAgICAgLz5cbiAgICApO1xuXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJzg1JScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdGaW5hbGl6aW5nLi4uJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG5cbiAgICBjb25zdCBwcm9ncmVzc0JhciA9IGNvbnRhaW5lci5maXJzdENoaWxkIGFzIEhUTUxFbGVtZW50O1xuICAgIGV4cGVjdChwcm9ncmVzc0JhcikudG9IYXZlQ2xhc3MoJ2N1c3RvbS1wcm9ncmVzcycpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHdvcmsgd2l0aCBtaW5pbWFsIHByb3BzJywgKCkgPT4ge1xuICAgIHJlbmRlcig8UHJvZ3Jlc3NCYXIgcHJvZ3Jlc3M9ezB9IC8+KTtcblxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCcwJScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGhhbmRsZSBlbXB0eSBtZXNzYWdlIGdyYWNlZnVsbHknLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxQcm9ncmVzc0JhciBwcm9ncmVzcz17NTB9IG1lc3NhZ2U9XCJcIiAvPik7XG5cbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnNTAlJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgLy8gRW1wdHkgbWVzc2FnZSBzaG91bGQgbm90IHJlbmRlciBhbnl0aGluZ1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9