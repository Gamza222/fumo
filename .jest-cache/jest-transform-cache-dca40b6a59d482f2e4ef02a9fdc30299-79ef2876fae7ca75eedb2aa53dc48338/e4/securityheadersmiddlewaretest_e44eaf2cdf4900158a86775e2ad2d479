a8a0cd205509145798e6294f76f07dbf
"use strict";
/**
 * Security Headers Middleware Tests
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Import Next.js server mocks from factory
var nextjs_1 = require("@/shared/testing/mocks/nextjs");
// import { NextRequest } from 'next/server';
var security_headers_middleware_1 = require("./security-headers.middleware");
describe('Security Headers Middleware', function () {
    beforeEach(function () {
        jest.clearAllMocks();
    });
    describe('applySecurityHeaders', function () {
        it('should apply security headers to response', function () {
            var mockResponse = {
                headers: {
                    set: jest.fn(),
                },
            };
            (0, security_headers_middleware_1.applySecurityHeaders)(mockResponse);
            expect(mockResponse.headers.set).toHaveBeenCalledWith('Content-Security-Policy', expect.any(String));
            expect(mockResponse.headers.set).toHaveBeenCalledWith('X-Frame-Options', 'DENY');
            expect(mockResponse.headers.set).toHaveBeenCalledWith('X-Content-Type-Options', 'nosniff');
        });
    });
    describe('generateNonce', function () {
        it('should generate a nonce string', function () {
            var nonce = (0, security_headers_middleware_1.generateNonce)();
            expect(nonce).toMatch(/^[0-9a-f]{32}$/);
        });
        it('should generate different nonces', function () {
            var nonce1 = (0, security_headers_middleware_1.generateNonce)();
            var nonce2 = (0, security_headers_middleware_1.generateNonce)();
            expect(nonce1).not.toBe(nonce2);
        });
    });
    describe('updateCSPWithNonce', function () {
        it('should add nonce to CSP', function () {
            var nonce = 'test-nonce';
            var updatedCSP = (0, security_headers_middleware_1.updateCSPWithNonce)(nonce);
            expect(updatedCSP).toContain("'nonce-".concat(nonce, "'"));
        });
    });
    describe('reportCSPViolation', function () {
        it('should log CSP violation', function () {
            var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
            var consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();
            var violation = {
                blockedURI: 'http://example.com/script.js',
                documentURI: 'http://localhost:3000/',
                violatedDirective: 'script-src',
                effectiveDirective: 'script-src',
                originalPolicy: "script-src 'self'",
                referrer: 'http://localhost:3000/',
            };
            (0, security_headers_middleware_1.reportCSPViolation)(violation);
            expect(consoleSpy).toHaveBeenCalledWith('CSP Violation:', violation);
            expect(consoleLogSpy).toHaveBeenCalledWith('CSP Violation Report:', expect.any(Object));
            consoleSpy.mockRestore();
            consoleLogSpy.mockRestore();
        });
    });
    describe('isSuspiciousRequest', function () {
        it('should detect suspicious user agents', function () {
            var request = new nextjs_1.MockNextRequest('http://localhost:3000/', {
                headers: {
                    'user-agent': 'sqlmap/1.0',
                },
            });
            expect((0, security_headers_middleware_1.isSuspiciousRequest)(request)).toBe(true);
        });
        it('should detect suspicious origins', function () {
            var request = new nextjs_1.MockNextRequest('http://localhost:3000/', {
                headers: {
                    origin: 'http://localhost:8080',
                },
            });
            expect((0, security_headers_middleware_1.isSuspiciousRequest)(request)).toBe(true);
        });
        it('should allow normal requests', function () {
            var request = new nextjs_1.MockNextRequest('http://localhost:3000/', {
                headers: {
                    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                    origin: 'http://localhost:3000',
                },
            });
            expect((0, security_headers_middleware_1.isSuspiciousRequest)(request)).toBe(false);
        });
    });
    describe('securityMiddleware', function () {
        it('should block suspicious requests', function () {
            var request = new nextjs_1.MockNextRequest('http://localhost:3000/', {
                headers: {
                    'user-agent': 'sqlmap/1.0',
                },
            });
            var response = (0, security_headers_middleware_1.securityMiddleware)(request);
            expect(response.status).toBe(403);
        });
        it('should allow normal requests', function () {
            var request = new nextjs_1.MockNextRequest('http://localhost:3000/', {
                headers: {
                    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                },
            });
            var response = (0, security_headers_middleware_1.securityMiddleware)(request);
            expect(response.status).toBe(200);
        });
    });
    describe('corsMiddleware', function () {
        it('should handle preflight requests', function () {
            var request = new nextjs_1.MockNextRequest('http://localhost:3000/api/test', {
                method: 'OPTIONS',
                headers: {
                    origin: 'http://localhost:3000',
                    'access-control-request-method': 'POST',
                    'access-control-request-headers': 'Content-Type',
                },
            });
            var response = (0, security_headers_middleware_1.corsMiddleware)(request);
            expect(response.status).toBe(200);
        });
        it('should handle actual requests', function () {
            var request = new nextjs_1.MockNextRequest('http://localhost:3000/api/test', {
                method: 'POST',
                headers: {
                    origin: 'http://localhost:3000',
                },
            });
            var response = (0, security_headers_middleware_1.corsMiddleware)(request);
            expect(response.status).toBe(200);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,