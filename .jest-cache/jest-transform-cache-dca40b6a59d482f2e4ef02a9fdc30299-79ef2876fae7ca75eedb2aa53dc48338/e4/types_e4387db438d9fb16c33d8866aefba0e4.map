{"version":3,"names":["cov_2c2oe9wni2","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","stateEnums_1","require","Object","defineProperty","exports","enumerable","get","StorageType","Environment","BaseStateProperty"],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/state/types/types.ts"],"sourcesContent":["/**\n * State Management Types\n *\n * Universal types for state management that work with any application.\n * Foundation-level only - no overengineering.\n */\n\n// ============================================================================\n// STATE ENUMS\n// ============================================================================\n\nexport { StorageType, Environment, BaseStateProperty } from './stateEnums';\nimport { StorageType } from './stateEnums';\n\n// ============================================================================\n// CORE TYPES\n// ============================================================================\n\nexport interface BaseState {\n  _hydrated: boolean;\n}\n\nexport interface StoreConfig<T> {\n  name: string;\n  initialState: T;\n  persist?: {\n    key: string;\n    storage?: StorageType;\n  };\n  devtools?: boolean;\n}\n\nexport interface EnhancedStore<T> {\n  getState: () => T;\n  setState: (partial: T | Partial<T> | ((state: T) => T | Partial<T>)) => void;\n  subscribe: (listener: (state: T, prevState: T) => void) => () => void;\n  reset: () => void;\n  clearStorage: () => void;\n}\n\n// ============================================================================\n// COMMON STATE PATTERNS\n// ============================================================================\n\n/**\n * Standard async operation state\n */\nexport interface AsyncState<T = unknown> {\n  data: T | null;\n  loading: boolean;\n  error: string | null;\n}\n\n/**\n * Standard pagination state\n */\nexport interface PaginationState {\n  page: number;\n  limit: number;\n  total: number;\n  hasNext: boolean;\n  hasPrev: boolean;\n}\n\n/**\n * Standard filter state\n */\nexport interface FilterState {\n  search: string;\n  filters: Record<string, unknown>;\n  sortBy: string;\n  sortOrder: 'asc' | 'desc';\n}\n\n/**\n * Standard UI state\n */\nexport interface UIState {\n  sidebarOpen: boolean;\n  theme: 'light' | 'dark';\n  currentRoute: string;\n}\n\n// ============================================================================\n// STORE UTILITIES\n// ============================================================================\n\n/**\n * Helper type to extract state type from store\n */\nexport type StoreState<T> = T extends EnhancedStore<infer S> ? S : never;\n\n/**\n * Helper type for store selector functions\n */\nexport type Selector<TStore, TResult> = (state: StoreState<TStore>) => TResult;\n"],"mappings":"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","ignoreList":[]}