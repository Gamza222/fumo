2f20fc98ded20ae42a18ad83bc3d1c8e
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fsdValidator = fsdValidator;
var fs = __importStar(require("fs"));
var path_1 = __importDefault(require("path"));
// FSD Architecture Rules
var FSD_RULES = [
    // Shared layer rules
    { from: 'shared/ui', to: 'shared/lib', allowed: true, reason: 'UI can use shared utilities' },
    { from: 'shared/ui', to: 'shared/model', allowed: true, reason: 'UI can use shared models' },
    { from: 'shared/lib', to: 'shared/model', allowed: true, reason: 'Lib can use shared models' },
    {
        from: 'shared/model',
        to: 'shared/ui',
        allowed: false,
        reason: 'Models should not depend on UI',
    },
    {
        from: 'shared/model',
        to: 'shared/lib',
        allowed: false,
        reason: 'Models should not depend on lib',
    },
    // Widgets layer rules
    { from: 'widgets', to: 'shared', allowed: true, reason: 'Widgets can use shared components' },
    {
        from: 'widgets',
        to: 'infrastructure',
        allowed: true,
        reason: 'Widgets can use infrastructure',
    },
    {
        from: 'widgets',
        to: 'widgets',
        allowed: false,
        reason: 'Widgets should not depend on other widgets',
    },
    // Infrastructure layer rules
    {
        from: 'infrastructure',
        to: 'shared',
        allowed: true,
        reason: 'Infrastructure can use shared utilities',
    },
    {
        from: 'infrastructure',
        to: 'widgets',
        allowed: false,
        reason: 'Infrastructure should not depend on widgets',
    },
    {
        from: 'infrastructure',
        to: 'infrastructure',
        allowed: true,
        reason: 'Infrastructure can use other infrastructure',
    },
    // App layer rules
    { from: 'app', to: 'shared', allowed: true, reason: 'App can use shared components' },
    { from: 'app', to: 'widgets', allowed: true, reason: 'App can use widgets' },
    { from: 'app', to: 'infrastructure', allowed: true, reason: 'App can use infrastructure' },
];
function fsdValidator() {
    var _a, _b;
    var result = {
        isValid: true,
        errors: [],
        warnings: [],
    };
    try {
        // Get all TypeScript files
        var files = getAllTsFiles('src');
        for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {
            var file = files_1[_i];
            var violations = validateFile(file);
            (_a = result.errors).push.apply(_a, violations.errors);
            (_b = result.warnings).push.apply(_b, violations.warnings);
        }
        result.isValid = result.errors.length === 0;
        if (result.errors.length > 0) {
            // FSD Validation Failed
            result.errors.forEach(function (_error) {
                // Error: ${_error}
            });
        }
        if (result.warnings.length > 0) {
            // FSD Warnings
            result.warnings.forEach(function (_warning) {
                // Warning: ${_warning}
            });
        }
        if (result.isValid && result.warnings.length === 0) {
            // FSD Validation Passed - No violations found
        }
    }
    catch (error) {
        result.isValid = false;
        result.errors.push("Validation failed: ".concat(String(error)));
    }
    return result;
}
function getAllTsFiles(dir) {
    var files = [];
    if (!fs.existsSync(dir)) {
        return files;
    }
    var items = fs.readdirSync(dir);
    for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
        var item = items_1[_i];
        var fullPath = path_1.default.join(dir, item);
        var stat = fs.statSync(fullPath);
        if (stat.isDirectory()) {
            files.push.apply(files, getAllTsFiles(fullPath));
        }
        else if (item.endsWith('.ts') || item.endsWith('.tsx')) {
            files.push(fullPath);
        }
    }
    return files;
}
function validateFile(filePath) {
    var errors = [];
    var warnings = [];
    try {
        var content = fs.readFileSync(filePath, 'utf-8');
        var imports = extractImports(content);
        for (var _i = 0, imports_1 = imports; _i < imports_1.length; _i++) {
            var importPath = imports_1[_i];
            var violation = checkImportViolation(filePath, importPath);
            if (violation) {
                if (violation.severity === 'error') {
                    errors.push(violation.message);
                }
                else {
                    warnings.push(violation.message);
                }
            }
        }
    }
    catch (error) {
        errors.push("Failed to read file ".concat(filePath, ": ").concat(String(error)));
    }
    return { errors: errors, warnings: warnings };
}
function extractImports(content) {
    var imports = [];
    var importRegex = /import.*from\s+['"]([^'"]+)['"]/g;
    var match;
    while ((match = importRegex.exec(content)) !== null) {
        var importPath = match[1];
        // Only check internal imports (starting with @/ or ./)
        if (importPath &&
            (importPath.startsWith('@/') || importPath.startsWith('./') || importPath.startsWith('../'))) {
            imports.push(importPath);
        }
    }
    return imports;
}
function checkImportViolation(filePath, importPath) {
    var fromLayer = getLayerFromPath(filePath);
    var toLayer = getLayerFromPath(importPath);
    if (!fromLayer || !toLayer) {
        return null; // Skip external imports or unrecognized paths
    }
    var rule = FSD_RULES.find(function (r) { return r.from === fromLayer && r.to === toLayer; });
    if (!rule) {
        return null; // No rule defined, assume allowed
    }
    if (!rule.allowed) {
        return {
            message: "\u274C ".concat(filePath, ": Cannot import from ").concat(toLayer, " (").concat(rule.reason, ")"),
            severity: 'error',
        };
    }
    return null; // Import is allowed
}
function getLayerFromPath(filePath) {
    // Convert file path to layer path
    var normalizedPath = filePath.replace(/\\/g, '/');
    if (normalizedPath.includes('/shared/ui/'))
        return 'shared/ui';
    if (normalizedPath.includes('/shared/lib/'))
        return 'shared/lib';
    if (normalizedPath.includes('/shared/model/'))
        return 'shared/model';
    if (normalizedPath.includes('/widgets/'))
        return 'widgets';
    if (normalizedPath.includes('/infrastructure/'))
        return 'infrastructure';
    if (normalizedPath.includes('/app/'))
        return 'app';
    return null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,