{"file":"/Users/gamzaramazanov/Desktop/fumo/src/widgets/InitialLoader/lib/lib.ts","mappings":";AAAA;;;;;GAKG;;;AAEH,+EAA+E;AAC/E,qBAAqB;AACrB,+EAA+E;AAE/E;;GAEG;AACI,IAAM,cAAc,GAAG,UAAC,QAAgB;IAC7C,OAAO,UAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAG,CAAC;AACpC,CAAC,CAAC;AAFW,QAAA,cAAc,kBAEzB;AAEF;;GAEG;AACI,IAAM,mBAAmB,GAAG,UAAC,QAAgB;IAClD,OAAO,UAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,MAAG,CAAC;AACpD,CAAC,CAAC;AAFW,QAAA,mBAAmB,uBAE9B;AAEF,+EAA+E;AAC/E,sBAAsB;AACtB,+EAA+E;AAE/E;;GAEG;AACI,IAAM,kBAAkB,GAAG,UAAC,QAAgB;IACjD,OAAO,QAAQ,IAAI,GAAG,CAAC;AACzB,CAAC,CAAC;AAFW,QAAA,kBAAkB,sBAE7B;AAEF;;GAEG;AACI,IAAM,iBAAiB,GAAG,UAC/B,WAAmB,EACnB,QAAgB;IAEhB,IAAI,QAAQ,IAAI,GAAG;QAAE,OAAO,QAAQ,CAAC;IACrC,IAAI,WAAW;QAAE,OAAO,kBAAW,WAAW,QAAK,CAAC;IACpD,OAAO,YAAY,CAAC;AACtB,CAAC,CAAC;AAPW,QAAA,iBAAiB,qBAO5B;AAEF,+EAA+E;AAC/E,iBAAiB;AACjB,+EAA+E;AAE/E;;GAEG;AACI,IAAM,cAAc,GAAG,UAAC,QAAgB;IAC7C,IAAI,CAAC,QAAQ;QAAE,OAAO,EAAE,CAAC;IAEzB,kCAAkC;IAClC,OAAO,QAAQ;SACZ,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC;SAC1B,OAAO,CAAC,IAAI,EAAE,UAAC,GAAG,IAAK,OAAA,GAAG,CAAC,WAAW,EAAE,EAAjB,CAAiB,CAAC;SACzC,IAAI,EAAE,CAAC;AACZ,CAAC,CAAC;AARW,QAAA,cAAc,kBAQzB","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/widgets/InitialLoader/lib/lib.ts"],"sourcesContent":["/**\n * InitialLoader Widget Logic\n *\n * Widget-specific logic and utilities.\n * Keeps the UI component clean and focused.\n */\n\n// ============================================================================\n// PROGRESS UTILITIES\n// ============================================================================\n\n/**\n * Format progress percentage for display\n */\nexport const formatProgress = (progress: number): string => {\n  return `${Math.round(progress)}%`;\n};\n\n/**\n * Get progress bar width based on progress\n */\nexport const getProgressBarWidth = (progress: number): string => {\n  return `${Math.min(100, Math.max(0, progress))}%`;\n};\n\n// ============================================================================\n// ANIMATION UTILITIES\n// ============================================================================\n\n/**\n * Check if progress has reached completion threshold\n */\nexport const isProgressComplete = (progress: number): boolean => {\n  return progress >= 100;\n};\n\n/**\n * Get loading message based on progress\n */\nexport const getLoadingMessage = (\n  currentStep: string,\n  progress: number\n): string => {\n  if (progress >= 100) return \"Ready!\";\n  if (currentStep) return `Loading ${currentStep}...`;\n  return \"Loading...\";\n};\n\n// ============================================================================\n// STEP UTILITIES\n// ============================================================================\n\n/**\n * Format step name for display\n */\nexport const formatStepName = (stepName: string): string => {\n  if (!stepName) return \"\";\n\n  // Convert camelCase to Title Case\n  return stepName\n    .replace(/([A-Z])/g, \" $1\")\n    .replace(/^./, (str) => str.toUpperCase())\n    .trim();\n};\n"],"version":3}