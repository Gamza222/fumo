865196699cba792cedb75633639a2866
"use strict";

/**
 * NextResponse Mock for Testing
 *
 * Provides a mock implementation of Next.js NextResponse for testing environments.
 * Simulates response objects with status, headers, and static methods.
 */
/* istanbul ignore next */
function cov_u5k55ciq3() {
  var path = "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/nextjs/lib/server/nextResponse.mock.ts";
  var hash = "8d38d3b9d9ef0014afa9f99207a8fa7f665c83ce";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/nextjs/lib/server/nextResponse.mock.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 67
        }
      },
      "2": {
        start: {
          line: 10,
          column: 38
        },
        end: {
          line: 23,
          column: 3
        }
      },
      "3": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 49
        }
      },
      "4": {
        start: {
          line: 12,
          column: 34
        },
        end: {
          line: 12,
          column: 47
        }
      },
      "5": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 44
        }
      },
      "6": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 17,
          column: 10
        }
      },
      "7": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 21,
          column: 6
        }
      },
      "8": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 38
        }
      },
      "9": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 22,
          column: 28
        }
      },
      "10": {
        start: {
          line: 24,
          column: 0
        },
        end: {
          line: 24,
          column: 44
        }
      },
      "11": {
        start: {
          line: 26,
          column: 29
        },
        end: {
          line: 29,
          column: 1
        }
      },
      "12": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 27,
          column: 45
        }
      },
      "13": {
        start: {
          line: 27,
          column: 30
        },
        end: {
          line: 27,
          column: 43
        }
      },
      "14": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 28,
          column: 47
        }
      },
      "15": {
        start: {
          line: 30,
          column: 0
        },
        end: {
          line: 30,
          column: 56
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 38
          },
          end: {
            line: 10,
            column: 39
          }
        },
        loc: {
          start: {
            line: 10,
            column: 50
          },
          end: {
            line: 23,
            column: 1
          }
        },
        line: 10
      },
      "1": {
        name: "MockNextResponse",
        decl: {
          start: {
            line: 11,
            column: 13
          },
          end: {
            line: 11,
            column: 29
          }
        },
        loc: {
          start: {
            line: 11,
            column: 46
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 11
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 19,
            column: 28
          },
          end: {
            line: 19,
            column: 29
          }
        },
        loc: {
          start: {
            line: 19,
            column: 40
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 26,
            column: 29
          },
          end: {
            line: 26,
            column: 30
          }
        },
        loc: {
          start: {
            line: 26,
            column: 54
          },
          end: {
            line: 29,
            column: 1
          }
        },
        line: 26
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 8
          },
          end: {
            line: 12,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 12,
            column: 8
          },
          end: {
            line: 12,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 12
      },
      "1": {
        loc: {
          start: {
            line: 13,
            column: 22
          },
          end: {
            line: 13,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 22
          },
          end: {
            line: 13,
            column: 36
          }
        }, {
          start: {
            line: 13,
            column: 40
          },
          end: {
            line: 13,
            column: 43
          }
        }],
        line: 13
      },
      "2": {
        loc: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 45
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 45
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/nextjs/lib/server/nextResponse.mock.ts",
      mappings: ";AAAA;;;;;GAKG;;;AAIH;IAOE,0BAAY,KAAe,EAAE,OAA8C;QAA9C,wBAAA,EAAA,YAA8C;QACzE,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,GAAG,CAAC;QACpC,IAAI,CAAC,OAAO,GAAG;YACb,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;YACd,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;SACf,CAAC;IACJ,CAAC;IAEM,qBAAI,GAAX;QACE,OAAO,IAAI,gBAAgB,EAAE,CAAC;IAChC,CAAC;IACH,uBAAC;AAAD,CAAC,AAlBD,IAkBC;AAlBY,4CAAgB;AAoB7B,+CAA+C;AACxC,IAAM,sBAAsB,GAAG,UACpC,IAAc,EACd,OAA8C;IAA9C,wBAAA,EAAA,YAA8C;IAChB,OAAA,IAAI,gBAAgB,CAAC,IAAI,EAAE,OAAO,CAAC;AAAnC,CAAmC,CAAC;AAHvD,QAAA,sBAAsB,0BAGiC",
      names: [],
      sources: ["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/nextjs/lib/server/nextResponse.mock.ts"],
      sourcesContent: ["/**\n * NextResponse Mock for Testing\n *\n * Provides a mock implementation of Next.js NextResponse for testing environments.\n * Simulates response objects with status, headers, and static methods.\n */\n\nimport { mockNextResponseInterface, mockNextResponseOptionsInterface } from '../../types/types';\n\nexport class MockNextResponse implements mockNextResponseInterface {\n  status: number;\n  headers: {\n    set: jest.Mock;\n    get: jest.Mock;\n  };\n\n  constructor(_body?: unknown, options: mockNextResponseOptionsInterface = {}) {\n    this.status = options.status || 200;\n    this.headers = {\n      set: jest.fn(),\n      get: jest.fn(),\n    };\n  }\n\n  static next(): mockNextResponseInterface {\n    return new MockNextResponse();\n  }\n}\n\n// Factory function for creating mock responses\nexport const createMockNextResponse = (\n  body?: unknown,\n  options: mockNextResponseOptionsInterface = {}\n): mockNextResponseInterface => new MockNextResponse(body, options);\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8d38d3b9d9ef0014afa9f99207a8fa7f665c83ce"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_u5k55ciq3 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_u5k55ciq3();
cov_u5k55ciq3().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_u5k55ciq3().s[1]++;
exports.createMockNextResponse = exports.MockNextResponse = void 0;
var MockNextResponse =
/* istanbul ignore next */
(/** @class */cov_u5k55ciq3().s[2]++, function () {
  /* istanbul ignore next */
  cov_u5k55ciq3().f[0]++;
  function MockNextResponse(_body, options) {
    /* istanbul ignore next */
    cov_u5k55ciq3().f[1]++;
    cov_u5k55ciq3().s[3]++;
    if (options === void 0) {
      /* istanbul ignore next */
      cov_u5k55ciq3().b[0][0]++;
      cov_u5k55ciq3().s[4]++;
      options = {};
    } else
    /* istanbul ignore next */
    {
      cov_u5k55ciq3().b[0][1]++;
    }
    cov_u5k55ciq3().s[5]++;
    this.status =
    /* istanbul ignore next */
    (cov_u5k55ciq3().b[1][0]++, options.status) ||
    /* istanbul ignore next */
    (cov_u5k55ciq3().b[1][1]++, 200);
    /* istanbul ignore next */
    cov_u5k55ciq3().s[6]++;
    this.headers = {
      set: jest.fn(),
      get: jest.fn()
    };
  }
  /* istanbul ignore next */
  cov_u5k55ciq3().s[7]++;
  MockNextResponse.next = function () {
    /* istanbul ignore next */
    cov_u5k55ciq3().f[2]++;
    cov_u5k55ciq3().s[8]++;
    return new MockNextResponse();
  };
  /* istanbul ignore next */
  cov_u5k55ciq3().s[9]++;
  return MockNextResponse;
}());
/* istanbul ignore next */
cov_u5k55ciq3().s[10]++;
exports.MockNextResponse = MockNextResponse;
// Factory function for creating mock responses
/* istanbul ignore next */
cov_u5k55ciq3().s[11]++;
var createMockNextResponse = function (body, options) {
  /* istanbul ignore next */
  cov_u5k55ciq3().f[3]++;
  cov_u5k55ciq3().s[12]++;
  if (options === void 0) {
    /* istanbul ignore next */
    cov_u5k55ciq3().b[2][0]++;
    cov_u5k55ciq3().s[13]++;
    options = {};
  } else
  /* istanbul ignore next */
  {
    cov_u5k55ciq3().b[2][1]++;
  }
  cov_u5k55ciq3().s[14]++;
  return new MockNextResponse(body, options);
};
/* istanbul ignore next */
cov_u5k55ciq3().s[15]++;
exports.createMockNextResponse = createMockNextResponse;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,