b760b226dd9cadcd7dd70b5103881880
"use strict";

/* istanbul ignore next */
function cov_h8gf87oy3() {
  var path = "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/browser/lib/storage/storage.mock.ts";
  var hash = "dc417c27acc93b6e73d934b9a765b11137c99e75";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/browser/lib/storage/storage.mock.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 29
        }
      },
      "2": {
        start: {
          line: 10,
          column: 18
        },
        end: {
          line: 35,
          column: 1
        }
      },
      "3": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 53
        }
      },
      "4": {
        start: {
          line: 11,
          column: 34
        },
        end: {
          line: 11,
          column: 51
        }
      },
      "5": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 52
        }
      },
      "6": {
        start: {
          line: 13,
          column: 22
        },
        end: {
          line: 33,
          column: 5
        }
      },
      "7": {
        start: {
          line: 15,
          column: 12
        },
        end: {
          line: 15,
          column: 30
        }
      },
      "8": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 18,
          column: 42
        }
      },
      "9": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 34
        }
      },
      "10": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 24,
          column: 30
        }
      },
      "11": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 26
        }
      },
      "12": {
        start: {
          line: 30,
          column: 23
        },
        end: {
          line: 30,
          column: 47
        }
      },
      "13": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 39
        }
      },
      "14": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 34,
          column: 23
        }
      },
      "15": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 36,
          column: 34
        }
      },
      "16": {
        start: {
          line: 38,
          column: 0
        },
        end: {
          line: 38,
          column: 85
        }
      },
      "17": {
        start: {
          line: 39,
          column: 0
        },
        end: {
          line: 39,
          column: 87
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 18
          },
          end: {
            line: 10,
            column: 19
          }
        },
        loc: {
          start: {
            line: 10,
            column: 41
          },
          end: {
            line: 35,
            column: 1
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 14,
            column: 9
          }
        },
        loc: {
          start: {
            line: 14,
            column: 21
          },
          end: {
            line: 16,
            column: 9
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 17,
            column: 17
          },
          end: {
            line: 17,
            column: 18
          }
        },
        loc: {
          start: {
            line: 17,
            column: 32
          },
          end: {
            line: 19,
            column: 9
          }
        },
        line: 17
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 20,
            column: 17
          },
          end: {
            line: 20,
            column: 18
          }
        },
        loc: {
          start: {
            line: 20,
            column: 39
          },
          end: {
            line: 22,
            column: 9
          }
        },
        line: 20
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 23,
            column: 20
          },
          end: {
            line: 23,
            column: 21
          }
        },
        loc: {
          start: {
            line: 23,
            column: 35
          },
          end: {
            line: 25,
            column: 9
          }
        },
        line: 23
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 26,
            column: 15
          },
          end: {
            line: 26,
            column: 16
          }
        },
        loc: {
          start: {
            line: 26,
            column: 27
          },
          end: {
            line: 28,
            column: 9
          }
        },
        line: 26
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 29,
            column: 13
          },
          end: {
            line: 29,
            column: 14
          }
        },
        loc: {
          start: {
            line: 29,
            column: 30
          },
          end: {
            line: 32,
            column: 9
          }
        },
        line: 29
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 53
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 53
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 11
      },
      "1": {
        loc: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 18,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 18,
            column: 33
          }
        }, {
          start: {
            line: 18,
            column: 37
          },
          end: {
            line: 18,
            column: 41
          }
        }],
        line: 18
      },
      "2": {
        loc: {
          start: {
            line: 31,
            column: 19
          },
          end: {
            line: 31,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 19
          },
          end: {
            line: 31,
            column: 30
          }
        }, {
          start: {
            line: 31,
            column: 34
          },
          end: {
            line: 31,
            column: 38
          }
        }],
        line: 31
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/browser/lib/storage/storage.mock.ts",
      mappings: ";;;AAEA;;;;;GAKG;AACI,IAAM,WAAW,GAAG,UAAC,WAAwC;IAAxC,4BAAA,EAAA,gBAAwC;IAClE,IAAM,KAAK,GAAG,IAAI,GAAG,CAAiB,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;IAEnE,IAAM,WAAW,GAAyB;QACxC,IAAI,MAAM;YACR,OAAO,KAAK,CAAC,IAAI,CAAC;QACpB,CAAC;QAED,OAAO,YAAC,GAAW;YACjB,OAAO,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC;QAChC,CAAC;QAED,OAAO,YAAC,GAAW,EAAE,KAAa;YAChC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACxB,CAAC;QAED,UAAU,YAAC,GAAW;YACpB,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACpB,CAAC;QAED,KAAK;YACH,KAAK,CAAC,KAAK,EAAE,CAAC;QAChB,CAAC;QAED,GAAG,YAAC,KAAa;YACf,IAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;YACtC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC;QAC7B,CAAC;KACF,CAAC;IAEF,OAAO,WAAW,CAAC;AACrB,CAAC,CAAC;AA/BW,QAAA,WAAW,eA+BtB;AAEF,8BAA8B;AAC9B,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,cAAc,EAAE,EAAE,KAAK,EAAE,IAAA,mBAAW,GAAE,EAAE,CAAC,CAAC;AACxE,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,gBAAgB,EAAE,EAAE,KAAK,EAAE,IAAA,mBAAW,GAAE,EAAE,CAAC,CAAC",
      names: [],
      sources: ["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/browser/lib/storage/storage.mock.ts"],
      sourcesContent: ["import { mockStorageInterface } from '../../types/types';\n\n/**\n * Creates a mock storage object for testing\n *\n * @param initialData - Optional initial data to populate the storage\n * @returns A mock storage object that implements StorageMockInterface\n */\nexport const mockStorage = (initialData: Record<string, string> = {}): mockStorageInterface => {\n  const store = new Map<string, string>(Object.entries(initialData));\n\n  const storageMock: mockStorageInterface = {\n    get length() {\n      return store.size;\n    },\n\n    getItem(key: string): string | null {\n      return store.get(key) || null;\n    },\n\n    setItem(key: string, value: string): void {\n      store.set(key, value);\n    },\n\n    removeItem(key: string): void {\n      store.delete(key);\n    },\n\n    clear(): void {\n      store.clear();\n    },\n\n    key(index: number): string | null {\n      const keys = Array.from(store.keys());\n      return keys[index] || null;\n    },\n  };\n\n  return storageMock;\n};\n\n// Replace window storage APIs\nObject.defineProperty(window, 'localStorage', { value: mockStorage() });\nObject.defineProperty(window, 'sessionStorage', { value: mockStorage() });\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "dc417c27acc93b6e73d934b9a765b11137c99e75"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_h8gf87oy3 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_h8gf87oy3();
cov_h8gf87oy3().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_h8gf87oy3().s[1]++;
exports.mockStorage = void 0;
/**
 * Creates a mock storage object for testing
 *
 * @param initialData - Optional initial data to populate the storage
 * @returns A mock storage object that implements StorageMockInterface
 */
/* istanbul ignore next */
cov_h8gf87oy3().s[2]++;
var mockStorage = function (initialData) {
  /* istanbul ignore next */
  cov_h8gf87oy3().f[0]++;
  cov_h8gf87oy3().s[3]++;
  if (initialData === void 0) {
    /* istanbul ignore next */
    cov_h8gf87oy3().b[0][0]++;
    cov_h8gf87oy3().s[4]++;
    initialData = {};
  } else
  /* istanbul ignore next */
  {
    cov_h8gf87oy3().b[0][1]++;
  }
  var store =
  /* istanbul ignore next */
  (cov_h8gf87oy3().s[5]++, new Map(Object.entries(initialData)));
  var storageMock =
  /* istanbul ignore next */
  (cov_h8gf87oy3().s[6]++, {
    get length() {
      /* istanbul ignore next */
      cov_h8gf87oy3().f[1]++;
      cov_h8gf87oy3().s[7]++;
      return store.size;
    },
    getItem: function (key) {
      /* istanbul ignore next */
      cov_h8gf87oy3().f[2]++;
      cov_h8gf87oy3().s[8]++;
      return /* istanbul ignore next */(cov_h8gf87oy3().b[1][0]++, store.get(key)) ||
      /* istanbul ignore next */
      (cov_h8gf87oy3().b[1][1]++, null);
    },
    setItem: function (key, value) {
      /* istanbul ignore next */
      cov_h8gf87oy3().f[3]++;
      cov_h8gf87oy3().s[9]++;
      store.set(key, value);
    },
    removeItem: function (key) {
      /* istanbul ignore next */
      cov_h8gf87oy3().f[4]++;
      cov_h8gf87oy3().s[10]++;
      store.delete(key);
    },
    clear: function () {
      /* istanbul ignore next */
      cov_h8gf87oy3().f[5]++;
      cov_h8gf87oy3().s[11]++;
      store.clear();
    },
    key: function (index) {
      /* istanbul ignore next */
      cov_h8gf87oy3().f[6]++;
      var keys =
      /* istanbul ignore next */
      (cov_h8gf87oy3().s[12]++, Array.from(store.keys()));
      /* istanbul ignore next */
      cov_h8gf87oy3().s[13]++;
      return /* istanbul ignore next */(cov_h8gf87oy3().b[2][0]++, keys[index]) ||
      /* istanbul ignore next */
      (cov_h8gf87oy3().b[2][1]++, null);
    }
  });
  /* istanbul ignore next */
  cov_h8gf87oy3().s[14]++;
  return storageMock;
};
/* istanbul ignore next */
cov_h8gf87oy3().s[15]++;
exports.mockStorage = mockStorage;
// Replace window storage APIs
/* istanbul ignore next */
cov_h8gf87oy3().s[16]++;
Object.defineProperty(window, 'localStorage', {
  value: (0, exports.mockStorage)()
});
/* istanbul ignore next */
cov_h8gf87oy3().s[17]++;
Object.defineProperty(window, 'sessionStorage', {
  value: (0, exports.mockStorage)()
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfaDhnZjg3b3kzIiwiYWN0dWFsQ292ZXJhZ2UiLCJzIiwibW9ja1N0b3JhZ2UiLCJpbml0aWFsRGF0YSIsImYiLCJiIiwic3RvcmUiLCJNYXAiLCJPYmplY3QiLCJlbnRyaWVzIiwic3RvcmFnZU1vY2siLCJsZW5ndGgiLCJzaXplIiwiZ2V0SXRlbSIsImtleSIsImdldCIsInNldEl0ZW0iLCJ2YWx1ZSIsInNldCIsInJlbW92ZUl0ZW0iLCJkZWxldGUiLCJjbGVhciIsImluZGV4Iiwia2V5cyIsIkFycmF5IiwiZnJvbSIsImV4cG9ydHMiLCJkZWZpbmVQcm9wZXJ0eSIsIndpbmRvdyJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9nYW16YXJhbWF6YW5vdi9EZXNrdG9wL2Z1bW8vc3JjL3NoYXJlZC90ZXN0aW5nL21vY2tzL2Jyb3dzZXIvbGliL3N0b3JhZ2Uvc3RvcmFnZS5tb2NrLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1vY2tTdG9yYWdlSW50ZXJmYWNlIH0gZnJvbSAnLi4vLi4vdHlwZXMvdHlwZXMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtb2NrIHN0b3JhZ2Ugb2JqZWN0IGZvciB0ZXN0aW5nXG4gKlxuICogQHBhcmFtIGluaXRpYWxEYXRhIC0gT3B0aW9uYWwgaW5pdGlhbCBkYXRhIHRvIHBvcHVsYXRlIHRoZSBzdG9yYWdlXG4gKiBAcmV0dXJucyBBIG1vY2sgc3RvcmFnZSBvYmplY3QgdGhhdCBpbXBsZW1lbnRzIFN0b3JhZ2VNb2NrSW50ZXJmYWNlXG4gKi9cbmV4cG9ydCBjb25zdCBtb2NrU3RvcmFnZSA9IChpbml0aWFsRGF0YTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9KTogbW9ja1N0b3JhZ2VJbnRlcmZhY2UgPT4ge1xuICBjb25zdCBzdG9yZSA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KE9iamVjdC5lbnRyaWVzKGluaXRpYWxEYXRhKSk7XG5cbiAgY29uc3Qgc3RvcmFnZU1vY2s6IG1vY2tTdG9yYWdlSW50ZXJmYWNlID0ge1xuICAgIGdldCBsZW5ndGgoKSB7XG4gICAgICByZXR1cm4gc3RvcmUuc2l6ZTtcbiAgICB9LFxuXG4gICAgZ2V0SXRlbShrZXk6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICAgICAgcmV0dXJuIHN0b3JlLmdldChrZXkpIHx8IG51bGw7XG4gICAgfSxcblxuICAgIHNldEl0ZW0oa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgIHN0b3JlLnNldChrZXksIHZhbHVlKTtcbiAgICB9LFxuXG4gICAgcmVtb3ZlSXRlbShrZXk6IHN0cmluZyk6IHZvaWQge1xuICAgICAgc3RvcmUuZGVsZXRlKGtleSk7XG4gICAgfSxcblxuICAgIGNsZWFyKCk6IHZvaWQge1xuICAgICAgc3RvcmUuY2xlYXIoKTtcbiAgICB9LFxuXG4gICAga2V5KGluZGV4OiBudW1iZXIpOiBzdHJpbmcgfCBudWxsIHtcbiAgICAgIGNvbnN0IGtleXMgPSBBcnJheS5mcm9tKHN0b3JlLmtleXMoKSk7XG4gICAgICByZXR1cm4ga2V5c1tpbmRleF0gfHwgbnVsbDtcbiAgICB9LFxuICB9O1xuXG4gIHJldHVybiBzdG9yYWdlTW9jaztcbn07XG5cbi8vIFJlcGxhY2Ugd2luZG93IHN0b3JhZ2UgQVBJc1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ2xvY2FsU3RvcmFnZScsIHsgdmFsdWU6IG1vY2tTdG9yYWdlKCkgfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnc2Vzc2lvblN0b3JhZ2UnLCB7IHZhbHVlOiBtb2NrU3RvcmFnZSgpIH0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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