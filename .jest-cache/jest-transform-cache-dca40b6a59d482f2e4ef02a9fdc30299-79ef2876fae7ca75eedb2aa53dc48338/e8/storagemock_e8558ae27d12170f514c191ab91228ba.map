{"version":3,"names":["cov_h8gf87oy3","actualCoverage","s","mockStorage","initialData","f","b","store","Map","Object","entries","storageMock","length","size","getItem","key","get","setItem","value","set","removeItem","delete","clear","index","keys","Array","from","exports","defineProperty","window"],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/shared/testing/mocks/browser/lib/storage/storage.mock.ts"],"sourcesContent":["import { mockStorageInterface } from '../../types/types';\n\n/**\n * Creates a mock storage object for testing\n *\n * @param initialData - Optional initial data to populate the storage\n * @returns A mock storage object that implements StorageMockInterface\n */\nexport const mockStorage = (initialData: Record<string, string> = {}): mockStorageInterface => {\n  const store = new Map<string, string>(Object.entries(initialData));\n\n  const storageMock: mockStorageInterface = {\n    get length() {\n      return store.size;\n    },\n\n    getItem(key: string): string | null {\n      return store.get(key) || null;\n    },\n\n    setItem(key: string, value: string): void {\n      store.set(key, value);\n    },\n\n    removeItem(key: string): void {\n      store.delete(key);\n    },\n\n    clear(): void {\n      store.clear();\n    },\n\n    key(index: number): string | null {\n      const keys = Array.from(store.keys());\n      return keys[index] || null;\n    },\n  };\n\n  return storageMock;\n};\n\n// Replace window storage APIs\nObject.defineProperty(window, 'localStorage', { value: mockStorage() });\nObject.defineProperty(window, 'sessionStorage', { value: mockStorage() });\n"],"mappingscK;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAAAA,aAAA,GAAAE,CAAA;;;;;;;AAZL;;;;;;AAAA;AAAAF,aAAA,GAAAE,CAAA;AAMO,IAAMC,WAAW,GAAG,SAAAA,CAACC,WAAwC;EAAA;EAAAJ,aAAA,GAAAK,CAAA;EAAAL,aAAA,GAAAE,CAAA;EAAxC,IAAAE,WAAA;IAAA;IAAAJ,aAAA,GAAAM,CAAA;IAAAN,aAAA,GAAAE,CAAA;IAAAE,WAAA,KAAwC;EAAA;EAAA;EAAA;IAAAJ,aAAA,GAAAM,CAAA;EAAA;EAClE,IAAMC,KAAK;EAAA;EAAA,CAAAP,aAAA,GAAAE,CAAA,OAAG,IAAIM,GAAG,CAAiBC,MAAM,CAACC,OAAO,CAACN,WAAW,CAAC,CAAC;EAElE,IAAMO,WAAW;EAAA;EAAA,CAAAX,aAAA,GAAAE,CAAA,OAAyB;IACxC,IAAIU,MAAMA,CAAA;MAAA;MAAAZ,aAAA,GAAAK,CAAA;MAAAL,aAAA,GAAAE,CAAA;MACR,OAAOK,KAAK,CAACM,IAAI;IACnB,CAAC;IAEDC,OAAO,WAAAA,CAACC,GAAW;MAAA;MAAAf,aAAA,GAAAK,CAAA;MAAAL,aAAA,GAAAE,CAAA;MACjB,OAAO,2BAAAF,aAAA,GAAAM,CAAA,UAAAC,KAAK,CAACS,GAAG,CAACD,GAAG,CAAC;MAAA;MAAA,CAAAf,aAAA,GAAAM,CAAA,UAAI,IAAI;IAC/B,CAAC;IAEDW,OAAO,WAAAA,CAACF,GAAW,EAAEG,KAAa;MAAA;MAAAlB,aAAA,GAAAK,CAAA;MAAAL,aAAA,GAAAE,CAAA;MAChCK,KAAK,CAACY,GAAG,CAACJ,GAAG,EAAEG,KAAK,CAAC;IACvB,CAAC;IAEDE,UAAU,WAAAA,CAACL,GAAW;MAAA;MAAAf,aAAA,GAAAK,CAAA;MAAAL,aAAA,GAAAE,CAAA;MACpBK,KAAK,CAACc,MAAM,CAACN,GAAG,CAAC;IACnB,CAAC;IAEDO,KAAK,WAAAA,CAAA;MAAA;MAAAtB,aAAA,GAAAK,CAAA;MAAAL,aAAA,GAAAE,CAAA;MACHK,KAAK,CAACe,KAAK,EAAE;IACf,CAAC;IAEDP,GAAG,WAAAA,CAACQ,KAAa;MAAA;MAAAvB,aAAA,GAAAK,CAAA;MACf,IAAMmB,IAAI;MAAA;MAAA,CAAAxB,aAAA,GAAAE,CAAA,QAAGuB,KAAK,CAACC,IAAI,CAACnB,KAAK,CAACiB,IAAI,EAAE,CAAC;MAAC;MAAAxB,aAAA,GAAAE,CAAA;MACtC,OAAO,2BAAAF,aAAA,GAAAM,CAAA,UAAAkB,IAAI,CAACD,KAAK,CAAC;MAAA;MAAA,CAAAvB,aAAA,GAAAM,CAAA,UAAI,IAAI;IAC5B;GACD;EAAC;EAAAN,aAAA,GAAAE,CAAA;EAEF,OAAOS,WAAW;AACpB,CAAC;AAAC;AAAAX,aAAA,GAAAE,CAAA;AA/BWyB,OAAA,CAAAxB,WAAW,GAAAA,WAAA;AAiCxB;AAAA;AAAAH,aAAA,GAAAE,CAAA;AACAO,MAAM,CAACmB,cAAc,CAACC,MAAM,EAAE,cAAc,EAAE;EAAEX,KAAK,EAAE,IAAAS,OAAA,CAAAxB,WAAW;AAAE,CAAE,CAAC;AAAC;AAAAH,aAAA,GAAAE,CAAA;AACxEO,MAAM,CAACmB,cAAc,CAACC,MAAM,EAAE,gBAAgB,EAAE;EAAEX,KAAK,EAAE,IAAAS,OAAA,CAAAxB,WAAW;AAAE,CAAE,CAAC","ignoreList":[]}