{"version":3,"names":["cov_1dpshchxfk","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","react_1","require","useStore","store","selector","useSyncExternalStore","subscribe","getState","exports","useShallowStore","useStoreState","state","useStoreHydrated","_a","_hydrated","useStoreActions","setState","reset","clearStorage"],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/state/stateHooks/stateHooks.ts"],"sourcesContent":["/**\n * State Management Hooks\n *\n * Universal React hooks for Zustand stores that work with any application.\n * Foundation-level only - no overengineering.\n */\n\nimport { useSyncExternalStore } from 'react';\nimport type { BaseState, EnhancedStore } from '../types/types';\n\n// ============================================================================\n// CORE HOOKS\n// ============================================================================\n\n/**\n * Subscribe to store with selector\n */\nexport const useStore = <TStore, TResult>(\n  store: EnhancedStore<TStore>,\n  selector: (state: TStore) => TResult\n): TResult => {\n  return useSyncExternalStore(\n    store.subscribe,\n    () => selector(store.getState()),\n    () => selector(store.getState())\n  );\n};\n\n/**\n * Subscribe to store with shallow comparison\n */\nexport const useShallowStore = <TStore, TResult>(\n  store: EnhancedStore<TStore>,\n  selector: (state: TStore) => TResult\n): TResult => {\n  return useStore(store, selector);\n};\n\n/**\n * Subscribe to complete store state\n */\nexport const useStoreState = <TStore>(store: EnhancedStore<TStore>): TStore => {\n  return useStore(store, (state) => state);\n};\n\n/**\n * Subscribe to hydration status\n */\nexport const useStoreHydrated = <TStore extends BaseState>(\n  store: EnhancedStore<TStore>\n): boolean => {\n  return useStore(store, (state) => (state as { _hydrated?: boolean })._hydrated ?? false);\n};\n\n/**\n * Get store actions (setState, reset, clearStorage)\n */\nexport const useStoreActions = <TStore>(store: EnhancedStore<TStore>) => {\n  return {\n    setState: store.setState,\n    reset: store.reset,\n    clearStorage: store.clearStorage,\n  };\n};\n\n// ============================================================================\n// UTILITIES\n// ============================================================================\n"],"mappings":"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","ignoreList":[]}