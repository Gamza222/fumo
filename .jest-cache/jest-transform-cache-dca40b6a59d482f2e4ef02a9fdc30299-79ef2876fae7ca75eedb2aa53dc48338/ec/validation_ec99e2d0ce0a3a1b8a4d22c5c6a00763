8430ea386fc5260a947e7ad9ad8c2777
"use strict";
/**
 * Environment Validation
 *
 * Validation functions for environment variables and configuration.
 * Clean, focused validation logic.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCurrentEnvironment = getCurrentEnvironment;
exports.isDevelopment = isDevelopment;
exports.isProduction = isProduction;
exports.isTest = isTest;
exports.isPreview = isPreview;
exports.validateEnvVariable = validateEnvVariable;
exports.validateEnvironmentVariables = validateEnvironmentVariables;
var types_1 = require("./types");
var constants_1 = require("./constants");
/**
 * Get current environment from NODE_ENV
 */
function getCurrentEnvironment() {
    var nodeEnv = process.env.NODE_ENV;
    return Object.values(types_1.Environment).includes(nodeEnv) ? nodeEnv : types_1.Environment.Development;
}
/**
 * Check if running in development environment
 */
function isDevelopment() {
    return getCurrentEnvironment() === types_1.Environment.Development;
}
/**
 * Check if running in production environment
 */
function isProduction() {
    return getCurrentEnvironment() === types_1.Environment.Production;
}
/**
 * Check if running in test environment
 */
function isTest() {
    return getCurrentEnvironment() === types_1.Environment.Test;
}
/**
 * Check if running in preview environment
 */
function isPreview() {
    return getCurrentEnvironment() === types_1.Environment.Preview;
}
/**
 * Validate a single environment variable
 */
function validateEnvVariable(key, value) {
    var rule = constants_1.ENV_VALIDATION_RULES[key];
    if (!rule) {
        return { isValid: true }; // No validation rule, assume valid
    }
    if (rule.required && (!value || value.trim() === '')) {
        return { isValid: false, error: "".concat(key, " is required but not set") };
    }
    if (rule.type === 'enum' && rule.values && !rule.values.includes(value)) {
        return { isValid: false, error: "".concat(key, " must be one of: ").concat(rule.values.join(', ')) };
    }
    if (rule.type === 'number') {
        var num = parseInt(value, 10);
        if (isNaN(num)) {
            return { isValid: false, error: "".concat(key, " must be a valid number") };
        }
        if (rule.min !== undefined && num < rule.min) {
            return { isValid: false, error: "".concat(key, " must be at least ").concat(rule.min) };
        }
        if (rule.max !== undefined && num > rule.max) {
            return { isValid: false, error: "".concat(key, " must be at most ").concat(rule.max) };
        }
    }
    if (rule.type === 'string') {
        if (rule.minLength && value.length < rule.minLength) {
            return { isValid: false, error: "".concat(key, " must be at least ").concat(rule.minLength, " characters") };
        }
    }
    if (rule.type === 'url') {
        try {
            new URL(value);
        }
        catch (_a) {
            return { isValid: false, error: "".concat(key, " must be a valid URL") };
        }
    }
    return { isValid: true };
}
/**
 * Validate all environment variables
 */
function validateEnvironmentVariables() {
    var errors = [];
    var warnings = [];
    // Check required variables
    for (var _i = 0, REQUIRED_ENV_VARS_1 = constants_1.REQUIRED_ENV_VARS; _i < REQUIRED_ENV_VARS_1.length; _i++) {
        var key = REQUIRED_ENV_VARS_1[_i];
        var value = process.env[key];
        var validation = validateEnvVariable(key, value || '');
        if (!validation.isValid) {
            errors.push(validation.error);
        }
    }
    // Check all environment variables
    for (var _a = 0, _b = Object.entries(process.env); _a < _b.length; _a++) {
        var _c = _b[_a], key = _c[0], value = _c[1];
        if (key in constants_1.ENV_DEFAULTS) {
            var validation = validateEnvVariable(key, value || '');
            if (!validation.isValid) {
                errors.push(validation.error);
            }
        }
    }
    // Check for production-specific warnings
    if (isProduction()) {
        var jwtSecret = process.env.JWT_SECRET;
        if (jwtSecret === constants_1.ENV_DEFAULTS.JWT_SECRET) {
            warnings.push('JWT_SECRET is using default value in production');
        }
    }
    return {
        isValid: errors.length === 0,
        errors: errors,
        warnings: warnings,
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,