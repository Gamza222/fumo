{"file":"/Users/gamzaramazanov/Desktop/fumo/config/env/validation.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/config/env/validation.ts"],"sourcesContent":["/**\n * Environment Validation\n *\n * Validation functions for environment variables and configuration.\n * Clean, focused validation logic.\n */\n\nimport { Environment, EnvValidationResult, EnvVariableNames } from './types';\nimport { ENV_DEFAULTS, ENV_VALIDATION_RULES, REQUIRED_ENV_VARS } from './constants';\n\n/**\n * Get current environment from NODE_ENV\n */\nexport function getCurrentEnvironment(): Environment {\n  const nodeEnv = process.env.NODE_ENV as Environment;\n  return Object.values(Environment).includes(nodeEnv) ? nodeEnv : Environment.Development;\n}\n\n/**\n * Check if running in development environment\n */\nexport function isDevelopment(): boolean {\n  return getCurrentEnvironment() === Environment.Development;\n}\n\n/**\n * Check if running in production environment\n */\nexport function isProduction(): boolean {\n  return getCurrentEnvironment() === Environment.Production;\n}\n\n/**\n * Check if running in test environment\n */\nexport function isTest(): boolean {\n  return getCurrentEnvironment() === Environment.Test;\n}\n\n/**\n * Check if running in preview environment\n */\nexport function isPreview(): boolean {\n  return getCurrentEnvironment() === Environment.Preview;\n}\n\n/**\n * Validate a single environment variable\n */\nexport function validateEnvVariable(\n  key: keyof EnvVariableNames,\n  value: string\n): { isValid: boolean; error?: string } {\n  const rule = ENV_VALIDATION_RULES[key as keyof typeof ENV_VALIDATION_RULES];\n\n  if (!rule) {\n    return { isValid: true }; // No validation rule, assume valid\n  }\n\n  if (rule.required && (!value || value.trim() === '')) {\n    return { isValid: false, error: `${key} is required but not set` };\n  }\n\n  if (rule.type === 'enum' && rule.values && !rule.values.includes(value as Environment)) {\n    return { isValid: false, error: `${key} must be one of: ${rule.values.join(', ')}` };\n  }\n\n  if (rule.type === 'number') {\n    const num = parseInt(value, 10);\n    if (isNaN(num)) {\n      return { isValid: false, error: `${key} must be a valid number` };\n    }\n    if (rule.min !== undefined && num < rule.min) {\n      return { isValid: false, error: `${key} must be at least ${rule.min}` };\n    }\n    if (rule.max !== undefined && num > rule.max) {\n      return { isValid: false, error: `${key} must be at most ${rule.max}` };\n    }\n  }\n\n  if (rule.type === 'string') {\n    if (rule.minLength && value.length < rule.minLength) {\n      return { isValid: false, error: `${key} must be at least ${rule.minLength} characters` };\n    }\n  }\n\n  if (rule.type === 'url') {\n    try {\n      new URL(value);\n    } catch {\n      return { isValid: false, error: `${key} must be a valid URL` };\n    }\n  }\n\n  return { isValid: true };\n}\n\n/**\n * Validate all environment variables\n */\nexport function validateEnvironmentVariables(): EnvValidationResult {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  // Check required variables\n  for (const key of REQUIRED_ENV_VARS) {\n    const value = process.env[key];\n    const validation = validateEnvVariable(key, value || '');\n\n    if (!validation.isValid) {\n      errors.push(validation.error!);\n    }\n  }\n\n  // Check all environment variables\n  for (const [key, value] of Object.entries(process.env)) {\n    if (key in ENV_DEFAULTS) {\n      const validation = validateEnvVariable(key as keyof EnvVariableNames, value || '');\n\n      if (!validation.isValid) {\n        errors.push(validation.error!);\n      }\n    }\n  }\n\n  // Check for production-specific warnings\n  if (isProduction()) {\n    const jwtSecret = process.env.JWT_SECRET;\n    if (jwtSecret === ENV_DEFAULTS.JWT_SECRET) {\n      warnings.push('JWT_SECRET is using default value in production');\n    }\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings,\n  };\n}\n"],"version":3}