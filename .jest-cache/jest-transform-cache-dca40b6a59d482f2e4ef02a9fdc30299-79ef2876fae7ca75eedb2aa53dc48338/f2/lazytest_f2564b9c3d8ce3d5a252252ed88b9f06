35de110b2e89ecdc3daf479faff441b3
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
/**
 * Lazy Loading Tests
 *
 * Real-life enterprise scenarios testing with minimal mocking.
 * Uses existing mock factory patterns.
 */
var react_1 = __importStar(require("react"));
var react_2 = require("@testing-library/react");
var lazy_1 = require("./lazy");
var browser_1 = require("@/shared/testing/mocks/browser");
// Test components
var SuccessComponent = function () { return ((0, jsx_runtime_1.jsx)("div", { children: "Component loaded successfully" })); };
// const ErrorComponent: React.FC = () => <div>This should not render</div>;
describe('Lazy Loading', function () {
    beforeEach(function () {
        browser_1.mockConsole.clear();
    });
    afterEach(function () {
        browser_1.mockConsole.restore();
        // Clear any pending timers
        jest.clearAllTimers();
    });
    // ============================================================================
    // LAZY WITH RETRY
    // ============================================================================
    describe('lazyWithRetry', function () {
        it('should load component successfully on first attempt', function () { return __awaiter(void 0, void 0, void 0, function () {
            var LazyComponent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        LazyComponent = (0, lazy_1.lazyWithRetry)(function () { return Promise.resolve({ default: SuccessComponent }); });
                        (0, react_2.render)((0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)("div", { children: "Loading..." }), children: (0, jsx_runtime_1.jsx)(LazyComponent, {}) }));
                        expect(react_2.screen.getByText('Loading...')).toBeInTheDocument();
                        return [4 /*yield*/, (0, react_2.waitFor)(function () {
                                expect(react_2.screen.getByText('Component loaded successfully')).toBeInTheDocument();
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        it('should handle retry logic configuration', function () {
            // Real scenario: configurable retry behavior
            var LazyComponent = (0, lazy_1.lazyWithRetry)(function () { return Promise.resolve({ default: SuccessComponent }); }, {
                maxRetries: 5,
                retryDelay: 500,
            });
            // Should create component without throwing
            expect(LazyComponent).toBeDefined();
            expect(typeof LazyComponent).toBe('object');
        });
        it('should fail after max retries', function () { return __awaiter(void 0, void 0, void 0, function () {
            var LazyComponent, ErrorBoundary;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        LazyComponent = (0, lazy_1.lazyWithRetry)(function () { return Promise.reject(new Error('Persistent error')); }, {
                            maxRetries: 2,
                            retryDelay: 10,
                        });
                        ErrorBoundary = function (_a) {
                            var children = _a.children;
                            try {
                                return (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: children });
                            }
                            catch (_b) {
                                return (0, jsx_runtime_1.jsx)("div", { children: "Failed to load component" });
                            }
                        };
                        (0, react_2.render)((0, jsx_runtime_1.jsx)(ErrorBoundary, { children: (0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)("div", { children: "Loading..." }), children: (0, jsx_runtime_1.jsx)(LazyComponent, {}) }) }));
                        // Should show loading first
                        expect(react_2.screen.getByText('Loading...')).toBeInTheDocument();
                        // Should eventually fail (this will be caught by error boundary in real apps)
                        return [4 /*yield*/, (0, react_2.waitFor)(function () {
                                expect(react_2.screen.queryByText('Loading...')).toBeInTheDocument();
                            })];
                    case 1:
                        // Should eventually fail (this will be caught by error boundary in real apps)
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        it('should accept custom retry options', function () {
            // Real scenario: custom retry configuration
            var LazyComponent = (0, lazy_1.lazyWithRetry)(function () { return Promise.resolve({ default: SuccessComponent }); }, {
                maxRetries: 1,
                retryDelay: 10,
            });
            // Should create component with custom options
            expect(LazyComponent).toBeDefined();
            expect(typeof LazyComponent).toBe('object');
        });
        it('should support development mode configuration', function () {
            // Real scenario: development vs production behavior
            var originalEnv = process.env.NODE_ENV;
            process.env.NODE_ENV = 'development';
            var LazyComponent = (0, lazy_1.lazyWithRetry)(function () { return Promise.resolve({ default: SuccessComponent }); });
            expect(LazyComponent).toBeDefined();
            process.env.NODE_ENV = originalEnv;
        });
        it('should not log in production', function () { return __awaiter(void 0, void 0, void 0, function () {
            var originalEnv, attempts, LazyComponent, consoleCalls, warnCalls;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        originalEnv = process.env.NODE_ENV;
                        process.env.NODE_ENV = 'production';
                        attempts = 0;
                        LazyComponent = (0, lazy_1.lazyWithRetry)(function () {
                            attempts++;
                            if (attempts < 2) {
                                return Promise.reject(new Error('Prod retry test'));
                            }
                            return Promise.resolve({ default: SuccessComponent });
                        }, { retryDelay: 10 });
                        (0, react_2.render)((0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)("div", { children: "Loading..." }), children: (0, jsx_runtime_1.jsx)(LazyComponent, {}) }));
                        return [4 /*yield*/, (0, react_2.waitFor)(function () {
                                expect(react_2.screen.getByText('Component loaded successfully')).toBeInTheDocument();
                            })];
                    case 1:
                        _a.sent();
                        consoleCalls = browser_1.mockConsole.getCalls();
                        warnCalls = consoleCalls.filter(function (call) { return call.method === 'warn'; });
                        expect(warnCalls).toHaveLength(0);
                        process.env.NODE_ENV = originalEnv;
                        return [2 /*return*/];
                }
            });
        }); });
    });
    // ============================================================================
    // SIMPLE LAZY
    // ============================================================================
    describe('simpleLazy', function () {
        it('should load component without retry logic', function () { return __awaiter(void 0, void 0, void 0, function () {
            var LazyComponent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        LazyComponent = (0, lazy_1.simpleLazy)(function () { return Promise.resolve({ default: SuccessComponent }); });
                        (0, react_2.render)((0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)("div", { children: "Loading..." }), children: (0, jsx_runtime_1.jsx)(LazyComponent, {}) }));
                        return [4 /*yield*/, (0, react_2.waitFor)(function () {
                                expect(react_2.screen.getByText('Component loaded successfully')).toBeInTheDocument();
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        it('should fail immediately without retries', function () {
            // Real scenario: immediate failure without retry overhead
            var LazyComponent = (0, lazy_1.simpleLazy)(function () { return Promise.reject(new Error('Immediate failure')); });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)("div", { children: "Loading..." }), children: (0, jsx_runtime_1.jsx)(LazyComponent, {}) }));
            // Should show loading, then fail (caught by error boundary in real apps)
            expect(react_2.screen.getByText('Loading...')).toBeInTheDocument();
        });
    });
    // ============================================================================
    // ROBUST LAZY
    // ============================================================================
    describe('robustLazy', function () {
        it('should create component with aggressive retry settings', function () {
            // Real scenario: unstable network requires more retries
            var LazyComponent = (0, lazy_1.robustLazy)(function () { return Promise.resolve({ default: SuccessComponent }); });
            expect(LazyComponent).toBeDefined();
            expect(typeof LazyComponent).toBe('object');
        });
        it('should load component successfully', function () { return __awaiter(void 0, void 0, void 0, function () {
            var LazyComponent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        LazyComponent = (0, lazy_1.robustLazy)(function () { return Promise.resolve({ default: SuccessComponent }); });
                        (0, react_2.render)((0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)("div", { children: "Loading..." }), children: (0, jsx_runtime_1.jsx)(LazyComponent, {}) }));
                        return [4 /*yield*/, (0, react_2.waitFor)(function () {
                                expect(react_2.screen.getByText('Component loaded successfully')).toBeInTheDocument();
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    });
    // ============================================================================
    // INTEGRATION SCENARIOS
    // ============================================================================
    describe('Integration Scenarios', function () {
        it('should work with multiple lazy components', function () { return __awaiter(void 0, void 0, void 0, function () {
            var LazyHeader, LazyContent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        LazyHeader = (0, lazy_1.lazyWithRetry)(function () {
                            return Promise.resolve({ default: function () { return (0, jsx_runtime_1.jsx)("div", { children: "Lazy Header" }); } });
                        });
                        LazyContent = (0, lazy_1.lazyWithRetry)(function () {
                            return Promise.resolve({ default: function () { return (0, jsx_runtime_1.jsx)("div", { children: "Lazy Content" }); } });
                        });
                        (0, react_2.render)((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)("div", { children: "Loading header..." }), children: (0, jsx_runtime_1.jsx)(LazyHeader, {}) }), (0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)("div", { children: "Loading content..." }), children: (0, jsx_runtime_1.jsx)(LazyContent, {}) })] }));
                        return [4 /*yield*/, (0, react_2.waitFor)(function () {
                                expect(react_2.screen.getByText('Lazy Header')).toBeInTheDocument();
                                expect(react_2.screen.getByText('Lazy Content')).toBeInTheDocument();
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        it('should handle concurrent loading', function () { return __awaiter(void 0, void 0, void 0, function () {
            var components;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        components = Array.from({ length: 3 }, function (_, i) {
                            return (0, lazy_1.lazyWithRetry)(function () { return Promise.resolve({ default: function () { return (0, jsx_runtime_1.jsxs)("div", { children: ["Component ", i + 1] }); } }); });
                        });
                        (0, react_2.render)((0, jsx_runtime_1.jsx)("div", { children: components.map(function (LazyComponent, i) { return ((0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsxs)("div", { children: ["Loading ", i + 1, "..."] }), children: (0, jsx_runtime_1.jsx)(LazyComponent, {}) }, i)); }) }));
                        return [4 /*yield*/, (0, react_2.waitFor)(function () {
                                expect(react_2.screen.getByText('Component 1')).toBeInTheDocument();
                                expect(react_2.screen.getByText('Component 2')).toBeInTheDocument();
                                expect(react_2.screen.getByText('Component 3')).toBeInTheDocument();
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        it('should handle different retry strategies', function () { return __awaiter(void 0, void 0, void 0, function () {
            var StableComponent, UnstableComponent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        StableComponent = (0, lazy_1.simpleLazy)(function () {
                            return Promise.resolve({ default: function () { return (0, jsx_runtime_1.jsx)("div", { children: "Stable Component" }); } });
                        });
                        UnstableComponent = (0, lazy_1.robustLazy)(function () {
                            return Promise.resolve({ default: function () { return (0, jsx_runtime_1.jsx)("div", { children: "Unstable Component" }); } });
                        });
                        (0, react_2.render)((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)("div", { children: "Loading stable..." }), children: (0, jsx_runtime_1.jsx)(StableComponent, {}) }), (0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)("div", { children: "Loading unstable..." }), children: (0, jsx_runtime_1.jsx)(UnstableComponent, {}) })] }));
                        return [4 /*yield*/, (0, react_2.waitFor)(function () {
                                expect(react_2.screen.getByText('Stable Component')).toBeInTheDocument();
                                expect(react_2.screen.getByText('Unstable Component')).toBeInTheDocument();
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    });
    // ============================================================================
    // PERFORMANCE SCENARIOS
    // ============================================================================
    describe('Performance Scenarios', function () {
        it('should handle rapid consecutive loads', function () { return __awaiter(void 0, void 0, void 0, function () {
            var LazyPage, rerender, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        LazyPage = (0, lazy_1.lazyWithRetry)(function () { return Promise.resolve({ default: SuccessComponent }); });
                        rerender = (0, react_2.render)((0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)("div", { children: "Loading..." }), children: (0, jsx_runtime_1.jsx)(LazyPage, {}) })).rerender;
                        // Rapidly rerender multiple times
                        for (i = 0; i < 5; i++) {
                            rerender((0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)("div", { children: "Loading..." }), children: (0, jsx_runtime_1.jsx)(LazyPage, {}) }));
                        }
                        return [4 /*yield*/, (0, react_2.waitFor)(function () {
                                expect(react_2.screen.getByText('Component loaded successfully')).toBeInTheDocument();
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        it('should not leak memory with component unmounting', function () {
            // Real scenario: ensure cleanup of lazy components
            var LazyComponent = (0, lazy_1.lazyWithRetry)(function () { return Promise.resolve({ default: SuccessComponent }); });
            var unmount = (0, react_2.render)((0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)("div", { children: "Loading..." }), children: (0, jsx_runtime_1.jsx)(LazyComponent, {}) })).unmount;
            // Should unmount without throwing
            expect(function () { return unmount(); }).not.toThrow();
        });
    });
});
describe('Lazy Loading Integration', function () {
    it('should work in real application scenarios', function () { return __awaiter(void 0, void 0, void 0, function () {
        var LazyDashboard, App;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    LazyDashboard = (0, lazy_1.lazyWithRetry)(function () {
                        return Promise.resolve({
                            default: function () { return ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h1", { children: "Dashboard" }), (0, jsx_runtime_1.jsx)("p", { children: "Dashboard content loaded" })] })); },
                        });
                    });
                    App = function () { return ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("nav", { children: "Navigation" }), (0, jsx_runtime_1.jsx)("main", { children: (0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)("div", { children: "Loading dashboard..." }), children: (0, jsx_runtime_1.jsx)(LazyDashboard, {}) }) })] })); };
                    (0, react_2.render)((0, jsx_runtime_1.jsx)(App, {}));
                    expect(react_2.screen.getByText('Navigation')).toBeInTheDocument();
                    expect(react_2.screen.getByText('Loading dashboard...')).toBeInTheDocument();
                    return [4 /*yield*/, (0, react_2.waitFor)(function () {
                            expect(react_2.screen.getByText('Dashboard')).toBeInTheDocument();
                            expect(react_2.screen.getByText('Dashboard content loaded')).toBeInTheDocument();
                        })];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,