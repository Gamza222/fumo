{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/suspense/lazy/lazy.test.tsx","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/suspense/lazy/lazy.test.tsx"],"sourcesContent":["/**\n * Lazy Loading Tests\n *\n * Real-life enterprise scenarios testing with minimal mocking.\n * Uses existing mock factory patterns.\n */\n\nimport React, { Suspense } from 'react';\nimport { render, screen, waitFor } from '@testing-library/react';\nimport { lazyWithRetry, robustLazy, simpleLazy } from './lazy';\nimport { mockConsole } from '@/shared/testing/mocks/browser';\n\n// Test components\nconst SuccessComponent: React.ComponentType<unknown> = () => (\n  <div>Component loaded successfully</div>\n);\n// const ErrorComponent: React.FC = () => <div>This should not render</div>;\n\ndescribe('Lazy Loading', () => {\n  beforeEach(() => {\n    mockConsole.clear();\n  });\n\n  afterEach(() => {\n    mockConsole.restore();\n    // Clear any pending timers\n    jest.clearAllTimers();\n  });\n\n  // ============================================================================\n  // LAZY WITH RETRY\n  // ============================================================================\n\n  describe('lazyWithRetry', () => {\n    it('should load component successfully on first attempt', async () => {\n      // Real scenario: component loads without issues\n      const LazyComponent = lazyWithRetry(() => Promise.resolve({ default: SuccessComponent }));\n\n      render(\n        <Suspense fallback={<div>Loading...</div>}>\n          <LazyComponent />\n        </Suspense>\n      );\n\n      expect(screen.getByText('Loading...')).toBeInTheDocument();\n\n      await waitFor(() => {\n        expect(screen.getByText('Component loaded successfully')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle retry logic configuration', () => {\n      // Real scenario: configurable retry behavior\n      const LazyComponent = lazyWithRetry(() => Promise.resolve({ default: SuccessComponent }), {\n        maxRetries: 5,\n        retryDelay: 500,\n      });\n\n      // Should create component without throwing\n      expect(LazyComponent).toBeDefined();\n      expect(typeof LazyComponent).toBe('object');\n    });\n\n    it('should fail after max retries', async () => {\n      // Real scenario: persistent network failure\n      const LazyComponent = lazyWithRetry(() => Promise.reject(new Error('Persistent error')), {\n        maxRetries: 2,\n        retryDelay: 10,\n      });\n\n      // Catch the error that will be thrown\n      const ErrorBoundary: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n        try {\n          return <>{children}</>;\n        } catch {\n          return <div>Failed to load component</div>;\n        }\n      };\n\n      render(\n        <ErrorBoundary>\n          <Suspense fallback={<div>Loading...</div>}>\n            <LazyComponent />\n          </Suspense>\n        </ErrorBoundary>\n      );\n\n      // Should show loading first\n      expect(screen.getByText('Loading...')).toBeInTheDocument();\n\n      // Should eventually fail (this will be caught by error boundary in real apps)\n      await waitFor(() => {\n        expect(screen.queryByText('Loading...')).toBeInTheDocument();\n      });\n    });\n\n    it('should accept custom retry options', () => {\n      // Real scenario: custom retry configuration\n      const LazyComponent = lazyWithRetry(() => Promise.resolve({ default: SuccessComponent }), {\n        maxRetries: 1,\n        retryDelay: 10,\n      });\n\n      // Should create component with custom options\n      expect(LazyComponent).toBeDefined();\n      expect(typeof LazyComponent).toBe('object');\n    });\n\n    it('should support development mode configuration', () => {\n      // Real scenario: development vs production behavior\n      const originalEnv = process.env.NODE_ENV;\n      (process.env as any).NODE_ENV = 'development';\n\n      const LazyComponent = lazyWithRetry(() => Promise.resolve({ default: SuccessComponent }));\n\n      expect(LazyComponent).toBeDefined();\n\n      (process.env as any).NODE_ENV = originalEnv;\n    });\n\n    it('should not log in production', async () => {\n      // Real scenario: production behavior\n      const originalEnv = process.env.NODE_ENV;\n      (process.env as any).NODE_ENV = 'production';\n\n      let attempts = 0;\n      const LazyComponent = lazyWithRetry(\n        () => {\n          attempts++;\n          if (attempts < 2) {\n            return Promise.reject(new Error('Prod retry test'));\n          }\n          return Promise.resolve({ default: SuccessComponent });\n        },\n        { retryDelay: 10 }\n      );\n\n      render(\n        <Suspense fallback={<div>Loading...</div>}>\n          <LazyComponent />\n        </Suspense>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('Component loaded successfully')).toBeInTheDocument();\n      });\n\n      // Should not have logged anything\n      const consoleCalls = mockConsole.getCalls();\n      const warnCalls = consoleCalls.filter((call) => call.method === 'warn');\n      expect(warnCalls).toHaveLength(0);\n\n      (process.env as any).NODE_ENV = originalEnv;\n    });\n  });\n\n  // ============================================================================\n  // SIMPLE LAZY\n  // ============================================================================\n\n  describe('simpleLazy', () => {\n    it('should load component without retry logic', async () => {\n      // Real scenario: stable component loading\n      const LazyComponent = simpleLazy(() => Promise.resolve({ default: SuccessComponent }));\n\n      render(\n        <Suspense fallback={<div>Loading...</div>}>\n          <LazyComponent />\n        </Suspense>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('Component loaded successfully')).toBeInTheDocument();\n      });\n    });\n\n    it('should fail immediately without retries', () => {\n      // Real scenario: immediate failure without retry overhead\n      const LazyComponent = simpleLazy(() => Promise.reject(new Error('Immediate failure')));\n\n      render(\n        <Suspense fallback={<div>Loading...</div>}>\n          <LazyComponent />\n        </Suspense>\n      );\n\n      // Should show loading, then fail (caught by error boundary in real apps)\n      expect(screen.getByText('Loading...')).toBeInTheDocument();\n    });\n  });\n\n  // ============================================================================\n  // ROBUST LAZY\n  // ============================================================================\n\n  describe('robustLazy', () => {\n    it('should create component with aggressive retry settings', () => {\n      // Real scenario: unstable network requires more retries\n      const LazyComponent = robustLazy(() => Promise.resolve({ default: SuccessComponent }));\n\n      expect(LazyComponent).toBeDefined();\n      expect(typeof LazyComponent).toBe('object');\n    });\n\n    it('should load component successfully', async () => {\n      // Real scenario: robust loading eventually succeeds\n      const LazyComponent = robustLazy(() => Promise.resolve({ default: SuccessComponent }));\n\n      render(\n        <Suspense fallback={<div>Loading...</div>}>\n          <LazyComponent />\n        </Suspense>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('Component loaded successfully')).toBeInTheDocument();\n      });\n    });\n  });\n\n  // ============================================================================\n  // INTEGRATION SCENARIOS\n  // ============================================================================\n\n  describe('Integration Scenarios', () => {\n    it('should work with multiple lazy components', async () => {\n      // Real scenario: page with multiple lazy-loaded sections\n      const LazyHeader = lazyWithRetry(() =>\n        Promise.resolve({ default: () => <div>Lazy Header</div> })\n      );\n\n      const LazyContent = lazyWithRetry(() =>\n        Promise.resolve({ default: () => <div>Lazy Content</div> })\n      );\n\n      render(\n        <div>\n          <Suspense fallback={<div>Loading header...</div>}>\n            <LazyHeader />\n          </Suspense>\n          <Suspense fallback={<div>Loading content...</div>}>\n            <LazyContent />\n          </Suspense>\n        </div>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('Lazy Header')).toBeInTheDocument();\n        expect(screen.getByText('Lazy Content')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle concurrent loading', async () => {\n      // Real scenario: multiple components loading simultaneously\n      const components = Array.from({ length: 3 }, (_, i) =>\n        lazyWithRetry(() => Promise.resolve({ default: () => <div>Component {i + 1}</div> }))\n      );\n\n      render(\n        <div>\n          {components.map((LazyComponent, i) => (\n            <Suspense key={i} fallback={<div>Loading {i + 1}...</div>}>\n              <LazyComponent />\n            </Suspense>\n          ))}\n        </div>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('Component 1')).toBeInTheDocument();\n        expect(screen.getByText('Component 2')).toBeInTheDocument();\n        expect(screen.getByText('Component 3')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle different retry strategies', async () => {\n      // Real scenario: mixing different loading strategies\n      const StableComponent = simpleLazy(() =>\n        Promise.resolve({ default: () => <div>Stable Component</div> })\n      );\n\n      const UnstableComponent = robustLazy(() =>\n        Promise.resolve({ default: () => <div>Unstable Component</div> })\n      );\n\n      render(\n        <div>\n          <Suspense fallback={<div>Loading stable...</div>}>\n            <StableComponent />\n          </Suspense>\n          <Suspense fallback={<div>Loading unstable...</div>}>\n            <UnstableComponent />\n          </Suspense>\n        </div>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('Stable Component')).toBeInTheDocument();\n        expect(screen.getByText('Unstable Component')).toBeInTheDocument();\n      });\n    });\n  });\n\n  // ============================================================================\n  // PERFORMANCE SCENARIOS\n  // ============================================================================\n\n  describe('Performance Scenarios', () => {\n    it('should handle rapid consecutive loads', async () => {\n      // Real scenario: user rapidly navigating between pages\n      const LazyPage = lazyWithRetry(() => Promise.resolve({ default: SuccessComponent }));\n\n      const { rerender } = render(\n        <Suspense fallback={<div>Loading...</div>}>\n          <LazyPage />\n        </Suspense>\n      );\n\n      // Rapidly rerender multiple times\n      for (let i = 0; i < 5; i++) {\n        rerender(\n          <Suspense fallback={<div>Loading...</div>}>\n            <LazyPage />\n          </Suspense>\n        );\n      }\n\n      await waitFor(() => {\n        expect(screen.getByText('Component loaded successfully')).toBeInTheDocument();\n      });\n    });\n\n    it('should not leak memory with component unmounting', () => {\n      // Real scenario: ensure cleanup of lazy components\n      const LazyComponent = lazyWithRetry(() => Promise.resolve({ default: SuccessComponent }));\n\n      const { unmount } = render(\n        <Suspense fallback={<div>Loading...</div>}>\n          <LazyComponent />\n        </Suspense>\n      );\n\n      // Should unmount without throwing\n      expect(() => unmount()).not.toThrow();\n    });\n  });\n});\n\ndescribe('Lazy Loading Integration', () => {\n  it('should work in real application scenarios', async () => {\n    // Real scenario: complete lazy loading setup\n    const LazyDashboard = lazyWithRetry(() =>\n      Promise.resolve({\n        default: () => (\n          <div>\n            <h1>Dashboard</h1>\n            <p>Dashboard content loaded</p>\n          </div>\n        ),\n      })\n    );\n\n    const App: React.FC = () => (\n      <div>\n        <nav>Navigation</nav>\n        <main>\n          <Suspense fallback={<div>Loading dashboard...</div>}>\n            <LazyDashboard />\n          </Suspense>\n        </main>\n      </div>\n    );\n\n    render(<App />);\n\n    expect(screen.getByText('Navigation')).toBeInTheDocument();\n    expect(screen.getByText('Loading dashboard...')).toBeInTheDocument();\n\n    await waitFor(() => {\n      expect(screen.getByText('Dashboard')).toBeInTheDocument();\n      expect(screen.getByText('Dashboard content loaded')).toBeInTheDocument();\n    });\n  });\n});\n"],"version":3}