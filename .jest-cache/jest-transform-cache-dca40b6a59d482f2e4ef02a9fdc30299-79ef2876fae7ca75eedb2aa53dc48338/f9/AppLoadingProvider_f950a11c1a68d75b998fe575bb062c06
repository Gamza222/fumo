a02a9da2136a7e05d4c2e3677516317d
"use strict";
/**
 * AppLoadingProvider
 *
 * UI Provider component that provides loading context to children.
 */
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppLoadingContext = void 0;
exports.AppLoadingProvider = AppLoadingProvider;
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var useAppLoading_1 = require("../hooks/useAppLoading/useAppLoading");
// ============================================================================
// CONTEXT CREATION
// ============================================================================
// Create context with null default (will be provided by provider)
var AppLoadingContext = (0, react_1.createContext)(null);
exports.AppLoadingContext = AppLoadingContext;
// ============================================================================
// PROVIDER COMPONENT (UI Layer Only)
// ============================================================================
/**
 * AppLoadingProvider - Provides loading state to all child components
 *
 * This is a PURE UI component - no logic, just context provision.
 * All logic is handled by useAppLoading hook.
 *
 * Usage:
 * <AppLoadingProvider>
 *   <YourApp />
 * </AppLoadingProvider>
 */
function AppLoadingProvider(_a) {
    var children = _a.children;
    // Get loading state from our hook (logic layer)
    var appLoadingState = (0, useAppLoading_1.useAppLoading)();
    return ((0, jsx_runtime_1.jsx)(AppLoadingContext.Provider, { value: appLoadingState, children: children }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2dhbXphcmFtYXphbm92L0Rlc2t0b3AvZnVtby9zcmMvaW5mcmFzdHJ1Y3R1cmUvcHJvdmlkZXJzL2FwcC1sb2FkaW5nL3VpL0FwcExvYWRpbmdQcm92aWRlci50c3giLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0dBSUc7QUFFSCxZQUFZLENBQUM7OztBQTRCYixnREFPQzs7QUFqQ0QsK0JBQXNDO0FBQ3RDLHNFQUFxRTtBQUdyRSwrRUFBK0U7QUFDL0UsbUJBQW1CO0FBQ25CLCtFQUErRTtBQUUvRSxrRUFBa0U7QUFDbEUsSUFBTSxpQkFBaUIsR0FBRyxJQUFBLHFCQUFhLEVBQTZCLElBQUksQ0FBQyxDQUFDO0FBOEJqRSw4Q0FBaUI7QUE1QjFCLCtFQUErRTtBQUMvRSxxQ0FBcUM7QUFDckMsK0VBQStFO0FBRS9FOzs7Ozs7Ozs7O0dBVUc7QUFDSCxTQUFnQixrQkFBa0IsQ0FBQyxFQUFxQztRQUFuQyxRQUFRLGNBQUE7SUFDM0MsZ0RBQWdEO0lBQ2hELElBQU0sZUFBZSxHQUFHLElBQUEsNkJBQWEsR0FBRSxDQUFDO0lBRXhDLE9BQU8sQ0FDTCx1QkFBQyxpQkFBaUIsQ0FBQyxRQUFRLElBQUMsS0FBSyxFQUFFLGVBQWUsWUFBRyxRQUFRLEdBQThCLENBQzVGLENBQUM7QUFDSixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9nYW16YXJhbWF6YW5vdi9EZXNrdG9wL2Z1bW8vc3JjL2luZnJhc3RydWN0dXJlL3Byb3ZpZGVycy9hcHAtbG9hZGluZy91aS9BcHBMb2FkaW5nUHJvdmlkZXIudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQXBwTG9hZGluZ1Byb3ZpZGVyXG4gKlxuICogVUkgUHJvdmlkZXIgY29tcG9uZW50IHRoYXQgcHJvdmlkZXMgbG9hZGluZyBjb250ZXh0IHRvIGNoaWxkcmVuLlxuICovXG5cbid1c2UgY2xpZW50JztcblxuaW1wb3J0IHsgY3JlYXRlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUFwcExvYWRpbmcgfSBmcm9tICcuLi9ob29rcy91c2VBcHBMb2FkaW5nL3VzZUFwcExvYWRpbmcnO1xuaW1wb3J0IHsgQXBwTG9hZGluZ1Byb3ZpZGVyUHJvcHMsIFVzZUFwcExvYWRpbmdSZXR1cm4gfSBmcm9tICcuLi9tb2RlbC90eXBlcy90eXBlcyc7XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIENPTlRFWFQgQ1JFQVRJT05cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8gQ3JlYXRlIGNvbnRleHQgd2l0aCBudWxsIGRlZmF1bHQgKHdpbGwgYmUgcHJvdmlkZWQgYnkgcHJvdmlkZXIpXG5jb25zdCBBcHBMb2FkaW5nQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8VXNlQXBwTG9hZGluZ1JldHVybiB8IG51bGw+KG51bGwpO1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBQUk9WSURFUiBDT01QT05FTlQgKFVJIExheWVyIE9ubHkpXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8qKlxuICogQXBwTG9hZGluZ1Byb3ZpZGVyIC0gUHJvdmlkZXMgbG9hZGluZyBzdGF0ZSB0byBhbGwgY2hpbGQgY29tcG9uZW50c1xuICpcbiAqIFRoaXMgaXMgYSBQVVJFIFVJIGNvbXBvbmVudCAtIG5vIGxvZ2ljLCBqdXN0IGNvbnRleHQgcHJvdmlzaW9uLlxuICogQWxsIGxvZ2ljIGlzIGhhbmRsZWQgYnkgdXNlQXBwTG9hZGluZyBob29rLlxuICpcbiAqIFVzYWdlOlxuICogPEFwcExvYWRpbmdQcm92aWRlcj5cbiAqICAgPFlvdXJBcHAgLz5cbiAqIDwvQXBwTG9hZGluZ1Byb3ZpZGVyPlxuICovXG5leHBvcnQgZnVuY3Rpb24gQXBwTG9hZGluZ1Byb3ZpZGVyKHsgY2hpbGRyZW4gfTogQXBwTG9hZGluZ1Byb3ZpZGVyUHJvcHMpIHtcbiAgLy8gR2V0IGxvYWRpbmcgc3RhdGUgZnJvbSBvdXIgaG9vayAobG9naWMgbGF5ZXIpXG4gIGNvbnN0IGFwcExvYWRpbmdTdGF0ZSA9IHVzZUFwcExvYWRpbmcoKTtcblxuICByZXR1cm4gKFxuICAgIDxBcHBMb2FkaW5nQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17YXBwTG9hZGluZ1N0YXRlfT57Y2hpbGRyZW59PC9BcHBMb2FkaW5nQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gRVhQT1JUU1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5leHBvcnQgeyBBcHBMb2FkaW5nQ29udGV4dCB9O1xuIl0sInZlcnNpb24iOjN9