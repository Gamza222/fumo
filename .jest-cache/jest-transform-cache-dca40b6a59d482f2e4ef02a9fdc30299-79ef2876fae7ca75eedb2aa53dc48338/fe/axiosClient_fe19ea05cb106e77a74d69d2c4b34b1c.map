{"file":"/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/data/axios/axiosClient.ts","mappings":"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","names":[],"sources":["/Users/gamzaramazanov/Desktop/fumo/src/infrastructure/data/axios/axiosClient.ts"],"sourcesContent":["/**\n * Axios REST Client Configuration\n *\n * Universal REST client foundation that can be used by any enterprise application.\n * Provides comprehensive error handling, authentication, retry logic, and monitoring.\n */\n\nimport axios, {\n  AxiosError,\n  AxiosInstance,\n  AxiosRequestConfig,\n  AxiosResponse,\n  InternalAxiosRequestConfig,\n} from 'axios';\nimport { AuthTokenKey } from '../types/types';\n\n// ============================================================================\n// ENVIRONMENT CONFIGURATION\n// ============================================================================\n\n// Import centralized environment configuration\nimport { envConfig } from '../../../../config/env';\n\nconst API_BASE_URL = envConfig.apiUrl;\nconst DEFAULT_TIMEOUT = 10000; // Will be updated to use envConfig when method is available\nconst MAX_RETRY_ATTEMPTS = 3; // Will be updated to use envConfig when method is available\n\n// ============================================================================\n// REQUEST/RESPONSE TYPES\n// ============================================================================\n\ninterface RequestConfig extends AxiosRequestConfig {\n  skipAuth?: boolean;\n  skipRetry?: boolean;\n  retryAttempts?: number;\n}\n\ninterface ApiError {\n  message: string;\n  code?: string;\n  statusCode?: number;\n  details?: unknown;\n  timestamp: string;\n  requestId?: string;\n}\n\n// ============================================================================\n// RETRY CONFIGURATION\n// ============================================================================\n\n/**\n * Universal retry logic with exponential backoff\n */\nconst shouldRetry = (error: AxiosError): boolean => {\n  // Don't retry in test environments\n  if (envConfig.isTest || process.env.JEST_WORKER_ID) {\n    return false;\n  }\n\n  // Don't retry if explicitly disabled\n  const config = error.config as RequestConfig | undefined;\n  if (config?.skipRetry) {\n    return false;\n  }\n\n  // Don't retry client errors (4xx), only server errors (5xx) and network errors\n  if (error.response && error.response.status >= 400 && error.response.status < 500) {\n    return false;\n  }\n\n  // Retry on network errors or server errors\n  return !error.response || error.response.status >= 500;\n};\n\nconst calculateDelay = (attemptNumber: number): number => {\n  // Exponential backoff with jitter\n  const baseDelay = Math.min(1000 * 2 ** attemptNumber, 10000);\n  const jitter = Math.random() * 0.1 * baseDelay;\n  return baseDelay + jitter;\n};\n\n// ============================================================================\n// AUTHENTICATION HELPERS\n// ============================================================================\n\n/**\n * Universal token retrieval that works with any auth system\n */\nconst getAuthToken = (): string | null => {\n  if (typeof window === 'undefined') return null;\n\n  // Try multiple token storage locations\n  return (\n    localStorage.getItem(AuthTokenKey.AUTH_TOKEN) ||\n    localStorage.getItem(AuthTokenKey.ACCESS_TOKEN) ||\n    sessionStorage.getItem(AuthTokenKey.AUTH_TOKEN) ||\n    sessionStorage.getItem(AuthTokenKey.ACCESS_TOKEN) ||\n    null\n  );\n};\n\n/**\n * Clear authentication tokens\n */\nconst clearAuthTokens = (): void => {\n  if (typeof window === 'undefined') return;\n\n  localStorage.removeItem(AuthTokenKey.AUTH_TOKEN as string);\n  localStorage.removeItem(AuthTokenKey.ACCESS_TOKEN as string);\n  sessionStorage.removeItem(AuthTokenKey.AUTH_TOKEN as string);\n  sessionStorage.removeItem(AuthTokenKey.ACCESS_TOKEN as string);\n};\n\n// ============================================================================\n// REQUEST INTERCEPTOR\n// ============================================================================\n\n/**\n * Universal request interceptor for authentication and headers\n */\nconst requestInterceptor = (config: InternalAxiosRequestConfig): InternalAxiosRequestConfig => {\n  const requestConfig = config as InternalAxiosRequestConfig & RequestConfig;\n\n  // Add authentication header unless explicitly skipped\n  if (!requestConfig.skipAuth) {\n    const token = getAuthToken();\n    if (token) {\n      requestConfig.headers.Authorization = `Bearer ${token}`;\n    }\n  }\n\n  // Add universal headers\n  requestConfig.headers['Content-Type'] =\n    requestConfig.headers['Content-Type'] || 'application/json';\n  requestConfig.headers['X-Client-Name'] = 'axios-client';\n  requestConfig.headers['X-Client-Version'] = '1.0.0';\n  requestConfig.headers['X-Request-ID'] = generateRequestId();\n\n  // Add timestamp for monitoring\n  const configWithMetadata = requestConfig as AxiosRequestConfig & {\n    metadata?: { startTime?: number };\n  };\n  configWithMetadata.metadata = {\n    ...configWithMetadata.metadata,\n    startTime: Date.now(),\n  };\n\n  return requestConfig;\n};\n\n// ============================================================================\n// RESPONSE INTERCEPTORS\n// ============================================================================\n\n/**\n * Universal success response interceptor\n */\nconst successInterceptor = (response: AxiosResponse): AxiosResponse => {\n  // Calculate request duration\n  const configWithMetadata = response.config as AxiosRequestConfig & {\n    metadata?: { startTime?: number };\n  };\n  const startTime = configWithMetadata.metadata?.startTime;\n  const duration = startTime ? Date.now() - startTime : 0;\n\n  // Performance monitoring data\n  const performanceData = {\n    url: response.config.url,\n    method: response.config.method?.toUpperCase(),\n    status: response.status,\n    duration,\n    timestamp: new Date().toISOString(),\n  };\n\n  // Log performance data (only in non-test environments)\n  if (!envConfig.isTest && !process.env.JEST_WORKER_ID) {\n    // [REST Performance]: ${JSON.stringify(performanceData)}\n  }\n\n  // Custom performance tracking hook for consuming apps\n  if (typeof window !== 'undefined') {\n    const windowWithTracker = window as Window & {\n      __REST_PERFORMANCE_TRACKER__?: (data: unknown) => void;\n    };\n    if (windowWithTracker.__REST_PERFORMANCE_TRACKER__) {\n      windowWithTracker.__REST_PERFORMANCE_TRACKER__(performanceData);\n    }\n  }\n\n  return response;\n};\n\n/**\n * Universal error response interceptor with retry logic\n */\nconst errorInterceptor = async (error: AxiosError): Promise<AxiosResponse | AxiosError> => {\n  const config = error.config as InternalAxiosRequestConfig & RequestConfig;\n\n  if (!config) {\n    return Promise.reject(error);\n  }\n\n  // Initialize retry attempt counter\n  config.retryAttempts = config.retryAttempts || 0;\n\n  // Handle specific error cases\n  if (error.response) {\n    const { status, data } = error.response;\n\n    // Handle authentication errors\n    if (status === 401) {\n      clearAuthTokens();\n\n      // Custom auth error handler for consuming apps\n      if (typeof window !== 'undefined') {\n        const windowWithAuthHandler = window as Window & {\n          __AUTH_ERROR_HANDLER__?: (error: unknown) => void;\n        };\n        if (windowWithAuthHandler.__AUTH_ERROR_HANDLER__) {\n          windowWithAuthHandler.__AUTH_ERROR_HANDLER__(error);\n        }\n      }\n    }\n\n    // Handle authorization errors\n    if (status === 403) {\n      if (!envConfig.isTest && !process.env.JEST_WORKER_ID) {\n        console.warn('[REST] Access forbidden:', {\n          url: config.url,\n          method: config.method,\n          data,\n        });\n      }\n    }\n\n    // Handle rate limiting\n    if (status === 429) {\n      if (!envConfig.isTest && !process.env.JEST_WORKER_ID) {\n        console.warn('[REST] Rate limited:', {\n          url: config.url,\n          method: config.method,\n          retryAfter: error.response.headers['retry-after'] as string | undefined,\n        });\n      }\n    }\n  }\n\n  // Retry logic\n  if (shouldRetry(error) && config.retryAttempts < MAX_RETRY_ATTEMPTS) {\n    config.retryAttempts++;\n\n    const delay = calculateDelay(config.retryAttempts);\n\n    // Only log in non-test environments\n    if (!envConfig.isTest && !process.env.JEST_WORKER_ID) {\n      // [REST] Retrying request (attempt ${config.retryAttempts}) after ${delay}ms: ${JSON.stringify({url: config.url, method: config.method})}\n    }\n\n    await new Promise((resolve) => setTimeout(resolve, delay));\n\n    return axiosClient(config);\n  }\n\n  // Create standardized error object\n  const apiError: ApiError = {\n    message: error.message,\n    timestamp: new Date().toISOString(),\n  };\n\n  // Add optional properties if they exist\n  if (error.code) apiError.code = error.code;\n  if (error.response?.status) apiError.statusCode = error.response.status;\n  if (error.response?.data) apiError.details = error.response.data;\n  if (config.headers['X-Request-ID']) apiError.requestId = config.headers['X-Request-ID'] as string;\n\n  // Log error for debugging (only in non-test environments)\n  if (!envConfig.isTest && !process.env.JEST_WORKER_ID) {\n    console.error('[REST Error]:', {\n      ...apiError,\n      url: config.url,\n      method: config.method,\n    });\n  }\n\n  // Custom error handler for consuming apps\n  if (typeof window !== 'undefined') {\n    const windowWithErrorHandler = window as Window & {\n      __REST_ERROR_HANDLER__?: (error: unknown) => void;\n    };\n    if (windowWithErrorHandler.__REST_ERROR_HANDLER__) {\n      windowWithErrorHandler.__REST_ERROR_HANDLER__(apiError);\n    }\n  }\n\n  return Promise.reject(apiError);\n};\n\n// ============================================================================\n// UTILITY FUNCTIONS\n// ============================================================================\n\n/**\n * Generate unique request ID for tracking\n */\nconst generateRequestId = (): string => {\n  return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n};\n\n// ============================================================================\n// AXIOS CLIENT CONFIGURATION\n// ============================================================================\n\n/**\n * Universal Axios client configuration suitable for any enterprise application\n */\nexport const axiosClient: AxiosInstance = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: DEFAULT_TIMEOUT,\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  },\n  // Universal configurations\n  validateStatus: (status) => status >= 200 && status < 300,\n  maxRedirects: 5,\n  // Enable request/response transformation\n  transformRequest: [\n    (data, headers) => {\n      // Universal request transformation\n      if (typeof data === 'object' && data !== null) {\n        headers['Content-Type'] = 'application/json';\n        return JSON.stringify(data);\n      }\n      return data as string;\n    },\n  ],\n  transformResponse: [\n    (data) => {\n      // Universal response transformation\n      try {\n        return typeof data === 'string' ? (JSON.parse(data) as unknown) : (data as unknown);\n      } catch {\n        return data as unknown;\n      }\n    },\n  ],\n});\n\n// ============================================================================\n// INTERCEPTOR SETUP\n// ============================================================================\n\n// Request interceptor\naxiosClient.interceptors.request.use(requestInterceptor, (error) => {\n  console.error('[REST] Request interceptor error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptors\naxiosClient.interceptors.response.use(successInterceptor, errorInterceptor);\n\n// ============================================================================\n// CONVENIENCE METHODS\n// ============================================================================\n\n/**\n * GET request with optional configuration\n */\nexport const get = <T = unknown>(\n  url: string,\n  config?: RequestConfig\n): Promise<AxiosResponse<T>> => {\n  return axiosClient.get<T>(url, config);\n};\n\n/**\n * POST request with optional configuration\n */\nexport const post = <T = unknown>(\n  url: string,\n  data?: unknown,\n  config?: RequestConfig\n): Promise<AxiosResponse<T>> => {\n  return axiosClient.post<T>(url, data, config);\n};\n\n/**\n * PUT request with optional configuration\n */\nexport const put = <T = unknown>(\n  url: string,\n  data?: unknown,\n  config?: RequestConfig\n): Promise<AxiosResponse<T>> => {\n  return axiosClient.put<T>(url, data, config);\n};\n\n/**\n * PATCH request with optional configuration\n */\nexport const patch = <T = unknown>(\n  url: string,\n  data?: unknown,\n  config?: RequestConfig\n): Promise<AxiosResponse<T>> => {\n  return axiosClient.patch<T>(url, data, config);\n};\n\n/**\n * DELETE request with optional configuration\n */\nexport const del = <T = unknown>(\n  url: string,\n  config?: RequestConfig\n): Promise<AxiosResponse<T>> => {\n  return axiosClient.delete<T>(url, config);\n};\n\n// ============================================================================\n// TYPE EXPORTS\n// ============================================================================\n\nexport type { AxiosInstance, AxiosResponse, RequestConfig, ApiError };\nexport { axiosClient as default };\n"],"version":3}